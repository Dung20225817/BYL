
plainf4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e5c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010f0  0800600c  0800600c  0000700c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070fc  080070fc  0000907c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080070fc  080070fc  000080fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007104  08007104  0000907c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007104  08007104  00008104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007108  08007108  00008108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800710c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000907c  2**0
                  CONTENTS
 10 .bss          00000804  2000007c  2000007c  0000907c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000880  20000880  0000907c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000907c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ae35  00000000  00000000  000090ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023d8  00000000  00000000  00013ee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af0  00000000  00000000  000162c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000824  00000000  00000000  00016db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e8e  00000000  00000000  000175d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dc6a  00000000  00000000  0003c462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da259  00000000  00000000  0004a0cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00124325  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003688  00000000  00000000  00124368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000044  00000000  00000000  001279f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005ff4 	.word	0x08005ff4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08005ff4 	.word	0x08005ff4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b08d      	sub	sp, #52	@ 0x34
 80005c0:	af02      	add	r7, sp, #8
 80005c2:	60b9      	str	r1, [r7, #8]
 80005c4:	4611      	mov	r1, r2
 80005c6:	461a      	mov	r2, r3
 80005c8:	4603      	mov	r3, r0
 80005ca:	73fb      	strb	r3, [r7, #15]
 80005cc:	460b      	mov	r3, r1
 80005ce:	81bb      	strh	r3, [r7, #12]
 80005d0:	4613      	mov	r3, r2
 80005d2:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	2b1e      	cmp	r3, #30
 80005d8:	d964      	bls.n	80006a4 <ILI9341_DrawChar+0xe8>
 80005da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	db60      	blt.n	80006a4 <ILI9341_DrawChar+0xe8>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	3301      	adds	r3, #1
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	3302      	adds	r3, #2
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	3303      	adds	r3, #3
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8000600:	7bfb      	ldrb	r3, [r7, #15]
 8000602:	3b20      	subs	r3, #32
 8000604:	7ffa      	ldrb	r2, [r7, #31]
 8000606:	fb02 f303 	mul.w	r3, r2, r3
 800060a:	3304      	adds	r3, #4
 800060c:	68ba      	ldr	r2, [r7, #8]
 800060e:	4413      	add	r3, r2
 8000610:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 8000612:	7fbb      	ldrb	r3, [r7, #30]
 8000614:	b29a      	uxth	r2, r3
 8000616:	7f7b      	ldrb	r3, [r7, #29]
 8000618:	b29c      	uxth	r4, r3
 800061a:	88f9      	ldrh	r1, [r7, #6]
 800061c:	89b8      	ldrh	r0, [r7, #12]
 800061e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	4623      	mov	r3, r4
 8000624:	f000 fc28 	bl	8000e78 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 8000628:	2300      	movs	r3, #0
 800062a:	627b      	str	r3, [r7, #36]	@ 0x24
 800062c:	e035      	b.n	800069a <ILI9341_DrawChar+0xde>
	{
		for (int i=0; i < fWidth; i++)
 800062e:	2300      	movs	r3, #0
 8000630:	623b      	str	r3, [r7, #32]
 8000632:	e02b      	b.n	800068c <ILI9341_DrawChar+0xd0>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 8000634:	7f3b      	ldrb	r3, [r7, #28]
 8000636:	6a3a      	ldr	r2, [r7, #32]
 8000638:	fb03 f202 	mul.w	r2, r3, r2
 800063c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800063e:	10db      	asrs	r3, r3, #3
 8000640:	f003 031f 	and.w	r3, r3, #31
 8000644:	4413      	add	r3, r2
 8000646:	3301      	adds	r3, #1
 8000648:	69ba      	ldr	r2, [r7, #24]
 800064a:	4413      	add	r3, r2
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 8000650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000652:	f003 0307 	and.w	r3, r3, #7
 8000656:	2201      	movs	r2, #1
 8000658:	fa02 f303 	lsl.w	r3, r2, r3
 800065c:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 800065e:	7dfa      	ldrb	r2, [r7, #23]
 8000660:	7dbb      	ldrb	r3, [r7, #22]
 8000662:	4013      	ands	r3, r2
 8000664:	b2db      	uxtb	r3, r3
 8000666:	2b00      	cmp	r3, #0
 8000668:	d00d      	beq.n	8000686 <ILI9341_DrawChar+0xca>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 800066a:	6a3b      	ldr	r3, [r7, #32]
 800066c:	b29a      	uxth	r2, r3
 800066e:	89bb      	ldrh	r3, [r7, #12]
 8000670:	4413      	add	r3, r2
 8000672:	b298      	uxth	r0, r3
 8000674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000676:	b29a      	uxth	r2, r3
 8000678:	88fb      	ldrh	r3, [r7, #6]
 800067a:	4413      	add	r3, r2
 800067c:	b29b      	uxth	r3, r3
 800067e:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8000680:	4619      	mov	r1, r3
 8000682:	f000 fb93 	bl	8000dac <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 8000686:	6a3b      	ldr	r3, [r7, #32]
 8000688:	3301      	adds	r3, #1
 800068a:	623b      	str	r3, [r7, #32]
 800068c:	7fbb      	ldrb	r3, [r7, #30]
 800068e:	6a3a      	ldr	r2, [r7, #32]
 8000690:	429a      	cmp	r2, r3
 8000692:	dbcf      	blt.n	8000634 <ILI9341_DrawChar+0x78>
	for (int j=0; j < fHeight; j++)
 8000694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000696:	3301      	adds	r3, #1
 8000698:	627b      	str	r3, [r7, #36]	@ 0x24
 800069a:	7f7b      	ldrb	r3, [r7, #29]
 800069c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800069e:	429a      	cmp	r2, r3
 80006a0:	dbc5      	blt.n	800062e <ILI9341_DrawChar+0x72>
 80006a2:	e000      	b.n	80006a6 <ILI9341_DrawChar+0xea>
	if ((ch < 31) || (ch > 127)) return;
 80006a4:	bf00      	nop
			}
		}
	}
}
 80006a6:	372c      	adds	r7, #44	@ 0x2c
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd90      	pop	{r4, r7, pc}

080006ac <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	@ 0x28
 80006b0:	af02      	add	r7, sp, #8
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	4611      	mov	r1, r2
 80006b8:	461a      	mov	r2, r3
 80006ba:	460b      	mov	r3, r1
 80006bc:	80fb      	strh	r3, [r7, #6]
 80006be:	4613      	mov	r3, r2
 80006c0:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	3301      	adds	r3, #1
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	77bb      	strb	r3, [r7, #30]

	while (*str)
 80006d0:	e02d      	b.n	800072e <ILI9341_DrawText+0x82>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	7818      	ldrb	r0, [r3, #0]
 80006d6:	88b9      	ldrh	r1, [r7, #4]
 80006d8:	88fa      	ldrh	r2, [r7, #6]
 80006da:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	460b      	mov	r3, r1
 80006e4:	68b9      	ldr	r1, [r7, #8]
 80006e6:	f7ff ff69 	bl	80005bc <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	3b20      	subs	r3, #32
 80006f0:	7ffa      	ldrb	r2, [r7, #31]
 80006f2:	fb02 f303 	mul.w	r3, r2, r3
 80006f6:	3304      	adds	r3, #4
 80006f8:	68ba      	ldr	r2, [r7, #8]
 80006fa:	4413      	add	r3, r2
 80006fc:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 80006fe:	69bb      	ldr	r3, [r7, #24]
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 8000704:	7dfb      	ldrb	r3, [r7, #23]
 8000706:	1c9a      	adds	r2, r3, #2
 8000708:	7fbb      	ldrb	r3, [r7, #30]
 800070a:	429a      	cmp	r2, r3
 800070c:	da07      	bge.n	800071e <ILI9341_DrawText+0x72>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 800070e:	7dfb      	ldrb	r3, [r7, #23]
 8000710:	b29a      	uxth	r2, r3
 8000712:	88fb      	ldrh	r3, [r7, #6]
 8000714:	4413      	add	r3, r2
 8000716:	b29b      	uxth	r3, r3
 8000718:	3302      	adds	r3, #2
 800071a:	80fb      	strh	r3, [r7, #6]
 800071c:	e004      	b.n	8000728 <ILI9341_DrawText+0x7c>
		}
		else
		{
			X += fWidth;
 800071e:	7fbb      	ldrb	r3, [r7, #30]
 8000720:	b29a      	uxth	r2, r3
 8000722:	88fb      	ldrh	r3, [r7, #6]
 8000724:	4413      	add	r3, r2
 8000726:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	3301      	adds	r3, #1
 800072c:	60fb      	str	r3, [r7, #12]
	while (*str)
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d1cd      	bne.n	80006d2 <ILI9341_DrawText+0x26>
	}
}
 8000736:	bf00      	nop
 8000738:	bf00      	nop
 800073a:	3720      	adds	r7, #32
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4a06      	ldr	r2, [pc, #24]	@ (8000764 <HAL_SPI_TxCpltCallback+0x24>)
 800074c:	4293      	cmp	r3, r2
 800074e:	d104      	bne.n	800075a <HAL_SPI_TxCpltCallback+0x1a>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000750:	2201      	movs	r2, #1
 8000752:	2104      	movs	r1, #4
 8000754:	4804      	ldr	r0, [pc, #16]	@ (8000768 <HAL_SPI_TxCpltCallback+0x28>)
 8000756:	f002 fe73 	bl	8003440 <HAL_GPIO_WritePin>
  }
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	200000b8 	.word	0x200000b8
 8000768:	40020800 	.word	0x40020800

0800076c <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000776:	bf00      	nop
 8000778:	4b08      	ldr	r3, [pc, #32]	@ (800079c <ILI9341_SPI_Tx+0x30>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	689b      	ldr	r3, [r3, #8]
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	2b02      	cmp	r3, #2
 8000784:	d1f8      	bne.n	8000778 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 8000786:	1dfb      	adds	r3, r7, #7
 8000788:	2201      	movs	r2, #1
 800078a:	4619      	mov	r1, r3
 800078c:	4803      	ldr	r0, [pc, #12]	@ (800079c <ILI9341_SPI_Tx+0x30>)
 800078e:	f003 fff5 	bl	800477c <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200000b8 	.word	0x200000b8

080007a0 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	460b      	mov	r3, r1
 80007aa:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80007ac:	bf00      	nop
 80007ae:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <ILI9341_SPI_TxBuffer+0x30>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	689b      	ldr	r3, [r3, #8]
 80007b4:	f003 0302 	and.w	r3, r3, #2
 80007b8:	2b02      	cmp	r3, #2
 80007ba:	d1f8      	bne.n	80007ae <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 80007bc:	887b      	ldrh	r3, [r7, #2]
 80007be:	461a      	mov	r2, r3
 80007c0:	6879      	ldr	r1, [r7, #4]
 80007c2:	4803      	ldr	r0, [pc, #12]	@ (80007d0 <ILI9341_SPI_TxBuffer+0x30>)
 80007c4:	f003 ffda 	bl	800477c <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200000b8 	.word	0x200000b8

080007d4 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007e4:	4807      	ldr	r0, [pc, #28]	@ (8000804 <ILI9341_WriteCommand+0x30>)
 80007e6:	f002 fe2b 	bl	8003440 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80007ea:	2200      	movs	r2, #0
 80007ec:	2104      	movs	r1, #4
 80007ee:	4806      	ldr	r0, [pc, #24]	@ (8000808 <ILI9341_WriteCommand+0x34>)
 80007f0:	f002 fe26 	bl	8003440 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff ffb8 	bl	800076c <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40020c00 	.word	0x40020c00
 8000808:	40020800 	.word	0x40020800

0800080c <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000816:	2201      	movs	r2, #1
 8000818:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800081c:	4807      	ldr	r0, [pc, #28]	@ (800083c <ILI9341_WriteData+0x30>)
 800081e:	f002 fe0f 	bl	8003440 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000822:	2200      	movs	r2, #0
 8000824:	2104      	movs	r1, #4
 8000826:	4806      	ldr	r0, [pc, #24]	@ (8000840 <ILI9341_WriteData+0x34>)
 8000828:	f002 fe0a 	bl	8003440 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ff9c 	bl	800076c <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40020c00 	.word	0x40020c00
 8000840:	40020800 	.word	0x40020800

08000844 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000850:	2201      	movs	r2, #1
 8000852:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000856:	4808      	ldr	r0, [pc, #32]	@ (8000878 <ILI9341_WriteBuffer+0x34>)
 8000858:	f002 fdf2 	bl	8003440 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 800085c:	2200      	movs	r2, #0
 800085e:	2104      	movs	r1, #4
 8000860:	4806      	ldr	r0, [pc, #24]	@ (800087c <ILI9341_WriteBuffer+0x38>)
 8000862:	f002 fded 	bl	8003440 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8000866:	887b      	ldrh	r3, [r7, #2]
 8000868:	4619      	mov	r1, r3
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff ff98 	bl	80007a0 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40020c00 	.word	0x40020c00
 800087c:	40020800 	.word	0x40020800

08000880 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000880:	b590      	push	{r4, r7, lr}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	4604      	mov	r4, r0
 8000888:	4608      	mov	r0, r1
 800088a:	4611      	mov	r1, r2
 800088c:	461a      	mov	r2, r3
 800088e:	4623      	mov	r3, r4
 8000890:	80fb      	strh	r3, [r7, #6]
 8000892:	4603      	mov	r3, r0
 8000894:	80bb      	strh	r3, [r7, #4]
 8000896:	460b      	mov	r3, r1
 8000898:	807b      	strh	r3, [r7, #2]
 800089a:	4613      	mov	r3, r2
 800089c:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 800089e:	88fb      	ldrh	r3, [r7, #6]
 80008a0:	0a1b      	lsrs	r3, r3, #8
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 80008a8:	88fb      	ldrh	r3, [r7, #6]
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 80008ae:	887b      	ldrh	r3, [r7, #2]
 80008b0:	0a1b      	lsrs	r3, r3, #8
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 80008b8:	887b      	ldrh	r3, [r7, #2]
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 80008be:	202a      	movs	r0, #42	@ 0x2a
 80008c0:	f7ff ff88 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	2104      	movs	r1, #4
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff ffba 	bl	8000844 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 80008d0:	88bb      	ldrh	r3, [r7, #4]
 80008d2:	0a1b      	lsrs	r3, r3, #8
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 80008da:	88bb      	ldrh	r3, [r7, #4]
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 80008e0:	883b      	ldrh	r3, [r7, #0]
 80008e2:	0a1b      	lsrs	r3, r3, #8
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 80008ea:	883b      	ldrh	r3, [r7, #0]
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 80008f0:	202b      	movs	r0, #43	@ 0x2b
 80008f2:	f7ff ff6f 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	2104      	movs	r1, #4
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff ffa1 	bl	8000844 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 8000902:	202c      	movs	r0, #44	@ 0x2c
 8000904:	f7ff ff66 	bl	80007d4 <ILI9341_WriteCommand>
}
 8000908:	bf00      	nop
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	bd90      	pop	{r4, r7, pc}

08000910 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8000914:	2200      	movs	r2, #0
 8000916:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800091a:	480d      	ldr	r0, [pc, #52]	@ (8000950 <ILI9341_Reset+0x40>)
 800091c:	f002 fd90 	bl	8003440 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000920:	200a      	movs	r0, #10
 8000922:	f001 ff3b 	bl	800279c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 8000926:	2200      	movs	r2, #0
 8000928:	2104      	movs	r1, #4
 800092a:	480a      	ldr	r0, [pc, #40]	@ (8000954 <ILI9341_Reset+0x44>)
 800092c:	f002 fd88 	bl	8003440 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000930:	200a      	movs	r0, #10
 8000932:	f001 ff33 	bl	800279c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000936:	2201      	movs	r2, #1
 8000938:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800093c:	4804      	ldr	r0, [pc, #16]	@ (8000950 <ILI9341_Reset+0x40>)
 800093e:	f002 fd7f 	bl	8003440 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8000942:	2201      	movs	r2, #1
 8000944:	2104      	movs	r1, #4
 8000946:	4803      	ldr	r0, [pc, #12]	@ (8000954 <ILI9341_Reset+0x44>)
 8000948:	f002 fd7a 	bl	8003440 <HAL_GPIO_WritePin>
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40020c00 	.word	0x40020c00
 8000954:	40020800 	.word	0x40020800

08000958 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 800095c:	2201      	movs	r2, #1
 800095e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000962:	4802      	ldr	r0, [pc, #8]	@ (800096c <ILI9341_Enable+0x14>)
 8000964:	f002 fd6c 	bl	8003440 <HAL_GPIO_WritePin>
}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40020c00 	.word	0x40020c00

08000970 <ILI9341_Init>:

void ILI9341_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8000974:	f7ff fff0 	bl	8000958 <ILI9341_Enable>
	ILI9341_Reset();
 8000978:	f7ff ffca 	bl	8000910 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 800097c:	2001      	movs	r0, #1
 800097e:	f7ff ff29 	bl	80007d4 <ILI9341_WriteCommand>
	HAL_Delay(10);
 8000982:	200a      	movs	r0, #10
 8000984:	f001 ff0a 	bl	800279c <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8000988:	20cb      	movs	r0, #203	@ 0xcb
 800098a:	f7ff ff23 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 800098e:	2039      	movs	r0, #57	@ 0x39
 8000990:	f7ff ff3c 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8000994:	202c      	movs	r0, #44	@ 0x2c
 8000996:	f7ff ff39 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 800099a:	2000      	movs	r0, #0
 800099c:	f7ff ff36 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 80009a0:	2034      	movs	r0, #52	@ 0x34
 80009a2:	f7ff ff33 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 80009a6:	2002      	movs	r0, #2
 80009a8:	f7ff ff30 	bl	800080c <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 80009ac:	20cf      	movs	r0, #207	@ 0xcf
 80009ae:	f7ff ff11 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80009b2:	2000      	movs	r0, #0
 80009b4:	f7ff ff2a 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 80009b8:	20c1      	movs	r0, #193	@ 0xc1
 80009ba:	f7ff ff27 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 80009be:	2030      	movs	r0, #48	@ 0x30
 80009c0:	f7ff ff24 	bl	800080c <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 80009c4:	20e8      	movs	r0, #232	@ 0xe8
 80009c6:	f7ff ff05 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 80009ca:	2085      	movs	r0, #133	@ 0x85
 80009cc:	f7ff ff1e 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80009d0:	2000      	movs	r0, #0
 80009d2:	f7ff ff1b 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 80009d6:	2078      	movs	r0, #120	@ 0x78
 80009d8:	f7ff ff18 	bl	800080c <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 80009dc:	20ea      	movs	r0, #234	@ 0xea
 80009de:	f7ff fef9 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80009e2:	2000      	movs	r0, #0
 80009e4:	f7ff ff12 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80009e8:	2000      	movs	r0, #0
 80009ea:	f7ff ff0f 	bl	800080c <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 80009ee:	20ed      	movs	r0, #237	@ 0xed
 80009f0:	f7ff fef0 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 80009f4:	2064      	movs	r0, #100	@ 0x64
 80009f6:	f7ff ff09 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80009fa:	2003      	movs	r0, #3
 80009fc:	f7ff ff06 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8000a00:	2012      	movs	r0, #18
 8000a02:	f7ff ff03 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8000a06:	2081      	movs	r0, #129	@ 0x81
 8000a08:	f7ff ff00 	bl	800080c <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8000a0c:	20f7      	movs	r0, #247	@ 0xf7
 8000a0e:	f7ff fee1 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8000a12:	2020      	movs	r0, #32
 8000a14:	f7ff fefa 	bl	800080c <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8000a18:	20c0      	movs	r0, #192	@ 0xc0
 8000a1a:	f7ff fedb 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8000a1e:	2023      	movs	r0, #35	@ 0x23
 8000a20:	f7ff fef4 	bl	800080c <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8000a24:	20c1      	movs	r0, #193	@ 0xc1
 8000a26:	f7ff fed5 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8000a2a:	2010      	movs	r0, #16
 8000a2c:	f7ff feee 	bl	800080c <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8000a30:	20c5      	movs	r0, #197	@ 0xc5
 8000a32:	f7ff fecf 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8000a36:	203e      	movs	r0, #62	@ 0x3e
 8000a38:	f7ff fee8 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8000a3c:	2028      	movs	r0, #40	@ 0x28
 8000a3e:	f7ff fee5 	bl	800080c <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8000a42:	20c7      	movs	r0, #199	@ 0xc7
 8000a44:	f7ff fec6 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8000a48:	2086      	movs	r0, #134	@ 0x86
 8000a4a:	f7ff fedf 	bl	800080c <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8000a4e:	2036      	movs	r0, #54	@ 0x36
 8000a50:	f7ff fec0 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8000a54:	2048      	movs	r0, #72	@ 0x48
 8000a56:	f7ff fed9 	bl	800080c <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8000a5a:	203a      	movs	r0, #58	@ 0x3a
 8000a5c:	f7ff feba 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8000a60:	2055      	movs	r0, #85	@ 0x55
 8000a62:	f7ff fed3 	bl	800080c <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8000a66:	20b1      	movs	r0, #177	@ 0xb1
 8000a68:	f7ff feb4 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f7ff fecd 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8000a72:	2018      	movs	r0, #24
 8000a74:	f7ff feca 	bl	800080c <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8000a78:	20b6      	movs	r0, #182	@ 0xb6
 8000a7a:	f7ff feab 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8000a7e:	2008      	movs	r0, #8
 8000a80:	f7ff fec4 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8000a84:	2082      	movs	r0, #130	@ 0x82
 8000a86:	f7ff fec1 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8000a8a:	2027      	movs	r0, #39	@ 0x27
 8000a8c:	f7ff febe 	bl	800080c <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8000a90:	20f2      	movs	r0, #242	@ 0xf2
 8000a92:	f7ff fe9f 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000a96:	2000      	movs	r0, #0
 8000a98:	f7ff feb8 	bl	800080c <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8000a9c:	2026      	movs	r0, #38	@ 0x26
 8000a9e:	f7ff fe99 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	f7ff feb2 	bl	800080c <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8000aa8:	20e0      	movs	r0, #224	@ 0xe0
 8000aaa:	f7ff fe93 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8000aae:	200f      	movs	r0, #15
 8000ab0:	f7ff feac 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000ab4:	2031      	movs	r0, #49	@ 0x31
 8000ab6:	f7ff fea9 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8000aba:	202b      	movs	r0, #43	@ 0x2b
 8000abc:	f7ff fea6 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000ac0:	200c      	movs	r0, #12
 8000ac2:	f7ff fea3 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000ac6:	200e      	movs	r0, #14
 8000ac8:	f7ff fea0 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000acc:	2008      	movs	r0, #8
 8000ace:	f7ff fe9d 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 8000ad2:	204e      	movs	r0, #78	@ 0x4e
 8000ad4:	f7ff fe9a 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8000ad8:	20f1      	movs	r0, #241	@ 0xf1
 8000ada:	f7ff fe97 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8000ade:	2037      	movs	r0, #55	@ 0x37
 8000ae0:	f7ff fe94 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000ae4:	2007      	movs	r0, #7
 8000ae6:	f7ff fe91 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8000aea:	2010      	movs	r0, #16
 8000aec:	f7ff fe8e 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000af0:	2003      	movs	r0, #3
 8000af2:	f7ff fe8b 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000af6:	200e      	movs	r0, #14
 8000af8:	f7ff fe88 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8000afc:	2009      	movs	r0, #9
 8000afe:	f7ff fe85 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000b02:	2000      	movs	r0, #0
 8000b04:	f7ff fe82 	bl	800080c <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8000b08:	20e1      	movs	r0, #225	@ 0xe1
 8000b0a:	f7ff fe63 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f7ff fe7c 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000b14:	200e      	movs	r0, #14
 8000b16:	f7ff fe79 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8000b1a:	2014      	movs	r0, #20
 8000b1c:	f7ff fe76 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000b20:	2003      	movs	r0, #3
 8000b22:	f7ff fe73 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8000b26:	2011      	movs	r0, #17
 8000b28:	f7ff fe70 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000b2c:	2007      	movs	r0, #7
 8000b2e:	f7ff fe6d 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000b32:	2031      	movs	r0, #49	@ 0x31
 8000b34:	f7ff fe6a 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000b38:	20c1      	movs	r0, #193	@ 0xc1
 8000b3a:	f7ff fe67 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8000b3e:	2048      	movs	r0, #72	@ 0x48
 8000b40:	f7ff fe64 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000b44:	2008      	movs	r0, #8
 8000b46:	f7ff fe61 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000b4a:	200f      	movs	r0, #15
 8000b4c:	f7ff fe5e 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000b50:	200c      	movs	r0, #12
 8000b52:	f7ff fe5b 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000b56:	2031      	movs	r0, #49	@ 0x31
 8000b58:	f7ff fe58 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8000b5c:	2036      	movs	r0, #54	@ 0x36
 8000b5e:	f7ff fe55 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000b62:	200f      	movs	r0, #15
 8000b64:	f7ff fe52 	bl	800080c <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8000b68:	2011      	movs	r0, #17
 8000b6a:	f7ff fe33 	bl	80007d4 <ILI9341_WriteCommand>
	HAL_Delay(100);
 8000b6e:	2064      	movs	r0, #100	@ 0x64
 8000b70:	f001 fe14 	bl	800279c <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8000b74:	2029      	movs	r0, #41	@ 0x29
 8000b76:	f7ff fe2d 	bl	80007d4 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f000 f802 	bl	8000b84 <ILI9341_SetRotation>
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 8000b8e:	2036      	movs	r0, #54	@ 0x36
 8000b90:	f7ff fe20 	bl	80007d4 <ILI9341_WriteCommand>
	HAL_Delay(1);
 8000b94:	2001      	movs	r0, #1
 8000b96:	f001 fe01 	bl	800279c <HAL_Delay>

	switch(rotation)
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	2b03      	cmp	r3, #3
 8000b9e:	d837      	bhi.n	8000c10 <ILI9341_SetRotation+0x8c>
 8000ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8000ba8 <ILI9341_SetRotation+0x24>)
 8000ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba6:	bf00      	nop
 8000ba8:	08000bb9 	.word	0x08000bb9
 8000bac:	08000bcf 	.word	0x08000bcf
 8000bb0:	08000be5 	.word	0x08000be5
 8000bb4:	08000bfb 	.word	0x08000bfb
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8000bb8:	2048      	movs	r0, #72	@ 0x48
 8000bba:	f7ff fe27 	bl	800080c <ILI9341_WriteData>
		LCD_WIDTH = 240;
 8000bbe:	4b17      	ldr	r3, [pc, #92]	@ (8000c1c <ILI9341_SetRotation+0x98>)
 8000bc0:	22f0      	movs	r2, #240	@ 0xf0
 8000bc2:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000bc4:	4b16      	ldr	r3, [pc, #88]	@ (8000c20 <ILI9341_SetRotation+0x9c>)
 8000bc6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000bca:	801a      	strh	r2, [r3, #0]
		break;
 8000bcc:	e021      	b.n	8000c12 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 8000bce:	2028      	movs	r0, #40	@ 0x28
 8000bd0:	f7ff fe1c 	bl	800080c <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <ILI9341_SetRotation+0x98>)
 8000bd6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000bda:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000bdc:	4b10      	ldr	r3, [pc, #64]	@ (8000c20 <ILI9341_SetRotation+0x9c>)
 8000bde:	22f0      	movs	r2, #240	@ 0xf0
 8000be0:	801a      	strh	r2, [r3, #0]
		break;
 8000be2:	e016      	b.n	8000c12 <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8000be4:	2088      	movs	r0, #136	@ 0x88
 8000be6:	f7ff fe11 	bl	800080c <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8000bea:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <ILI9341_SetRotation+0x98>)
 8000bec:	22f0      	movs	r2, #240	@ 0xf0
 8000bee:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c20 <ILI9341_SetRotation+0x9c>)
 8000bf2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000bf6:	801a      	strh	r2, [r3, #0]
		break;
 8000bf8:	e00b      	b.n	8000c12 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8000bfa:	20e8      	movs	r0, #232	@ 0xe8
 8000bfc:	f7ff fe06 	bl	800080c <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000c00:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <ILI9341_SetRotation+0x98>)
 8000c02:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000c06:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000c08:	4b05      	ldr	r3, [pc, #20]	@ (8000c20 <ILI9341_SetRotation+0x9c>)
 8000c0a:	22f0      	movs	r2, #240	@ 0xf0
 8000c0c:	801a      	strh	r2, [r3, #0]
		break;
 8000c0e:	e000      	b.n	8000c12 <ILI9341_SetRotation+0x8e>
	default:
		break;
 8000c10:	bf00      	nop
	}
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000002 	.word	0x20000002
 8000c20:	20000000 	.word	0x20000000

08000c24 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8000c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c28:	b08d      	sub	sp, #52	@ 0x34
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	6039      	str	r1, [r7, #0]
 8000c30:	80fb      	strh	r3, [r7, #6]
 8000c32:	466b      	mov	r3, sp
 8000c34:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if((size*2) < BURST_MAX_SIZE)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000c42:	d202      	bcs.n	8000c4a <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c48:	e002      	b.n	8000c50 <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8000c4a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000c50:	2201      	movs	r2, #1
 8000c52:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c56:	483f      	ldr	r0, [pc, #252]	@ (8000d54 <ILI9341_DrawColorBurst+0x130>)
 8000c58:	f002 fbf2 	bl	8003440 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2104      	movs	r1, #4
 8000c60:	483d      	ldr	r0, [pc, #244]	@ (8000d58 <ILI9341_DrawColorBurst+0x134>)
 8000c62:	f002 fbed 	bl	8003440 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8000c66:	88fb      	ldrh	r3, [r7, #6]
 8000c68:	0a1b      	lsrs	r3, r3, #8
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t BurstBuffer[BufferSize];
 8000c70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000c72:	460b      	mov	r3, r1
 8000c74:	3b01      	subs	r3, #1
 8000c76:	61fb      	str	r3, [r7, #28]
 8000c78:	2300      	movs	r3, #0
 8000c7a:	4688      	mov	r8, r1
 8000c7c:	4699      	mov	r9, r3
 8000c7e:	f04f 0200 	mov.w	r2, #0
 8000c82:	f04f 0300 	mov.w	r3, #0
 8000c86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000c8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000c8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000c92:	2300      	movs	r3, #0
 8000c94:	460c      	mov	r4, r1
 8000c96:	461d      	mov	r5, r3
 8000c98:	f04f 0200 	mov.w	r2, #0
 8000c9c:	f04f 0300 	mov.w	r3, #0
 8000ca0:	00eb      	lsls	r3, r5, #3
 8000ca2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000ca6:	00e2      	lsls	r2, r4, #3
 8000ca8:	1dcb      	adds	r3, r1, #7
 8000caa:	08db      	lsrs	r3, r3, #3
 8000cac:	00db      	lsls	r3, r3, #3
 8000cae:	ebad 0d03 	sub.w	sp, sp, r3
 8000cb2:	466b      	mov	r3, sp
 8000cb4:	3300      	adds	r3, #0
 8000cb6:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cbc:	e00e      	b.n	8000cdc <ILI9341_DrawColorBurst+0xb8>
	{
		BurstBuffer[j] = chifted;
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cc2:	4413      	add	r3, r2
 8000cc4:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000cc8:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8000cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ccc:	3301      	adds	r3, #1
 8000cce:	88fa      	ldrh	r2, [r7, #6]
 8000cd0:	b2d1      	uxtb	r1, r2
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cd8:	3302      	adds	r3, #2
 8000cda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cdc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d3ec      	bcc.n	8000cbe <ILI9341_DrawColorBurst+0x9a>
	}

	uint32_t SendingSize = size * 2;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8000cea:	697a      	ldr	r2, [r7, #20]
 8000cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf2:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000cf8:	fbb3 f2f2 	udiv	r2, r3, r2
 8000cfc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000cfe:	fb01 f202 	mul.w	r2, r1, r2
 8000d02:	1a9b      	subs	r3, r3, r2
 8000d04:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d010      	beq.n	8000d2e <ILI9341_DrawColorBurst+0x10a>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d10:	e009      	b.n	8000d26 <ILI9341_DrawColorBurst+0x102>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8000d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d14:	b29a      	uxth	r2, r3
 8000d16:	230a      	movs	r3, #10
 8000d18:	69b9      	ldr	r1, [r7, #24]
 8000d1a:	4810      	ldr	r0, [pc, #64]	@ (8000d5c <ILI9341_DrawColorBurst+0x138>)
 8000d1c:	f003 fbe9 	bl	80044f2 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d22:	3301      	adds	r3, #1
 8000d24:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d3f1      	bcc.n	8000d12 <ILI9341_DrawColorBurst+0xee>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	230a      	movs	r3, #10
 8000d34:	69b9      	ldr	r1, [r7, #24]
 8000d36:	4809      	ldr	r0, [pc, #36]	@ (8000d5c <ILI9341_DrawColorBurst+0x138>)
 8000d38:	f003 fbdb 	bl	80044f2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	2104      	movs	r1, #4
 8000d40:	4805      	ldr	r0, [pc, #20]	@ (8000d58 <ILI9341_DrawColorBurst+0x134>)
 8000d42:	f002 fb7d 	bl	8003440 <HAL_GPIO_WritePin>
 8000d46:	46b5      	mov	sp, r6
}
 8000d48:	bf00      	nop
 8000d4a:	3734      	adds	r7, #52	@ 0x34
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d52:	bf00      	nop
 8000d54:	40020c00 	.word	0x40020c00
 8000d58:	40020800 	.word	0x40020800
 8000d5c:	200000b8 	.word	0x200000b8

08000d60 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000da4 <ILI9341_FillScreen+0x44>)
 8000d6c:	881b      	ldrh	r3, [r3, #0]
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	4b0d      	ldr	r3, [pc, #52]	@ (8000da8 <ILI9341_FillScreen+0x48>)
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	2100      	movs	r1, #0
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f7ff fd81 	bl	8000880 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8000d7e:	4b09      	ldr	r3, [pc, #36]	@ (8000da4 <ILI9341_FillScreen+0x44>)
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b08      	ldr	r3, [pc, #32]	@ (8000da8 <ILI9341_FillScreen+0x48>)
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	fb02 f303 	mul.w	r3, r2, r3
 8000d90:	461a      	mov	r2, r3
 8000d92:	88fb      	ldrh	r3, [r7, #6]
 8000d94:	4611      	mov	r1, r2
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff ff44 	bl	8000c24 <ILI9341_DrawColorBurst>
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000002 	.word	0x20000002
 8000da8:	20000000 	.word	0x20000000

08000dac <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	80fb      	strh	r3, [r7, #6]
 8000db6:	460b      	mov	r3, r1
 8000db8:	80bb      	strh	r3, [r7, #4]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000dbe:	4b2c      	ldr	r3, [pc, #176]	@ (8000e70 <ILI9341_DrawPixel+0xc4>)
 8000dc0:	881b      	ldrh	r3, [r3, #0]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	88fa      	ldrh	r2, [r7, #6]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d24d      	bcs.n	8000e66 <ILI9341_DrawPixel+0xba>
 8000dca:	4b2a      	ldr	r3, [pc, #168]	@ (8000e74 <ILI9341_DrawPixel+0xc8>)
 8000dcc:	881b      	ldrh	r3, [r3, #0]
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	88ba      	ldrh	r2, [r7, #4]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d247      	bcs.n	8000e66 <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
 8000dd8:	0a1b      	lsrs	r3, r3, #8
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	753b      	strb	r3, [r7, #20]
 8000de0:	88fb      	ldrh	r3, [r7, #6]
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	757b      	strb	r3, [r7, #21]
 8000de6:	88fb      	ldrh	r3, [r7, #6]
 8000de8:	3301      	adds	r3, #1
 8000dea:	121b      	asrs	r3, r3, #8
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	75bb      	strb	r3, [r7, #22]
 8000df0:	88fb      	ldrh	r3, [r7, #6]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	3301      	adds	r3, #1
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8000dfa:	88bb      	ldrh	r3, [r7, #4]
 8000dfc:	0a1b      	lsrs	r3, r3, #8
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	743b      	strb	r3, [r7, #16]
 8000e04:	88bb      	ldrh	r3, [r7, #4]
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	747b      	strb	r3, [r7, #17]
 8000e0a:	88bb      	ldrh	r3, [r7, #4]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	121b      	asrs	r3, r3, #8
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	74bb      	strb	r3, [r7, #18]
 8000e14:	88bb      	ldrh	r3, [r7, #4]
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	3301      	adds	r3, #1
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8000e1e:	887b      	ldrh	r3, [r7, #2]
 8000e20:	0a1b      	lsrs	r3, r3, #8
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	733b      	strb	r3, [r7, #12]
 8000e28:	887b      	ldrh	r3, [r7, #2]
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8000e2e:	202a      	movs	r0, #42	@ 0x2a
 8000e30:	f7ff fcd0 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	2104      	movs	r1, #4
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fd02 	bl	8000844 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8000e40:	202b      	movs	r0, #43	@ 0x2b
 8000e42:	f7ff fcc7 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 8000e46:	f107 0310 	add.w	r3, r7, #16
 8000e4a:	2104      	movs	r1, #4
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fcf9 	bl	8000844 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8000e52:	202c      	movs	r0, #44	@ 0x2c
 8000e54:	f7ff fcbe 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8000e58:	f107 030c 	add.w	r3, r7, #12
 8000e5c:	2102      	movs	r1, #2
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fcf0 	bl	8000844 <ILI9341_WriteBuffer>
 8000e64:	e000      	b.n	8000e68 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000e66:	bf00      	nop
}
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000002 	.word	0x20000002
 8000e74:	20000000 	.word	0x20000000

08000e78 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8000e78:	b590      	push	{r4, r7, lr}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4604      	mov	r4, r0
 8000e80:	4608      	mov	r0, r1
 8000e82:	4611      	mov	r1, r2
 8000e84:	461a      	mov	r2, r3
 8000e86:	4623      	mov	r3, r4
 8000e88:	80fb      	strh	r3, [r7, #6]
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	80bb      	strh	r3, [r7, #4]
 8000e8e:	460b      	mov	r3, r1
 8000e90:	807b      	strh	r3, [r7, #2]
 8000e92:	4613      	mov	r3, r2
 8000e94:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000e96:	4b24      	ldr	r3, [pc, #144]	@ (8000f28 <ILI9341_DrawRectangle+0xb0>)
 8000e98:	881b      	ldrh	r3, [r3, #0]
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	88fa      	ldrh	r2, [r7, #6]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d23d      	bcs.n	8000f1e <ILI9341_DrawRectangle+0xa6>
 8000ea2:	4b22      	ldr	r3, [pc, #136]	@ (8000f2c <ILI9341_DrawRectangle+0xb4>)
 8000ea4:	881b      	ldrh	r3, [r3, #0]
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	88ba      	ldrh	r2, [r7, #4]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d237      	bcs.n	8000f1e <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 8000eae:	88fa      	ldrh	r2, [r7, #6]
 8000eb0:	887b      	ldrh	r3, [r7, #2]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4a1c      	ldr	r2, [pc, #112]	@ (8000f28 <ILI9341_DrawRectangle+0xb0>)
 8000eb6:	8812      	ldrh	r2, [r2, #0]
 8000eb8:	b292      	uxth	r2, r2
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	dd05      	ble.n	8000eca <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8000f28 <ILI9341_DrawRectangle+0xb0>)
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 8000eca:	88ba      	ldrh	r2, [r7, #4]
 8000ecc:	883b      	ldrh	r3, [r7, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	4a16      	ldr	r2, [pc, #88]	@ (8000f2c <ILI9341_DrawRectangle+0xb4>)
 8000ed2:	8812      	ldrh	r2, [r2, #0]
 8000ed4:	b292      	uxth	r2, r2
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	dd05      	ble.n	8000ee6 <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 8000eda:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <ILI9341_DrawRectangle+0xb4>)
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	88bb      	ldrh	r3, [r7, #4]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8000ee6:	88fa      	ldrh	r2, [r7, #6]
 8000ee8:	887b      	ldrh	r3, [r7, #2]
 8000eea:	4413      	add	r3, r2
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	b29c      	uxth	r4, r3
 8000ef2:	88ba      	ldrh	r2, [r7, #4]
 8000ef4:	883b      	ldrh	r3, [r7, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	3b01      	subs	r3, #1
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	88b9      	ldrh	r1, [r7, #4]
 8000f00:	88f8      	ldrh	r0, [r7, #6]
 8000f02:	4622      	mov	r2, r4
 8000f04:	f7ff fcbc 	bl	8000880 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8000f08:	883b      	ldrh	r3, [r7, #0]
 8000f0a:	887a      	ldrh	r2, [r7, #2]
 8000f0c:	fb02 f303 	mul.w	r3, r2, r3
 8000f10:	461a      	mov	r2, r3
 8000f12:	8b3b      	ldrh	r3, [r7, #24]
 8000f14:	4611      	mov	r1, r2
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fe84 	bl	8000c24 <ILI9341_DrawColorBurst>
 8000f1c:	e000      	b.n	8000f20 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000f1e:	bf00      	nop
}
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd90      	pop	{r4, r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000002 	.word	0x20000002
 8000f2c:	20000000 	.word	0x20000000

08000f30 <ILI9341_DrawLine>:

	ILI9341_SetAddress(x, y, x, y+height-1);
	ILI9341_DrawColorBurst(color, height);
}

void ILI9341_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b089      	sub	sp, #36	@ 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4604      	mov	r4, r0
 8000f38:	4608      	mov	r0, r1
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4623      	mov	r3, r4
 8000f40:	80fb      	strh	r3, [r7, #6]
 8000f42:	4603      	mov	r3, r0
 8000f44:	80bb      	strh	r3, [r7, #4]
 8000f46:	460b      	mov	r3, r1
 8000f48:	807b      	strh	r3, [r7, #2]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	803b      	strh	r3, [r7, #0]
    int dx = abs(x1 - x0);
 8000f4e:	887a      	ldrh	r2, [r7, #2]
 8000f50:	88fb      	ldrh	r3, [r7, #6]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	bfb8      	it	lt
 8000f58:	425b      	neglt	r3, r3
 8000f5a:	61bb      	str	r3, [r7, #24]
    int sx = x0 < x1 ? 1 : -1;
 8000f5c:	88fa      	ldrh	r2, [r7, #6]
 8000f5e:	887b      	ldrh	r3, [r7, #2]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d201      	bcs.n	8000f68 <ILI9341_DrawLine+0x38>
 8000f64:	2301      	movs	r3, #1
 8000f66:	e001      	b.n	8000f6c <ILI9341_DrawLine+0x3c>
 8000f68:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6c:	617b      	str	r3, [r7, #20]
    int dy = -abs(y1 - y0);
 8000f6e:	883a      	ldrh	r2, [r7, #0]
 8000f70:	88bb      	ldrh	r3, [r7, #4]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	bfb8      	it	lt
 8000f78:	425b      	neglt	r3, r3
 8000f7a:	425b      	negs	r3, r3
 8000f7c:	613b      	str	r3, [r7, #16]
    int sy = y0 < y1 ? 1 : -1;
 8000f7e:	88ba      	ldrh	r2, [r7, #4]
 8000f80:	883b      	ldrh	r3, [r7, #0]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d201      	bcs.n	8000f8a <ILI9341_DrawLine+0x5a>
 8000f86:	2301      	movs	r3, #1
 8000f88:	e001      	b.n	8000f8e <ILI9341_DrawLine+0x5e>
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8e:	60fb      	str	r3, [r7, #12]
    int err = dx + dy;
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	4413      	add	r3, r2
 8000f96:	61fb      	str	r3, [r7, #28]
    int e2;

    while (1) {
        ILI9341_DrawPixel(x0, y0, color);
 8000f98:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8000f9a:	88b9      	ldrh	r1, [r7, #4]
 8000f9c:	88fb      	ldrh	r3, [r7, #6]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff ff04 	bl	8000dac <ILI9341_DrawPixel>
        if (x0 == x1 && y0 == y1) break;
 8000fa4:	88fa      	ldrh	r2, [r7, #6]
 8000fa6:	887b      	ldrh	r3, [r7, #2]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d103      	bne.n	8000fb4 <ILI9341_DrawLine+0x84>
 8000fac:	88ba      	ldrh	r2, [r7, #4]
 8000fae:	883b      	ldrh	r3, [r7, #0]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d01d      	beq.n	8000ff0 <ILI9341_DrawLine+0xc0>
        e2 = 2 * err;
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	60bb      	str	r3, [r7, #8]
        if (e2 >= dy) { err += dy; x0 += sx; }
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	db08      	blt.n	8000fd4 <ILI9341_DrawLine+0xa4>
 8000fc2:	69fa      	ldr	r2, [r7, #28]
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	61fb      	str	r3, [r7, #28]
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	80fb      	strh	r3, [r7, #6]
        if (e2 <= dx) { err += dx; y0 += sy; }
 8000fd4:	68ba      	ldr	r2, [r7, #8]
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	dcdd      	bgt.n	8000f98 <ILI9341_DrawLine+0x68>
 8000fdc:	69fa      	ldr	r2, [r7, #28]
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	61fb      	str	r3, [r7, #28]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	88bb      	ldrh	r3, [r7, #4]
 8000fea:	4413      	add	r3, r2
 8000fec:	80bb      	strh	r3, [r7, #4]
        ILI9341_DrawPixel(x0, y0, color);
 8000fee:	e7d3      	b.n	8000f98 <ILI9341_DrawLine+0x68>
        if (x0 == x1 && y0 == y1) break;
 8000ff0:	bf00      	nop
    }
}
 8000ff2:	bf00      	nop
 8000ff4:	3724      	adds	r7, #36	@ 0x24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd90      	pop	{r4, r7, pc}

08000ffa <draw_plane>:
/* USER CODE BEGIN 0 */
/* Game logic ----------------------------------------------------------------*/


// (x,y) = (0,0) tại góc trái gần nút bấm, x theo chiểu dài, y theo chiều rộng
void draw_plane(int x, int y) {
 8000ffa:	b590      	push	{r4, r7, lr}
 8000ffc:	b08b      	sub	sp, #44	@ 0x2c
 8000ffe:	af02      	add	r7, sp, #8
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	6039      	str	r1, [r7, #0]
	  int x1 = x;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	61fb      	str	r3, [r7, #28]
	  int y1 = y - PLANE_HEIGHT / 2;
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	3b0a      	subs	r3, #10
 800100c:	61bb      	str	r3, [r7, #24]

	  int x2 = x;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	617b      	str	r3, [r7, #20]
	  int y2 = y + PLANE_HEIGHT / 2;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	330a      	adds	r3, #10
 8001016:	613b      	str	r3, [r7, #16]

	  int x3 = x + PLANE_WIDTH;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3314      	adds	r3, #20
 800101c:	60fb      	str	r3, [r7, #12]
	  int y3 = y;
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	60bb      	str	r3, [r7, #8]

	  // Vẽ viền tam giác
	  ILI9341_DrawLine(x1, y1, x2, y2, BLUE);
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	b298      	uxth	r0, r3
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	b299      	uxth	r1, r3
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	b29a      	uxth	r2, r3
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	b29b      	uxth	r3, r3
 8001032:	241f      	movs	r4, #31
 8001034:	9400      	str	r4, [sp, #0]
 8001036:	f7ff ff7b 	bl	8000f30 <ILI9341_DrawLine>
	  ILI9341_DrawLine(x2, y2, x3, y3, BLUE);
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	b298      	uxth	r0, r3
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	b299      	uxth	r1, r3
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	b29a      	uxth	r2, r3
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	b29b      	uxth	r3, r3
 800104a:	241f      	movs	r4, #31
 800104c:	9400      	str	r4, [sp, #0]
 800104e:	f7ff ff6f 	bl	8000f30 <ILI9341_DrawLine>
	  ILI9341_DrawLine(x3, y3, x1, y1, BLUE);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	b298      	uxth	r0, r3
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	b299      	uxth	r1, r3
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	b29a      	uxth	r2, r3
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	b29b      	uxth	r3, r3
 8001062:	241f      	movs	r4, #31
 8001064:	9400      	str	r4, [sp, #0]
 8001066:	f7ff ff63 	bl	8000f30 <ILI9341_DrawLine>
	  // Nếu có hàm tô màu tam giác:
}
 800106a:	bf00      	nop
 800106c:	3724      	adds	r7, #36	@ 0x24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd90      	pop	{r4, r7, pc}

08001072 <erase_plane>:

void erase_plane(int x, int y) {
 8001072:	b590      	push	{r4, r7, lr}
 8001074:	b08b      	sub	sp, #44	@ 0x2c
 8001076:	af02      	add	r7, sp, #8
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	6039      	str	r1, [r7, #0]
	 int x1 = x;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	61fb      	str	r3, [r7, #28]
	  int y1 = y - PLANE_HEIGHT / 2;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	3b0a      	subs	r3, #10
 8001084:	61bb      	str	r3, [r7, #24]

	  int x2 = x;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	617b      	str	r3, [r7, #20]
	  int y2 = y + PLANE_HEIGHT / 2;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	330a      	adds	r3, #10
 800108e:	613b      	str	r3, [r7, #16]

	  int x3 = x + PLANE_WIDTH;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3314      	adds	r3, #20
 8001094:	60fb      	str	r3, [r7, #12]
	  int y3 = y;
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	60bb      	str	r3, [r7, #8]

	  // Vẽ lại bằng màu nền (trắng)
	  ILI9341_DrawLine(x1, y1, x2, y2, WHITE);
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	b298      	uxth	r0, r3
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	b299      	uxth	r1, r3
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 80010ae:	9400      	str	r4, [sp, #0]
 80010b0:	f7ff ff3e 	bl	8000f30 <ILI9341_DrawLine>
	  ILI9341_DrawLine(x2, y2, x3, y3, WHITE);
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	b298      	uxth	r0, r3
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	b299      	uxth	r1, r3
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	b29a      	uxth	r2, r3
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 80010c8:	9400      	str	r4, [sp, #0]
 80010ca:	f7ff ff31 	bl	8000f30 <ILI9341_DrawLine>
	  ILI9341_DrawLine(x3, y3, x1, y1, WHITE);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	b298      	uxth	r0, r3
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	b299      	uxth	r1, r3
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	b29a      	uxth	r2, r3
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	b29b      	uxth	r3, r3
 80010de:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 80010e2:	9400      	str	r4, [sp, #0]
 80010e4:	f7ff ff24 	bl	8000f30 <ILI9341_DrawLine>
}
 80010e8:	bf00      	nop
 80010ea:	3724      	adds	r7, #36	@ 0x24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd90      	pop	{r4, r7, pc}

080010f0 <draw_replane>:

void draw_replane(int x, int y) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af02      	add	r7, sp, #8
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  ILI9341_DrawRectangle(x, y, PLANE_WIDTH, PLANE_HEIGHT, GREEN);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	b298      	uxth	r0, r3
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	b299      	uxth	r1, r3
 8001102:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2314      	movs	r3, #20
 800110a:	2214      	movs	r2, #20
 800110c:	f7ff feb4 	bl	8000e78 <ILI9341_DrawRectangle>
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <init_enemies>:

void init_enemies() {
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
  for (int i = 0; i < current_enemy_count; i++) {
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	e031      	b.n	8001188 <init_enemies+0x70>
    enemies[i].x = 280 + i * 10;
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	4613      	mov	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	f503 718c 	add.w	r1, r3, #280	@ 0x118
 8001132:	481a      	ldr	r0, [pc, #104]	@ (800119c <init_enemies+0x84>)
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	4613      	mov	r3, r2
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	4413      	add	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4403      	add	r3, r0
 8001140:	6019      	str	r1, [r3, #0]
    enemies[i].y = rand() % 100;
 8001142:	f003 fd6d 	bl	8004c20 <rand>
 8001146:	4603      	mov	r3, r0
 8001148:	4a15      	ldr	r2, [pc, #84]	@ (80011a0 <init_enemies+0x88>)
 800114a:	fb82 1203 	smull	r1, r2, r2, r3
 800114e:	1151      	asrs	r1, r2, #5
 8001150:	17da      	asrs	r2, r3, #31
 8001152:	1a8a      	subs	r2, r1, r2
 8001154:	2164      	movs	r1, #100	@ 0x64
 8001156:	fb01 f202 	mul.w	r2, r1, r2
 800115a:	1a9a      	subs	r2, r3, r2
 800115c:	480f      	ldr	r0, [pc, #60]	@ (800119c <init_enemies+0x84>)
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	440b      	add	r3, r1
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	4403      	add	r3, r0
 800116a:	3304      	adds	r3, #4
 800116c:	601a      	str	r2, [r3, #0]
    enemies[i].active = 1;
 800116e:	490b      	ldr	r1, [pc, #44]	@ (800119c <init_enemies+0x84>)
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	4613      	mov	r3, r2
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	4413      	add	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	440b      	add	r3, r1
 800117c:	3308      	adds	r3, #8
 800117e:	2201      	movs	r2, #1
 8001180:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < current_enemy_count; i++) {
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3301      	adds	r3, #1
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <init_enemies+0x8c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	429a      	cmp	r2, r3
 8001190:	dbc8      	blt.n	8001124 <init_enemies+0xc>
  }
}
 8001192:	bf00      	nop
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000170 	.word	0x20000170
 80011a0:	51eb851f 	.word	0x51eb851f
 80011a4:	2000000c 	.word	0x2000000c

080011a8 <erase_replane>:

void erase_replane(int x, int y) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af02      	add	r7, sp, #8
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  ILI9341_DrawRectangle(x, y, PLANE_WIDTH, PLANE_HEIGHT, WHITE);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	b298      	uxth	r0, r3
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	b299      	uxth	r1, r3
 80011ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	2314      	movs	r3, #20
 80011c2:	2214      	movs	r2, #20
 80011c4:	f7ff fe58 	bl	8000e78 <ILI9341_DrawRectangle>
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <update_enemies>:
void update_enemies() {
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
  for (int i = 0; i < current_enemy_count; i++) {
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	e08b      	b.n	80012f4 <update_enemies+0x124>
    if (enemies[i].active) {
 80011dc:	494b      	ldr	r1, [pc, #300]	@ (800130c <update_enemies+0x13c>)
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	4613      	mov	r3, r2
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	4413      	add	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	440b      	add	r3, r1
 80011ea:	3308      	adds	r3, #8
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d07d      	beq.n	80012ee <update_enemies+0x11e>
      erase_replane(enemies[i].x, enemies[i].y);
 80011f2:	4946      	ldr	r1, [pc, #280]	@ (800130c <update_enemies+0x13c>)
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	4613      	mov	r3, r2
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	4413      	add	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	440b      	add	r3, r1
 8001200:	6818      	ldr	r0, [r3, #0]
 8001202:	4942      	ldr	r1, [pc, #264]	@ (800130c <update_enemies+0x13c>)
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	4613      	mov	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	4413      	add	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	440b      	add	r3, r1
 8001210:	3304      	adds	r3, #4
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4619      	mov	r1, r3
 8001216:	f7ff ffc7 	bl	80011a8 <erase_replane>
      enemies[i].x -= 2;
 800121a:	493c      	ldr	r1, [pc, #240]	@ (800130c <update_enemies+0x13c>)
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	4613      	mov	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	4413      	add	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	440b      	add	r3, r1
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	1e99      	subs	r1, r3, #2
 800122c:	4837      	ldr	r0, [pc, #220]	@ (800130c <update_enemies+0x13c>)
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	4613      	mov	r3, r2
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	4413      	add	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4403      	add	r3, r0
 800123a:	6019      	str	r1, [r3, #0]

      if (enemies[i].x <= 0) {
 800123c:	4933      	ldr	r1, [pc, #204]	@ (800130c <update_enemies+0x13c>)
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	4613      	mov	r3, r2
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	4413      	add	r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	440b      	add	r3, r1
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	dc3a      	bgt.n	80012c6 <update_enemies+0xf6>
        enemies[i].x = 320;
 8001250:	492e      	ldr	r1, [pc, #184]	@ (800130c <update_enemies+0x13c>)
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	4613      	mov	r3, r2
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	4413      	add	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	440b      	add	r3, r1
 800125e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001262:	601a      	str	r2, [r3, #0]
        enemies[i].y = (enemies[i].y + 100 + rand()*3%30) % 220;
 8001264:	4929      	ldr	r1, [pc, #164]	@ (800130c <update_enemies+0x13c>)
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4413      	add	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	440b      	add	r3, r1
 8001272:	3304      	adds	r3, #4
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f103 0464 	add.w	r4, r3, #100	@ 0x64
 800127a:	f003 fcd1 	bl	8004c20 <rand>
 800127e:	4602      	mov	r2, r0
 8001280:	4613      	mov	r3, r2
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	441a      	add	r2, r3
 8001286:	4b22      	ldr	r3, [pc, #136]	@ (8001310 <update_enemies+0x140>)
 8001288:	fb83 1302 	smull	r1, r3, r3, r2
 800128c:	4413      	add	r3, r2
 800128e:	1119      	asrs	r1, r3, #4
 8001290:	17d3      	asrs	r3, r2, #31
 8001292:	1ac9      	subs	r1, r1, r3
 8001294:	460b      	mov	r3, r1
 8001296:	011b      	lsls	r3, r3, #4
 8001298:	1a5b      	subs	r3, r3, r1
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	1ad1      	subs	r1, r2, r3
 800129e:	1863      	adds	r3, r4, r1
 80012a0:	4a1c      	ldr	r2, [pc, #112]	@ (8001314 <update_enemies+0x144>)
 80012a2:	fb82 1203 	smull	r1, r2, r2, r3
 80012a6:	10d1      	asrs	r1, r2, #3
 80012a8:	17da      	asrs	r2, r3, #31
 80012aa:	1a8a      	subs	r2, r1, r2
 80012ac:	21dc      	movs	r1, #220	@ 0xdc
 80012ae:	fb01 f202 	mul.w	r2, r1, r2
 80012b2:	1a9a      	subs	r2, r3, r2
 80012b4:	4815      	ldr	r0, [pc, #84]	@ (800130c <update_enemies+0x13c>)
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	440b      	add	r3, r1
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4403      	add	r3, r0
 80012c2:	3304      	adds	r3, #4
 80012c4:	601a      	str	r2, [r3, #0]
      }

      draw_replane(enemies[i].x, enemies[i].y); // vẽ lại enemy
 80012c6:	4911      	ldr	r1, [pc, #68]	@ (800130c <update_enemies+0x13c>)
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	4613      	mov	r3, r2
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	4413      	add	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	440b      	add	r3, r1
 80012d4:	6818      	ldr	r0, [r3, #0]
 80012d6:	490d      	ldr	r1, [pc, #52]	@ (800130c <update_enemies+0x13c>)
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	4613      	mov	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4413      	add	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	440b      	add	r3, r1
 80012e4:	3304      	adds	r3, #4
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4619      	mov	r1, r3
 80012ea:	f7ff ff01 	bl	80010f0 <draw_replane>
  for (int i = 0; i < current_enemy_count; i++) {
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3301      	adds	r3, #1
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	4b08      	ldr	r3, [pc, #32]	@ (8001318 <update_enemies+0x148>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	f6ff af6e 	blt.w	80011dc <update_enemies+0xc>
    }
  }
}
 8001300:	bf00      	nop
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	bd90      	pop	{r4, r7, pc}
 800130a:	bf00      	nop
 800130c:	20000170 	.word	0x20000170
 8001310:	88888889 	.word	0x88888889
 8001314:	094f2095 	.word	0x094f2095
 8001318:	2000000c 	.word	0x2000000c

0800131c <init_boss>:

void init_boss() {
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  boss.x = 280;
 8001320:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <init_boss+0x30>)
 8001322:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8001326:	601a      	str	r2, [r3, #0]
  boss.y = 20;
 8001328:	4b08      	ldr	r3, [pc, #32]	@ (800134c <init_boss+0x30>)
 800132a:	2214      	movs	r2, #20
 800132c:	605a      	str	r2, [r3, #4]
  boss.hp = 10;
 800132e:	4b07      	ldr	r3, [pc, #28]	@ (800134c <init_boss+0x30>)
 8001330:	220a      	movs	r2, #10
 8001332:	609a      	str	r2, [r3, #8]
  boss.active = 1;
 8001334:	4b05      	ldr	r3, [pc, #20]	@ (800134c <init_boss+0x30>)
 8001336:	2201      	movs	r2, #1
 8001338:	60da      	str	r2, [r3, #12]
  boss.laser_timer = 0;
 800133a:	4b04      	ldr	r3, [pc, #16]	@ (800134c <init_boss+0x30>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	20000260 	.word	0x20000260

08001350 <draw_boss>:

void draw_boss(int x, int y) {
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	b085      	sub	sp, #20
 8001354:	af02      	add	r7, sp, #8
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  ILI9341_DrawRectangle(x, y, x + BOSS_WIDTH, y + BOSS_HEIGHT, RED);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	b298      	uxth	r0, r3
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	b299      	uxth	r1, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	b29b      	uxth	r3, r3
 8001366:	3328      	adds	r3, #40	@ 0x28
 8001368:	b29a      	uxth	r2, r3
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	b29b      	uxth	r3, r3
 800136e:	331e      	adds	r3, #30
 8001370:	b29b      	uxth	r3, r3
 8001372:	f44f 4478 	mov.w	r4, #63488	@ 0xf800
 8001376:	9400      	str	r4, [sp, #0]
 8001378:	f7ff fd7e 	bl	8000e78 <ILI9341_DrawRectangle>
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	bd90      	pop	{r4, r7, pc}

08001384 <erase_boss>:

void erase_boss(int x, int y) {
 8001384:	b590      	push	{r4, r7, lr}
 8001386:	b085      	sub	sp, #20
 8001388:	af02      	add	r7, sp, #8
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  ILI9341_DrawRectangle(x, y, x + BOSS_WIDTH, y + BOSS_HEIGHT, WHITE);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	b298      	uxth	r0, r3
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	b299      	uxth	r1, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	b29b      	uxth	r3, r3
 800139a:	3328      	adds	r3, #40	@ 0x28
 800139c:	b29a      	uxth	r2, r3
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	331e      	adds	r3, #30
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 80013aa:	9400      	str	r4, [sp, #0]
 80013ac:	f7ff fd64 	bl	8000e78 <ILI9341_DrawRectangle>
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd90      	pop	{r4, r7, pc}

080013b8 <fire_boss_laser>:

void fire_boss_laser() {
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
  for (int i = 0; i < MAX_BOSS_BULLETS; i++) {
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	e02f      	b.n	8001424 <fire_boss_laser+0x6c>
    if (!boss_bullets[i].active) {
 80013c4:	491c      	ldr	r1, [pc, #112]	@ (8001438 <fire_boss_laser+0x80>)
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	4613      	mov	r3, r2
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	4413      	add	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	440b      	add	r3, r1
 80013d2:	3308      	adds	r3, #8
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d121      	bne.n	800141e <fire_boss_laser+0x66>
      boss_bullets[i].x = boss.x;
 80013da:	4b18      	ldr	r3, [pc, #96]	@ (800143c <fire_boss_laser+0x84>)
 80013dc:	6819      	ldr	r1, [r3, #0]
 80013de:	4816      	ldr	r0, [pc, #88]	@ (8001438 <fire_boss_laser+0x80>)
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	4613      	mov	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4413      	add	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4403      	add	r3, r0
 80013ec:	6019      	str	r1, [r3, #0]
      boss_bullets[i].y = boss.y + BOSS_HEIGHT / 2;
 80013ee:	4b13      	ldr	r3, [pc, #76]	@ (800143c <fire_boss_laser+0x84>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f103 010f 	add.w	r1, r3, #15
 80013f6:	4810      	ldr	r0, [pc, #64]	@ (8001438 <fire_boss_laser+0x80>)
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	4613      	mov	r3, r2
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	4413      	add	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4403      	add	r3, r0
 8001404:	3304      	adds	r3, #4
 8001406:	6019      	str	r1, [r3, #0]
      boss_bullets[i].active = 1;
 8001408:	490b      	ldr	r1, [pc, #44]	@ (8001438 <fire_boss_laser+0x80>)
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	4613      	mov	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4413      	add	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	440b      	add	r3, r1
 8001416:	3308      	adds	r3, #8
 8001418:	2201      	movs	r2, #1
 800141a:	601a      	str	r2, [r3, #0]
      break;
 800141c:	e006      	b.n	800142c <fire_boss_laser+0x74>
  for (int i = 0; i < MAX_BOSS_BULLETS; i++) {
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	3301      	adds	r3, #1
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b63      	cmp	r3, #99	@ 0x63
 8001428:	ddcc      	ble.n	80013c4 <fire_boss_laser+0xc>
    }
  }
}
 800142a:	bf00      	nop
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	20000274 	.word	0x20000274
 800143c:	20000260 	.word	0x20000260

08001440 <update_boss_bullets>:

void update_boss_bullets() {
 8001440:	b5b0      	push	{r4, r5, r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af02      	add	r7, sp, #8
  for (int i = 0; i < MAX_BOSS_BULLETS; i++) {
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	e094      	b.n	8001576 <update_boss_bullets+0x136>
    if (boss_bullets[i].active) {
 800144c:	494e      	ldr	r1, [pc, #312]	@ (8001588 <update_boss_bullets+0x148>)
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	4613      	mov	r3, r2
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	4413      	add	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	440b      	add	r3, r1
 800145a:	3308      	adds	r3, #8
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	f000 8086 	beq.w	8001570 <update_boss_bullets+0x130>
      ILI9341_DrawRectangle(boss_bullets[i].x, boss_bullets[i].y,
 8001464:	4948      	ldr	r1, [pc, #288]	@ (8001588 <update_boss_bullets+0x148>)
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	4413      	add	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	440b      	add	r3, r1
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	b298      	uxth	r0, r3
 8001476:	4944      	ldr	r1, [pc, #272]	@ (8001588 <update_boss_bullets+0x148>)
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	4613      	mov	r3, r2
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4413      	add	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	440b      	add	r3, r1
 8001484:	3304      	adds	r3, #4
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	b299      	uxth	r1, r3
                                  boss_bullets[i].x + 4, boss_bullets[i].y + 4, WHITE);  // Xóa cũ
 800148a:	4c3f      	ldr	r4, [pc, #252]	@ (8001588 <update_boss_bullets+0x148>)
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4413      	add	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4423      	add	r3, r4
 8001498:	681b      	ldr	r3, [r3, #0]
      ILI9341_DrawRectangle(boss_bullets[i].x, boss_bullets[i].y,
 800149a:	b29b      	uxth	r3, r3
 800149c:	3304      	adds	r3, #4
 800149e:	b29c      	uxth	r4, r3
                                  boss_bullets[i].x + 4, boss_bullets[i].y + 4, WHITE);  // Xóa cũ
 80014a0:	4d39      	ldr	r5, [pc, #228]	@ (8001588 <update_boss_bullets+0x148>)
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4413      	add	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	442b      	add	r3, r5
 80014ae:	3304      	adds	r3, #4
 80014b0:	681b      	ldr	r3, [r3, #0]
      ILI9341_DrawRectangle(boss_bullets[i].x, boss_bullets[i].y,
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	3304      	adds	r3, #4
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014bc:	9200      	str	r2, [sp, #0]
 80014be:	4622      	mov	r2, r4
 80014c0:	f7ff fcda 	bl	8000e78 <ILI9341_DrawRectangle>
      boss_bullets[i].x -= 4;
 80014c4:	4930      	ldr	r1, [pc, #192]	@ (8001588 <update_boss_bullets+0x148>)
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	4613      	mov	r3, r2
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	4413      	add	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	440b      	add	r3, r1
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	1f19      	subs	r1, r3, #4
 80014d6:	482c      	ldr	r0, [pc, #176]	@ (8001588 <update_boss_bullets+0x148>)
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4413      	add	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4403      	add	r3, r0
 80014e4:	6019      	str	r1, [r3, #0]
      if (boss_bullets[i].x < 0) {
 80014e6:	4928      	ldr	r1, [pc, #160]	@ (8001588 <update_boss_bullets+0x148>)
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	4613      	mov	r3, r2
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	4413      	add	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	440b      	add	r3, r1
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	da0a      	bge.n	8001510 <update_boss_bullets+0xd0>
        boss_bullets[i].active = 0;
 80014fa:	4923      	ldr	r1, [pc, #140]	@ (8001588 <update_boss_bullets+0x148>)
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	4613      	mov	r3, r2
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	4413      	add	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	440b      	add	r3, r1
 8001508:	3308      	adds	r3, #8
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	e02f      	b.n	8001570 <update_boss_bullets+0x130>
      } else {
        ILI9341_DrawRectangle(boss_bullets[i].x, boss_bullets[i].y,
 8001510:	491d      	ldr	r1, [pc, #116]	@ (8001588 <update_boss_bullets+0x148>)
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	4613      	mov	r3, r2
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	4413      	add	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	440b      	add	r3, r1
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	b298      	uxth	r0, r3
 8001522:	4919      	ldr	r1, [pc, #100]	@ (8001588 <update_boss_bullets+0x148>)
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	4613      	mov	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	440b      	add	r3, r1
 8001530:	3304      	adds	r3, #4
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	b299      	uxth	r1, r3
                                    boss_bullets[i].x + 4, boss_bullets[i].y + 4, MAGENTA);
 8001536:	4c14      	ldr	r4, [pc, #80]	@ (8001588 <update_boss_bullets+0x148>)
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	4413      	add	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4423      	add	r3, r4
 8001544:	681b      	ldr	r3, [r3, #0]
        ILI9341_DrawRectangle(boss_bullets[i].x, boss_bullets[i].y,
 8001546:	b29b      	uxth	r3, r3
 8001548:	3304      	adds	r3, #4
 800154a:	b29c      	uxth	r4, r3
                                    boss_bullets[i].x + 4, boss_bullets[i].y + 4, MAGENTA);
 800154c:	4d0e      	ldr	r5, [pc, #56]	@ (8001588 <update_boss_bullets+0x148>)
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	4613      	mov	r3, r2
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4413      	add	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	442b      	add	r3, r5
 800155a:	3304      	adds	r3, #4
 800155c:	681b      	ldr	r3, [r3, #0]
        ILI9341_DrawRectangle(boss_bullets[i].x, boss_bullets[i].y,
 800155e:	b29b      	uxth	r3, r3
 8001560:	3304      	adds	r3, #4
 8001562:	b29b      	uxth	r3, r3
 8001564:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001568:	9200      	str	r2, [sp, #0]
 800156a:	4622      	mov	r2, r4
 800156c:	f7ff fc84 	bl	8000e78 <ILI9341_DrawRectangle>
  for (int i = 0; i < MAX_BOSS_BULLETS; i++) {
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3301      	adds	r3, #1
 8001574:	607b      	str	r3, [r7, #4]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b63      	cmp	r3, #99	@ 0x63
 800157a:	f77f af67 	ble.w	800144c <update_boss_bullets+0xc>
      }
    }
  }
}
 800157e:	bf00      	nop
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bdb0      	pop	{r4, r5, r7, pc}
 8001588:	20000274 	.word	0x20000274

0800158c <update_boss>:

void update_boss() {
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  if (!boss.active) return;
 8001590:	4b18      	ldr	r3, [pc, #96]	@ (80015f4 <update_boss+0x68>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d02b      	beq.n	80015f0 <update_boss+0x64>

  erase_boss(boss.x, boss.y);
 8001598:	4b16      	ldr	r3, [pc, #88]	@ (80015f4 <update_boss+0x68>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a15      	ldr	r2, [pc, #84]	@ (80015f4 <update_boss+0x68>)
 800159e:	6852      	ldr	r2, [r2, #4]
 80015a0:	4611      	mov	r1, r2
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff feee 	bl	8001384 <erase_boss>
  boss.x -= 1;
 80015a8:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <update_boss+0x68>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	4a11      	ldr	r2, [pc, #68]	@ (80015f4 <update_boss+0x68>)
 80015b0:	6013      	str	r3, [r2, #0]

  if (boss.x < 0) boss.x = 280; // Di chuyển lại từ phải sang trái
 80015b2:	4b10      	ldr	r3, [pc, #64]	@ (80015f4 <update_boss+0x68>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	da03      	bge.n	80015c2 <update_boss+0x36>
 80015ba:	4b0e      	ldr	r3, [pc, #56]	@ (80015f4 <update_boss+0x68>)
 80015bc:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80015c0:	601a      	str	r2, [r3, #0]

  draw_boss(boss.x, boss.y);
 80015c2:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <update_boss+0x68>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a0b      	ldr	r2, [pc, #44]	@ (80015f4 <update_boss+0x68>)
 80015c8:	6852      	ldr	r2, [r2, #4]
 80015ca:	4611      	mov	r1, r2
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff febf 	bl	8001350 <draw_boss>

  boss.laser_timer++;
 80015d2:	4b08      	ldr	r3, [pc, #32]	@ (80015f4 <update_boss+0x68>)
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	3301      	adds	r3, #1
 80015d8:	4a06      	ldr	r2, [pc, #24]	@ (80015f4 <update_boss+0x68>)
 80015da:	6113      	str	r3, [r2, #16]
  if (boss.laser_timer >= 50) { // Bắn laser sau mỗi 50 chu kỳ
 80015dc:	4b05      	ldr	r3, [pc, #20]	@ (80015f4 <update_boss+0x68>)
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	2b31      	cmp	r3, #49	@ 0x31
 80015e2:	dd06      	ble.n	80015f2 <update_boss+0x66>
    fire_boss_laser();
 80015e4:	f7ff fee8 	bl	80013b8 <fire_boss_laser>
    boss.laser_timer = 0;
 80015e8:	4b02      	ldr	r3, [pc, #8]	@ (80015f4 <update_boss+0x68>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	611a      	str	r2, [r3, #16]
 80015ee:	e000      	b.n	80015f2 <update_boss+0x66>
  if (!boss.active) return;
 80015f0:	bf00      	nop
  }
}
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000260 	.word	0x20000260

080015f8 <check_bullet_boss_collision>:

void check_bullet_boss_collision() {
 80015f8:	b5b0      	push	{r4, r5, r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af02      	add	r7, sp, #8
  if (!boss.active) return;
 80015fe:	4b56      	ldr	r3, [pc, #344]	@ (8001758 <check_bullet_boss_collision+0x160>)
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	2b00      	cmp	r3, #0
 8001604:	f000 80a4 	beq.w	8001750 <check_bullet_boss_collision+0x158>

  for (int i = 0; i < MAX_BULLETS; i++) {
 8001608:	2300      	movs	r3, #0
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	e09b      	b.n	8001746 <check_bullet_boss_collision+0x14e>
    if (!bullets[i].active) continue;
 800160e:	4953      	ldr	r1, [pc, #332]	@ (800175c <check_bullet_boss_collision+0x164>)
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	4613      	mov	r3, r2
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	4413      	add	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	440b      	add	r3, r1
 800161c:	3308      	adds	r3, #8
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 808c 	beq.w	800173e <check_bullet_boss_collision+0x146>

    if (bullets[i].x + BULLET_HEIGHT > boss.x &&
 8001626:	494d      	ldr	r1, [pc, #308]	@ (800175c <check_bullet_boss_collision+0x164>)
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	4613      	mov	r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	4413      	add	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	440b      	add	r3, r1
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	1dda      	adds	r2, r3, #7
 8001638:	4b47      	ldr	r3, [pc, #284]	@ (8001758 <check_bullet_boss_collision+0x160>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	429a      	cmp	r2, r3
 800163e:	db7f      	blt.n	8001740 <check_bullet_boss_collision+0x148>
        bullets[i].x < boss.x + BOSS_WIDTH &&
 8001640:	4b45      	ldr	r3, [pc, #276]	@ (8001758 <check_bullet_boss_collision+0x160>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f103 0127 	add.w	r1, r3, #39	@ 0x27
 8001648:	4844      	ldr	r0, [pc, #272]	@ (800175c <check_bullet_boss_collision+0x164>)
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	4613      	mov	r3, r2
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	4413      	add	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4403      	add	r3, r0
 8001656:	681b      	ldr	r3, [r3, #0]
    if (bullets[i].x + BULLET_HEIGHT > boss.x &&
 8001658:	4299      	cmp	r1, r3
 800165a:	db71      	blt.n	8001740 <check_bullet_boss_collision+0x148>
        bullets[i].y + BULLET_WIDTH > boss.y &&
 800165c:	493f      	ldr	r1, [pc, #252]	@ (800175c <check_bullet_boss_collision+0x164>)
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	4613      	mov	r3, r2
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	4413      	add	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	440b      	add	r3, r1
 800166a:	3304      	adds	r3, #4
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	1cda      	adds	r2, r3, #3
 8001670:	4b39      	ldr	r3, [pc, #228]	@ (8001758 <check_bullet_boss_collision+0x160>)
 8001672:	685b      	ldr	r3, [r3, #4]
        bullets[i].x < boss.x + BOSS_WIDTH &&
 8001674:	429a      	cmp	r2, r3
 8001676:	db63      	blt.n	8001740 <check_bullet_boss_collision+0x148>
        bullets[i].y < boss.y + BOSS_HEIGHT) {
 8001678:	4b37      	ldr	r3, [pc, #220]	@ (8001758 <check_bullet_boss_collision+0x160>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f103 011d 	add.w	r1, r3, #29
 8001680:	4836      	ldr	r0, [pc, #216]	@ (800175c <check_bullet_boss_collision+0x164>)
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	4613      	mov	r3, r2
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	4413      	add	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4403      	add	r3, r0
 800168e:	3304      	adds	r3, #4
 8001690:	681b      	ldr	r3, [r3, #0]
        bullets[i].y + BULLET_WIDTH > boss.y &&
 8001692:	4299      	cmp	r1, r3
 8001694:	db54      	blt.n	8001740 <check_bullet_boss_collision+0x148>

      bullets[i].active = 0;
 8001696:	4931      	ldr	r1, [pc, #196]	@ (800175c <check_bullet_boss_collision+0x164>)
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	4413      	add	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	440b      	add	r3, r1
 80016a4:	3308      	adds	r3, #8
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
      ILI9341_DrawRectangle(bullets[i].x, bullets[i].y,
 80016aa:	492c      	ldr	r1, [pc, #176]	@ (800175c <check_bullet_boss_collision+0x164>)
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	4613      	mov	r3, r2
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	4413      	add	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	440b      	add	r3, r1
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	b298      	uxth	r0, r3
 80016bc:	4927      	ldr	r1, [pc, #156]	@ (800175c <check_bullet_boss_collision+0x164>)
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	4613      	mov	r3, r2
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	4413      	add	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	440b      	add	r3, r1
 80016ca:	3304      	adds	r3, #4
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	b299      	uxth	r1, r3
                                  bullets[i].x + BULLET_HEIGHT, bullets[i].y + BULLET_WIDTH, WHITE);
 80016d0:	4c22      	ldr	r4, [pc, #136]	@ (800175c <check_bullet_boss_collision+0x164>)
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	4613      	mov	r3, r2
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	4413      	add	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4423      	add	r3, r4
 80016de:	681b      	ldr	r3, [r3, #0]
      ILI9341_DrawRectangle(bullets[i].x, bullets[i].y,
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	3308      	adds	r3, #8
 80016e4:	b29c      	uxth	r4, r3
                                  bullets[i].x + BULLET_HEIGHT, bullets[i].y + BULLET_WIDTH, WHITE);
 80016e6:	4d1d      	ldr	r5, [pc, #116]	@ (800175c <check_bullet_boss_collision+0x164>)
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	4613      	mov	r3, r2
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	4413      	add	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	442b      	add	r3, r5
 80016f4:	3304      	adds	r3, #4
 80016f6:	681b      	ldr	r3, [r3, #0]
      ILI9341_DrawRectangle(bullets[i].x, bullets[i].y,
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	3304      	adds	r3, #4
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001702:	9200      	str	r2, [sp, #0]
 8001704:	4622      	mov	r2, r4
 8001706:	f7ff fbb7 	bl	8000e78 <ILI9341_DrawRectangle>

      boss.hp--;
 800170a:	4b13      	ldr	r3, [pc, #76]	@ (8001758 <check_bullet_boss_collision+0x160>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	3b01      	subs	r3, #1
 8001710:	4a11      	ldr	r2, [pc, #68]	@ (8001758 <check_bullet_boss_collision+0x160>)
 8001712:	6093      	str	r3, [r2, #8]
      if (boss.hp <= 0) {
 8001714:	4b10      	ldr	r3, [pc, #64]	@ (8001758 <check_bullet_boss_collision+0x160>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	2b00      	cmp	r3, #0
 800171a:	dc11      	bgt.n	8001740 <check_bullet_boss_collision+0x148>
        erase_boss(boss.x, boss.y);
 800171c:	4b0e      	ldr	r3, [pc, #56]	@ (8001758 <check_bullet_boss_collision+0x160>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0d      	ldr	r2, [pc, #52]	@ (8001758 <check_bullet_boss_collision+0x160>)
 8001722:	6852      	ldr	r2, [r2, #4]
 8001724:	4611      	mov	r1, r2
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff fe2c 	bl	8001384 <erase_boss>
        boss.active = 0;
 800172c:	4b0a      	ldr	r3, [pc, #40]	@ (8001758 <check_bullet_boss_collision+0x160>)
 800172e:	2200      	movs	r2, #0
 8001730:	60da      	str	r2, [r3, #12]
        point += 50; // thưởng điểm
 8001732:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <check_bullet_boss_collision+0x168>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	3332      	adds	r3, #50	@ 0x32
 8001738:	4a09      	ldr	r2, [pc, #36]	@ (8001760 <check_bullet_boss_collision+0x168>)
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	e000      	b.n	8001740 <check_bullet_boss_collision+0x148>
    if (!bullets[i].active) continue;
 800173e:	bf00      	nop
  for (int i = 0; i < MAX_BULLETS; i++) {
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3301      	adds	r3, #1
 8001744:	607b      	str	r3, [r7, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b04      	cmp	r3, #4
 800174a:	f77f af60 	ble.w	800160e <check_bullet_boss_collision+0x16>
 800174e:	e000      	b.n	8001752 <check_bullet_boss_collision+0x15a>
  if (!boss.active) return;
 8001750:	bf00      	nop
      }
    }
  }
}
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bdb0      	pop	{r4, r5, r7, pc}
 8001758:	20000260 	.word	0x20000260
 800175c:	20000224 	.word	0x20000224
 8001760:	20000728 	.word	0x20000728

08001764 <check_boss_bullet_collision_with_player>:

void check_boss_bullet_collision_with_player() {
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af02      	add	r7, sp, #8
  for (int i = 0; i < MAX_BOSS_BULLETS; i++) {
 800176a:	2300      	movs	r3, #0
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	e059      	b.n	8001824 <check_boss_bullet_collision_with_player+0xc0>
    if (!boss_bullets[i].active) continue;
 8001770:	4930      	ldr	r1, [pc, #192]	@ (8001834 <check_boss_bullet_collision_with_player+0xd0>)
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	4613      	mov	r3, r2
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	4413      	add	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	440b      	add	r3, r1
 800177e:	3308      	adds	r3, #8
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d04a      	beq.n	800181c <check_boss_bullet_collision_with_player+0xb8>

    if (boss_bullets[i].x + 4 <= plane_x ||
 8001786:	492b      	ldr	r1, [pc, #172]	@ (8001834 <check_boss_bullet_collision_with_player+0xd0>)
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	4613      	mov	r3, r2
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	4413      	add	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	440b      	add	r3, r1
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	1cda      	adds	r2, r3, #3
 8001798:	4b27      	ldr	r3, [pc, #156]	@ (8001838 <check_boss_bullet_collision_with_player+0xd4>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	db3e      	blt.n	800181e <check_boss_bullet_collision_with_player+0xba>
        boss_bullets[i].x >=plane_x + PLANE_WIDTH ||
 80017a0:	4b25      	ldr	r3, [pc, #148]	@ (8001838 <check_boss_bullet_collision_with_player+0xd4>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f103 0113 	add.w	r1, r3, #19
 80017a8:	4822      	ldr	r0, [pc, #136]	@ (8001834 <check_boss_bullet_collision_with_player+0xd0>)
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	4613      	mov	r3, r2
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4413      	add	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4403      	add	r3, r0
 80017b6:	681b      	ldr	r3, [r3, #0]
    if (boss_bullets[i].x + 4 <= plane_x ||
 80017b8:	4299      	cmp	r1, r3
 80017ba:	db30      	blt.n	800181e <check_boss_bullet_collision_with_player+0xba>
        boss_bullets[i].y + 4 <= plane_y - PLANE_WIDTH/2 ||
 80017bc:	491d      	ldr	r1, [pc, #116]	@ (8001834 <check_boss_bullet_collision_with_player+0xd0>)
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	4613      	mov	r3, r2
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	4413      	add	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	440b      	add	r3, r1
 80017ca:	3304      	adds	r3, #4
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	1cda      	adds	r2, r3, #3
 80017d0:	4b1a      	ldr	r3, [pc, #104]	@ (800183c <check_boss_bullet_collision_with_player+0xd8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	3b0a      	subs	r3, #10
        boss_bullets[i].x >=plane_x + PLANE_WIDTH ||
 80017d6:	429a      	cmp	r2, r3
 80017d8:	db21      	blt.n	800181e <check_boss_bullet_collision_with_player+0xba>
        boss_bullets[i].y >= plane_y + PLANE_HEIGHT/2) {
 80017da:	4b18      	ldr	r3, [pc, #96]	@ (800183c <check_boss_bullet_collision_with_player+0xd8>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f103 0109 	add.w	r1, r3, #9
 80017e2:	4814      	ldr	r0, [pc, #80]	@ (8001834 <check_boss_bullet_collision_with_player+0xd0>)
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	4613      	mov	r3, r2
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4413      	add	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4403      	add	r3, r0
 80017f0:	3304      	adds	r3, #4
 80017f2:	681b      	ldr	r3, [r3, #0]
        boss_bullets[i].y + 4 <= plane_y - PLANE_WIDTH/2 ||
 80017f4:	4299      	cmp	r1, r3
 80017f6:	db12      	blt.n	800181e <check_boss_bullet_collision_with_player+0xba>
    }
    else {
    	ILI9341_FillScreen(WHITE);
 80017f8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80017fc:	f7ff fab0 	bl	8000d60 <ILI9341_FillScreen>
    	           ILI9341_DrawText("GAME OVER", FONT3, 50, 120, RED, WHITE);
 8001800:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001804:	9301      	str	r3, [sp, #4]
 8001806:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	2378      	movs	r3, #120	@ 0x78
 800180e:	2232      	movs	r2, #50	@ 0x32
 8001810:	490b      	ldr	r1, [pc, #44]	@ (8001840 <check_boss_bullet_collision_with_player+0xdc>)
 8001812:	480c      	ldr	r0, [pc, #48]	@ (8001844 <check_boss_bullet_collision_with_player+0xe0>)
 8001814:	f7fe ff4a 	bl	80006ac <ILI9341_DrawText>
    	           while (1); // Dừng game tại đây
 8001818:	bf00      	nop
 800181a:	e7fd      	b.n	8001818 <check_boss_bullet_collision_with_player+0xb4>
    if (!boss_bullets[i].active) continue;
 800181c:	bf00      	nop
  for (int i = 0; i < MAX_BOSS_BULLETS; i++) {
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3301      	adds	r3, #1
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b63      	cmp	r3, #99	@ 0x63
 8001828:	dda2      	ble.n	8001770 <check_boss_bullet_collision_with_player+0xc>
    }
  }
}
 800182a:	bf00      	nop
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000274 	.word	0x20000274
 8001838:	20000004 	.word	0x20000004
 800183c:	20000008 	.word	0x20000008
 8001840:	080066a0 	.word	0x080066a0
 8001844:	0800600c 	.word	0x0800600c

08001848 <draw_bullet>:

void draw_bullet(Bullet *b) {
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af02      	add	r7, sp, #8
 800184e:	6078      	str	r0, [r7, #4]
  ILI9341_DrawRectangle(b->x, b->y,BULLET_HEIGHT , BULLET_WIDTH, RED);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	b298      	uxth	r0, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	b299      	uxth	r1, r3
 800185c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	2304      	movs	r3, #4
 8001864:	2208      	movs	r2, #8
 8001866:	f7ff fb07 	bl	8000e78 <ILI9341_DrawRectangle>
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <erase_bullet>:

void erase_bullet(Bullet *b) {
 8001872:	b580      	push	{r7, lr}
 8001874:	b084      	sub	sp, #16
 8001876:	af02      	add	r7, sp, #8
 8001878:	6078      	str	r0, [r7, #4]
  ILI9341_DrawRectangle(b->x, b->y, BULLET_HEIGHT, BULLET_WIDTH, WHITE);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	b298      	uxth	r0, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	b299      	uxth	r1, r3
 8001886:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	2304      	movs	r3, #4
 800188e:	2208      	movs	r2, #8
 8001890:	f7ff faf2 	bl	8000e78 <ILI9341_DrawRectangle>
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <shoot_bullet>:

void shoot_bullet() {
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
  for (int i = 0; i < MAX_BULLETS; i++) {
 80018a2:	2300      	movs	r3, #0
 80018a4:	607b      	str	r3, [r7, #4]
 80018a6:	e02f      	b.n	8001908 <shoot_bullet+0x6c>
    if (!bullets[i].active) {
 80018a8:	491c      	ldr	r1, [pc, #112]	@ (800191c <shoot_bullet+0x80>)
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	4613      	mov	r3, r2
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	4413      	add	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	440b      	add	r3, r1
 80018b6:	3308      	adds	r3, #8
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d121      	bne.n	8001902 <shoot_bullet+0x66>
      bullets[i].x = plane_x + PLANE_WIDTH;
 80018be:	4b18      	ldr	r3, [pc, #96]	@ (8001920 <shoot_bullet+0x84>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f103 0114 	add.w	r1, r3, #20
 80018c6:	4815      	ldr	r0, [pc, #84]	@ (800191c <shoot_bullet+0x80>)
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	4613      	mov	r3, r2
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	4413      	add	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4403      	add	r3, r0
 80018d4:	6019      	str	r1, [r3, #0]
      bullets[i].y = plane_y;
 80018d6:	4b13      	ldr	r3, [pc, #76]	@ (8001924 <shoot_bullet+0x88>)
 80018d8:	6819      	ldr	r1, [r3, #0]
 80018da:	4810      	ldr	r0, [pc, #64]	@ (800191c <shoot_bullet+0x80>)
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	4613      	mov	r3, r2
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	4413      	add	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4403      	add	r3, r0
 80018e8:	3304      	adds	r3, #4
 80018ea:	6019      	str	r1, [r3, #0]
      bullets[i].active = 1;
 80018ec:	490b      	ldr	r1, [pc, #44]	@ (800191c <shoot_bullet+0x80>)
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	4613      	mov	r3, r2
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	4413      	add	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	3308      	adds	r3, #8
 80018fc:	2201      	movs	r2, #1
 80018fe:	601a      	str	r2, [r3, #0]
      break;
 8001900:	e006      	b.n	8001910 <shoot_bullet+0x74>
  for (int i = 0; i < MAX_BULLETS; i++) {
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3301      	adds	r3, #1
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b04      	cmp	r3, #4
 800190c:	ddcc      	ble.n	80018a8 <shoot_bullet+0xc>
    }
  }
}
 800190e:	bf00      	nop
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	20000224 	.word	0x20000224
 8001920:	20000004 	.word	0x20000004
 8001924:	20000008 	.word	0x20000008

08001928 <update_bullets>:

void update_bullets() {
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
  for (int i = 0; i < MAX_BULLETS; i++) {
 800192e:	2300      	movs	r3, #0
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	e048      	b.n	80019c6 <update_bullets+0x9e>
    if (bullets[i].active) {
 8001934:	4928      	ldr	r1, [pc, #160]	@ (80019d8 <update_bullets+0xb0>)
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	4613      	mov	r3, r2
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	4413      	add	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	3308      	adds	r3, #8
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d03a      	beq.n	80019c0 <update_bullets+0x98>
      erase_bullet(&bullets[i]);
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	4413      	add	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4a20      	ldr	r2, [pc, #128]	@ (80019d8 <update_bullets+0xb0>)
 8001956:	4413      	add	r3, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff8a 	bl	8001872 <erase_bullet>
      bullets[i].x += 5;
 800195e:	491e      	ldr	r1, [pc, #120]	@ (80019d8 <update_bullets+0xb0>)
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	4613      	mov	r3, r2
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	4413      	add	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	440b      	add	r3, r1
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	1d59      	adds	r1, r3, #5
 8001970:	4819      	ldr	r0, [pc, #100]	@ (80019d8 <update_bullets+0xb0>)
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	4613      	mov	r3, r2
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4413      	add	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4403      	add	r3, r0
 800197e:	6019      	str	r1, [r3, #0]
      if (bullets[i].x >= 320) {
 8001980:	4915      	ldr	r1, [pc, #84]	@ (80019d8 <update_bullets+0xb0>)
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	4613      	mov	r3, r2
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	4413      	add	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	440b      	add	r3, r1
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001994:	db0a      	blt.n	80019ac <update_bullets+0x84>
        bullets[i].active = 0;
 8001996:	4910      	ldr	r1, [pc, #64]	@ (80019d8 <update_bullets+0xb0>)
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	4613      	mov	r3, r2
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	4413      	add	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	440b      	add	r3, r1
 80019a4:	3308      	adds	r3, #8
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	e009      	b.n	80019c0 <update_bullets+0x98>
      } else {
        draw_bullet(&bullets[i]);
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	4613      	mov	r3, r2
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	4413      	add	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4a08      	ldr	r2, [pc, #32]	@ (80019d8 <update_bullets+0xb0>)
 80019b8:	4413      	add	r3, r2
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff ff44 	bl	8001848 <draw_bullet>
  for (int i = 0; i < MAX_BULLETS; i++) {
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3301      	adds	r3, #1
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b04      	cmp	r3, #4
 80019ca:	ddb3      	ble.n	8001934 <update_bullets+0xc>
      }
    }
  }
}
 80019cc:	bf00      	nop
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000224 	.word	0x20000224

080019dc <draw_score>:

void draw_score(int point) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08a      	sub	sp, #40	@ 0x28
 80019e0:	af02      	add	r7, sp, #8
 80019e2:	6078      	str	r0, [r7, #4]
    char buffer[20];
    sprintf(buffer, "Score: %d", point);
 80019e4:	f107 030c 	add.w	r3, r7, #12
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	490e      	ldr	r1, [pc, #56]	@ (8001a24 <draw_score+0x48>)
 80019ec:	4618      	mov	r0, r3
 80019ee:	f003 fa17 	bl	8004e20 <siprintf>

    // Xóa vùng cũ (giả sử vùng rộng 120px, cao 18px)
    ILI9341_DrawRectangle(0, 0, 120, 18, WHITE);
 80019f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	2312      	movs	r3, #18
 80019fa:	2278      	movs	r2, #120	@ 0x78
 80019fc:	2100      	movs	r1, #0
 80019fe:	2000      	movs	r0, #0
 8001a00:	f7ff fa3a 	bl	8000e78 <ILI9341_DrawRectangle>

    // Vẽ chuỗi mới (x=0, y=0), dùng font 11x18
    ILI9341_DrawText(buffer, Arial_Narrow8x12, 0, 0, BLACK, WHITE);
 8001a04:	f107 000c 	add.w	r0, r7, #12
 8001a08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a0c:	9301      	str	r3, [sp, #4]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	2300      	movs	r3, #0
 8001a14:	2200      	movs	r2, #0
 8001a16:	4904      	ldr	r1, [pc, #16]	@ (8001a28 <draw_score+0x4c>)
 8001a18:	f7fe fe48 	bl	80006ac <ILI9341_DrawText>
}
 8001a1c:	bf00      	nop
 8001a1e:	3720      	adds	r7, #32
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	08006018 	.word	0x08006018
 8001a28:	0800603c 	.word	0x0800603c

08001a2c <check_bullet_enemy_collision>:

void check_bullet_enemy_collision() { //hàm check máy bay chạm đạn
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
  for (int i = 0; i < MAX_BULLETS; i++) {
 8001a32:	2300      	movs	r3, #0
 8001a34:	607b      	str	r3, [r7, #4]
 8001a36:	e0df      	b.n	8001bf8 <check_bullet_enemy_collision+0x1cc>
    if (!bullets[i].active) continue;
 8001a38:	4974      	ldr	r1, [pc, #464]	@ (8001c0c <check_bullet_enemy_collision+0x1e0>)
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	4413      	add	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	440b      	add	r3, r1
 8001a46:	3308      	adds	r3, #8
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f000 80d0 	beq.w	8001bf0 <check_bullet_enemy_collision+0x1c4>
    for (int j = 0; j < current_enemy_count; j++) {
 8001a50:	2300      	movs	r3, #0
 8001a52:	603b      	str	r3, [r7, #0]
 8001a54:	e0c5      	b.n	8001be2 <check_bullet_enemy_collision+0x1b6>
      if (!enemies[j].active) continue;
 8001a56:	496e      	ldr	r1, [pc, #440]	@ (8001c10 <check_bullet_enemy_collision+0x1e4>)
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4413      	add	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	440b      	add	r3, r1
 8001a64:	3308      	adds	r3, #8
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 80b6 	beq.w	8001bda <check_bullet_enemy_collision+0x1ae>

      // Kiểm tra va chạm hình chữ nhật
      if (bullets[i].x + BULLET_HEIGHT > enemies[j].x &&
 8001a6e:	4967      	ldr	r1, [pc, #412]	@ (8001c0c <check_bullet_enemy_collision+0x1e0>)
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	4613      	mov	r3, r2
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	4413      	add	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	440b      	add	r3, r1
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	1dd9      	adds	r1, r3, #7
 8001a80:	4863      	ldr	r0, [pc, #396]	@ (8001c10 <check_bullet_enemy_collision+0x1e4>)
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	4613      	mov	r3, r2
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	4413      	add	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4403      	add	r3, r0
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4299      	cmp	r1, r3
 8001a92:	f2c0 80a3 	blt.w	8001bdc <check_bullet_enemy_collision+0x1b0>
          bullets[i].x < enemies[j].x + PLANE_WIDTH &&
 8001a96:	495e      	ldr	r1, [pc, #376]	@ (8001c10 <check_bullet_enemy_collision+0x1e4>)
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4413      	add	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f103 0113 	add.w	r1, r3, #19
 8001aaa:	4858      	ldr	r0, [pc, #352]	@ (8001c0c <check_bullet_enemy_collision+0x1e0>)
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	4413      	add	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4403      	add	r3, r0
 8001ab8:	681b      	ldr	r3, [r3, #0]
      if (bullets[i].x + BULLET_HEIGHT > enemies[j].x &&
 8001aba:	4299      	cmp	r1, r3
 8001abc:	f2c0 808e 	blt.w	8001bdc <check_bullet_enemy_collision+0x1b0>
          bullets[i].y + BULLET_WIDTH > enemies[j].y &&
 8001ac0:	4952      	ldr	r1, [pc, #328]	@ (8001c0c <check_bullet_enemy_collision+0x1e0>)
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	4413      	add	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	440b      	add	r3, r1
 8001ace:	3304      	adds	r3, #4
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	1cd9      	adds	r1, r3, #3
 8001ad4:	484e      	ldr	r0, [pc, #312]	@ (8001c10 <check_bullet_enemy_collision+0x1e4>)
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	4413      	add	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4403      	add	r3, r0
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	681b      	ldr	r3, [r3, #0]
          bullets[i].x < enemies[j].x + PLANE_WIDTH &&
 8001ae6:	4299      	cmp	r1, r3
 8001ae8:	db78      	blt.n	8001bdc <check_bullet_enemy_collision+0x1b0>
          bullets[i].y < enemies[j].y + PLANE_HEIGHT) {
 8001aea:	4949      	ldr	r1, [pc, #292]	@ (8001c10 <check_bullet_enemy_collision+0x1e4>)
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	4613      	mov	r3, r2
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	4413      	add	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	440b      	add	r3, r1
 8001af8:	3304      	adds	r3, #4
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f103 0113 	add.w	r1, r3, #19
 8001b00:	4842      	ldr	r0, [pc, #264]	@ (8001c0c <check_bullet_enemy_collision+0x1e0>)
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	4613      	mov	r3, r2
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	4413      	add	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4403      	add	r3, r0
 8001b0e:	3304      	adds	r3, #4
 8001b10:	681b      	ldr	r3, [r3, #0]
          bullets[i].y + BULLET_WIDTH > enemies[j].y &&
 8001b12:	4299      	cmp	r1, r3
 8001b14:	db62      	blt.n	8001bdc <check_bullet_enemy_collision+0x1b0>

        // Xóa máy bay địch và đạn
        erase_replane(enemies[j].x, enemies[j].y);
 8001b16:	493e      	ldr	r1, [pc, #248]	@ (8001c10 <check_bullet_enemy_collision+0x1e4>)
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	4413      	add	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	440b      	add	r3, r1
 8001b24:	6818      	ldr	r0, [r3, #0]
 8001b26:	493a      	ldr	r1, [pc, #232]	@ (8001c10 <check_bullet_enemy_collision+0x1e4>)
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	4413      	add	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	440b      	add	r3, r1
 8001b34:	3304      	adds	r3, #4
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f7ff fb35 	bl	80011a8 <erase_replane>
        erase_bullet(&bullets[i]);
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	4613      	mov	r3, r2
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4413      	add	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4a30      	ldr	r2, [pc, #192]	@ (8001c0c <check_bullet_enemy_collision+0x1e0>)
 8001b4a:	4413      	add	r3, r2
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fe90 	bl	8001872 <erase_bullet>
        bullets[i].active = 0;
 8001b52:	492e      	ldr	r1, [pc, #184]	@ (8001c0c <check_bullet_enemy_collision+0x1e0>)
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	4613      	mov	r3, r2
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	4413      	add	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	440b      	add	r3, r1
 8001b60:	3308      	adds	r3, #8
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
        enemies[j].active = 0;
 8001b66:	492a      	ldr	r1, [pc, #168]	@ (8001c10 <check_bullet_enemy_collision+0x1e4>)
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	4413      	add	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	440b      	add	r3, r1
 8001b74:	3308      	adds	r3, #8
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]

        // (Tùy chọn) Reset lại địch sau khi bị bắn
        enemies[j].x = 320;
 8001b7a:	4925      	ldr	r1, [pc, #148]	@ (8001c10 <check_bullet_enemy_collision+0x1e4>)
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	4413      	add	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	440b      	add	r3, r1
 8001b88:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001b8c:	601a      	str	r2, [r3, #0]
        enemies[j].y = rand() % 100;
 8001b8e:	f003 f847 	bl	8004c20 <rand>
 8001b92:	4603      	mov	r3, r0
 8001b94:	4a1f      	ldr	r2, [pc, #124]	@ (8001c14 <check_bullet_enemy_collision+0x1e8>)
 8001b96:	fb82 1203 	smull	r1, r2, r2, r3
 8001b9a:	1151      	asrs	r1, r2, #5
 8001b9c:	17da      	asrs	r2, r3, #31
 8001b9e:	1a8a      	subs	r2, r1, r2
 8001ba0:	2164      	movs	r1, #100	@ 0x64
 8001ba2:	fb01 f202 	mul.w	r2, r1, r2
 8001ba6:	1a9a      	subs	r2, r3, r2
 8001ba8:	4819      	ldr	r0, [pc, #100]	@ (8001c10 <check_bullet_enemy_collision+0x1e4>)
 8001baa:	6839      	ldr	r1, [r7, #0]
 8001bac:	460b      	mov	r3, r1
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	440b      	add	r3, r1
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4403      	add	r3, r0
 8001bb6:	3304      	adds	r3, #4
 8001bb8:	601a      	str	r2, [r3, #0]
        enemies[j].active = 1;
 8001bba:	4915      	ldr	r1, [pc, #84]	@ (8001c10 <check_bullet_enemy_collision+0x1e4>)
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	4413      	add	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	3308      	adds	r3, #8
 8001bca:	2201      	movs	r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]

        //cộng điểm
        point += 10;
 8001bce:	4b12      	ldr	r3, [pc, #72]	@ (8001c18 <check_bullet_enemy_collision+0x1ec>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	330a      	adds	r3, #10
 8001bd4:	4a10      	ldr	r2, [pc, #64]	@ (8001c18 <check_bullet_enemy_collision+0x1ec>)
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	e000      	b.n	8001bdc <check_bullet_enemy_collision+0x1b0>
      if (!enemies[j].active) continue;
 8001bda:	bf00      	nop
    for (int j = 0; j < current_enemy_count; j++) {
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	3301      	adds	r3, #1
 8001be0:	603b      	str	r3, [r7, #0]
 8001be2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c1c <check_bullet_enemy_collision+0x1f0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	f6ff af34 	blt.w	8001a56 <check_bullet_enemy_collision+0x2a>
 8001bee:	e000      	b.n	8001bf2 <check_bullet_enemy_collision+0x1c6>
    if (!bullets[i].active) continue;
 8001bf0:	bf00      	nop
  for (int i = 0; i < MAX_BULLETS; i++) {
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	f77f af1c 	ble.w	8001a38 <check_bullet_enemy_collision+0xc>

      }
    }
  }
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000224 	.word	0x20000224
 8001c10:	20000170 	.word	0x20000170
 8001c14:	51eb851f 	.word	0x51eb851f
 8001c18:	20000728 	.word	0x20000728
 8001c1c:	2000000c 	.word	0x2000000c

08001c20 <check_collision>:

int check_collision(int x1, int y1, int w1, int h1,
                    int x2, int y2, int w2, int h2) {
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
 8001c2c:	603b      	str	r3, [r7, #0]
    return !(x1 + w1 <= x2 ||  // máy bay 1 ở hoàn toàn bên trái máy bay 2
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4413      	add	r3, r2
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	da1e      	bge.n	8001c78 <check_collision+0x58>
             x2 + w2 <= x1 ||  // máy bay 2 ở hoàn toàn bên trái máy bay 1
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
 8001c3e:	4413      	add	r3, r2
    return !(x1 + w1 <= x2 ||  // máy bay 1 ở hoàn toàn bên trái máy bay 2
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	da18      	bge.n	8001c78 <check_collision+0x58>
             y1 + h1/2 <= y2 ||  // máy bay 1 ở hoàn toàn trên máy bay 2
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	0fda      	lsrs	r2, r3, #31
 8001c4a:	4413      	add	r3, r2
 8001c4c:	105b      	asrs	r3, r3, #1
 8001c4e:	461a      	mov	r2, r3
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	4413      	add	r3, r2
             x2 + w2 <= x1 ||  // máy bay 2 ở hoàn toàn bên trái máy bay 1
 8001c54:	69fa      	ldr	r2, [r7, #28]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	da0e      	bge.n	8001c78 <check_collision+0x58>
             y1 - h1/2 >= y2+h2);   // máy bay 2 ở hoàn toàn trên máy bay 1
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	0fda      	lsrs	r2, r3, #31
 8001c5e:	4413      	add	r3, r2
 8001c60:	105b      	asrs	r3, r3, #1
 8001c62:	425b      	negs	r3, r3
 8001c64:	461a      	mov	r2, r3
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	441a      	add	r2, r3
 8001c6a:	69f9      	ldr	r1, [r7, #28]
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6e:	440b      	add	r3, r1
    return !(x1 + w1 <= x2 ||  // máy bay 1 ở hoàn toàn bên trái máy bay 2
 8001c70:	429a      	cmp	r2, r3
 8001c72:	da01      	bge.n	8001c78 <check_collision+0x58>
 8001c74:	2301      	movs	r3, #1
 8001c76:	e000      	b.n	8001c7a <check_collision+0x5a>
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
	...

08001c88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c88:	b5b0      	push	{r4, r5, r7, lr}
 8001c8a:	b098      	sub	sp, #96	@ 0x60
 8001c8c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c8e:	f000 fd13 	bl	80026b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c92:	f000 f941 	bl	8001f18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001c96:	f000 fa2d 	bl	80020f4 <MX_GPIO_Init>
    MX_DMA_Init();
 8001c9a:	f000 fa0b 	bl	80020b4 <MX_DMA_Init>
    MX_RTC_Init();
 8001c9e:	f000 f9ad 	bl	8001ffc <MX_RTC_Init>
    MX_SPI5_Init();
 8001ca2:	f000 f9d1 	bl	8002048 <MX_SPI5_Init>
    /* USER CODE BEGIN 2 */
    ILI9341_Init();
 8001ca6:	f7fe fe63 	bl	8000970 <ILI9341_Init>
    ILI9341_FillScreen(WHITE);
 8001caa:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001cae:	f7ff f857 	bl	8000d60 <ILI9341_FillScreen>
    ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 8001cb2:	2003      	movs	r0, #3
 8001cb4:	f7fe ff66 	bl	8000b84 <ILI9341_SetRotation>

    srand(time(NULL));
 8001cb8:	2000      	movs	r0, #0
 8001cba:	f003 f91f 	bl	8004efc <time>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f002 ff7d 	bl	8004bc4 <srand>

    /* USER CODE END 2 */
    /* Infinite loop */
    for (int i = 0; i < MAX_BULLETS; i++) bullets[i].active = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cce:	e00c      	b.n	8001cea <main+0x62>
 8001cd0:	4984      	ldr	r1, [pc, #528]	@ (8001ee4 <main+0x25c>)
 8001cd2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	3308      	adds	r3, #8
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	ddef      	ble.n	8001cd0 <main+0x48>

     draw_plane(plane_x, plane_y);
 8001cf0:	4b7d      	ldr	r3, [pc, #500]	@ (8001ee8 <main+0x260>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a7d      	ldr	r2, [pc, #500]	@ (8001eec <main+0x264>)
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	4611      	mov	r1, r2
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff f97d 	bl	8000ffa <draw_plane>
     init_enemies(); // ← Thêm dòng này
 8001d00:	f7ff fa0a 	bl	8001118 <init_enemies>
     draw_score(point);
 8001d04:	4b7a      	ldr	r3, [pc, #488]	@ (8001ef0 <main+0x268>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff fe67 	bl	80019dc <draw_score>


     while (1) {
    	 draw_score(point);
 8001d0e:	4b78      	ldr	r3, [pc, #480]	@ (8001ef0 <main+0x268>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fe62 	bl	80019dc <draw_score>
       update_bullets();
 8001d18:	f7ff fe06 	bl	8001928 <update_bullets>
       update_enemies(); // ← Thêm dòng này
 8001d1c:	f7ff fa58 	bl	80011d0 <update_enemies>
       for (int i = 0; i <current_enemy_count ; i++) {
 8001d20:	2300      	movs	r3, #0
 8001d22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d24:	e042      	b.n	8001dac <main+0x124>
         if (enemies[i].active && check_collision(plane_x, plane_y, PLANE_WIDTH, PLANE_HEIGHT,
 8001d26:	4973      	ldr	r1, [pc, #460]	@ (8001ef4 <main+0x26c>)
 8001d28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	4413      	add	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	440b      	add	r3, r1
 8001d34:	3308      	adds	r3, #8
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d034      	beq.n	8001da6 <main+0x11e>
 8001d3c:	4b6a      	ldr	r3, [pc, #424]	@ (8001ee8 <main+0x260>)
 8001d3e:	6818      	ldr	r0, [r3, #0]
 8001d40:	4b6a      	ldr	r3, [pc, #424]	@ (8001eec <main+0x264>)
 8001d42:	681c      	ldr	r4, [r3, #0]
 8001d44:	496b      	ldr	r1, [pc, #428]	@ (8001ef4 <main+0x26c>)
 8001d46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d48:	4613      	mov	r3, r2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4413      	add	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	6819      	ldr	r1, [r3, #0]
 8001d54:	4d67      	ldr	r5, [pc, #412]	@ (8001ef4 <main+0x26c>)
 8001d56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d58:	4613      	mov	r3, r2
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	4413      	add	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	442b      	add	r3, r5
 8001d62:	3304      	adds	r3, #4
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2214      	movs	r2, #20
 8001d68:	9203      	str	r2, [sp, #12]
 8001d6a:	2214      	movs	r2, #20
 8001d6c:	9202      	str	r2, [sp, #8]
 8001d6e:	9301      	str	r3, [sp, #4]
 8001d70:	9100      	str	r1, [sp, #0]
 8001d72:	2314      	movs	r3, #20
 8001d74:	2214      	movs	r2, #20
 8001d76:	4621      	mov	r1, r4
 8001d78:	f7ff ff52 	bl	8001c20 <check_collision>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d011      	beq.n	8001da6 <main+0x11e>
                                                  enemies[i].x, enemies[i].y, PLANE_WIDTH, PLANE_HEIGHT)) {
           // Hiển thị "Game Over"
           ILI9341_FillScreen(WHITE);
 8001d82:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001d86:	f7fe ffeb 	bl	8000d60 <ILI9341_FillScreen>
           ILI9341_DrawText("GAME OVER", FONT3, 50, 120, RED, WHITE);
 8001d8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d8e:	9301      	str	r3, [sp, #4]
 8001d90:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	2378      	movs	r3, #120	@ 0x78
 8001d98:	2232      	movs	r2, #50	@ 0x32
 8001d9a:	4957      	ldr	r1, [pc, #348]	@ (8001ef8 <main+0x270>)
 8001d9c:	4857      	ldr	r0, [pc, #348]	@ (8001efc <main+0x274>)
 8001d9e:	f7fe fc85 	bl	80006ac <ILI9341_DrawText>
           while (1); // Dừng game tại đây
 8001da2:	bf00      	nop
 8001da4:	e7fd      	b.n	8001da2 <main+0x11a>
       for (int i = 0; i <current_enemy_count ; i++) {
 8001da6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001da8:	3301      	adds	r3, #1
 8001daa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001dac:	4b54      	ldr	r3, [pc, #336]	@ (8001f00 <main+0x278>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001db2:	429a      	cmp	r2, r3
 8001db4:	dbb7      	blt.n	8001d26 <main+0x9e>
         }
       }
       if (point >= level * 100 && current_enemy_count + 2 <= 10) {
 8001db6:	4b53      	ldr	r3, [pc, #332]	@ (8001f04 <main+0x27c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2264      	movs	r2, #100	@ 0x64
 8001dbc:	fb03 f202 	mul.w	r2, r3, r2
 8001dc0:	4b4b      	ldr	r3, [pc, #300]	@ (8001ef0 <main+0x268>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	dc2f      	bgt.n	8001e28 <main+0x1a0>
 8001dc8:	4b4d      	ldr	r3, [pc, #308]	@ (8001f00 <main+0x278>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b08      	cmp	r3, #8
 8001dce:	dc2b      	bgt.n	8001e28 <main+0x1a0>
                   level++;
 8001dd0:	4b4c      	ldr	r3, [pc, #304]	@ (8001f04 <main+0x27c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	4a4b      	ldr	r2, [pc, #300]	@ (8001f04 <main+0x27c>)
 8001dd8:	6013      	str	r3, [r2, #0]
                   current_enemy_count += 2;
 8001dda:	4b49      	ldr	r3, [pc, #292]	@ (8001f00 <main+0x278>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	3302      	adds	r3, #2
 8001de0:	4a47      	ldr	r2, [pc, #284]	@ (8001f00 <main+0x278>)
 8001de2:	6013      	str	r3, [r2, #0]
                   init_enemies();
 8001de4:	f7ff f998 	bl	8001118 <init_enemies>

                   // Hiển thị thông báo level up
                   ILI9341_FillScreen(WHITE);
 8001de8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001dec:	f7fe ffb8 	bl	8000d60 <ILI9341_FillScreen>
                   char msg[30];
                   sprintf(msg, "LEVEL %d", level);
 8001df0:	4b44      	ldr	r3, [pc, #272]	@ (8001f04 <main+0x27c>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001df8:	4943      	ldr	r1, [pc, #268]	@ (8001f08 <main+0x280>)
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f003 f810 	bl	8004e20 <siprintf>
                   ILI9341_DrawText(msg, FONT3, 50, 120, BLUE, WHITE);
 8001e00:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001e04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e08:	9301      	str	r3, [sp, #4]
 8001e0a:	231f      	movs	r3, #31
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	2378      	movs	r3, #120	@ 0x78
 8001e10:	2232      	movs	r2, #50	@ 0x32
 8001e12:	4939      	ldr	r1, [pc, #228]	@ (8001ef8 <main+0x270>)
 8001e14:	f7fe fc4a 	bl	80006ac <ILI9341_DrawText>
                   HAL_Delay(1000);  // Hiển thị 1 giây
 8001e18:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e1c:	f000 fcbe 	bl	800279c <HAL_Delay>
                   ILI9341_FillScreen(WHITE);  // Dọn lại màn hình
 8001e20:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001e24:	f7fe ff9c 	bl	8000d60 <ILI9341_FillScreen>
               }
               if(level == 3){
 8001e28:	4b36      	ldr	r3, [pc, #216]	@ (8001f04 <main+0x27c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2b03      	cmp	r3, #3
 8001e2e:	d129      	bne.n	8001e84 <main+0x1fc>
              	 // Hiển thị thông báo level up
				  ILI9341_FillScreen(WHITE);
 8001e30:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001e34:	f7fe ff94 	bl	8000d60 <ILI9341_FillScreen>
				  char msg[30];
				  sprintf(msg, "FINAL BOSS", level);
 8001e38:	4b32      	ldr	r3, [pc, #200]	@ (8001f04 <main+0x27c>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	1d3b      	adds	r3, r7, #4
 8001e3e:	4933      	ldr	r1, [pc, #204]	@ (8001f0c <main+0x284>)
 8001e40:	4618      	mov	r0, r3
 8001e42:	f002 ffed 	bl	8004e20 <siprintf>
				  ILI9341_DrawText(msg, FONT3, 50, 120, BLUE, WHITE);
 8001e46:	1d38      	adds	r0, r7, #4
 8001e48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e4c:	9301      	str	r3, [sp, #4]
 8001e4e:	231f      	movs	r3, #31
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	2378      	movs	r3, #120	@ 0x78
 8001e54:	2232      	movs	r2, #50	@ 0x32
 8001e56:	4928      	ldr	r1, [pc, #160]	@ (8001ef8 <main+0x270>)
 8001e58:	f7fe fc28 	bl	80006ac <ILI9341_DrawText>
				  HAL_Delay(1000);  // Hiển thị 1 giây
 8001e5c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e60:	f000 fc9c 	bl	800279c <HAL_Delay>
				  ILI9341_FillScreen(WHITE);
 8001e64:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001e68:	f7fe ff7a 	bl	8000d60 <ILI9341_FillScreen>
				  init_boss();
 8001e6c:	f7ff fa56 	bl	800131c <init_boss>
				  while(1){
				  update_boss();
 8001e70:	f7ff fb8c 	bl	800158c <update_boss>
				  update_boss_bullets();
 8001e74:	f7ff fae4 	bl	8001440 <update_boss_bullets>
				  check_bullet_boss_collision();
 8001e78:	f7ff fbbe 	bl	80015f8 <check_bullet_boss_collision>
				  check_boss_bullet_collision_with_player();
 8001e7c:	f7ff fc72 	bl	8001764 <check_boss_bullet_collision_with_player>
				  update_boss();
 8001e80:	bf00      	nop
 8001e82:	e7f5      	b.n	8001e70 <main+0x1e8>
				  }
               }
       check_bullet_enemy_collision();
 8001e84:	f7ff fdd2 	bl	8001a2c <check_bullet_enemy_collision>
       if (plane_move_flag) {
 8001e88:	4b21      	ldr	r3, [pc, #132]	@ (8001f10 <main+0x288>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d024      	beq.n	8001eda <main+0x252>
           plane_move_flag = 0;
 8001e90:	4b1f      	ldr	r3, [pc, #124]	@ (8001f10 <main+0x288>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
           int old_y = plane_y;
 8001e96:	4b15      	ldr	r3, [pc, #84]	@ (8001eec <main+0x264>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	647b      	str	r3, [r7, #68]	@ 0x44
           plane_y = (plane_y + 5) % 220;
 8001e9c:	4b13      	ldr	r3, [pc, #76]	@ (8001eec <main+0x264>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	1d5a      	adds	r2, r3, #5
 8001ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f14 <main+0x28c>)
 8001ea4:	fb83 1302 	smull	r1, r3, r3, r2
 8001ea8:	10d9      	asrs	r1, r3, #3
 8001eaa:	17d3      	asrs	r3, r2, #31
 8001eac:	1acb      	subs	r3, r1, r3
 8001eae:	21dc      	movs	r1, #220	@ 0xdc
 8001eb0:	fb01 f303 	mul.w	r3, r1, r3
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	4a0d      	ldr	r2, [pc, #52]	@ (8001eec <main+0x264>)
 8001eb8:	6013      	str	r3, [r2, #0]
           erase_plane(plane_x, old_y);
 8001eba:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee8 <main+0x260>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff f8d6 	bl	8001072 <erase_plane>
           draw_plane(plane_x, plane_y);
 8001ec6:	4b08      	ldr	r3, [pc, #32]	@ (8001ee8 <main+0x260>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a08      	ldr	r2, [pc, #32]	@ (8001eec <main+0x264>)
 8001ecc:	6812      	ldr	r2, [r2, #0]
 8001ece:	4611      	mov	r1, r2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff f892 	bl	8000ffa <draw_plane>
           shoot_bullet();
 8001ed6:	f7ff fce1 	bl	800189c <shoot_bullet>
       }
       HAL_Delay(30); // Điều chỉnh tốc độ trò chơi
 8001eda:	201e      	movs	r0, #30
 8001edc:	f000 fc5e 	bl	800279c <HAL_Delay>
    	 draw_score(point);
 8001ee0:	e715      	b.n	8001d0e <main+0x86>
 8001ee2:	bf00      	nop
 8001ee4:	20000224 	.word	0x20000224
 8001ee8:	20000004 	.word	0x20000004
 8001eec:	20000008 	.word	0x20000008
 8001ef0:	20000728 	.word	0x20000728
 8001ef4:	20000170 	.word	0x20000170
 8001ef8:	080066a0 	.word	0x080066a0
 8001efc:	0800600c 	.word	0x0800600c
 8001f00:	2000000c 	.word	0x2000000c
 8001f04:	20000010 	.word	0x20000010
 8001f08:	08006024 	.word	0x08006024
 8001f0c:	08006030 	.word	0x08006030
 8001f10:	20000724 	.word	0x20000724
 8001f14:	094f2095 	.word	0x094f2095

08001f18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b094      	sub	sp, #80	@ 0x50
 8001f1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f1e:	f107 0320 	add.w	r3, r7, #32
 8001f22:	2230      	movs	r2, #48	@ 0x30
 8001f24:	2100      	movs	r1, #0
 8001f26:	4618      	mov	r0, r3
 8001f28:	f002 ffdf 	bl	8004eea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f2c:	f107 030c 	add.w	r3, r7, #12
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60bb      	str	r3, [r7, #8]
 8001f40:	4b2c      	ldr	r3, [pc, #176]	@ (8001ff4 <SystemClock_Config+0xdc>)
 8001f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f44:	4a2b      	ldr	r2, [pc, #172]	@ (8001ff4 <SystemClock_Config+0xdc>)
 8001f46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f4c:	4b29      	ldr	r3, [pc, #164]	@ (8001ff4 <SystemClock_Config+0xdc>)
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f58:	2300      	movs	r3, #0
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	4b26      	ldr	r3, [pc, #152]	@ (8001ff8 <SystemClock_Config+0xe0>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a25      	ldr	r2, [pc, #148]	@ (8001ff8 <SystemClock_Config+0xe0>)
 8001f62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	4b23      	ldr	r3, [pc, #140]	@ (8001ff8 <SystemClock_Config+0xe0>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f70:	607b      	str	r3, [r7, #4]
 8001f72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001f74:	2309      	movs	r3, #9
 8001f76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f78:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f7c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f82:	2302      	movs	r3, #2
 8001f84:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f86:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f8c:	2304      	movs	r3, #4
 8001f8e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001f90:	23b4      	movs	r3, #180	@ 0xb4
 8001f92:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f94:	2302      	movs	r3, #2
 8001f96:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f98:	2304      	movs	r3, #4
 8001f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f9c:	f107 0320 	add.w	r3, r7, #32
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f001 faf5 	bl	8003590 <HAL_RCC_OscConfig>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001fac:	f000 f962 	bl	8002274 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001fb0:	f001 fa9e 	bl	80034f0 <HAL_PWREx_EnableOverDrive>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001fba:	f000 f95b 	bl	8002274 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fbe:	230f      	movs	r3, #15
 8001fc0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001fca:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001fce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001fd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fd4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001fd6:	f107 030c 	add.w	r3, r7, #12
 8001fda:	2105      	movs	r1, #5
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f001 fd4f 	bl	8003a80 <HAL_RCC_ClockConfig>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001fe8:	f000 f944 	bl	8002274 <Error_Handler>
  }
}
 8001fec:	bf00      	nop
 8001fee:	3750      	adds	r7, #80	@ 0x50
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40007000 	.word	0x40007000

08001ffc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002000:	4b0f      	ldr	r3, [pc, #60]	@ (8002040 <MX_RTC_Init+0x44>)
 8002002:	4a10      	ldr	r2, [pc, #64]	@ (8002044 <MX_RTC_Init+0x48>)
 8002004:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002006:	4b0e      	ldr	r3, [pc, #56]	@ (8002040 <MX_RTC_Init+0x44>)
 8002008:	2200      	movs	r2, #0
 800200a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800200c:	4b0c      	ldr	r3, [pc, #48]	@ (8002040 <MX_RTC_Init+0x44>)
 800200e:	227f      	movs	r2, #127	@ 0x7f
 8002010:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002012:	4b0b      	ldr	r3, [pc, #44]	@ (8002040 <MX_RTC_Init+0x44>)
 8002014:	22ff      	movs	r2, #255	@ 0xff
 8002016:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002018:	4b09      	ldr	r3, [pc, #36]	@ (8002040 <MX_RTC_Init+0x44>)
 800201a:	2200      	movs	r2, #0
 800201c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800201e:	4b08      	ldr	r3, [pc, #32]	@ (8002040 <MX_RTC_Init+0x44>)
 8002020:	2200      	movs	r2, #0
 8002022:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002024:	4b06      	ldr	r3, [pc, #24]	@ (8002040 <MX_RTC_Init+0x44>)
 8002026:	2200      	movs	r2, #0
 8002028:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800202a:	4805      	ldr	r0, [pc, #20]	@ (8002040 <MX_RTC_Init+0x44>)
 800202c:	f002 f8d4 	bl	80041d8 <HAL_RTC_Init>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002036:	f000 f91d 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000098 	.word	0x20000098
 8002044:	40002800 	.word	0x40002800

08002048 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800204c:	4b17      	ldr	r3, [pc, #92]	@ (80020ac <MX_SPI5_Init+0x64>)
 800204e:	4a18      	ldr	r2, [pc, #96]	@ (80020b0 <MX_SPI5_Init+0x68>)
 8002050:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002052:	4b16      	ldr	r3, [pc, #88]	@ (80020ac <MX_SPI5_Init+0x64>)
 8002054:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002058:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800205a:	4b14      	ldr	r3, [pc, #80]	@ (80020ac <MX_SPI5_Init+0x64>)
 800205c:	2200      	movs	r2, #0
 800205e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002060:	4b12      	ldr	r3, [pc, #72]	@ (80020ac <MX_SPI5_Init+0x64>)
 8002062:	2200      	movs	r2, #0
 8002064:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002066:	4b11      	ldr	r3, [pc, #68]	@ (80020ac <MX_SPI5_Init+0x64>)
 8002068:	2200      	movs	r2, #0
 800206a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800206c:	4b0f      	ldr	r3, [pc, #60]	@ (80020ac <MX_SPI5_Init+0x64>)
 800206e:	2200      	movs	r2, #0
 8002070:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002072:	4b0e      	ldr	r3, [pc, #56]	@ (80020ac <MX_SPI5_Init+0x64>)
 8002074:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002078:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800207a:	4b0c      	ldr	r3, [pc, #48]	@ (80020ac <MX_SPI5_Init+0x64>)
 800207c:	2208      	movs	r2, #8
 800207e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002080:	4b0a      	ldr	r3, [pc, #40]	@ (80020ac <MX_SPI5_Init+0x64>)
 8002082:	2200      	movs	r2, #0
 8002084:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002086:	4b09      	ldr	r3, [pc, #36]	@ (80020ac <MX_SPI5_Init+0x64>)
 8002088:	2200      	movs	r2, #0
 800208a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800208c:	4b07      	ldr	r3, [pc, #28]	@ (80020ac <MX_SPI5_Init+0x64>)
 800208e:	2200      	movs	r2, #0
 8002090:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002092:	4b06      	ldr	r3, [pc, #24]	@ (80020ac <MX_SPI5_Init+0x64>)
 8002094:	220a      	movs	r2, #10
 8002096:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002098:	4804      	ldr	r0, [pc, #16]	@ (80020ac <MX_SPI5_Init+0x64>)
 800209a:	f002 f9a1 	bl	80043e0 <HAL_SPI_Init>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80020a4:	f000 f8e6 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80020a8:	bf00      	nop
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	200000b8 	.word	0x200000b8
 80020b0:	40015000 	.word	0x40015000

080020b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	607b      	str	r3, [r7, #4]
 80020be:	4b0c      	ldr	r3, [pc, #48]	@ (80020f0 <MX_DMA_Init+0x3c>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c2:	4a0b      	ldr	r2, [pc, #44]	@ (80020f0 <MX_DMA_Init+0x3c>)
 80020c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ca:	4b09      	ldr	r3, [pc, #36]	@ (80020f0 <MX_DMA_Init+0x3c>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020d2:	607b      	str	r3, [r7, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80020d6:	2200      	movs	r2, #0
 80020d8:	2100      	movs	r1, #0
 80020da:	203c      	movs	r0, #60	@ 0x3c
 80020dc:	f000 fc5d 	bl	800299a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80020e0:	203c      	movs	r0, #60	@ 0x3c
 80020e2:	f000 fc76 	bl	80029d2 <HAL_NVIC_EnableIRQ>

}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40023800 	.word	0x40023800

080020f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b08c      	sub	sp, #48	@ 0x30
 80020f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fa:	f107 031c 	add.w	r3, r7, #28
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	605a      	str	r2, [r3, #4]
 8002104:	609a      	str	r2, [r3, #8]
 8002106:	60da      	str	r2, [r3, #12]
 8002108:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	61bb      	str	r3, [r7, #24]
 800210e:	4b54      	ldr	r3, [pc, #336]	@ (8002260 <MX_GPIO_Init+0x16c>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002112:	4a53      	ldr	r2, [pc, #332]	@ (8002260 <MX_GPIO_Init+0x16c>)
 8002114:	f043 0304 	orr.w	r3, r3, #4
 8002118:	6313      	str	r3, [r2, #48]	@ 0x30
 800211a:	4b51      	ldr	r3, [pc, #324]	@ (8002260 <MX_GPIO_Init+0x16c>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211e:	f003 0304 	and.w	r3, r3, #4
 8002122:	61bb      	str	r3, [r7, #24]
 8002124:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
 800212a:	4b4d      	ldr	r3, [pc, #308]	@ (8002260 <MX_GPIO_Init+0x16c>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212e:	4a4c      	ldr	r2, [pc, #304]	@ (8002260 <MX_GPIO_Init+0x16c>)
 8002130:	f043 0320 	orr.w	r3, r3, #32
 8002134:	6313      	str	r3, [r2, #48]	@ 0x30
 8002136:	4b4a      	ldr	r3, [pc, #296]	@ (8002260 <MX_GPIO_Init+0x16c>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213a:	f003 0320 	and.w	r3, r3, #32
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	4b46      	ldr	r3, [pc, #280]	@ (8002260 <MX_GPIO_Init+0x16c>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214a:	4a45      	ldr	r2, [pc, #276]	@ (8002260 <MX_GPIO_Init+0x16c>)
 800214c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002150:	6313      	str	r3, [r2, #48]	@ 0x30
 8002152:	4b43      	ldr	r3, [pc, #268]	@ (8002260 <MX_GPIO_Init+0x16c>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	4b3f      	ldr	r3, [pc, #252]	@ (8002260 <MX_GPIO_Init+0x16c>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002166:	4a3e      	ldr	r2, [pc, #248]	@ (8002260 <MX_GPIO_Init+0x16c>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6313      	str	r3, [r2, #48]	@ 0x30
 800216e:	4b3c      	ldr	r3, [pc, #240]	@ (8002260 <MX_GPIO_Init+0x16c>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	4b38      	ldr	r3, [pc, #224]	@ (8002260 <MX_GPIO_Init+0x16c>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002182:	4a37      	ldr	r2, [pc, #220]	@ (8002260 <MX_GPIO_Init+0x16c>)
 8002184:	f043 0308 	orr.w	r3, r3, #8
 8002188:	6313      	str	r3, [r2, #48]	@ 0x30
 800218a:	4b35      	ldr	r3, [pc, #212]	@ (8002260 <MX_GPIO_Init+0x16c>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218e:	f003 0308 	and.w	r3, r3, #8
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	607b      	str	r3, [r7, #4]
 800219a:	4b31      	ldr	r3, [pc, #196]	@ (8002260 <MX_GPIO_Init+0x16c>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219e:	4a30      	ldr	r2, [pc, #192]	@ (8002260 <MX_GPIO_Init+0x16c>)
 80021a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021a6:	4b2e      	ldr	r3, [pc, #184]	@ (8002260 <MX_GPIO_Init+0x16c>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ae:	607b      	str	r3, [r7, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80021b2:	2200      	movs	r2, #0
 80021b4:	2104      	movs	r1, #4
 80021b6:	482b      	ldr	r0, [pc, #172]	@ (8002264 <MX_GPIO_Init+0x170>)
 80021b8:	f001 f942 	bl	8003440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80021bc:	2200      	movs	r2, #0
 80021be:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80021c2:	4829      	ldr	r0, [pc, #164]	@ (8002268 <MX_GPIO_Init+0x174>)
 80021c4:	f001 f93c 	bl	8003440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 80021c8:	2200      	movs	r2, #0
 80021ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021ce:	4827      	ldr	r0, [pc, #156]	@ (800226c <MX_GPIO_Init+0x178>)
 80021d0:	f001 f936 	bl	8003440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021d4:	2304      	movs	r3, #4
 80021d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d8:	2301      	movs	r3, #1
 80021da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e0:	2300      	movs	r3, #0
 80021e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e4:	f107 031c 	add.w	r3, r7, #28
 80021e8:	4619      	mov	r1, r3
 80021ea:	481e      	ldr	r0, [pc, #120]	@ (8002264 <MX_GPIO_Init+0x170>)
 80021ec:	f000 ff7c 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021f0:	2301      	movs	r3, #1
 80021f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021f4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80021f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fe:	f107 031c 	add.w	r3, r7, #28
 8002202:	4619      	mov	r1, r3
 8002204:	481a      	ldr	r0, [pc, #104]	@ (8002270 <MX_GPIO_Init+0x17c>)
 8002206:	f000 ff6f 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800220a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800220e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002210:	2301      	movs	r3, #1
 8002212:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002218:	2300      	movs	r3, #0
 800221a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800221c:	f107 031c 	add.w	r3, r7, #28
 8002220:	4619      	mov	r1, r3
 8002222:	4811      	ldr	r0, [pc, #68]	@ (8002268 <MX_GPIO_Init+0x174>)
 8002224:	f000 ff60 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002228:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800222c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800222e:	2301      	movs	r3, #1
 8002230:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002236:	2300      	movs	r3, #0
 8002238:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800223a:	f107 031c 	add.w	r3, r7, #28
 800223e:	4619      	mov	r1, r3
 8002240:	480a      	ldr	r0, [pc, #40]	@ (800226c <MX_GPIO_Init+0x178>)
 8002242:	f000 ff51 	bl	80030e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002246:	2200      	movs	r2, #0
 8002248:	2100      	movs	r1, #0
 800224a:	2006      	movs	r0, #6
 800224c:	f000 fba5 	bl	800299a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002250:	2006      	movs	r0, #6
 8002252:	f000 fbbe 	bl	80029d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002256:	bf00      	nop
 8002258:	3730      	adds	r7, #48	@ 0x30
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40023800 	.word	0x40023800
 8002264:	40020800 	.word	0x40020800
 8002268:	40020c00 	.word	0x40020c00
 800226c:	40021800 	.word	0x40021800
 8002270:	40020000 	.word	0x40020000

08002274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002278:	b672      	cpsid	i
}
 800227a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800227c:	bf00      	nop
 800227e:	e7fd      	b.n	800227c <Error_Handler+0x8>

08002280 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	607b      	str	r3, [r7, #4]
 800228a:	4b10      	ldr	r3, [pc, #64]	@ (80022cc <HAL_MspInit+0x4c>)
 800228c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800228e:	4a0f      	ldr	r2, [pc, #60]	@ (80022cc <HAL_MspInit+0x4c>)
 8002290:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002294:	6453      	str	r3, [r2, #68]	@ 0x44
 8002296:	4b0d      	ldr	r3, [pc, #52]	@ (80022cc <HAL_MspInit+0x4c>)
 8002298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800229e:	607b      	str	r3, [r7, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	603b      	str	r3, [r7, #0]
 80022a6:	4b09      	ldr	r3, [pc, #36]	@ (80022cc <HAL_MspInit+0x4c>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	4a08      	ldr	r2, [pc, #32]	@ (80022cc <HAL_MspInit+0x4c>)
 80022ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022b2:	4b06      	ldr	r3, [pc, #24]	@ (80022cc <HAL_MspInit+0x4c>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ba:	603b      	str	r3, [r7, #0]
 80022bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	40023800 	.word	0x40023800

080022d0 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b08e      	sub	sp, #56	@ 0x38
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022d8:	f107 0308 	add.w	r3, r7, #8
 80022dc:	2230      	movs	r2, #48	@ 0x30
 80022de:	2100      	movs	r1, #0
 80022e0:	4618      	mov	r0, r3
 80022e2:	f002 fe02 	bl	8004eea <memset>
  if(hrtc->Instance==RTC)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a0c      	ldr	r2, [pc, #48]	@ (800231c <HAL_RTC_MspInit+0x4c>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d111      	bne.n	8002314 <HAL_RTC_MspInit+0x44>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80022f0:	2320      	movs	r3, #32
 80022f2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80022f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022f8:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022fa:	f107 0308 	add.w	r3, r7, #8
 80022fe:	4618      	mov	r0, r3
 8002300:	f001 fdaa 	bl	8003e58 <HAL_RCCEx_PeriphCLKConfig>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800230a:	f7ff ffb3 	bl	8002274 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800230e:	4b04      	ldr	r3, [pc, #16]	@ (8002320 <HAL_RTC_MspInit+0x50>)
 8002310:	2201      	movs	r2, #1
 8002312:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8002314:	bf00      	nop
 8002316:	3738      	adds	r7, #56	@ 0x38
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40002800 	.word	0x40002800
 8002320:	42470e3c 	.word	0x42470e3c

08002324 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08a      	sub	sp, #40	@ 0x28
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232c:	f107 0314 	add.w	r3, r7, #20
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
 800233a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a30      	ldr	r2, [pc, #192]	@ (8002404 <HAL_SPI_MspInit+0xe0>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d15a      	bne.n	80023fc <HAL_SPI_MspInit+0xd8>
  {
    /* USER CODE BEGIN SPI5_MspInit 0 */

    /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	613b      	str	r3, [r7, #16]
 800234a:	4b2f      	ldr	r3, [pc, #188]	@ (8002408 <HAL_SPI_MspInit+0xe4>)
 800234c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234e:	4a2e      	ldr	r2, [pc, #184]	@ (8002408 <HAL_SPI_MspInit+0xe4>)
 8002350:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002354:	6453      	str	r3, [r2, #68]	@ 0x44
 8002356:	4b2c      	ldr	r3, [pc, #176]	@ (8002408 <HAL_SPI_MspInit+0xe4>)
 8002358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800235a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800235e:	613b      	str	r3, [r7, #16]
 8002360:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	4b28      	ldr	r3, [pc, #160]	@ (8002408 <HAL_SPI_MspInit+0xe4>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236a:	4a27      	ldr	r2, [pc, #156]	@ (8002408 <HAL_SPI_MspInit+0xe4>)
 800236c:	f043 0320 	orr.w	r3, r3, #32
 8002370:	6313      	str	r3, [r2, #48]	@ 0x30
 8002372:	4b25      	ldr	r3, [pc, #148]	@ (8002408 <HAL_SPI_MspInit+0xe4>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002376:	f003 0320 	and.w	r3, r3, #32
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800237e:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8002382:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002384:	2302      	movs	r3, #2
 8002386:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238c:	2303      	movs	r3, #3
 800238e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002390:	2305      	movs	r3, #5
 8002392:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002394:	f107 0314 	add.w	r3, r7, #20
 8002398:	4619      	mov	r1, r3
 800239a:	481c      	ldr	r0, [pc, #112]	@ (800240c <HAL_SPI_MspInit+0xe8>)
 800239c:	f000 fea4 	bl	80030e8 <HAL_GPIO_Init>

    /* SPI5 DMA Init */
    /* SPI5_TX Init */
    hdma_spi5_tx.Instance = DMA2_Stream4;
 80023a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002410 <HAL_SPI_MspInit+0xec>)
 80023a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002414 <HAL_SPI_MspInit+0xf0>)
 80023a4:	601a      	str	r2, [r3, #0]
    hdma_spi5_tx.Init.Channel = DMA_CHANNEL_2;
 80023a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002410 <HAL_SPI_MspInit+0xec>)
 80023a8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80023ac:	605a      	str	r2, [r3, #4]
    hdma_spi5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023ae:	4b18      	ldr	r3, [pc, #96]	@ (8002410 <HAL_SPI_MspInit+0xec>)
 80023b0:	2240      	movs	r2, #64	@ 0x40
 80023b2:	609a      	str	r2, [r3, #8]
    hdma_spi5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023b4:	4b16      	ldr	r3, [pc, #88]	@ (8002410 <HAL_SPI_MspInit+0xec>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	60da      	str	r2, [r3, #12]
    hdma_spi5_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023ba:	4b15      	ldr	r3, [pc, #84]	@ (8002410 <HAL_SPI_MspInit+0xec>)
 80023bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023c0:	611a      	str	r2, [r3, #16]
    hdma_spi5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023c2:	4b13      	ldr	r3, [pc, #76]	@ (8002410 <HAL_SPI_MspInit+0xec>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	615a      	str	r2, [r3, #20]
    hdma_spi5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023c8:	4b11      	ldr	r3, [pc, #68]	@ (8002410 <HAL_SPI_MspInit+0xec>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	619a      	str	r2, [r3, #24]
    hdma_spi5_tx.Init.Mode = DMA_NORMAL;
 80023ce:	4b10      	ldr	r3, [pc, #64]	@ (8002410 <HAL_SPI_MspInit+0xec>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	61da      	str	r2, [r3, #28]
    hdma_spi5_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002410 <HAL_SPI_MspInit+0xec>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	621a      	str	r2, [r3, #32]
    hdma_spi5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023da:	4b0d      	ldr	r3, [pc, #52]	@ (8002410 <HAL_SPI_MspInit+0xec>)
 80023dc:	2200      	movs	r2, #0
 80023de:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi5_tx) != HAL_OK)
 80023e0:	480b      	ldr	r0, [pc, #44]	@ (8002410 <HAL_SPI_MspInit+0xec>)
 80023e2:	f000 fb11 	bl	8002a08 <HAL_DMA_Init>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80023ec:	f7ff ff42 	bl	8002274 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi5_tx);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a07      	ldr	r2, [pc, #28]	@ (8002410 <HAL_SPI_MspInit+0xec>)
 80023f4:	649a      	str	r2, [r3, #72]	@ 0x48
 80023f6:	4a06      	ldr	r2, [pc, #24]	@ (8002410 <HAL_SPI_MspInit+0xec>)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI5_MspInit 1 */

  }

}
 80023fc:	bf00      	nop
 80023fe:	3728      	adds	r7, #40	@ 0x28
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40015000 	.word	0x40015000
 8002408:	40023800 	.word	0x40023800
 800240c:	40021400 	.word	0x40021400
 8002410:	20000110 	.word	0x20000110
 8002414:	40026470 	.word	0x40026470

08002418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800241c:	bf00      	nop
 800241e:	e7fd      	b.n	800241c <NMI_Handler+0x4>

08002420 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002424:	bf00      	nop
 8002426:	e7fd      	b.n	8002424 <HardFault_Handler+0x4>

08002428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800242c:	bf00      	nop
 800242e:	e7fd      	b.n	800242c <MemManage_Handler+0x4>

08002430 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002434:	bf00      	nop
 8002436:	e7fd      	b.n	8002434 <BusFault_Handler+0x4>

08002438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800243c:	bf00      	nop
 800243e:	e7fd      	b.n	800243c <UsageFault_Handler+0x4>

08002440 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800244e:	b480      	push	{r7}
 8002450:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002452:	bf00      	nop
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800246e:	f000 f975 	bl	800275c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
	...

08002478 <EXTI0_IRQHandler>:
extern int plane_x;
extern int plane_y;
extern int plane_move_flag;

void EXTI0_IRQHandler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 800247c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002480:	4805      	ldr	r0, [pc, #20]	@ (8002498 <EXTI0_IRQHandler+0x20>)
 8002482:	f000 fff6 	bl	8003472 <HAL_GPIO_TogglePin>
    plane_move_flag = 1;
 8002486:	4b05      	ldr	r3, [pc, #20]	@ (800249c <EXTI0_IRQHandler+0x24>)
 8002488:	2201      	movs	r2, #1
 800248a:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800248c:	2001      	movs	r0, #1
 800248e:	f001 f80b 	bl	80034a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40021800 	.word	0x40021800
 800249c:	20000724 	.word	0x20000724

080024a0 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_tx);
 80024a4:	4802      	ldr	r0, [pc, #8]	@ (80024b0 <DMA2_Stream4_IRQHandler+0x10>)
 80024a6:	f000 fbb5 	bl	8002c14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000110 	.word	0x20000110

080024b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  return 1;
 80024b8:	2301      	movs	r3, #1
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <_kill>:

int _kill(int pid, int sig)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024ce:	f002 fd89 	bl	8004fe4 <__errno>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2216      	movs	r2, #22
 80024d6:	601a      	str	r2, [r3, #0]
  return -1;
 80024d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <_exit>:

void _exit (int status)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024ec:	f04f 31ff 	mov.w	r1, #4294967295
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff ffe7 	bl	80024c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024f6:	bf00      	nop
 80024f8:	e7fd      	b.n	80024f6 <_exit+0x12>

080024fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b086      	sub	sp, #24
 80024fe:	af00      	add	r7, sp, #0
 8002500:	60f8      	str	r0, [r7, #12]
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	e00a      	b.n	8002522 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800250c:	f3af 8000 	nop.w
 8002510:	4601      	mov	r1, r0
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	1c5a      	adds	r2, r3, #1
 8002516:	60ba      	str	r2, [r7, #8]
 8002518:	b2ca      	uxtb	r2, r1
 800251a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	3301      	adds	r3, #1
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	429a      	cmp	r2, r3
 8002528:	dbf0      	blt.n	800250c <_read+0x12>
  }

  return len;
 800252a:	687b      	ldr	r3, [r7, #4]
}
 800252c:	4618      	mov	r0, r3
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
 8002544:	e009      	b.n	800255a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	1c5a      	adds	r2, r3, #1
 800254a:	60ba      	str	r2, [r7, #8]
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	3301      	adds	r3, #1
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	429a      	cmp	r2, r3
 8002560:	dbf1      	blt.n	8002546 <_write+0x12>
  }
  return len;
 8002562:	687b      	ldr	r3, [r7, #4]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <_close>:

int _close(int file)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002574:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002578:	4618      	mov	r0, r3
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002594:	605a      	str	r2, [r3, #4]
  return 0;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <_isatty>:

int _isatty(int file)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025ac:	2301      	movs	r3, #1
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b085      	sub	sp, #20
 80025be:	af00      	add	r7, sp, #0
 80025c0:	60f8      	str	r0, [r7, #12]
 80025c2:	60b9      	str	r1, [r7, #8]
 80025c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025dc:	4a14      	ldr	r2, [pc, #80]	@ (8002630 <_sbrk+0x5c>)
 80025de:	4b15      	ldr	r3, [pc, #84]	@ (8002634 <_sbrk+0x60>)
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025e8:	4b13      	ldr	r3, [pc, #76]	@ (8002638 <_sbrk+0x64>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d102      	bne.n	80025f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025f0:	4b11      	ldr	r3, [pc, #68]	@ (8002638 <_sbrk+0x64>)
 80025f2:	4a12      	ldr	r2, [pc, #72]	@ (800263c <_sbrk+0x68>)
 80025f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025f6:	4b10      	ldr	r3, [pc, #64]	@ (8002638 <_sbrk+0x64>)
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4413      	add	r3, r2
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	429a      	cmp	r2, r3
 8002602:	d207      	bcs.n	8002614 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002604:	f002 fcee 	bl	8004fe4 <__errno>
 8002608:	4603      	mov	r3, r0
 800260a:	220c      	movs	r2, #12
 800260c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800260e:	f04f 33ff 	mov.w	r3, #4294967295
 8002612:	e009      	b.n	8002628 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002614:	4b08      	ldr	r3, [pc, #32]	@ (8002638 <_sbrk+0x64>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800261a:	4b07      	ldr	r3, [pc, #28]	@ (8002638 <_sbrk+0x64>)
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4413      	add	r3, r2
 8002622:	4a05      	ldr	r2, [pc, #20]	@ (8002638 <_sbrk+0x64>)
 8002624:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002626:	68fb      	ldr	r3, [r7, #12]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	20030000 	.word	0x20030000
 8002634:	00000400 	.word	0x00000400
 8002638:	2000072c 	.word	0x2000072c
 800263c:	20000880 	.word	0x20000880

08002640 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002644:	4b06      	ldr	r3, [pc, #24]	@ (8002660 <SystemInit+0x20>)
 8002646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800264a:	4a05      	ldr	r2, [pc, #20]	@ (8002660 <SystemInit+0x20>)
 800264c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002650:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002654:	bf00      	nop
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002664:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800269c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002668:	f7ff ffea 	bl	8002640 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800266c:	480c      	ldr	r0, [pc, #48]	@ (80026a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800266e:	490d      	ldr	r1, [pc, #52]	@ (80026a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002670:	4a0d      	ldr	r2, [pc, #52]	@ (80026a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002674:	e002      	b.n	800267c <LoopCopyDataInit>

08002676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800267a:	3304      	adds	r3, #4

0800267c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800267c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800267e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002680:	d3f9      	bcc.n	8002676 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002682:	4a0a      	ldr	r2, [pc, #40]	@ (80026ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002684:	4c0a      	ldr	r4, [pc, #40]	@ (80026b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002688:	e001      	b.n	800268e <LoopFillZerobss>

0800268a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800268a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800268c:	3204      	adds	r2, #4

0800268e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800268e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002690:	d3fb      	bcc.n	800268a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002692:	f002 fcad 	bl	8004ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002696:	f7ff faf7 	bl	8001c88 <main>
  bx  lr    
 800269a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800269c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80026a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026a4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80026a8:	0800710c 	.word	0x0800710c
  ldr r2, =_sbss
 80026ac:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80026b0:	20000880 	.word	0x20000880

080026b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026b4:	e7fe      	b.n	80026b4 <ADC_IRQHandler>
	...

080026b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026bc:	4b0e      	ldr	r3, [pc, #56]	@ (80026f8 <HAL_Init+0x40>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a0d      	ldr	r2, [pc, #52]	@ (80026f8 <HAL_Init+0x40>)
 80026c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026c8:	4b0b      	ldr	r3, [pc, #44]	@ (80026f8 <HAL_Init+0x40>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a0a      	ldr	r2, [pc, #40]	@ (80026f8 <HAL_Init+0x40>)
 80026ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026d4:	4b08      	ldr	r3, [pc, #32]	@ (80026f8 <HAL_Init+0x40>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a07      	ldr	r2, [pc, #28]	@ (80026f8 <HAL_Init+0x40>)
 80026da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026e0:	2003      	movs	r0, #3
 80026e2:	f000 f94f 	bl	8002984 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026e6:	200f      	movs	r0, #15
 80026e8:	f000 f808 	bl	80026fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026ec:	f7ff fdc8 	bl	8002280 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40023c00 	.word	0x40023c00

080026fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002704:	4b12      	ldr	r3, [pc, #72]	@ (8002750 <HAL_InitTick+0x54>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	4b12      	ldr	r3, [pc, #72]	@ (8002754 <HAL_InitTick+0x58>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	4619      	mov	r1, r3
 800270e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002712:	fbb3 f3f1 	udiv	r3, r3, r1
 8002716:	fbb2 f3f3 	udiv	r3, r2, r3
 800271a:	4618      	mov	r0, r3
 800271c:	f000 f967 	bl	80029ee <HAL_SYSTICK_Config>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e00e      	b.n	8002748 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b0f      	cmp	r3, #15
 800272e:	d80a      	bhi.n	8002746 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002730:	2200      	movs	r2, #0
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	f04f 30ff 	mov.w	r0, #4294967295
 8002738:	f000 f92f 	bl	800299a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800273c:	4a06      	ldr	r2, [pc, #24]	@ (8002758 <HAL_InitTick+0x5c>)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
 8002744:	e000      	b.n	8002748 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
}
 8002748:	4618      	mov	r0, r3
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	20000014 	.word	0x20000014
 8002754:	2000001c 	.word	0x2000001c
 8002758:	20000018 	.word	0x20000018

0800275c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002760:	4b06      	ldr	r3, [pc, #24]	@ (800277c <HAL_IncTick+0x20>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	461a      	mov	r2, r3
 8002766:	4b06      	ldr	r3, [pc, #24]	@ (8002780 <HAL_IncTick+0x24>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4413      	add	r3, r2
 800276c:	4a04      	ldr	r2, [pc, #16]	@ (8002780 <HAL_IncTick+0x24>)
 800276e:	6013      	str	r3, [r2, #0]
}
 8002770:	bf00      	nop
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	2000001c 	.word	0x2000001c
 8002780:	20000730 	.word	0x20000730

08002784 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  return uwTick;
 8002788:	4b03      	ldr	r3, [pc, #12]	@ (8002798 <HAL_GetTick+0x14>)
 800278a:	681b      	ldr	r3, [r3, #0]
}
 800278c:	4618      	mov	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	20000730 	.word	0x20000730

0800279c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027a4:	f7ff ffee 	bl	8002784 <HAL_GetTick>
 80027a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b4:	d005      	beq.n	80027c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027b6:	4b0a      	ldr	r3, [pc, #40]	@ (80027e0 <HAL_Delay+0x44>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4413      	add	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027c2:	bf00      	nop
 80027c4:	f7ff ffde 	bl	8002784 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d8f7      	bhi.n	80027c4 <HAL_Delay+0x28>
  {
  }
}
 80027d4:	bf00      	nop
 80027d6:	bf00      	nop
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	2000001c 	.word	0x2000001c

080027e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002828 <__NVIC_SetPriorityGrouping+0x44>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002800:	4013      	ands	r3, r2
 8002802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800280c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002810:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002816:	4a04      	ldr	r2, [pc, #16]	@ (8002828 <__NVIC_SetPriorityGrouping+0x44>)
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	60d3      	str	r3, [r2, #12]
}
 800281c:	bf00      	nop
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002830:	4b04      	ldr	r3, [pc, #16]	@ (8002844 <__NVIC_GetPriorityGrouping+0x18>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	0a1b      	lsrs	r3, r3, #8
 8002836:	f003 0307 	and.w	r3, r3, #7
}
 800283a:	4618      	mov	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	e000ed00 	.word	0xe000ed00

08002848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002856:	2b00      	cmp	r3, #0
 8002858:	db0b      	blt.n	8002872 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800285a:	79fb      	ldrb	r3, [r7, #7]
 800285c:	f003 021f 	and.w	r2, r3, #31
 8002860:	4907      	ldr	r1, [pc, #28]	@ (8002880 <__NVIC_EnableIRQ+0x38>)
 8002862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	2001      	movs	r0, #1
 800286a:	fa00 f202 	lsl.w	r2, r0, r2
 800286e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	e000e100 	.word	0xe000e100

08002884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	6039      	str	r1, [r7, #0]
 800288e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002894:	2b00      	cmp	r3, #0
 8002896:	db0a      	blt.n	80028ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	b2da      	uxtb	r2, r3
 800289c:	490c      	ldr	r1, [pc, #48]	@ (80028d0 <__NVIC_SetPriority+0x4c>)
 800289e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a2:	0112      	lsls	r2, r2, #4
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	440b      	add	r3, r1
 80028a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028ac:	e00a      	b.n	80028c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	4908      	ldr	r1, [pc, #32]	@ (80028d4 <__NVIC_SetPriority+0x50>)
 80028b4:	79fb      	ldrb	r3, [r7, #7]
 80028b6:	f003 030f 	and.w	r3, r3, #15
 80028ba:	3b04      	subs	r3, #4
 80028bc:	0112      	lsls	r2, r2, #4
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	440b      	add	r3, r1
 80028c2:	761a      	strb	r2, [r3, #24]
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	e000e100 	.word	0xe000e100
 80028d4:	e000ed00 	.word	0xe000ed00

080028d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028d8:	b480      	push	{r7}
 80028da:	b089      	sub	sp, #36	@ 0x24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f1c3 0307 	rsb	r3, r3, #7
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	bf28      	it	cs
 80028f6:	2304      	movcs	r3, #4
 80028f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	3304      	adds	r3, #4
 80028fe:	2b06      	cmp	r3, #6
 8002900:	d902      	bls.n	8002908 <NVIC_EncodePriority+0x30>
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	3b03      	subs	r3, #3
 8002906:	e000      	b.n	800290a <NVIC_EncodePriority+0x32>
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800290c:	f04f 32ff 	mov.w	r2, #4294967295
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43da      	mvns	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	401a      	ands	r2, r3
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002920:	f04f 31ff 	mov.w	r1, #4294967295
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	fa01 f303 	lsl.w	r3, r1, r3
 800292a:	43d9      	mvns	r1, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002930:	4313      	orrs	r3, r2
         );
}
 8002932:	4618      	mov	r0, r3
 8002934:	3724      	adds	r7, #36	@ 0x24
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
	...

08002940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3b01      	subs	r3, #1
 800294c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002950:	d301      	bcc.n	8002956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002952:	2301      	movs	r3, #1
 8002954:	e00f      	b.n	8002976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002956:	4a0a      	ldr	r2, [pc, #40]	@ (8002980 <SysTick_Config+0x40>)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3b01      	subs	r3, #1
 800295c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800295e:	210f      	movs	r1, #15
 8002960:	f04f 30ff 	mov.w	r0, #4294967295
 8002964:	f7ff ff8e 	bl	8002884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002968:	4b05      	ldr	r3, [pc, #20]	@ (8002980 <SysTick_Config+0x40>)
 800296a:	2200      	movs	r2, #0
 800296c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800296e:	4b04      	ldr	r3, [pc, #16]	@ (8002980 <SysTick_Config+0x40>)
 8002970:	2207      	movs	r2, #7
 8002972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	e000e010 	.word	0xe000e010

08002984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f7ff ff29 	bl	80027e4 <__NVIC_SetPriorityGrouping>
}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800299a:	b580      	push	{r7, lr}
 800299c:	b086      	sub	sp, #24
 800299e:	af00      	add	r7, sp, #0
 80029a0:	4603      	mov	r3, r0
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
 80029a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029ac:	f7ff ff3e 	bl	800282c <__NVIC_GetPriorityGrouping>
 80029b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	68b9      	ldr	r1, [r7, #8]
 80029b6:	6978      	ldr	r0, [r7, #20]
 80029b8:	f7ff ff8e 	bl	80028d8 <NVIC_EncodePriority>
 80029bc:	4602      	mov	r2, r0
 80029be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029c2:	4611      	mov	r1, r2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff ff5d 	bl	8002884 <__NVIC_SetPriority>
}
 80029ca:	bf00      	nop
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	4603      	mov	r3, r0
 80029da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff ff31 	bl	8002848 <__NVIC_EnableIRQ>
}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7ff ffa2 	bl	8002940 <SysTick_Config>
 80029fc:	4603      	mov	r3, r0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
	...

08002a08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a14:	f7ff feb6 	bl	8002784 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e099      	b.n	8002b58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0201 	bic.w	r2, r2, #1
 8002a42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a44:	e00f      	b.n	8002a66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a46:	f7ff fe9d 	bl	8002784 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b05      	cmp	r3, #5
 8002a52:	d908      	bls.n	8002a66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2220      	movs	r2, #32
 8002a58:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2203      	movs	r2, #3
 8002a5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e078      	b.n	8002b58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1e8      	bne.n	8002a46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	4b38      	ldr	r3, [pc, #224]	@ (8002b60 <HAL_DMA_Init+0x158>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aaa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d107      	bne.n	8002ad0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f023 0307 	bic.w	r3, r3, #7
 8002ae6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d117      	bne.n	8002b2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00e      	beq.n	8002b2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 fa6f 	bl	8002ff0 <DMA_CheckFifoParam>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2240      	movs	r2, #64	@ 0x40
 8002b1c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002b26:	2301      	movs	r3, #1
 8002b28:	e016      	b.n	8002b58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 fa26 	bl	8002f84 <DMA_CalcBaseAndBitshift>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b40:	223f      	movs	r2, #63	@ 0x3f
 8002b42:	409a      	lsls	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	f010803f 	.word	0xf010803f

08002b64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b72:	2300      	movs	r3, #0
 8002b74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <HAL_DMA_Start_IT+0x26>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e040      	b.n	8002c0c <HAL_DMA_Start_IT+0xa8>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d12f      	bne.n	8002bfe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	68b9      	ldr	r1, [r7, #8]
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 f9b8 	bl	8002f28 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bbc:	223f      	movs	r2, #63	@ 0x3f
 8002bbe:	409a      	lsls	r2, r3
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0216 	orr.w	r2, r2, #22
 8002bd2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d007      	beq.n	8002bec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0208 	orr.w	r2, r2, #8
 8002bea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0201 	orr.w	r2, r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	e005      	b.n	8002c0a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c06:	2302      	movs	r3, #2
 8002c08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c20:	4b8e      	ldr	r3, [pc, #568]	@ (8002e5c <HAL_DMA_IRQHandler+0x248>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a8e      	ldr	r2, [pc, #568]	@ (8002e60 <HAL_DMA_IRQHandler+0x24c>)
 8002c26:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2a:	0a9b      	lsrs	r3, r3, #10
 8002c2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c3e:	2208      	movs	r2, #8
 8002c40:	409a      	lsls	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	4013      	ands	r3, r2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d01a      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d013      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0204 	bic.w	r2, r2, #4
 8002c66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c6c:	2208      	movs	r2, #8
 8002c6e:	409a      	lsls	r2, r3
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c78:	f043 0201 	orr.w	r2, r3, #1
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c84:	2201      	movs	r2, #1
 8002c86:	409a      	lsls	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d012      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00b      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	409a      	lsls	r2, r3
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cae:	f043 0202 	orr.w	r2, r3, #2
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cba:	2204      	movs	r2, #4
 8002cbc:	409a      	lsls	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d012      	beq.n	8002cec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00b      	beq.n	8002cec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd8:	2204      	movs	r2, #4
 8002cda:	409a      	lsls	r2, r3
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce4:	f043 0204 	orr.w	r2, r3, #4
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf0:	2210      	movs	r2, #16
 8002cf2:	409a      	lsls	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d043      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d03c      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0e:	2210      	movs	r2, #16
 8002d10:	409a      	lsls	r2, r3
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d018      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d108      	bne.n	8002d44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d024      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	4798      	blx	r3
 8002d42:	e01f      	b.n	8002d84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d01b      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	4798      	blx	r3
 8002d54:	e016      	b.n	8002d84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d107      	bne.n	8002d74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0208 	bic.w	r2, r2, #8
 8002d72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d88:	2220      	movs	r2, #32
 8002d8a:	409a      	lsls	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 808f 	beq.w	8002eb4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 8087 	beq.w	8002eb4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002daa:	2220      	movs	r2, #32
 8002dac:	409a      	lsls	r2, r3
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b05      	cmp	r3, #5
 8002dbc:	d136      	bne.n	8002e2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0216 	bic.w	r2, r2, #22
 8002dcc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	695a      	ldr	r2, [r3, #20]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ddc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d103      	bne.n	8002dee <HAL_DMA_IRQHandler+0x1da>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d007      	beq.n	8002dfe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0208 	bic.w	r2, r2, #8
 8002dfc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e02:	223f      	movs	r2, #63	@ 0x3f
 8002e04:	409a      	lsls	r2, r3
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d07e      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	4798      	blx	r3
        }
        return;
 8002e2a:	e079      	b.n	8002f20 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d01d      	beq.n	8002e76 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10d      	bne.n	8002e64 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d031      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	4798      	blx	r3
 8002e58:	e02c      	b.n	8002eb4 <HAL_DMA_IRQHandler+0x2a0>
 8002e5a:	bf00      	nop
 8002e5c:	20000014 	.word	0x20000014
 8002e60:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d023      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	4798      	blx	r3
 8002e74:	e01e      	b.n	8002eb4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10f      	bne.n	8002ea4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 0210 	bic.w	r2, r2, #16
 8002e92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d032      	beq.n	8002f22 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d022      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2205      	movs	r2, #5
 8002ecc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0201 	bic.w	r2, r2, #1
 8002ede:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	60bb      	str	r3, [r7, #8]
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d307      	bcc.n	8002efc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f2      	bne.n	8002ee0 <HAL_DMA_IRQHandler+0x2cc>
 8002efa:	e000      	b.n	8002efe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002efc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d005      	beq.n	8002f22 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	4798      	blx	r3
 8002f1e:	e000      	b.n	8002f22 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f20:	bf00      	nop
    }
  }
}
 8002f22:	3718      	adds	r7, #24
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
 8002f34:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002f44:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	2b40      	cmp	r3, #64	@ 0x40
 8002f54:	d108      	bne.n	8002f68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f66:	e007      	b.n	8002f78 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	60da      	str	r2, [r3, #12]
}
 8002f78:	bf00      	nop
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	3b10      	subs	r3, #16
 8002f94:	4a14      	ldr	r2, [pc, #80]	@ (8002fe8 <DMA_CalcBaseAndBitshift+0x64>)
 8002f96:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9a:	091b      	lsrs	r3, r3, #4
 8002f9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f9e:	4a13      	ldr	r2, [pc, #76]	@ (8002fec <DMA_CalcBaseAndBitshift+0x68>)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d909      	bls.n	8002fc6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002fba:	f023 0303 	bic.w	r3, r3, #3
 8002fbe:	1d1a      	adds	r2, r3, #4
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	659a      	str	r2, [r3, #88]	@ 0x58
 8002fc4:	e007      	b.n	8002fd6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002fce:	f023 0303 	bic.w	r3, r3, #3
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	aaaaaaab 	.word	0xaaaaaaab
 8002fec:	08007014 	.word	0x08007014

08002ff0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003000:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d11f      	bne.n	800304a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2b03      	cmp	r3, #3
 800300e:	d856      	bhi.n	80030be <DMA_CheckFifoParam+0xce>
 8003010:	a201      	add	r2, pc, #4	@ (adr r2, 8003018 <DMA_CheckFifoParam+0x28>)
 8003012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003016:	bf00      	nop
 8003018:	08003029 	.word	0x08003029
 800301c:	0800303b 	.word	0x0800303b
 8003020:	08003029 	.word	0x08003029
 8003024:	080030bf 	.word	0x080030bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800302c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d046      	beq.n	80030c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003038:	e043      	b.n	80030c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003042:	d140      	bne.n	80030c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003048:	e03d      	b.n	80030c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003052:	d121      	bne.n	8003098 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2b03      	cmp	r3, #3
 8003058:	d837      	bhi.n	80030ca <DMA_CheckFifoParam+0xda>
 800305a:	a201      	add	r2, pc, #4	@ (adr r2, 8003060 <DMA_CheckFifoParam+0x70>)
 800305c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003060:	08003071 	.word	0x08003071
 8003064:	08003077 	.word	0x08003077
 8003068:	08003071 	.word	0x08003071
 800306c:	08003089 	.word	0x08003089
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	73fb      	strb	r3, [r7, #15]
      break;
 8003074:	e030      	b.n	80030d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800307a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d025      	beq.n	80030ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003086:	e022      	b.n	80030ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800308c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003090:	d11f      	bne.n	80030d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003096:	e01c      	b.n	80030d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d903      	bls.n	80030a6 <DMA_CheckFifoParam+0xb6>
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	d003      	beq.n	80030ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030a4:	e018      	b.n	80030d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	73fb      	strb	r3, [r7, #15]
      break;
 80030aa:	e015      	b.n	80030d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00e      	beq.n	80030d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	73fb      	strb	r3, [r7, #15]
      break;
 80030bc:	e00b      	b.n	80030d6 <DMA_CheckFifoParam+0xe6>
      break;
 80030be:	bf00      	nop
 80030c0:	e00a      	b.n	80030d8 <DMA_CheckFifoParam+0xe8>
      break;
 80030c2:	bf00      	nop
 80030c4:	e008      	b.n	80030d8 <DMA_CheckFifoParam+0xe8>
      break;
 80030c6:	bf00      	nop
 80030c8:	e006      	b.n	80030d8 <DMA_CheckFifoParam+0xe8>
      break;
 80030ca:	bf00      	nop
 80030cc:	e004      	b.n	80030d8 <DMA_CheckFifoParam+0xe8>
      break;
 80030ce:	bf00      	nop
 80030d0:	e002      	b.n	80030d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80030d2:	bf00      	nop
 80030d4:	e000      	b.n	80030d8 <DMA_CheckFifoParam+0xe8>
      break;
 80030d6:	bf00      	nop
    }
  } 
  
  return status; 
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop

080030e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b089      	sub	sp, #36	@ 0x24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030fe:	2300      	movs	r3, #0
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	e177      	b.n	80033f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003104:	2201      	movs	r2, #1
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	4013      	ands	r3, r2
 8003116:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	429a      	cmp	r2, r3
 800311e:	f040 8166 	bne.w	80033ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	2b01      	cmp	r3, #1
 800312c:	d005      	beq.n	800313a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003136:	2b02      	cmp	r3, #2
 8003138:	d130      	bne.n	800319c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	2203      	movs	r2, #3
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	43db      	mvns	r3, r3
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	4013      	ands	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	68da      	ldr	r2, [r3, #12]
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4313      	orrs	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003170:	2201      	movs	r2, #1
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	43db      	mvns	r3, r3
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	4013      	ands	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	091b      	lsrs	r3, r3, #4
 8003186:	f003 0201 	and.w	r2, r3, #1
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	4313      	orrs	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f003 0303 	and.w	r3, r3, #3
 80031a4:	2b03      	cmp	r3, #3
 80031a6:	d017      	beq.n	80031d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	2203      	movs	r2, #3
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	43db      	mvns	r3, r3
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4013      	ands	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 0303 	and.w	r3, r3, #3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d123      	bne.n	800322c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	08da      	lsrs	r2, r3, #3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3208      	adds	r2, #8
 80031ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	220f      	movs	r2, #15
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4013      	ands	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	691a      	ldr	r2, [r3, #16]
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4313      	orrs	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	08da      	lsrs	r2, r3, #3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3208      	adds	r2, #8
 8003226:	69b9      	ldr	r1, [r7, #24]
 8003228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	2203      	movs	r2, #3
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	43db      	mvns	r3, r3
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4013      	ands	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f003 0203 	and.w	r2, r3, #3
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	4313      	orrs	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 80c0 	beq.w	80033ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	4b66      	ldr	r3, [pc, #408]	@ (800340c <HAL_GPIO_Init+0x324>)
 8003274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003276:	4a65      	ldr	r2, [pc, #404]	@ (800340c <HAL_GPIO_Init+0x324>)
 8003278:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800327c:	6453      	str	r3, [r2, #68]	@ 0x44
 800327e:	4b63      	ldr	r3, [pc, #396]	@ (800340c <HAL_GPIO_Init+0x324>)
 8003280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003282:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800328a:	4a61      	ldr	r2, [pc, #388]	@ (8003410 <HAL_GPIO_Init+0x328>)
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	089b      	lsrs	r3, r3, #2
 8003290:	3302      	adds	r3, #2
 8003292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003296:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	220f      	movs	r2, #15
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	43db      	mvns	r3, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4013      	ands	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a58      	ldr	r2, [pc, #352]	@ (8003414 <HAL_GPIO_Init+0x32c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d037      	beq.n	8003326 <HAL_GPIO_Init+0x23e>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a57      	ldr	r2, [pc, #348]	@ (8003418 <HAL_GPIO_Init+0x330>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d031      	beq.n	8003322 <HAL_GPIO_Init+0x23a>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a56      	ldr	r2, [pc, #344]	@ (800341c <HAL_GPIO_Init+0x334>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d02b      	beq.n	800331e <HAL_GPIO_Init+0x236>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a55      	ldr	r2, [pc, #340]	@ (8003420 <HAL_GPIO_Init+0x338>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d025      	beq.n	800331a <HAL_GPIO_Init+0x232>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a54      	ldr	r2, [pc, #336]	@ (8003424 <HAL_GPIO_Init+0x33c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d01f      	beq.n	8003316 <HAL_GPIO_Init+0x22e>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a53      	ldr	r2, [pc, #332]	@ (8003428 <HAL_GPIO_Init+0x340>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d019      	beq.n	8003312 <HAL_GPIO_Init+0x22a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a52      	ldr	r2, [pc, #328]	@ (800342c <HAL_GPIO_Init+0x344>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d013      	beq.n	800330e <HAL_GPIO_Init+0x226>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a51      	ldr	r2, [pc, #324]	@ (8003430 <HAL_GPIO_Init+0x348>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d00d      	beq.n	800330a <HAL_GPIO_Init+0x222>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a50      	ldr	r2, [pc, #320]	@ (8003434 <HAL_GPIO_Init+0x34c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d007      	beq.n	8003306 <HAL_GPIO_Init+0x21e>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a4f      	ldr	r2, [pc, #316]	@ (8003438 <HAL_GPIO_Init+0x350>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d101      	bne.n	8003302 <HAL_GPIO_Init+0x21a>
 80032fe:	2309      	movs	r3, #9
 8003300:	e012      	b.n	8003328 <HAL_GPIO_Init+0x240>
 8003302:	230a      	movs	r3, #10
 8003304:	e010      	b.n	8003328 <HAL_GPIO_Init+0x240>
 8003306:	2308      	movs	r3, #8
 8003308:	e00e      	b.n	8003328 <HAL_GPIO_Init+0x240>
 800330a:	2307      	movs	r3, #7
 800330c:	e00c      	b.n	8003328 <HAL_GPIO_Init+0x240>
 800330e:	2306      	movs	r3, #6
 8003310:	e00a      	b.n	8003328 <HAL_GPIO_Init+0x240>
 8003312:	2305      	movs	r3, #5
 8003314:	e008      	b.n	8003328 <HAL_GPIO_Init+0x240>
 8003316:	2304      	movs	r3, #4
 8003318:	e006      	b.n	8003328 <HAL_GPIO_Init+0x240>
 800331a:	2303      	movs	r3, #3
 800331c:	e004      	b.n	8003328 <HAL_GPIO_Init+0x240>
 800331e:	2302      	movs	r3, #2
 8003320:	e002      	b.n	8003328 <HAL_GPIO_Init+0x240>
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <HAL_GPIO_Init+0x240>
 8003326:	2300      	movs	r3, #0
 8003328:	69fa      	ldr	r2, [r7, #28]
 800332a:	f002 0203 	and.w	r2, r2, #3
 800332e:	0092      	lsls	r2, r2, #2
 8003330:	4093      	lsls	r3, r2
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4313      	orrs	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003338:	4935      	ldr	r1, [pc, #212]	@ (8003410 <HAL_GPIO_Init+0x328>)
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	089b      	lsrs	r3, r3, #2
 800333e:	3302      	adds	r3, #2
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003346:	4b3d      	ldr	r3, [pc, #244]	@ (800343c <HAL_GPIO_Init+0x354>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	43db      	mvns	r3, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4013      	ands	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800336a:	4a34      	ldr	r2, [pc, #208]	@ (800343c <HAL_GPIO_Init+0x354>)
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003370:	4b32      	ldr	r3, [pc, #200]	@ (800343c <HAL_GPIO_Init+0x354>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	43db      	mvns	r3, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4013      	ands	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4313      	orrs	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003394:	4a29      	ldr	r2, [pc, #164]	@ (800343c <HAL_GPIO_Init+0x354>)
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800339a:	4b28      	ldr	r3, [pc, #160]	@ (800343c <HAL_GPIO_Init+0x354>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	43db      	mvns	r3, r3
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4013      	ands	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033be:	4a1f      	ldr	r2, [pc, #124]	@ (800343c <HAL_GPIO_Init+0x354>)
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033c4:	4b1d      	ldr	r3, [pc, #116]	@ (800343c <HAL_GPIO_Init+0x354>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	43db      	mvns	r3, r3
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4013      	ands	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d003      	beq.n	80033e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033e8:	4a14      	ldr	r2, [pc, #80]	@ (800343c <HAL_GPIO_Init+0x354>)
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	3301      	adds	r3, #1
 80033f2:	61fb      	str	r3, [r7, #28]
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	2b0f      	cmp	r3, #15
 80033f8:	f67f ae84 	bls.w	8003104 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033fc:	bf00      	nop
 80033fe:	bf00      	nop
 8003400:	3724      	adds	r7, #36	@ 0x24
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40023800 	.word	0x40023800
 8003410:	40013800 	.word	0x40013800
 8003414:	40020000 	.word	0x40020000
 8003418:	40020400 	.word	0x40020400
 800341c:	40020800 	.word	0x40020800
 8003420:	40020c00 	.word	0x40020c00
 8003424:	40021000 	.word	0x40021000
 8003428:	40021400 	.word	0x40021400
 800342c:	40021800 	.word	0x40021800
 8003430:	40021c00 	.word	0x40021c00
 8003434:	40022000 	.word	0x40022000
 8003438:	40022400 	.word	0x40022400
 800343c:	40013c00 	.word	0x40013c00

08003440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	460b      	mov	r3, r1
 800344a:	807b      	strh	r3, [r7, #2]
 800344c:	4613      	mov	r3, r2
 800344e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003450:	787b      	ldrb	r3, [r7, #1]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003456:	887a      	ldrh	r2, [r7, #2]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800345c:	e003      	b.n	8003466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800345e:	887b      	ldrh	r3, [r7, #2]
 8003460:	041a      	lsls	r2, r3, #16
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	619a      	str	r2, [r3, #24]
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003472:	b480      	push	{r7}
 8003474:	b085      	sub	sp, #20
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	460b      	mov	r3, r1
 800347c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003484:	887a      	ldrh	r2, [r7, #2]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	4013      	ands	r3, r2
 800348a:	041a      	lsls	r2, r3, #16
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	43d9      	mvns	r1, r3
 8003490:	887b      	ldrh	r3, [r7, #2]
 8003492:	400b      	ands	r3, r1
 8003494:	431a      	orrs	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	619a      	str	r2, [r3, #24]
}
 800349a:	bf00      	nop
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
	...

080034a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80034b2:	4b08      	ldr	r3, [pc, #32]	@ (80034d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034b4:	695a      	ldr	r2, [r3, #20]
 80034b6:	88fb      	ldrh	r3, [r7, #6]
 80034b8:	4013      	ands	r3, r2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d006      	beq.n	80034cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034be:	4a05      	ldr	r2, [pc, #20]	@ (80034d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034c0:	88fb      	ldrh	r3, [r7, #6]
 80034c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034c4:	88fb      	ldrh	r3, [r7, #6]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 f806 	bl	80034d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80034cc:	bf00      	nop
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40013c00 	.word	0x40013c00

080034d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
	...

080034f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	603b      	str	r3, [r7, #0]
 80034fe:	4b20      	ldr	r3, [pc, #128]	@ (8003580 <HAL_PWREx_EnableOverDrive+0x90>)
 8003500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003502:	4a1f      	ldr	r2, [pc, #124]	@ (8003580 <HAL_PWREx_EnableOverDrive+0x90>)
 8003504:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003508:	6413      	str	r3, [r2, #64]	@ 0x40
 800350a:	4b1d      	ldr	r3, [pc, #116]	@ (8003580 <HAL_PWREx_EnableOverDrive+0x90>)
 800350c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003512:	603b      	str	r3, [r7, #0]
 8003514:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003516:	4b1b      	ldr	r3, [pc, #108]	@ (8003584 <HAL_PWREx_EnableOverDrive+0x94>)
 8003518:	2201      	movs	r2, #1
 800351a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800351c:	f7ff f932 	bl	8002784 <HAL_GetTick>
 8003520:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003522:	e009      	b.n	8003538 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003524:	f7ff f92e 	bl	8002784 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003532:	d901      	bls.n	8003538 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e01f      	b.n	8003578 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003538:	4b13      	ldr	r3, [pc, #76]	@ (8003588 <HAL_PWREx_EnableOverDrive+0x98>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003544:	d1ee      	bne.n	8003524 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003546:	4b11      	ldr	r3, [pc, #68]	@ (800358c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003548:	2201      	movs	r2, #1
 800354a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800354c:	f7ff f91a 	bl	8002784 <HAL_GetTick>
 8003550:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003552:	e009      	b.n	8003568 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003554:	f7ff f916 	bl	8002784 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003562:	d901      	bls.n	8003568 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e007      	b.n	8003578 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003568:	4b07      	ldr	r3, [pc, #28]	@ (8003588 <HAL_PWREx_EnableOverDrive+0x98>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003570:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003574:	d1ee      	bne.n	8003554 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40023800 	.word	0x40023800
 8003584:	420e0040 	.word	0x420e0040
 8003588:	40007000 	.word	0x40007000
 800358c:	420e0044 	.word	0x420e0044

08003590 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e267      	b.n	8003a72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d075      	beq.n	800369a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80035ae:	4b88      	ldr	r3, [pc, #544]	@ (80037d0 <HAL_RCC_OscConfig+0x240>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 030c 	and.w	r3, r3, #12
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	d00c      	beq.n	80035d4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ba:	4b85      	ldr	r3, [pc, #532]	@ (80037d0 <HAL_RCC_OscConfig+0x240>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80035c2:	2b08      	cmp	r3, #8
 80035c4:	d112      	bne.n	80035ec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035c6:	4b82      	ldr	r3, [pc, #520]	@ (80037d0 <HAL_RCC_OscConfig+0x240>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035d2:	d10b      	bne.n	80035ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d4:	4b7e      	ldr	r3, [pc, #504]	@ (80037d0 <HAL_RCC_OscConfig+0x240>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d05b      	beq.n	8003698 <HAL_RCC_OscConfig+0x108>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d157      	bne.n	8003698 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e242      	b.n	8003a72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035f4:	d106      	bne.n	8003604 <HAL_RCC_OscConfig+0x74>
 80035f6:	4b76      	ldr	r3, [pc, #472]	@ (80037d0 <HAL_RCC_OscConfig+0x240>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a75      	ldr	r2, [pc, #468]	@ (80037d0 <HAL_RCC_OscConfig+0x240>)
 80035fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003600:	6013      	str	r3, [r2, #0]
 8003602:	e01d      	b.n	8003640 <HAL_RCC_OscConfig+0xb0>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800360c:	d10c      	bne.n	8003628 <HAL_RCC_OscConfig+0x98>
 800360e:	4b70      	ldr	r3, [pc, #448]	@ (80037d0 <HAL_RCC_OscConfig+0x240>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a6f      	ldr	r2, [pc, #444]	@ (80037d0 <HAL_RCC_OscConfig+0x240>)
 8003614:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	4b6d      	ldr	r3, [pc, #436]	@ (80037d0 <HAL_RCC_OscConfig+0x240>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a6c      	ldr	r2, [pc, #432]	@ (80037d0 <HAL_RCC_OscConfig+0x240>)
 8003620:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	e00b      	b.n	8003640 <HAL_RCC_OscConfig+0xb0>
 8003628:	4b69      	ldr	r3, [pc, #420]	@ (80037d0 <HAL_RCC_OscConfig+0x240>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a68      	ldr	r2, [pc, #416]	@ (80037d0 <HAL_RCC_OscConfig+0x240>)
 800362e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003632:	6013      	str	r3, [r2, #0]
 8003634:	4b66      	ldr	r3, [pc, #408]	@ (80037d0 <HAL_RCC_OscConfig+0x240>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a65      	ldr	r2, [pc, #404]	@ (80037d0 <HAL_RCC_OscConfig+0x240>)
 800363a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800363e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d013      	beq.n	8003670 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003648:	f7ff f89c 	bl	8002784 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003650:	f7ff f898 	bl	8002784 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b64      	cmp	r3, #100	@ 0x64
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e207      	b.n	8003a72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003662:	4b5b      	ldr	r3, [pc, #364]	@ (80037d0 <HAL_RCC_OscConfig+0x240>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0f0      	beq.n	8003650 <HAL_RCC_OscConfig+0xc0>
 800366e:	e014      	b.n	800369a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003670:	f7ff f888 	bl	8002784 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003678:	f7ff f884 	bl	8002784 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b64      	cmp	r3, #100	@ 0x64
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e1f3      	b.n	8003a72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800368a:	4b51      	ldr	r3, [pc, #324]	@ (80037d0 <HAL_RCC_OscConfig+0x240>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1f0      	bne.n	8003678 <HAL_RCC_OscConfig+0xe8>
 8003696:	e000      	b.n	800369a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d063      	beq.n	800376e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80036a6:	4b4a      	ldr	r3, [pc, #296]	@ (80037d0 <HAL_RCC_OscConfig+0x240>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00b      	beq.n	80036ca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036b2:	4b47      	ldr	r3, [pc, #284]	@ (80037d0 <HAL_RCC_OscConfig+0x240>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80036ba:	2b08      	cmp	r3, #8
 80036bc:	d11c      	bne.n	80036f8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036be:	4b44      	ldr	r3, [pc, #272]	@ (80037d0 <HAL_RCC_OscConfig+0x240>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d116      	bne.n	80036f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ca:	4b41      	ldr	r3, [pc, #260]	@ (80037d0 <HAL_RCC_OscConfig+0x240>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d005      	beq.n	80036e2 <HAL_RCC_OscConfig+0x152>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d001      	beq.n	80036e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e1c7      	b.n	8003a72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e2:	4b3b      	ldr	r3, [pc, #236]	@ (80037d0 <HAL_RCC_OscConfig+0x240>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	4937      	ldr	r1, [pc, #220]	@ (80037d0 <HAL_RCC_OscConfig+0x240>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036f6:	e03a      	b.n	800376e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d020      	beq.n	8003742 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003700:	4b34      	ldr	r3, [pc, #208]	@ (80037d4 <HAL_RCC_OscConfig+0x244>)
 8003702:	2201      	movs	r2, #1
 8003704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003706:	f7ff f83d 	bl	8002784 <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800370e:	f7ff f839 	bl	8002784 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e1a8      	b.n	8003a72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003720:	4b2b      	ldr	r3, [pc, #172]	@ (80037d0 <HAL_RCC_OscConfig+0x240>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0f0      	beq.n	800370e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800372c:	4b28      	ldr	r3, [pc, #160]	@ (80037d0 <HAL_RCC_OscConfig+0x240>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	00db      	lsls	r3, r3, #3
 800373a:	4925      	ldr	r1, [pc, #148]	@ (80037d0 <HAL_RCC_OscConfig+0x240>)
 800373c:	4313      	orrs	r3, r2
 800373e:	600b      	str	r3, [r1, #0]
 8003740:	e015      	b.n	800376e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003742:	4b24      	ldr	r3, [pc, #144]	@ (80037d4 <HAL_RCC_OscConfig+0x244>)
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003748:	f7ff f81c 	bl	8002784 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003750:	f7ff f818 	bl	8002784 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e187      	b.n	8003a72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003762:	4b1b      	ldr	r3, [pc, #108]	@ (80037d0 <HAL_RCC_OscConfig+0x240>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1f0      	bne.n	8003750 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0308 	and.w	r3, r3, #8
 8003776:	2b00      	cmp	r3, #0
 8003778:	d036      	beq.n	80037e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d016      	beq.n	80037b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003782:	4b15      	ldr	r3, [pc, #84]	@ (80037d8 <HAL_RCC_OscConfig+0x248>)
 8003784:	2201      	movs	r2, #1
 8003786:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003788:	f7fe fffc 	bl	8002784 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003790:	f7fe fff8 	bl	8002784 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e167      	b.n	8003a72 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037a2:	4b0b      	ldr	r3, [pc, #44]	@ (80037d0 <HAL_RCC_OscConfig+0x240>)
 80037a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d0f0      	beq.n	8003790 <HAL_RCC_OscConfig+0x200>
 80037ae:	e01b      	b.n	80037e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037b0:	4b09      	ldr	r3, [pc, #36]	@ (80037d8 <HAL_RCC_OscConfig+0x248>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037b6:	f7fe ffe5 	bl	8002784 <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037bc:	e00e      	b.n	80037dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037be:	f7fe ffe1 	bl	8002784 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d907      	bls.n	80037dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e150      	b.n	8003a72 <HAL_RCC_OscConfig+0x4e2>
 80037d0:	40023800 	.word	0x40023800
 80037d4:	42470000 	.word	0x42470000
 80037d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037dc:	4b88      	ldr	r3, [pc, #544]	@ (8003a00 <HAL_RCC_OscConfig+0x470>)
 80037de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1ea      	bne.n	80037be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 8097 	beq.w	8003924 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037f6:	2300      	movs	r3, #0
 80037f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037fa:	4b81      	ldr	r3, [pc, #516]	@ (8003a00 <HAL_RCC_OscConfig+0x470>)
 80037fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10f      	bne.n	8003826 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003806:	2300      	movs	r3, #0
 8003808:	60bb      	str	r3, [r7, #8]
 800380a:	4b7d      	ldr	r3, [pc, #500]	@ (8003a00 <HAL_RCC_OscConfig+0x470>)
 800380c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380e:	4a7c      	ldr	r2, [pc, #496]	@ (8003a00 <HAL_RCC_OscConfig+0x470>)
 8003810:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003814:	6413      	str	r3, [r2, #64]	@ 0x40
 8003816:	4b7a      	ldr	r3, [pc, #488]	@ (8003a00 <HAL_RCC_OscConfig+0x470>)
 8003818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800381e:	60bb      	str	r3, [r7, #8]
 8003820:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003822:	2301      	movs	r3, #1
 8003824:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003826:	4b77      	ldr	r3, [pc, #476]	@ (8003a04 <HAL_RCC_OscConfig+0x474>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800382e:	2b00      	cmp	r3, #0
 8003830:	d118      	bne.n	8003864 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003832:	4b74      	ldr	r3, [pc, #464]	@ (8003a04 <HAL_RCC_OscConfig+0x474>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a73      	ldr	r2, [pc, #460]	@ (8003a04 <HAL_RCC_OscConfig+0x474>)
 8003838:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800383c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800383e:	f7fe ffa1 	bl	8002784 <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003844:	e008      	b.n	8003858 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003846:	f7fe ff9d 	bl	8002784 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e10c      	b.n	8003a72 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003858:	4b6a      	ldr	r3, [pc, #424]	@ (8003a04 <HAL_RCC_OscConfig+0x474>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0f0      	beq.n	8003846 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d106      	bne.n	800387a <HAL_RCC_OscConfig+0x2ea>
 800386c:	4b64      	ldr	r3, [pc, #400]	@ (8003a00 <HAL_RCC_OscConfig+0x470>)
 800386e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003870:	4a63      	ldr	r2, [pc, #396]	@ (8003a00 <HAL_RCC_OscConfig+0x470>)
 8003872:	f043 0301 	orr.w	r3, r3, #1
 8003876:	6713      	str	r3, [r2, #112]	@ 0x70
 8003878:	e01c      	b.n	80038b4 <HAL_RCC_OscConfig+0x324>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	2b05      	cmp	r3, #5
 8003880:	d10c      	bne.n	800389c <HAL_RCC_OscConfig+0x30c>
 8003882:	4b5f      	ldr	r3, [pc, #380]	@ (8003a00 <HAL_RCC_OscConfig+0x470>)
 8003884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003886:	4a5e      	ldr	r2, [pc, #376]	@ (8003a00 <HAL_RCC_OscConfig+0x470>)
 8003888:	f043 0304 	orr.w	r3, r3, #4
 800388c:	6713      	str	r3, [r2, #112]	@ 0x70
 800388e:	4b5c      	ldr	r3, [pc, #368]	@ (8003a00 <HAL_RCC_OscConfig+0x470>)
 8003890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003892:	4a5b      	ldr	r2, [pc, #364]	@ (8003a00 <HAL_RCC_OscConfig+0x470>)
 8003894:	f043 0301 	orr.w	r3, r3, #1
 8003898:	6713      	str	r3, [r2, #112]	@ 0x70
 800389a:	e00b      	b.n	80038b4 <HAL_RCC_OscConfig+0x324>
 800389c:	4b58      	ldr	r3, [pc, #352]	@ (8003a00 <HAL_RCC_OscConfig+0x470>)
 800389e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038a0:	4a57      	ldr	r2, [pc, #348]	@ (8003a00 <HAL_RCC_OscConfig+0x470>)
 80038a2:	f023 0301 	bic.w	r3, r3, #1
 80038a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80038a8:	4b55      	ldr	r3, [pc, #340]	@ (8003a00 <HAL_RCC_OscConfig+0x470>)
 80038aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ac:	4a54      	ldr	r2, [pc, #336]	@ (8003a00 <HAL_RCC_OscConfig+0x470>)
 80038ae:	f023 0304 	bic.w	r3, r3, #4
 80038b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d015      	beq.n	80038e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038bc:	f7fe ff62 	bl	8002784 <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c2:	e00a      	b.n	80038da <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038c4:	f7fe ff5e 	bl	8002784 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e0cb      	b.n	8003a72 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038da:	4b49      	ldr	r3, [pc, #292]	@ (8003a00 <HAL_RCC_OscConfig+0x470>)
 80038dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0ee      	beq.n	80038c4 <HAL_RCC_OscConfig+0x334>
 80038e6:	e014      	b.n	8003912 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038e8:	f7fe ff4c 	bl	8002784 <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ee:	e00a      	b.n	8003906 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038f0:	f7fe ff48 	bl	8002784 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038fe:	4293      	cmp	r3, r2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e0b5      	b.n	8003a72 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003906:	4b3e      	ldr	r3, [pc, #248]	@ (8003a00 <HAL_RCC_OscConfig+0x470>)
 8003908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1ee      	bne.n	80038f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003912:	7dfb      	ldrb	r3, [r7, #23]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d105      	bne.n	8003924 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003918:	4b39      	ldr	r3, [pc, #228]	@ (8003a00 <HAL_RCC_OscConfig+0x470>)
 800391a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391c:	4a38      	ldr	r2, [pc, #224]	@ (8003a00 <HAL_RCC_OscConfig+0x470>)
 800391e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003922:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 80a1 	beq.w	8003a70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800392e:	4b34      	ldr	r3, [pc, #208]	@ (8003a00 <HAL_RCC_OscConfig+0x470>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 030c 	and.w	r3, r3, #12
 8003936:	2b08      	cmp	r3, #8
 8003938:	d05c      	beq.n	80039f4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	2b02      	cmp	r3, #2
 8003940:	d141      	bne.n	80039c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003942:	4b31      	ldr	r3, [pc, #196]	@ (8003a08 <HAL_RCC_OscConfig+0x478>)
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003948:	f7fe ff1c 	bl	8002784 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003950:	f7fe ff18 	bl	8002784 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e087      	b.n	8003a72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003962:	4b27      	ldr	r3, [pc, #156]	@ (8003a00 <HAL_RCC_OscConfig+0x470>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f0      	bne.n	8003950 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	69da      	ldr	r2, [r3, #28]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397c:	019b      	lsls	r3, r3, #6
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003984:	085b      	lsrs	r3, r3, #1
 8003986:	3b01      	subs	r3, #1
 8003988:	041b      	lsls	r3, r3, #16
 800398a:	431a      	orrs	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003990:	061b      	lsls	r3, r3, #24
 8003992:	491b      	ldr	r1, [pc, #108]	@ (8003a00 <HAL_RCC_OscConfig+0x470>)
 8003994:	4313      	orrs	r3, r2
 8003996:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003998:	4b1b      	ldr	r3, [pc, #108]	@ (8003a08 <HAL_RCC_OscConfig+0x478>)
 800399a:	2201      	movs	r2, #1
 800399c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399e:	f7fe fef1 	bl	8002784 <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a4:	e008      	b.n	80039b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039a6:	f7fe feed 	bl	8002784 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e05c      	b.n	8003a72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b8:	4b11      	ldr	r3, [pc, #68]	@ (8003a00 <HAL_RCC_OscConfig+0x470>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0f0      	beq.n	80039a6 <HAL_RCC_OscConfig+0x416>
 80039c4:	e054      	b.n	8003a70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c6:	4b10      	ldr	r3, [pc, #64]	@ (8003a08 <HAL_RCC_OscConfig+0x478>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039cc:	f7fe feda 	bl	8002784 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039d4:	f7fe fed6 	bl	8002784 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e045      	b.n	8003a72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e6:	4b06      	ldr	r3, [pc, #24]	@ (8003a00 <HAL_RCC_OscConfig+0x470>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1f0      	bne.n	80039d4 <HAL_RCC_OscConfig+0x444>
 80039f2:	e03d      	b.n	8003a70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d107      	bne.n	8003a0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e038      	b.n	8003a72 <HAL_RCC_OscConfig+0x4e2>
 8003a00:	40023800 	.word	0x40023800
 8003a04:	40007000 	.word	0x40007000
 8003a08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8003a7c <HAL_RCC_OscConfig+0x4ec>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d028      	beq.n	8003a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d121      	bne.n	8003a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d11a      	bne.n	8003a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d111      	bne.n	8003a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a52:	085b      	lsrs	r3, r3, #1
 8003a54:	3b01      	subs	r3, #1
 8003a56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d107      	bne.n	8003a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d001      	beq.n	8003a70 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e000      	b.n	8003a72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3718      	adds	r7, #24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	40023800 	.word	0x40023800

08003a80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e0cc      	b.n	8003c2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a94:	4b68      	ldr	r3, [pc, #416]	@ (8003c38 <HAL_RCC_ClockConfig+0x1b8>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 030f 	and.w	r3, r3, #15
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d90c      	bls.n	8003abc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa2:	4b65      	ldr	r3, [pc, #404]	@ (8003c38 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	b2d2      	uxtb	r2, r2
 8003aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aaa:	4b63      	ldr	r3, [pc, #396]	@ (8003c38 <HAL_RCC_ClockConfig+0x1b8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d001      	beq.n	8003abc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e0b8      	b.n	8003c2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d020      	beq.n	8003b0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d005      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ad4:	4b59      	ldr	r3, [pc, #356]	@ (8003c3c <HAL_RCC_ClockConfig+0x1bc>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	4a58      	ldr	r2, [pc, #352]	@ (8003c3c <HAL_RCC_ClockConfig+0x1bc>)
 8003ada:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ade:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0308 	and.w	r3, r3, #8
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d005      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003aec:	4b53      	ldr	r3, [pc, #332]	@ (8003c3c <HAL_RCC_ClockConfig+0x1bc>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	4a52      	ldr	r2, [pc, #328]	@ (8003c3c <HAL_RCC_ClockConfig+0x1bc>)
 8003af2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003af6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003af8:	4b50      	ldr	r3, [pc, #320]	@ (8003c3c <HAL_RCC_ClockConfig+0x1bc>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	494d      	ldr	r1, [pc, #308]	@ (8003c3c <HAL_RCC_ClockConfig+0x1bc>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d044      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d107      	bne.n	8003b2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b1e:	4b47      	ldr	r3, [pc, #284]	@ (8003c3c <HAL_RCC_ClockConfig+0x1bc>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d119      	bne.n	8003b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e07f      	b.n	8003c2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d003      	beq.n	8003b3e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b3a:	2b03      	cmp	r3, #3
 8003b3c:	d107      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b3e:	4b3f      	ldr	r3, [pc, #252]	@ (8003c3c <HAL_RCC_ClockConfig+0x1bc>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d109      	bne.n	8003b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e06f      	b.n	8003c2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b4e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c3c <HAL_RCC_ClockConfig+0x1bc>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e067      	b.n	8003c2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b5e:	4b37      	ldr	r3, [pc, #220]	@ (8003c3c <HAL_RCC_ClockConfig+0x1bc>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f023 0203 	bic.w	r2, r3, #3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	4934      	ldr	r1, [pc, #208]	@ (8003c3c <HAL_RCC_ClockConfig+0x1bc>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b70:	f7fe fe08 	bl	8002784 <HAL_GetTick>
 8003b74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b76:	e00a      	b.n	8003b8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b78:	f7fe fe04 	bl	8002784 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e04f      	b.n	8003c2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8e:	4b2b      	ldr	r3, [pc, #172]	@ (8003c3c <HAL_RCC_ClockConfig+0x1bc>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 020c 	and.w	r2, r3, #12
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d1eb      	bne.n	8003b78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ba0:	4b25      	ldr	r3, [pc, #148]	@ (8003c38 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 030f 	and.w	r3, r3, #15
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d20c      	bcs.n	8003bc8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bae:	4b22      	ldr	r3, [pc, #136]	@ (8003c38 <HAL_RCC_ClockConfig+0x1b8>)
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb6:	4b20      	ldr	r3, [pc, #128]	@ (8003c38 <HAL_RCC_ClockConfig+0x1b8>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d001      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e032      	b.n	8003c2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d008      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bd4:	4b19      	ldr	r3, [pc, #100]	@ (8003c3c <HAL_RCC_ClockConfig+0x1bc>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	4916      	ldr	r1, [pc, #88]	@ (8003c3c <HAL_RCC_ClockConfig+0x1bc>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0308 	and.w	r3, r3, #8
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d009      	beq.n	8003c06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bf2:	4b12      	ldr	r3, [pc, #72]	@ (8003c3c <HAL_RCC_ClockConfig+0x1bc>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	490e      	ldr	r1, [pc, #56]	@ (8003c3c <HAL_RCC_ClockConfig+0x1bc>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c06:	f000 f821 	bl	8003c4c <HAL_RCC_GetSysClockFreq>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c3c <HAL_RCC_ClockConfig+0x1bc>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	091b      	lsrs	r3, r3, #4
 8003c12:	f003 030f 	and.w	r3, r3, #15
 8003c16:	490a      	ldr	r1, [pc, #40]	@ (8003c40 <HAL_RCC_ClockConfig+0x1c0>)
 8003c18:	5ccb      	ldrb	r3, [r1, r3]
 8003c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c1e:	4a09      	ldr	r2, [pc, #36]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c4>)
 8003c20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003c22:	4b09      	ldr	r3, [pc, #36]	@ (8003c48 <HAL_RCC_ClockConfig+0x1c8>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7fe fd68 	bl	80026fc <HAL_InitTick>

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	40023c00 	.word	0x40023c00
 8003c3c:	40023800 	.word	0x40023800
 8003c40:	08007004 	.word	0x08007004
 8003c44:	20000014 	.word	0x20000014
 8003c48:	20000018 	.word	0x20000018

08003c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c50:	b094      	sub	sp, #80	@ 0x50
 8003c52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c64:	4b79      	ldr	r3, [pc, #484]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f003 030c 	and.w	r3, r3, #12
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d00d      	beq.n	8003c8c <HAL_RCC_GetSysClockFreq+0x40>
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	f200 80e1 	bhi.w	8003e38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <HAL_RCC_GetSysClockFreq+0x34>
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d003      	beq.n	8003c86 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c7e:	e0db      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c80:	4b73      	ldr	r3, [pc, #460]	@ (8003e50 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c82:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c84:	e0db      	b.n	8003e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c86:	4b73      	ldr	r3, [pc, #460]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c88:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c8a:	e0d8      	b.n	8003e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c8c:	4b6f      	ldr	r3, [pc, #444]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c94:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c96:	4b6d      	ldr	r3, [pc, #436]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d063      	beq.n	8003d6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ca2:	4b6a      	ldr	r3, [pc, #424]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	099b      	lsrs	r3, r3, #6
 8003ca8:	2200      	movs	r2, #0
 8003caa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003cbe:	4622      	mov	r2, r4
 8003cc0:	462b      	mov	r3, r5
 8003cc2:	f04f 0000 	mov.w	r0, #0
 8003cc6:	f04f 0100 	mov.w	r1, #0
 8003cca:	0159      	lsls	r1, r3, #5
 8003ccc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cd0:	0150      	lsls	r0, r2, #5
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	4621      	mov	r1, r4
 8003cd8:	1a51      	subs	r1, r2, r1
 8003cda:	6139      	str	r1, [r7, #16]
 8003cdc:	4629      	mov	r1, r5
 8003cde:	eb63 0301 	sbc.w	r3, r3, r1
 8003ce2:	617b      	str	r3, [r7, #20]
 8003ce4:	f04f 0200 	mov.w	r2, #0
 8003ce8:	f04f 0300 	mov.w	r3, #0
 8003cec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cf0:	4659      	mov	r1, fp
 8003cf2:	018b      	lsls	r3, r1, #6
 8003cf4:	4651      	mov	r1, sl
 8003cf6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cfa:	4651      	mov	r1, sl
 8003cfc:	018a      	lsls	r2, r1, #6
 8003cfe:	4651      	mov	r1, sl
 8003d00:	ebb2 0801 	subs.w	r8, r2, r1
 8003d04:	4659      	mov	r1, fp
 8003d06:	eb63 0901 	sbc.w	r9, r3, r1
 8003d0a:	f04f 0200 	mov.w	r2, #0
 8003d0e:	f04f 0300 	mov.w	r3, #0
 8003d12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d1e:	4690      	mov	r8, r2
 8003d20:	4699      	mov	r9, r3
 8003d22:	4623      	mov	r3, r4
 8003d24:	eb18 0303 	adds.w	r3, r8, r3
 8003d28:	60bb      	str	r3, [r7, #8]
 8003d2a:	462b      	mov	r3, r5
 8003d2c:	eb49 0303 	adc.w	r3, r9, r3
 8003d30:	60fb      	str	r3, [r7, #12]
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	f04f 0300 	mov.w	r3, #0
 8003d3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d3e:	4629      	mov	r1, r5
 8003d40:	024b      	lsls	r3, r1, #9
 8003d42:	4621      	mov	r1, r4
 8003d44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d48:	4621      	mov	r1, r4
 8003d4a:	024a      	lsls	r2, r1, #9
 8003d4c:	4610      	mov	r0, r2
 8003d4e:	4619      	mov	r1, r3
 8003d50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d52:	2200      	movs	r2, #0
 8003d54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d5c:	f7fc fa98 	bl	8000290 <__aeabi_uldivmod>
 8003d60:	4602      	mov	r2, r0
 8003d62:	460b      	mov	r3, r1
 8003d64:	4613      	mov	r3, r2
 8003d66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d68:	e058      	b.n	8003e1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d6a:	4b38      	ldr	r3, [pc, #224]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	099b      	lsrs	r3, r3, #6
 8003d70:	2200      	movs	r2, #0
 8003d72:	4618      	mov	r0, r3
 8003d74:	4611      	mov	r1, r2
 8003d76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d7a:	623b      	str	r3, [r7, #32]
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d84:	4642      	mov	r2, r8
 8003d86:	464b      	mov	r3, r9
 8003d88:	f04f 0000 	mov.w	r0, #0
 8003d8c:	f04f 0100 	mov.w	r1, #0
 8003d90:	0159      	lsls	r1, r3, #5
 8003d92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d96:	0150      	lsls	r0, r2, #5
 8003d98:	4602      	mov	r2, r0
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	4641      	mov	r1, r8
 8003d9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003da2:	4649      	mov	r1, r9
 8003da4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	f04f 0300 	mov.w	r3, #0
 8003db0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003db4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003db8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003dbc:	ebb2 040a 	subs.w	r4, r2, sl
 8003dc0:	eb63 050b 	sbc.w	r5, r3, fp
 8003dc4:	f04f 0200 	mov.w	r2, #0
 8003dc8:	f04f 0300 	mov.w	r3, #0
 8003dcc:	00eb      	lsls	r3, r5, #3
 8003dce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dd2:	00e2      	lsls	r2, r4, #3
 8003dd4:	4614      	mov	r4, r2
 8003dd6:	461d      	mov	r5, r3
 8003dd8:	4643      	mov	r3, r8
 8003dda:	18e3      	adds	r3, r4, r3
 8003ddc:	603b      	str	r3, [r7, #0]
 8003dde:	464b      	mov	r3, r9
 8003de0:	eb45 0303 	adc.w	r3, r5, r3
 8003de4:	607b      	str	r3, [r7, #4]
 8003de6:	f04f 0200 	mov.w	r2, #0
 8003dea:	f04f 0300 	mov.w	r3, #0
 8003dee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003df2:	4629      	mov	r1, r5
 8003df4:	028b      	lsls	r3, r1, #10
 8003df6:	4621      	mov	r1, r4
 8003df8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dfc:	4621      	mov	r1, r4
 8003dfe:	028a      	lsls	r2, r1, #10
 8003e00:	4610      	mov	r0, r2
 8003e02:	4619      	mov	r1, r3
 8003e04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e06:	2200      	movs	r2, #0
 8003e08:	61bb      	str	r3, [r7, #24]
 8003e0a:	61fa      	str	r2, [r7, #28]
 8003e0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e10:	f7fc fa3e 	bl	8000290 <__aeabi_uldivmod>
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4613      	mov	r3, r2
 8003e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	0c1b      	lsrs	r3, r3, #16
 8003e22:	f003 0303 	and.w	r3, r3, #3
 8003e26:	3301      	adds	r3, #1
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003e2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e34:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e36:	e002      	b.n	8003e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e38:	4b05      	ldr	r3, [pc, #20]	@ (8003e50 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e3a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3750      	adds	r7, #80	@ 0x50
 8003e44:	46bd      	mov	sp, r7
 8003e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40023800 	.word	0x40023800
 8003e50:	00f42400 	.word	0x00f42400
 8003e54:	007a1200 	.word	0x007a1200

08003e58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003e64:	2300      	movs	r3, #0
 8003e66:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10b      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d105      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d075      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e8c:	4b91      	ldr	r3, [pc, #580]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e92:	f7fe fc77 	bl	8002784 <HAL_GetTick>
 8003e96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e98:	e008      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e9a:	f7fe fc73 	bl	8002784 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e189      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003eac:	4b8a      	ldr	r3, [pc, #552]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1f0      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d009      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	019a      	lsls	r2, r3, #6
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	071b      	lsls	r3, r3, #28
 8003ed0:	4981      	ldr	r1, [pc, #516]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d01f      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ee4:	4b7c      	ldr	r3, [pc, #496]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003eea:	0f1b      	lsrs	r3, r3, #28
 8003eec:	f003 0307 	and.w	r3, r3, #7
 8003ef0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	019a      	lsls	r2, r3, #6
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	061b      	lsls	r3, r3, #24
 8003efe:	431a      	orrs	r2, r3
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	071b      	lsls	r3, r3, #28
 8003f04:	4974      	ldr	r1, [pc, #464]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f0c:	4b72      	ldr	r3, [pc, #456]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f12:	f023 021f 	bic.w	r2, r3, #31
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	496e      	ldr	r1, [pc, #440]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00d      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	019a      	lsls	r2, r3, #6
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	061b      	lsls	r3, r3, #24
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	071b      	lsls	r3, r3, #28
 8003f44:	4964      	ldr	r1, [pc, #400]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f4c:	4b61      	ldr	r3, [pc, #388]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003f4e:	2201      	movs	r2, #1
 8003f50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f52:	f7fe fc17 	bl	8002784 <HAL_GetTick>
 8003f56:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f58:	e008      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f5a:	f7fe fc13 	bl	8002784 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e129      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f6c:	4b5a      	ldr	r3, [pc, #360]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0f0      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d105      	bne.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d079      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f90:	4b52      	ldr	r3, [pc, #328]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f96:	f7fe fbf5 	bl	8002784 <HAL_GetTick>
 8003f9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f9c:	e008      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f9e:	f7fe fbf1 	bl	8002784 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e107      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003fb0:	4b49      	ldr	r3, [pc, #292]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003fb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fbc:	d0ef      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d020      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fca:	4b43      	ldr	r3, [pc, #268]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd0:	0f1b      	lsrs	r3, r3, #28
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	019a      	lsls	r2, r3, #6
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	061b      	lsls	r3, r3, #24
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	071b      	lsls	r3, r3, #28
 8003fea:	493b      	ldr	r1, [pc, #236]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003ff2:	4b39      	ldr	r3, [pc, #228]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ff8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	3b01      	subs	r3, #1
 8004002:	021b      	lsls	r3, r3, #8
 8004004:	4934      	ldr	r1, [pc, #208]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004006:	4313      	orrs	r3, r2
 8004008:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0308 	and.w	r3, r3, #8
 8004014:	2b00      	cmp	r3, #0
 8004016:	d01e      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004018:	4b2f      	ldr	r3, [pc, #188]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800401a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800401e:	0e1b      	lsrs	r3, r3, #24
 8004020:	f003 030f 	and.w	r3, r3, #15
 8004024:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	019a      	lsls	r2, r3, #6
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	061b      	lsls	r3, r3, #24
 8004030:	431a      	orrs	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	071b      	lsls	r3, r3, #28
 8004038:	4927      	ldr	r1, [pc, #156]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800403a:	4313      	orrs	r3, r2
 800403c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004040:	4b25      	ldr	r3, [pc, #148]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004042:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004046:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404e:	4922      	ldr	r1, [pc, #136]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004050:	4313      	orrs	r3, r2
 8004052:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004056:	4b21      	ldr	r3, [pc, #132]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004058:	2201      	movs	r2, #1
 800405a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800405c:	f7fe fb92 	bl	8002784 <HAL_GetTick>
 8004060:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004062:	e008      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004064:	f7fe fb8e 	bl	8002784 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d901      	bls.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e0a4      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004076:	4b18      	ldr	r3, [pc, #96]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800407e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004082:	d1ef      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0320 	and.w	r3, r3, #32
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 808b 	beq.w	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004092:	2300      	movs	r3, #0
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	4b10      	ldr	r3, [pc, #64]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409a:	4a0f      	ldr	r2, [pc, #60]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800409c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80040a2:	4b0d      	ldr	r3, [pc, #52]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80040ae:	4b0c      	ldr	r3, [pc, #48]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a0b      	ldr	r2, [pc, #44]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80040b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80040ba:	f7fe fb63 	bl	8002784 <HAL_GetTick>
 80040be:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80040c0:	e010      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040c2:	f7fe fb5f 	bl	8002784 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d909      	bls.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e075      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80040d4:	42470068 	.word	0x42470068
 80040d8:	40023800 	.word	0x40023800
 80040dc:	42470070 	.word	0x42470070
 80040e0:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80040e4:	4b38      	ldr	r3, [pc, #224]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0e8      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040f0:	4b36      	ldr	r3, [pc, #216]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80040f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040f8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d02f      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004104:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	429a      	cmp	r2, r3
 800410c:	d028      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800410e:	4b2f      	ldr	r3, [pc, #188]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004112:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004116:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004118:	4b2d      	ldr	r3, [pc, #180]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800411a:	2201      	movs	r2, #1
 800411c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800411e:	4b2c      	ldr	r3, [pc, #176]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004124:	4a29      	ldr	r2, [pc, #164]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800412a:	4b28      	ldr	r3, [pc, #160]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800412c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b01      	cmp	r3, #1
 8004134:	d114      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004136:	f7fe fb25 	bl	8002784 <HAL_GetTick>
 800413a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800413c:	e00a      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800413e:	f7fe fb21 	bl	8002784 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	f241 3288 	movw	r2, #5000	@ 0x1388
 800414c:	4293      	cmp	r3, r2
 800414e:	d901      	bls.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e035      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004154:	4b1d      	ldr	r3, [pc, #116]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0ee      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004164:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004168:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800416c:	d10d      	bne.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800416e:	4b17      	ldr	r3, [pc, #92]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800417a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800417e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004182:	4912      	ldr	r1, [pc, #72]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004184:	4313      	orrs	r3, r2
 8004186:	608b      	str	r3, [r1, #8]
 8004188:	e005      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800418a:	4b10      	ldr	r3, [pc, #64]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	4a0f      	ldr	r2, [pc, #60]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004190:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004194:	6093      	str	r3, [r2, #8]
 8004196:	4b0d      	ldr	r3, [pc, #52]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004198:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800419e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041a2:	490a      	ldr	r1, [pc, #40]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0310 	and.w	r3, r3, #16
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d004      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80041ba:	4b06      	ldr	r3, [pc, #24]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80041bc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3718      	adds	r7, #24
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	40007000 	.word	0x40007000
 80041cc:	40023800 	.word	0x40023800
 80041d0:	42470e40 	.word	0x42470e40
 80041d4:	424711e0 	.word	0x424711e0

080041d8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e073      	b.n	80042d2 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	7f5b      	ldrb	r3, [r3, #29]
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d105      	bne.n	8004200 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7fe f868 	bl	80022d0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	f003 0310 	and.w	r3, r3, #16
 8004210:	2b10      	cmp	r3, #16
 8004212:	d055      	beq.n	80042c0 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	22ca      	movs	r2, #202	@ 0xca
 800421a:	625a      	str	r2, [r3, #36]	@ 0x24
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2253      	movs	r2, #83	@ 0x53
 8004222:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f87f 	bl	8004328 <RTC_EnterInitMode>
 800422a:	4603      	mov	r3, r0
 800422c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800422e:	7bfb      	ldrb	r3, [r7, #15]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d12c      	bne.n	800428e <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	6812      	ldr	r2, [r2, #0]
 800423e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004242:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004246:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6899      	ldr	r1, [r3, #8]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	431a      	orrs	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	431a      	orrs	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	68d2      	ldr	r2, [r2, #12]
 800426e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6919      	ldr	r1, [r3, #16]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	041a      	lsls	r2, r3, #16
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	430a      	orrs	r2, r1
 8004282:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f886 	bl	8004396 <RTC_ExitInitMode>
 800428a:	4603      	mov	r3, r0
 800428c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800428e:	7bfb      	ldrb	r3, [r7, #15]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d110      	bne.n	80042b6 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80042a2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	699a      	ldr	r2, [r3, #24]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	22ff      	movs	r2, #255	@ 0xff
 80042bc:	625a      	str	r2, [r3, #36]	@ 0x24
 80042be:	e001      	b.n	80042c4 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80042c0:	2300      	movs	r3, #0
 80042c2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d102      	bne.n	80042d0 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
	...

080042dc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a0d      	ldr	r2, [pc, #52]	@ (8004324 <HAL_RTC_WaitForSynchro+0x48>)
 80042ee:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042f0:	f7fe fa48 	bl	8002784 <HAL_GetTick>
 80042f4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80042f6:	e009      	b.n	800430c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80042f8:	f7fe fa44 	bl	8002784 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004306:	d901      	bls.n	800430c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e007      	b.n	800431c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	f003 0320 	and.w	r3, r3, #32
 8004316:	2b00      	cmp	r3, #0
 8004318:	d0ee      	beq.n	80042f8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	00017f5f 	.word	0x00017f5f

08004328 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004330:	2300      	movs	r3, #0
 8004332:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004334:	2300      	movs	r3, #0
 8004336:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004342:	2b00      	cmp	r3, #0
 8004344:	d122      	bne.n	800438c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004354:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004356:	f7fe fa15 	bl	8002784 <HAL_GetTick>
 800435a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800435c:	e00c      	b.n	8004378 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800435e:	f7fe fa11 	bl	8002784 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800436c:	d904      	bls.n	8004378 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2204      	movs	r2, #4
 8004372:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004382:	2b00      	cmp	r3, #0
 8004384:	d102      	bne.n	800438c <RTC_EnterInitMode+0x64>
 8004386:	7bfb      	ldrb	r3, [r7, #15]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d1e8      	bne.n	800435e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800438c:	7bfb      	ldrb	r3, [r7, #15]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b084      	sub	sp, #16
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800439e:	2300      	movs	r3, #0
 80043a0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043b0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f003 0320 	and.w	r3, r3, #32
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10a      	bne.n	80043d6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f7ff ff8b 	bl	80042dc <HAL_RTC_WaitForSynchro>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d004      	beq.n	80043d6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2204      	movs	r2, #4
 80043d0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80043d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e07b      	b.n	80044ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d108      	bne.n	800440c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004402:	d009      	beq.n	8004418 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	61da      	str	r2, [r3, #28]
 800440a:	e005      	b.n	8004418 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d106      	bne.n	8004438 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7fd ff76 	bl	8002324 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2202      	movs	r2, #2
 800443c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800444e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004460:	431a      	orrs	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	431a      	orrs	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	431a      	orrs	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004488:	431a      	orrs	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800449c:	ea42 0103 	orr.w	r1, r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	0c1b      	lsrs	r3, r3, #16
 80044b6:	f003 0104 	and.w	r1, r3, #4
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044be:	f003 0210 	and.w	r2, r3, #16
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	69da      	ldr	r2, [r3, #28]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b088      	sub	sp, #32
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	60f8      	str	r0, [r7, #12]
 80044fa:	60b9      	str	r1, [r7, #8]
 80044fc:	603b      	str	r3, [r7, #0]
 80044fe:	4613      	mov	r3, r2
 8004500:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004502:	f7fe f93f 	bl	8002784 <HAL_GetTick>
 8004506:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004508:	88fb      	ldrh	r3, [r7, #6]
 800450a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b01      	cmp	r3, #1
 8004516:	d001      	beq.n	800451c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004518:	2302      	movs	r3, #2
 800451a:	e12a      	b.n	8004772 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <HAL_SPI_Transmit+0x36>
 8004522:	88fb      	ldrh	r3, [r7, #6]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e122      	b.n	8004772 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004532:	2b01      	cmp	r3, #1
 8004534:	d101      	bne.n	800453a <HAL_SPI_Transmit+0x48>
 8004536:	2302      	movs	r3, #2
 8004538:	e11b      	b.n	8004772 <HAL_SPI_Transmit+0x280>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2203      	movs	r2, #3
 8004546:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	88fa      	ldrh	r2, [r7, #6]
 800455a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	88fa      	ldrh	r2, [r7, #6]
 8004560:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004588:	d10f      	bne.n	80045aa <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004598:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b4:	2b40      	cmp	r3, #64	@ 0x40
 80045b6:	d007      	beq.n	80045c8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045d0:	d152      	bne.n	8004678 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <HAL_SPI_Transmit+0xee>
 80045da:	8b7b      	ldrh	r3, [r7, #26]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d145      	bne.n	800466c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e4:	881a      	ldrh	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f0:	1c9a      	adds	r2, r3, #2
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	3b01      	subs	r3, #1
 80045fe:	b29a      	uxth	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004604:	e032      	b.n	800466c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b02      	cmp	r3, #2
 8004612:	d112      	bne.n	800463a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004618:	881a      	ldrh	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004624:	1c9a      	adds	r2, r3, #2
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800462e:	b29b      	uxth	r3, r3
 8004630:	3b01      	subs	r3, #1
 8004632:	b29a      	uxth	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004638:	e018      	b.n	800466c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800463a:	f7fe f8a3 	bl	8002784 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d803      	bhi.n	8004652 <HAL_SPI_Transmit+0x160>
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004650:	d102      	bne.n	8004658 <HAL_SPI_Transmit+0x166>
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d109      	bne.n	800466c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e082      	b.n	8004772 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004670:	b29b      	uxth	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1c7      	bne.n	8004606 <HAL_SPI_Transmit+0x114>
 8004676:	e053      	b.n	8004720 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <HAL_SPI_Transmit+0x194>
 8004680:	8b7b      	ldrh	r3, [r7, #26]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d147      	bne.n	8004716 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	330c      	adds	r3, #12
 8004690:	7812      	ldrb	r2, [r2, #0]
 8004692:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004698:	1c5a      	adds	r2, r3, #1
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	3b01      	subs	r3, #1
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80046ac:	e033      	b.n	8004716 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d113      	bne.n	80046e4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	330c      	adds	r3, #12
 80046c6:	7812      	ldrb	r2, [r2, #0]
 80046c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ce:	1c5a      	adds	r2, r3, #1
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046d8:	b29b      	uxth	r3, r3
 80046da:	3b01      	subs	r3, #1
 80046dc:	b29a      	uxth	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80046e2:	e018      	b.n	8004716 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046e4:	f7fe f84e 	bl	8002784 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d803      	bhi.n	80046fc <HAL_SPI_Transmit+0x20a>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fa:	d102      	bne.n	8004702 <HAL_SPI_Transmit+0x210>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d109      	bne.n	8004716 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e02d      	b.n	8004772 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800471a:	b29b      	uxth	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1c6      	bne.n	80046ae <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004720:	69fa      	ldr	r2, [r7, #28]
 8004722:	6839      	ldr	r1, [r7, #0]
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 f9f9 	bl	8004b1c <SPI_EndRxTxTransaction>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d002      	beq.n	8004736 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2220      	movs	r2, #32
 8004734:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10a      	bne.n	8004754 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800473e:	2300      	movs	r3, #0
 8004740:	617b      	str	r3, [r7, #20]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	617b      	str	r3, [r7, #20]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	617b      	str	r3, [r7, #20]
 8004752:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e000      	b.n	8004772 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004770:	2300      	movs	r3, #0
  }
}
 8004772:	4618      	mov	r0, r3
 8004774:	3720      	adds	r7, #32
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
	...

0800477c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	4613      	mov	r3, r2
 8004788:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b01      	cmp	r3, #1
 8004794:	d001      	beq.n	800479a <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8004796:	2302      	movs	r3, #2
 8004798:	e097      	b.n	80048ca <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d002      	beq.n	80047a6 <HAL_SPI_Transmit_DMA+0x2a>
 80047a0:	88fb      	ldrh	r3, [r7, #6]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e08f      	b.n	80048ca <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d101      	bne.n	80047b8 <HAL_SPI_Transmit_DMA+0x3c>
 80047b4:	2302      	movs	r3, #2
 80047b6:	e088      	b.n	80048ca <HAL_SPI_Transmit_DMA+0x14e>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2203      	movs	r2, #3
 80047c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	88fa      	ldrh	r2, [r7, #6]
 80047d8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	88fa      	ldrh	r2, [r7, #6]
 80047de:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004806:	d10f      	bne.n	8004828 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004816:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004826:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800482c:	4a29      	ldr	r2, [pc, #164]	@ (80048d4 <HAL_SPI_Transmit_DMA+0x158>)
 800482e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004834:	4a28      	ldr	r2, [pc, #160]	@ (80048d8 <HAL_SPI_Transmit_DMA+0x15c>)
 8004836:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800483c:	4a27      	ldr	r2, [pc, #156]	@ (80048dc <HAL_SPI_Transmit_DMA+0x160>)
 800483e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004844:	2200      	movs	r2, #0
 8004846:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004850:	4619      	mov	r1, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	330c      	adds	r3, #12
 8004858:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800485e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004860:	f7fe f980 	bl	8002b64 <HAL_DMA_Start_IT>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00b      	beq.n	8004882 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800486e:	f043 0210 	orr.w	r2, r3, #16
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e023      	b.n	80048ca <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800488c:	2b40      	cmp	r3, #64	@ 0x40
 800488e:	d007      	beq.n	80048a0 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800489e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0220 	orr.w	r2, r2, #32
 80048b6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f042 0202 	orr.w	r2, r2, #2
 80048c6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	080049b1 	.word	0x080049b1
 80048d8:	08004909 	.word	0x08004909
 80048dc:	080049cd 	.word	0x080049cd

080048e0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004914:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004916:	f7fd ff35 	bl	8002784 <HAL_GetTick>
 800491a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004926:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800492a:	d03b      	beq.n	80049a4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 0220 	bic.w	r2, r2, #32
 800493a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 0202 	bic.w	r2, r2, #2
 800494a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	2164      	movs	r1, #100	@ 0x64
 8004950:	6978      	ldr	r0, [r7, #20]
 8004952:	f000 f8e3 	bl	8004b1c <SPI_EndRxTxTransaction>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d005      	beq.n	8004968 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004960:	f043 0220 	orr.w	r2, r3, #32
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10a      	bne.n	8004986 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004970:	2300      	movs	r3, #0
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	60fb      	str	r3, [r7, #12]
 8004984:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2200      	movs	r2, #0
 800498a:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800499c:	6978      	ldr	r0, [r7, #20]
 800499e:	f7ff ffa9 	bl	80048f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80049a2:	e002      	b.n	80049aa <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80049a4:	6978      	ldr	r0, [r7, #20]
 80049a6:	f7fb fecb 	bl	8000740 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80049aa:	3718      	adds	r7, #24
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049bc:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f7ff ff8e 	bl	80048e0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80049c4:	bf00      	nop
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 0203 	bic.w	r2, r2, #3
 80049e8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ee:	f043 0210 	orr.w	r2, r3, #16
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f7ff ff78 	bl	80048f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004a04:	bf00      	nop
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b088      	sub	sp, #32
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	603b      	str	r3, [r7, #0]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a1c:	f7fd feb2 	bl	8002784 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a24:	1a9b      	subs	r3, r3, r2
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	4413      	add	r3, r2
 8004a2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a2c:	f7fd feaa 	bl	8002784 <HAL_GetTick>
 8004a30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a32:	4b39      	ldr	r3, [pc, #228]	@ (8004b18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	015b      	lsls	r3, r3, #5
 8004a38:	0d1b      	lsrs	r3, r3, #20
 8004a3a:	69fa      	ldr	r2, [r7, #28]
 8004a3c:	fb02 f303 	mul.w	r3, r2, r3
 8004a40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a42:	e055      	b.n	8004af0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4a:	d051      	beq.n	8004af0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a4c:	f7fd fe9a 	bl	8002784 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	69fa      	ldr	r2, [r7, #28]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d902      	bls.n	8004a62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d13d      	bne.n	8004ade <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004a70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a7a:	d111      	bne.n	8004aa0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a84:	d004      	beq.n	8004a90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a8e:	d107      	bne.n	8004aa0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aa4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aa8:	d10f      	bne.n	8004aca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ac8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e018      	b.n	8004b10 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d102      	bne.n	8004aea <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	61fb      	str	r3, [r7, #28]
 8004ae8:	e002      	b.n	8004af0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	3b01      	subs	r3, #1
 8004aee:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689a      	ldr	r2, [r3, #8]
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	4013      	ands	r3, r2
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	bf0c      	ite	eq
 8004b00:	2301      	moveq	r3, #1
 8004b02:	2300      	movne	r3, #0
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	461a      	mov	r2, r3
 8004b08:	79fb      	ldrb	r3, [r7, #7]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d19a      	bne.n	8004a44 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3720      	adds	r7, #32
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	20000014 	.word	0x20000014

08004b1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b088      	sub	sp, #32
 8004b20:	af02      	add	r7, sp, #8
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	2102      	movs	r1, #2
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f7ff ff6a 	bl	8004a0c <SPI_WaitFlagStateUntilTimeout>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d007      	beq.n	8004b4e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b42:	f043 0220 	orr.w	r2, r3, #32
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e032      	b.n	8004bb4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8004bbc <SPI_EndRxTxTransaction+0xa0>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a1b      	ldr	r2, [pc, #108]	@ (8004bc0 <SPI_EndRxTxTransaction+0xa4>)
 8004b54:	fba2 2303 	umull	r2, r3, r2, r3
 8004b58:	0d5b      	lsrs	r3, r3, #21
 8004b5a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004b5e:	fb02 f303 	mul.w	r3, r2, r3
 8004b62:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b6c:	d112      	bne.n	8004b94 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2200      	movs	r2, #0
 8004b76:	2180      	movs	r1, #128	@ 0x80
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f7ff ff47 	bl	8004a0c <SPI_WaitFlagStateUntilTimeout>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d016      	beq.n	8004bb2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b88:	f043 0220 	orr.w	r2, r3, #32
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e00f      	b.n	8004bb4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00a      	beq.n	8004bb0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004baa:	2b80      	cmp	r3, #128	@ 0x80
 8004bac:	d0f2      	beq.n	8004b94 <SPI_EndRxTxTransaction+0x78>
 8004bae:	e000      	b.n	8004bb2 <SPI_EndRxTxTransaction+0x96>
        break;
 8004bb0:	bf00      	nop
  }

  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3718      	adds	r7, #24
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	20000014 	.word	0x20000014
 8004bc0:	165e9f81 	.word	0x165e9f81

08004bc4 <srand>:
 8004bc4:	b538      	push	{r3, r4, r5, lr}
 8004bc6:	4b10      	ldr	r3, [pc, #64]	@ (8004c08 <srand+0x44>)
 8004bc8:	681d      	ldr	r5, [r3, #0]
 8004bca:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004bcc:	4604      	mov	r4, r0
 8004bce:	b9b3      	cbnz	r3, 8004bfe <srand+0x3a>
 8004bd0:	2018      	movs	r0, #24
 8004bd2:	f000 fa9d 	bl	8005110 <malloc>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	6328      	str	r0, [r5, #48]	@ 0x30
 8004bda:	b920      	cbnz	r0, 8004be6 <srand+0x22>
 8004bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8004c0c <srand+0x48>)
 8004bde:	480c      	ldr	r0, [pc, #48]	@ (8004c10 <srand+0x4c>)
 8004be0:	2146      	movs	r1, #70	@ 0x46
 8004be2:	f000 fa2d 	bl	8005040 <__assert_func>
 8004be6:	490b      	ldr	r1, [pc, #44]	@ (8004c14 <srand+0x50>)
 8004be8:	4b0b      	ldr	r3, [pc, #44]	@ (8004c18 <srand+0x54>)
 8004bea:	e9c0 1300 	strd	r1, r3, [r0]
 8004bee:	4b0b      	ldr	r3, [pc, #44]	@ (8004c1c <srand+0x58>)
 8004bf0:	6083      	str	r3, [r0, #8]
 8004bf2:	230b      	movs	r3, #11
 8004bf4:	8183      	strh	r3, [r0, #12]
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	2001      	movs	r0, #1
 8004bfa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004bfe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004c00:	2200      	movs	r2, #0
 8004c02:	611c      	str	r4, [r3, #16]
 8004c04:	615a      	str	r2, [r3, #20]
 8004c06:	bd38      	pop	{r3, r4, r5, pc}
 8004c08:	2000002c 	.word	0x2000002c
 8004c0c:	0800701c 	.word	0x0800701c
 8004c10:	08007033 	.word	0x08007033
 8004c14:	abcd330e 	.word	0xabcd330e
 8004c18:	e66d1234 	.word	0xe66d1234
 8004c1c:	0005deec 	.word	0x0005deec

08004c20 <rand>:
 8004c20:	4b16      	ldr	r3, [pc, #88]	@ (8004c7c <rand+0x5c>)
 8004c22:	b510      	push	{r4, lr}
 8004c24:	681c      	ldr	r4, [r3, #0]
 8004c26:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004c28:	b9b3      	cbnz	r3, 8004c58 <rand+0x38>
 8004c2a:	2018      	movs	r0, #24
 8004c2c:	f000 fa70 	bl	8005110 <malloc>
 8004c30:	4602      	mov	r2, r0
 8004c32:	6320      	str	r0, [r4, #48]	@ 0x30
 8004c34:	b920      	cbnz	r0, 8004c40 <rand+0x20>
 8004c36:	4b12      	ldr	r3, [pc, #72]	@ (8004c80 <rand+0x60>)
 8004c38:	4812      	ldr	r0, [pc, #72]	@ (8004c84 <rand+0x64>)
 8004c3a:	2152      	movs	r1, #82	@ 0x52
 8004c3c:	f000 fa00 	bl	8005040 <__assert_func>
 8004c40:	4911      	ldr	r1, [pc, #68]	@ (8004c88 <rand+0x68>)
 8004c42:	4b12      	ldr	r3, [pc, #72]	@ (8004c8c <rand+0x6c>)
 8004c44:	e9c0 1300 	strd	r1, r3, [r0]
 8004c48:	4b11      	ldr	r3, [pc, #68]	@ (8004c90 <rand+0x70>)
 8004c4a:	6083      	str	r3, [r0, #8]
 8004c4c:	230b      	movs	r3, #11
 8004c4e:	8183      	strh	r3, [r0, #12]
 8004c50:	2100      	movs	r1, #0
 8004c52:	2001      	movs	r0, #1
 8004c54:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004c58:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004c5a:	480e      	ldr	r0, [pc, #56]	@ (8004c94 <rand+0x74>)
 8004c5c:	690b      	ldr	r3, [r1, #16]
 8004c5e:	694c      	ldr	r4, [r1, #20]
 8004c60:	4a0d      	ldr	r2, [pc, #52]	@ (8004c98 <rand+0x78>)
 8004c62:	4358      	muls	r0, r3
 8004c64:	fb02 0004 	mla	r0, r2, r4, r0
 8004c68:	fba3 3202 	umull	r3, r2, r3, r2
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	eb40 0002 	adc.w	r0, r0, r2
 8004c72:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004c76:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004c7a:	bd10      	pop	{r4, pc}
 8004c7c:	2000002c 	.word	0x2000002c
 8004c80:	0800701c 	.word	0x0800701c
 8004c84:	08007033 	.word	0x08007033
 8004c88:	abcd330e 	.word	0xabcd330e
 8004c8c:	e66d1234 	.word	0xe66d1234
 8004c90:	0005deec 	.word	0x0005deec
 8004c94:	5851f42d 	.word	0x5851f42d
 8004c98:	4c957f2d 	.word	0x4c957f2d

08004c9c <std>:
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	b510      	push	{r4, lr}
 8004ca0:	4604      	mov	r4, r0
 8004ca2:	e9c0 3300 	strd	r3, r3, [r0]
 8004ca6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004caa:	6083      	str	r3, [r0, #8]
 8004cac:	8181      	strh	r1, [r0, #12]
 8004cae:	6643      	str	r3, [r0, #100]	@ 0x64
 8004cb0:	81c2      	strh	r2, [r0, #14]
 8004cb2:	6183      	str	r3, [r0, #24]
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	2208      	movs	r2, #8
 8004cb8:	305c      	adds	r0, #92	@ 0x5c
 8004cba:	f000 f916 	bl	8004eea <memset>
 8004cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8004cf4 <std+0x58>)
 8004cc0:	6263      	str	r3, [r4, #36]	@ 0x24
 8004cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8004cf8 <std+0x5c>)
 8004cc4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8004cfc <std+0x60>)
 8004cc8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004cca:	4b0d      	ldr	r3, [pc, #52]	@ (8004d00 <std+0x64>)
 8004ccc:	6323      	str	r3, [r4, #48]	@ 0x30
 8004cce:	4b0d      	ldr	r3, [pc, #52]	@ (8004d04 <std+0x68>)
 8004cd0:	6224      	str	r4, [r4, #32]
 8004cd2:	429c      	cmp	r4, r3
 8004cd4:	d006      	beq.n	8004ce4 <std+0x48>
 8004cd6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004cda:	4294      	cmp	r4, r2
 8004cdc:	d002      	beq.n	8004ce4 <std+0x48>
 8004cde:	33d0      	adds	r3, #208	@ 0xd0
 8004ce0:	429c      	cmp	r4, r3
 8004ce2:	d105      	bne.n	8004cf0 <std+0x54>
 8004ce4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cec:	f000 b9a4 	b.w	8005038 <__retarget_lock_init_recursive>
 8004cf0:	bd10      	pop	{r4, pc}
 8004cf2:	bf00      	nop
 8004cf4:	08004e65 	.word	0x08004e65
 8004cf8:	08004e87 	.word	0x08004e87
 8004cfc:	08004ebf 	.word	0x08004ebf
 8004d00:	08004ee3 	.word	0x08004ee3
 8004d04:	20000734 	.word	0x20000734

08004d08 <stdio_exit_handler>:
 8004d08:	4a02      	ldr	r2, [pc, #8]	@ (8004d14 <stdio_exit_handler+0xc>)
 8004d0a:	4903      	ldr	r1, [pc, #12]	@ (8004d18 <stdio_exit_handler+0x10>)
 8004d0c:	4803      	ldr	r0, [pc, #12]	@ (8004d1c <stdio_exit_handler+0x14>)
 8004d0e:	f000 b869 	b.w	8004de4 <_fwalk_sglue>
 8004d12:	bf00      	nop
 8004d14:	20000020 	.word	0x20000020
 8004d18:	0800594d 	.word	0x0800594d
 8004d1c:	20000030 	.word	0x20000030

08004d20 <cleanup_stdio>:
 8004d20:	6841      	ldr	r1, [r0, #4]
 8004d22:	4b0c      	ldr	r3, [pc, #48]	@ (8004d54 <cleanup_stdio+0x34>)
 8004d24:	4299      	cmp	r1, r3
 8004d26:	b510      	push	{r4, lr}
 8004d28:	4604      	mov	r4, r0
 8004d2a:	d001      	beq.n	8004d30 <cleanup_stdio+0x10>
 8004d2c:	f000 fe0e 	bl	800594c <_fflush_r>
 8004d30:	68a1      	ldr	r1, [r4, #8]
 8004d32:	4b09      	ldr	r3, [pc, #36]	@ (8004d58 <cleanup_stdio+0x38>)
 8004d34:	4299      	cmp	r1, r3
 8004d36:	d002      	beq.n	8004d3e <cleanup_stdio+0x1e>
 8004d38:	4620      	mov	r0, r4
 8004d3a:	f000 fe07 	bl	800594c <_fflush_r>
 8004d3e:	68e1      	ldr	r1, [r4, #12]
 8004d40:	4b06      	ldr	r3, [pc, #24]	@ (8004d5c <cleanup_stdio+0x3c>)
 8004d42:	4299      	cmp	r1, r3
 8004d44:	d004      	beq.n	8004d50 <cleanup_stdio+0x30>
 8004d46:	4620      	mov	r0, r4
 8004d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d4c:	f000 bdfe 	b.w	800594c <_fflush_r>
 8004d50:	bd10      	pop	{r4, pc}
 8004d52:	bf00      	nop
 8004d54:	20000734 	.word	0x20000734
 8004d58:	2000079c 	.word	0x2000079c
 8004d5c:	20000804 	.word	0x20000804

08004d60 <global_stdio_init.part.0>:
 8004d60:	b510      	push	{r4, lr}
 8004d62:	4b0b      	ldr	r3, [pc, #44]	@ (8004d90 <global_stdio_init.part.0+0x30>)
 8004d64:	4c0b      	ldr	r4, [pc, #44]	@ (8004d94 <global_stdio_init.part.0+0x34>)
 8004d66:	4a0c      	ldr	r2, [pc, #48]	@ (8004d98 <global_stdio_init.part.0+0x38>)
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	4620      	mov	r0, r4
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	2104      	movs	r1, #4
 8004d70:	f7ff ff94 	bl	8004c9c <std>
 8004d74:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004d78:	2201      	movs	r2, #1
 8004d7a:	2109      	movs	r1, #9
 8004d7c:	f7ff ff8e 	bl	8004c9c <std>
 8004d80:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004d84:	2202      	movs	r2, #2
 8004d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d8a:	2112      	movs	r1, #18
 8004d8c:	f7ff bf86 	b.w	8004c9c <std>
 8004d90:	2000086c 	.word	0x2000086c
 8004d94:	20000734 	.word	0x20000734
 8004d98:	08004d09 	.word	0x08004d09

08004d9c <__sfp_lock_acquire>:
 8004d9c:	4801      	ldr	r0, [pc, #4]	@ (8004da4 <__sfp_lock_acquire+0x8>)
 8004d9e:	f000 b94c 	b.w	800503a <__retarget_lock_acquire_recursive>
 8004da2:	bf00      	nop
 8004da4:	20000875 	.word	0x20000875

08004da8 <__sfp_lock_release>:
 8004da8:	4801      	ldr	r0, [pc, #4]	@ (8004db0 <__sfp_lock_release+0x8>)
 8004daa:	f000 b947 	b.w	800503c <__retarget_lock_release_recursive>
 8004dae:	bf00      	nop
 8004db0:	20000875 	.word	0x20000875

08004db4 <__sinit>:
 8004db4:	b510      	push	{r4, lr}
 8004db6:	4604      	mov	r4, r0
 8004db8:	f7ff fff0 	bl	8004d9c <__sfp_lock_acquire>
 8004dbc:	6a23      	ldr	r3, [r4, #32]
 8004dbe:	b11b      	cbz	r3, 8004dc8 <__sinit+0x14>
 8004dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dc4:	f7ff bff0 	b.w	8004da8 <__sfp_lock_release>
 8004dc8:	4b04      	ldr	r3, [pc, #16]	@ (8004ddc <__sinit+0x28>)
 8004dca:	6223      	str	r3, [r4, #32]
 8004dcc:	4b04      	ldr	r3, [pc, #16]	@ (8004de0 <__sinit+0x2c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1f5      	bne.n	8004dc0 <__sinit+0xc>
 8004dd4:	f7ff ffc4 	bl	8004d60 <global_stdio_init.part.0>
 8004dd8:	e7f2      	b.n	8004dc0 <__sinit+0xc>
 8004dda:	bf00      	nop
 8004ddc:	08004d21 	.word	0x08004d21
 8004de0:	2000086c 	.word	0x2000086c

08004de4 <_fwalk_sglue>:
 8004de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004de8:	4607      	mov	r7, r0
 8004dea:	4688      	mov	r8, r1
 8004dec:	4614      	mov	r4, r2
 8004dee:	2600      	movs	r6, #0
 8004df0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004df4:	f1b9 0901 	subs.w	r9, r9, #1
 8004df8:	d505      	bpl.n	8004e06 <_fwalk_sglue+0x22>
 8004dfa:	6824      	ldr	r4, [r4, #0]
 8004dfc:	2c00      	cmp	r4, #0
 8004dfe:	d1f7      	bne.n	8004df0 <_fwalk_sglue+0xc>
 8004e00:	4630      	mov	r0, r6
 8004e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e06:	89ab      	ldrh	r3, [r5, #12]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d907      	bls.n	8004e1c <_fwalk_sglue+0x38>
 8004e0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e10:	3301      	adds	r3, #1
 8004e12:	d003      	beq.n	8004e1c <_fwalk_sglue+0x38>
 8004e14:	4629      	mov	r1, r5
 8004e16:	4638      	mov	r0, r7
 8004e18:	47c0      	blx	r8
 8004e1a:	4306      	orrs	r6, r0
 8004e1c:	3568      	adds	r5, #104	@ 0x68
 8004e1e:	e7e9      	b.n	8004df4 <_fwalk_sglue+0x10>

08004e20 <siprintf>:
 8004e20:	b40e      	push	{r1, r2, r3}
 8004e22:	b510      	push	{r4, lr}
 8004e24:	b09d      	sub	sp, #116	@ 0x74
 8004e26:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004e28:	9002      	str	r0, [sp, #8]
 8004e2a:	9006      	str	r0, [sp, #24]
 8004e2c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004e30:	480a      	ldr	r0, [pc, #40]	@ (8004e5c <siprintf+0x3c>)
 8004e32:	9107      	str	r1, [sp, #28]
 8004e34:	9104      	str	r1, [sp, #16]
 8004e36:	490a      	ldr	r1, [pc, #40]	@ (8004e60 <siprintf+0x40>)
 8004e38:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e3c:	9105      	str	r1, [sp, #20]
 8004e3e:	2400      	movs	r4, #0
 8004e40:	a902      	add	r1, sp, #8
 8004e42:	6800      	ldr	r0, [r0, #0]
 8004e44:	9301      	str	r3, [sp, #4]
 8004e46:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004e48:	f000 fa74 	bl	8005334 <_svfiprintf_r>
 8004e4c:	9b02      	ldr	r3, [sp, #8]
 8004e4e:	701c      	strb	r4, [r3, #0]
 8004e50:	b01d      	add	sp, #116	@ 0x74
 8004e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e56:	b003      	add	sp, #12
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	2000002c 	.word	0x2000002c
 8004e60:	ffff0208 	.word	0xffff0208

08004e64 <__sread>:
 8004e64:	b510      	push	{r4, lr}
 8004e66:	460c      	mov	r4, r1
 8004e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e6c:	f000 f896 	bl	8004f9c <_read_r>
 8004e70:	2800      	cmp	r0, #0
 8004e72:	bfab      	itete	ge
 8004e74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004e76:	89a3      	ldrhlt	r3, [r4, #12]
 8004e78:	181b      	addge	r3, r3, r0
 8004e7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004e7e:	bfac      	ite	ge
 8004e80:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004e82:	81a3      	strhlt	r3, [r4, #12]
 8004e84:	bd10      	pop	{r4, pc}

08004e86 <__swrite>:
 8004e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e8a:	461f      	mov	r7, r3
 8004e8c:	898b      	ldrh	r3, [r1, #12]
 8004e8e:	05db      	lsls	r3, r3, #23
 8004e90:	4605      	mov	r5, r0
 8004e92:	460c      	mov	r4, r1
 8004e94:	4616      	mov	r6, r2
 8004e96:	d505      	bpl.n	8004ea4 <__swrite+0x1e>
 8004e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f000 f86a 	bl	8004f78 <_lseek_r>
 8004ea4:	89a3      	ldrh	r3, [r4, #12]
 8004ea6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004eaa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004eae:	81a3      	strh	r3, [r4, #12]
 8004eb0:	4632      	mov	r2, r6
 8004eb2:	463b      	mov	r3, r7
 8004eb4:	4628      	mov	r0, r5
 8004eb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004eba:	f000 b881 	b.w	8004fc0 <_write_r>

08004ebe <__sseek>:
 8004ebe:	b510      	push	{r4, lr}
 8004ec0:	460c      	mov	r4, r1
 8004ec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ec6:	f000 f857 	bl	8004f78 <_lseek_r>
 8004eca:	1c43      	adds	r3, r0, #1
 8004ecc:	89a3      	ldrh	r3, [r4, #12]
 8004ece:	bf15      	itete	ne
 8004ed0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004ed2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004ed6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004eda:	81a3      	strheq	r3, [r4, #12]
 8004edc:	bf18      	it	ne
 8004ede:	81a3      	strhne	r3, [r4, #12]
 8004ee0:	bd10      	pop	{r4, pc}

08004ee2 <__sclose>:
 8004ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ee6:	f000 b825 	b.w	8004f34 <_close_r>

08004eea <memset>:
 8004eea:	4402      	add	r2, r0
 8004eec:	4603      	mov	r3, r0
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d100      	bne.n	8004ef4 <memset+0xa>
 8004ef2:	4770      	bx	lr
 8004ef4:	f803 1b01 	strb.w	r1, [r3], #1
 8004ef8:	e7f9      	b.n	8004eee <memset+0x4>
	...

08004efc <time>:
 8004efc:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 8004efe:	4b0c      	ldr	r3, [pc, #48]	@ (8004f30 <time+0x34>)
 8004f00:	f04f 36ff 	mov.w	r6, #4294967295
 8004f04:	f04f 37ff 	mov.w	r7, #4294967295
 8004f08:	4669      	mov	r1, sp
 8004f0a:	4604      	mov	r4, r0
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	6818      	ldr	r0, [r3, #0]
 8004f10:	e9cd 6700 	strd	r6, r7, [sp]
 8004f14:	f000 f81e 	bl	8004f54 <_gettimeofday_r>
 8004f18:	2800      	cmp	r0, #0
 8004f1a:	bfb8      	it	lt
 8004f1c:	e9cd 6700 	strdlt	r6, r7, [sp]
 8004f20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f24:	b10c      	cbz	r4, 8004f2a <time+0x2e>
 8004f26:	e9c4 0100 	strd	r0, r1, [r4]
 8004f2a:	b004      	add	sp, #16
 8004f2c:	bdd0      	pop	{r4, r6, r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	2000002c 	.word	0x2000002c

08004f34 <_close_r>:
 8004f34:	b538      	push	{r3, r4, r5, lr}
 8004f36:	4d06      	ldr	r5, [pc, #24]	@ (8004f50 <_close_r+0x1c>)
 8004f38:	2300      	movs	r3, #0
 8004f3a:	4604      	mov	r4, r0
 8004f3c:	4608      	mov	r0, r1
 8004f3e:	602b      	str	r3, [r5, #0]
 8004f40:	f7fd fb14 	bl	800256c <_close>
 8004f44:	1c43      	adds	r3, r0, #1
 8004f46:	d102      	bne.n	8004f4e <_close_r+0x1a>
 8004f48:	682b      	ldr	r3, [r5, #0]
 8004f4a:	b103      	cbz	r3, 8004f4e <_close_r+0x1a>
 8004f4c:	6023      	str	r3, [r4, #0]
 8004f4e:	bd38      	pop	{r3, r4, r5, pc}
 8004f50:	20000870 	.word	0x20000870

08004f54 <_gettimeofday_r>:
 8004f54:	b538      	push	{r3, r4, r5, lr}
 8004f56:	4d07      	ldr	r5, [pc, #28]	@ (8004f74 <_gettimeofday_r+0x20>)
 8004f58:	2300      	movs	r3, #0
 8004f5a:	4604      	mov	r4, r0
 8004f5c:	4608      	mov	r0, r1
 8004f5e:	4611      	mov	r1, r2
 8004f60:	602b      	str	r3, [r5, #0]
 8004f62:	f001 f83f 	bl	8005fe4 <_gettimeofday>
 8004f66:	1c43      	adds	r3, r0, #1
 8004f68:	d102      	bne.n	8004f70 <_gettimeofday_r+0x1c>
 8004f6a:	682b      	ldr	r3, [r5, #0]
 8004f6c:	b103      	cbz	r3, 8004f70 <_gettimeofday_r+0x1c>
 8004f6e:	6023      	str	r3, [r4, #0]
 8004f70:	bd38      	pop	{r3, r4, r5, pc}
 8004f72:	bf00      	nop
 8004f74:	20000870 	.word	0x20000870

08004f78 <_lseek_r>:
 8004f78:	b538      	push	{r3, r4, r5, lr}
 8004f7a:	4d07      	ldr	r5, [pc, #28]	@ (8004f98 <_lseek_r+0x20>)
 8004f7c:	4604      	mov	r4, r0
 8004f7e:	4608      	mov	r0, r1
 8004f80:	4611      	mov	r1, r2
 8004f82:	2200      	movs	r2, #0
 8004f84:	602a      	str	r2, [r5, #0]
 8004f86:	461a      	mov	r2, r3
 8004f88:	f7fd fb17 	bl	80025ba <_lseek>
 8004f8c:	1c43      	adds	r3, r0, #1
 8004f8e:	d102      	bne.n	8004f96 <_lseek_r+0x1e>
 8004f90:	682b      	ldr	r3, [r5, #0]
 8004f92:	b103      	cbz	r3, 8004f96 <_lseek_r+0x1e>
 8004f94:	6023      	str	r3, [r4, #0]
 8004f96:	bd38      	pop	{r3, r4, r5, pc}
 8004f98:	20000870 	.word	0x20000870

08004f9c <_read_r>:
 8004f9c:	b538      	push	{r3, r4, r5, lr}
 8004f9e:	4d07      	ldr	r5, [pc, #28]	@ (8004fbc <_read_r+0x20>)
 8004fa0:	4604      	mov	r4, r0
 8004fa2:	4608      	mov	r0, r1
 8004fa4:	4611      	mov	r1, r2
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	602a      	str	r2, [r5, #0]
 8004faa:	461a      	mov	r2, r3
 8004fac:	f7fd faa5 	bl	80024fa <_read>
 8004fb0:	1c43      	adds	r3, r0, #1
 8004fb2:	d102      	bne.n	8004fba <_read_r+0x1e>
 8004fb4:	682b      	ldr	r3, [r5, #0]
 8004fb6:	b103      	cbz	r3, 8004fba <_read_r+0x1e>
 8004fb8:	6023      	str	r3, [r4, #0]
 8004fba:	bd38      	pop	{r3, r4, r5, pc}
 8004fbc:	20000870 	.word	0x20000870

08004fc0 <_write_r>:
 8004fc0:	b538      	push	{r3, r4, r5, lr}
 8004fc2:	4d07      	ldr	r5, [pc, #28]	@ (8004fe0 <_write_r+0x20>)
 8004fc4:	4604      	mov	r4, r0
 8004fc6:	4608      	mov	r0, r1
 8004fc8:	4611      	mov	r1, r2
 8004fca:	2200      	movs	r2, #0
 8004fcc:	602a      	str	r2, [r5, #0]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	f7fd fab0 	bl	8002534 <_write>
 8004fd4:	1c43      	adds	r3, r0, #1
 8004fd6:	d102      	bne.n	8004fde <_write_r+0x1e>
 8004fd8:	682b      	ldr	r3, [r5, #0]
 8004fda:	b103      	cbz	r3, 8004fde <_write_r+0x1e>
 8004fdc:	6023      	str	r3, [r4, #0]
 8004fde:	bd38      	pop	{r3, r4, r5, pc}
 8004fe0:	20000870 	.word	0x20000870

08004fe4 <__errno>:
 8004fe4:	4b01      	ldr	r3, [pc, #4]	@ (8004fec <__errno+0x8>)
 8004fe6:	6818      	ldr	r0, [r3, #0]
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	2000002c 	.word	0x2000002c

08004ff0 <__libc_init_array>:
 8004ff0:	b570      	push	{r4, r5, r6, lr}
 8004ff2:	4d0d      	ldr	r5, [pc, #52]	@ (8005028 <__libc_init_array+0x38>)
 8004ff4:	4c0d      	ldr	r4, [pc, #52]	@ (800502c <__libc_init_array+0x3c>)
 8004ff6:	1b64      	subs	r4, r4, r5
 8004ff8:	10a4      	asrs	r4, r4, #2
 8004ffa:	2600      	movs	r6, #0
 8004ffc:	42a6      	cmp	r6, r4
 8004ffe:	d109      	bne.n	8005014 <__libc_init_array+0x24>
 8005000:	4d0b      	ldr	r5, [pc, #44]	@ (8005030 <__libc_init_array+0x40>)
 8005002:	4c0c      	ldr	r4, [pc, #48]	@ (8005034 <__libc_init_array+0x44>)
 8005004:	f000 fff6 	bl	8005ff4 <_init>
 8005008:	1b64      	subs	r4, r4, r5
 800500a:	10a4      	asrs	r4, r4, #2
 800500c:	2600      	movs	r6, #0
 800500e:	42a6      	cmp	r6, r4
 8005010:	d105      	bne.n	800501e <__libc_init_array+0x2e>
 8005012:	bd70      	pop	{r4, r5, r6, pc}
 8005014:	f855 3b04 	ldr.w	r3, [r5], #4
 8005018:	4798      	blx	r3
 800501a:	3601      	adds	r6, #1
 800501c:	e7ee      	b.n	8004ffc <__libc_init_array+0xc>
 800501e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005022:	4798      	blx	r3
 8005024:	3601      	adds	r6, #1
 8005026:	e7f2      	b.n	800500e <__libc_init_array+0x1e>
 8005028:	08007104 	.word	0x08007104
 800502c:	08007104 	.word	0x08007104
 8005030:	08007104 	.word	0x08007104
 8005034:	08007108 	.word	0x08007108

08005038 <__retarget_lock_init_recursive>:
 8005038:	4770      	bx	lr

0800503a <__retarget_lock_acquire_recursive>:
 800503a:	4770      	bx	lr

0800503c <__retarget_lock_release_recursive>:
 800503c:	4770      	bx	lr
	...

08005040 <__assert_func>:
 8005040:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005042:	4614      	mov	r4, r2
 8005044:	461a      	mov	r2, r3
 8005046:	4b09      	ldr	r3, [pc, #36]	@ (800506c <__assert_func+0x2c>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4605      	mov	r5, r0
 800504c:	68d8      	ldr	r0, [r3, #12]
 800504e:	b14c      	cbz	r4, 8005064 <__assert_func+0x24>
 8005050:	4b07      	ldr	r3, [pc, #28]	@ (8005070 <__assert_func+0x30>)
 8005052:	9100      	str	r1, [sp, #0]
 8005054:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005058:	4906      	ldr	r1, [pc, #24]	@ (8005074 <__assert_func+0x34>)
 800505a:	462b      	mov	r3, r5
 800505c:	f000 fc9e 	bl	800599c <fiprintf>
 8005060:	f000 fce6 	bl	8005a30 <abort>
 8005064:	4b04      	ldr	r3, [pc, #16]	@ (8005078 <__assert_func+0x38>)
 8005066:	461c      	mov	r4, r3
 8005068:	e7f3      	b.n	8005052 <__assert_func+0x12>
 800506a:	bf00      	nop
 800506c:	2000002c 	.word	0x2000002c
 8005070:	0800708b 	.word	0x0800708b
 8005074:	08007098 	.word	0x08007098
 8005078:	080070c6 	.word	0x080070c6

0800507c <_free_r>:
 800507c:	b538      	push	{r3, r4, r5, lr}
 800507e:	4605      	mov	r5, r0
 8005080:	2900      	cmp	r1, #0
 8005082:	d041      	beq.n	8005108 <_free_r+0x8c>
 8005084:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005088:	1f0c      	subs	r4, r1, #4
 800508a:	2b00      	cmp	r3, #0
 800508c:	bfb8      	it	lt
 800508e:	18e4      	addlt	r4, r4, r3
 8005090:	f000 f8e8 	bl	8005264 <__malloc_lock>
 8005094:	4a1d      	ldr	r2, [pc, #116]	@ (800510c <_free_r+0x90>)
 8005096:	6813      	ldr	r3, [r2, #0]
 8005098:	b933      	cbnz	r3, 80050a8 <_free_r+0x2c>
 800509a:	6063      	str	r3, [r4, #4]
 800509c:	6014      	str	r4, [r2, #0]
 800509e:	4628      	mov	r0, r5
 80050a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050a4:	f000 b8e4 	b.w	8005270 <__malloc_unlock>
 80050a8:	42a3      	cmp	r3, r4
 80050aa:	d908      	bls.n	80050be <_free_r+0x42>
 80050ac:	6820      	ldr	r0, [r4, #0]
 80050ae:	1821      	adds	r1, r4, r0
 80050b0:	428b      	cmp	r3, r1
 80050b2:	bf01      	itttt	eq
 80050b4:	6819      	ldreq	r1, [r3, #0]
 80050b6:	685b      	ldreq	r3, [r3, #4]
 80050b8:	1809      	addeq	r1, r1, r0
 80050ba:	6021      	streq	r1, [r4, #0]
 80050bc:	e7ed      	b.n	800509a <_free_r+0x1e>
 80050be:	461a      	mov	r2, r3
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	b10b      	cbz	r3, 80050c8 <_free_r+0x4c>
 80050c4:	42a3      	cmp	r3, r4
 80050c6:	d9fa      	bls.n	80050be <_free_r+0x42>
 80050c8:	6811      	ldr	r1, [r2, #0]
 80050ca:	1850      	adds	r0, r2, r1
 80050cc:	42a0      	cmp	r0, r4
 80050ce:	d10b      	bne.n	80050e8 <_free_r+0x6c>
 80050d0:	6820      	ldr	r0, [r4, #0]
 80050d2:	4401      	add	r1, r0
 80050d4:	1850      	adds	r0, r2, r1
 80050d6:	4283      	cmp	r3, r0
 80050d8:	6011      	str	r1, [r2, #0]
 80050da:	d1e0      	bne.n	800509e <_free_r+0x22>
 80050dc:	6818      	ldr	r0, [r3, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	6053      	str	r3, [r2, #4]
 80050e2:	4408      	add	r0, r1
 80050e4:	6010      	str	r0, [r2, #0]
 80050e6:	e7da      	b.n	800509e <_free_r+0x22>
 80050e8:	d902      	bls.n	80050f0 <_free_r+0x74>
 80050ea:	230c      	movs	r3, #12
 80050ec:	602b      	str	r3, [r5, #0]
 80050ee:	e7d6      	b.n	800509e <_free_r+0x22>
 80050f0:	6820      	ldr	r0, [r4, #0]
 80050f2:	1821      	adds	r1, r4, r0
 80050f4:	428b      	cmp	r3, r1
 80050f6:	bf04      	itt	eq
 80050f8:	6819      	ldreq	r1, [r3, #0]
 80050fa:	685b      	ldreq	r3, [r3, #4]
 80050fc:	6063      	str	r3, [r4, #4]
 80050fe:	bf04      	itt	eq
 8005100:	1809      	addeq	r1, r1, r0
 8005102:	6021      	streq	r1, [r4, #0]
 8005104:	6054      	str	r4, [r2, #4]
 8005106:	e7ca      	b.n	800509e <_free_r+0x22>
 8005108:	bd38      	pop	{r3, r4, r5, pc}
 800510a:	bf00      	nop
 800510c:	2000087c 	.word	0x2000087c

08005110 <malloc>:
 8005110:	4b02      	ldr	r3, [pc, #8]	@ (800511c <malloc+0xc>)
 8005112:	4601      	mov	r1, r0
 8005114:	6818      	ldr	r0, [r3, #0]
 8005116:	f000 b825 	b.w	8005164 <_malloc_r>
 800511a:	bf00      	nop
 800511c:	2000002c 	.word	0x2000002c

08005120 <sbrk_aligned>:
 8005120:	b570      	push	{r4, r5, r6, lr}
 8005122:	4e0f      	ldr	r6, [pc, #60]	@ (8005160 <sbrk_aligned+0x40>)
 8005124:	460c      	mov	r4, r1
 8005126:	6831      	ldr	r1, [r6, #0]
 8005128:	4605      	mov	r5, r0
 800512a:	b911      	cbnz	r1, 8005132 <sbrk_aligned+0x12>
 800512c:	f000 fc62 	bl	80059f4 <_sbrk_r>
 8005130:	6030      	str	r0, [r6, #0]
 8005132:	4621      	mov	r1, r4
 8005134:	4628      	mov	r0, r5
 8005136:	f000 fc5d 	bl	80059f4 <_sbrk_r>
 800513a:	1c43      	adds	r3, r0, #1
 800513c:	d103      	bne.n	8005146 <sbrk_aligned+0x26>
 800513e:	f04f 34ff 	mov.w	r4, #4294967295
 8005142:	4620      	mov	r0, r4
 8005144:	bd70      	pop	{r4, r5, r6, pc}
 8005146:	1cc4      	adds	r4, r0, #3
 8005148:	f024 0403 	bic.w	r4, r4, #3
 800514c:	42a0      	cmp	r0, r4
 800514e:	d0f8      	beq.n	8005142 <sbrk_aligned+0x22>
 8005150:	1a21      	subs	r1, r4, r0
 8005152:	4628      	mov	r0, r5
 8005154:	f000 fc4e 	bl	80059f4 <_sbrk_r>
 8005158:	3001      	adds	r0, #1
 800515a:	d1f2      	bne.n	8005142 <sbrk_aligned+0x22>
 800515c:	e7ef      	b.n	800513e <sbrk_aligned+0x1e>
 800515e:	bf00      	nop
 8005160:	20000878 	.word	0x20000878

08005164 <_malloc_r>:
 8005164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005168:	1ccd      	adds	r5, r1, #3
 800516a:	f025 0503 	bic.w	r5, r5, #3
 800516e:	3508      	adds	r5, #8
 8005170:	2d0c      	cmp	r5, #12
 8005172:	bf38      	it	cc
 8005174:	250c      	movcc	r5, #12
 8005176:	2d00      	cmp	r5, #0
 8005178:	4606      	mov	r6, r0
 800517a:	db01      	blt.n	8005180 <_malloc_r+0x1c>
 800517c:	42a9      	cmp	r1, r5
 800517e:	d904      	bls.n	800518a <_malloc_r+0x26>
 8005180:	230c      	movs	r3, #12
 8005182:	6033      	str	r3, [r6, #0]
 8005184:	2000      	movs	r0, #0
 8005186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800518a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005260 <_malloc_r+0xfc>
 800518e:	f000 f869 	bl	8005264 <__malloc_lock>
 8005192:	f8d8 3000 	ldr.w	r3, [r8]
 8005196:	461c      	mov	r4, r3
 8005198:	bb44      	cbnz	r4, 80051ec <_malloc_r+0x88>
 800519a:	4629      	mov	r1, r5
 800519c:	4630      	mov	r0, r6
 800519e:	f7ff ffbf 	bl	8005120 <sbrk_aligned>
 80051a2:	1c43      	adds	r3, r0, #1
 80051a4:	4604      	mov	r4, r0
 80051a6:	d158      	bne.n	800525a <_malloc_r+0xf6>
 80051a8:	f8d8 4000 	ldr.w	r4, [r8]
 80051ac:	4627      	mov	r7, r4
 80051ae:	2f00      	cmp	r7, #0
 80051b0:	d143      	bne.n	800523a <_malloc_r+0xd6>
 80051b2:	2c00      	cmp	r4, #0
 80051b4:	d04b      	beq.n	800524e <_malloc_r+0xea>
 80051b6:	6823      	ldr	r3, [r4, #0]
 80051b8:	4639      	mov	r1, r7
 80051ba:	4630      	mov	r0, r6
 80051bc:	eb04 0903 	add.w	r9, r4, r3
 80051c0:	f000 fc18 	bl	80059f4 <_sbrk_r>
 80051c4:	4581      	cmp	r9, r0
 80051c6:	d142      	bne.n	800524e <_malloc_r+0xea>
 80051c8:	6821      	ldr	r1, [r4, #0]
 80051ca:	1a6d      	subs	r5, r5, r1
 80051cc:	4629      	mov	r1, r5
 80051ce:	4630      	mov	r0, r6
 80051d0:	f7ff ffa6 	bl	8005120 <sbrk_aligned>
 80051d4:	3001      	adds	r0, #1
 80051d6:	d03a      	beq.n	800524e <_malloc_r+0xea>
 80051d8:	6823      	ldr	r3, [r4, #0]
 80051da:	442b      	add	r3, r5
 80051dc:	6023      	str	r3, [r4, #0]
 80051de:	f8d8 3000 	ldr.w	r3, [r8]
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	bb62      	cbnz	r2, 8005240 <_malloc_r+0xdc>
 80051e6:	f8c8 7000 	str.w	r7, [r8]
 80051ea:	e00f      	b.n	800520c <_malloc_r+0xa8>
 80051ec:	6822      	ldr	r2, [r4, #0]
 80051ee:	1b52      	subs	r2, r2, r5
 80051f0:	d420      	bmi.n	8005234 <_malloc_r+0xd0>
 80051f2:	2a0b      	cmp	r2, #11
 80051f4:	d917      	bls.n	8005226 <_malloc_r+0xc2>
 80051f6:	1961      	adds	r1, r4, r5
 80051f8:	42a3      	cmp	r3, r4
 80051fa:	6025      	str	r5, [r4, #0]
 80051fc:	bf18      	it	ne
 80051fe:	6059      	strne	r1, [r3, #4]
 8005200:	6863      	ldr	r3, [r4, #4]
 8005202:	bf08      	it	eq
 8005204:	f8c8 1000 	streq.w	r1, [r8]
 8005208:	5162      	str	r2, [r4, r5]
 800520a:	604b      	str	r3, [r1, #4]
 800520c:	4630      	mov	r0, r6
 800520e:	f000 f82f 	bl	8005270 <__malloc_unlock>
 8005212:	f104 000b 	add.w	r0, r4, #11
 8005216:	1d23      	adds	r3, r4, #4
 8005218:	f020 0007 	bic.w	r0, r0, #7
 800521c:	1ac2      	subs	r2, r0, r3
 800521e:	bf1c      	itt	ne
 8005220:	1a1b      	subne	r3, r3, r0
 8005222:	50a3      	strne	r3, [r4, r2]
 8005224:	e7af      	b.n	8005186 <_malloc_r+0x22>
 8005226:	6862      	ldr	r2, [r4, #4]
 8005228:	42a3      	cmp	r3, r4
 800522a:	bf0c      	ite	eq
 800522c:	f8c8 2000 	streq.w	r2, [r8]
 8005230:	605a      	strne	r2, [r3, #4]
 8005232:	e7eb      	b.n	800520c <_malloc_r+0xa8>
 8005234:	4623      	mov	r3, r4
 8005236:	6864      	ldr	r4, [r4, #4]
 8005238:	e7ae      	b.n	8005198 <_malloc_r+0x34>
 800523a:	463c      	mov	r4, r7
 800523c:	687f      	ldr	r7, [r7, #4]
 800523e:	e7b6      	b.n	80051ae <_malloc_r+0x4a>
 8005240:	461a      	mov	r2, r3
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	42a3      	cmp	r3, r4
 8005246:	d1fb      	bne.n	8005240 <_malloc_r+0xdc>
 8005248:	2300      	movs	r3, #0
 800524a:	6053      	str	r3, [r2, #4]
 800524c:	e7de      	b.n	800520c <_malloc_r+0xa8>
 800524e:	230c      	movs	r3, #12
 8005250:	6033      	str	r3, [r6, #0]
 8005252:	4630      	mov	r0, r6
 8005254:	f000 f80c 	bl	8005270 <__malloc_unlock>
 8005258:	e794      	b.n	8005184 <_malloc_r+0x20>
 800525a:	6005      	str	r5, [r0, #0]
 800525c:	e7d6      	b.n	800520c <_malloc_r+0xa8>
 800525e:	bf00      	nop
 8005260:	2000087c 	.word	0x2000087c

08005264 <__malloc_lock>:
 8005264:	4801      	ldr	r0, [pc, #4]	@ (800526c <__malloc_lock+0x8>)
 8005266:	f7ff bee8 	b.w	800503a <__retarget_lock_acquire_recursive>
 800526a:	bf00      	nop
 800526c:	20000874 	.word	0x20000874

08005270 <__malloc_unlock>:
 8005270:	4801      	ldr	r0, [pc, #4]	@ (8005278 <__malloc_unlock+0x8>)
 8005272:	f7ff bee3 	b.w	800503c <__retarget_lock_release_recursive>
 8005276:	bf00      	nop
 8005278:	20000874 	.word	0x20000874

0800527c <__ssputs_r>:
 800527c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005280:	688e      	ldr	r6, [r1, #8]
 8005282:	461f      	mov	r7, r3
 8005284:	42be      	cmp	r6, r7
 8005286:	680b      	ldr	r3, [r1, #0]
 8005288:	4682      	mov	sl, r0
 800528a:	460c      	mov	r4, r1
 800528c:	4690      	mov	r8, r2
 800528e:	d82d      	bhi.n	80052ec <__ssputs_r+0x70>
 8005290:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005294:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005298:	d026      	beq.n	80052e8 <__ssputs_r+0x6c>
 800529a:	6965      	ldr	r5, [r4, #20]
 800529c:	6909      	ldr	r1, [r1, #16]
 800529e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052a2:	eba3 0901 	sub.w	r9, r3, r1
 80052a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80052aa:	1c7b      	adds	r3, r7, #1
 80052ac:	444b      	add	r3, r9
 80052ae:	106d      	asrs	r5, r5, #1
 80052b0:	429d      	cmp	r5, r3
 80052b2:	bf38      	it	cc
 80052b4:	461d      	movcc	r5, r3
 80052b6:	0553      	lsls	r3, r2, #21
 80052b8:	d527      	bpl.n	800530a <__ssputs_r+0x8e>
 80052ba:	4629      	mov	r1, r5
 80052bc:	f7ff ff52 	bl	8005164 <_malloc_r>
 80052c0:	4606      	mov	r6, r0
 80052c2:	b360      	cbz	r0, 800531e <__ssputs_r+0xa2>
 80052c4:	6921      	ldr	r1, [r4, #16]
 80052c6:	464a      	mov	r2, r9
 80052c8:	f000 fba4 	bl	8005a14 <memcpy>
 80052cc:	89a3      	ldrh	r3, [r4, #12]
 80052ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80052d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052d6:	81a3      	strh	r3, [r4, #12]
 80052d8:	6126      	str	r6, [r4, #16]
 80052da:	6165      	str	r5, [r4, #20]
 80052dc:	444e      	add	r6, r9
 80052de:	eba5 0509 	sub.w	r5, r5, r9
 80052e2:	6026      	str	r6, [r4, #0]
 80052e4:	60a5      	str	r5, [r4, #8]
 80052e6:	463e      	mov	r6, r7
 80052e8:	42be      	cmp	r6, r7
 80052ea:	d900      	bls.n	80052ee <__ssputs_r+0x72>
 80052ec:	463e      	mov	r6, r7
 80052ee:	6820      	ldr	r0, [r4, #0]
 80052f0:	4632      	mov	r2, r6
 80052f2:	4641      	mov	r1, r8
 80052f4:	f000 fb64 	bl	80059c0 <memmove>
 80052f8:	68a3      	ldr	r3, [r4, #8]
 80052fa:	1b9b      	subs	r3, r3, r6
 80052fc:	60a3      	str	r3, [r4, #8]
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	4433      	add	r3, r6
 8005302:	6023      	str	r3, [r4, #0]
 8005304:	2000      	movs	r0, #0
 8005306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800530a:	462a      	mov	r2, r5
 800530c:	f000 fb97 	bl	8005a3e <_realloc_r>
 8005310:	4606      	mov	r6, r0
 8005312:	2800      	cmp	r0, #0
 8005314:	d1e0      	bne.n	80052d8 <__ssputs_r+0x5c>
 8005316:	6921      	ldr	r1, [r4, #16]
 8005318:	4650      	mov	r0, sl
 800531a:	f7ff feaf 	bl	800507c <_free_r>
 800531e:	230c      	movs	r3, #12
 8005320:	f8ca 3000 	str.w	r3, [sl]
 8005324:	89a3      	ldrh	r3, [r4, #12]
 8005326:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800532a:	81a3      	strh	r3, [r4, #12]
 800532c:	f04f 30ff 	mov.w	r0, #4294967295
 8005330:	e7e9      	b.n	8005306 <__ssputs_r+0x8a>
	...

08005334 <_svfiprintf_r>:
 8005334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005338:	4698      	mov	r8, r3
 800533a:	898b      	ldrh	r3, [r1, #12]
 800533c:	061b      	lsls	r3, r3, #24
 800533e:	b09d      	sub	sp, #116	@ 0x74
 8005340:	4607      	mov	r7, r0
 8005342:	460d      	mov	r5, r1
 8005344:	4614      	mov	r4, r2
 8005346:	d510      	bpl.n	800536a <_svfiprintf_r+0x36>
 8005348:	690b      	ldr	r3, [r1, #16]
 800534a:	b973      	cbnz	r3, 800536a <_svfiprintf_r+0x36>
 800534c:	2140      	movs	r1, #64	@ 0x40
 800534e:	f7ff ff09 	bl	8005164 <_malloc_r>
 8005352:	6028      	str	r0, [r5, #0]
 8005354:	6128      	str	r0, [r5, #16]
 8005356:	b930      	cbnz	r0, 8005366 <_svfiprintf_r+0x32>
 8005358:	230c      	movs	r3, #12
 800535a:	603b      	str	r3, [r7, #0]
 800535c:	f04f 30ff 	mov.w	r0, #4294967295
 8005360:	b01d      	add	sp, #116	@ 0x74
 8005362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005366:	2340      	movs	r3, #64	@ 0x40
 8005368:	616b      	str	r3, [r5, #20]
 800536a:	2300      	movs	r3, #0
 800536c:	9309      	str	r3, [sp, #36]	@ 0x24
 800536e:	2320      	movs	r3, #32
 8005370:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005374:	f8cd 800c 	str.w	r8, [sp, #12]
 8005378:	2330      	movs	r3, #48	@ 0x30
 800537a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005518 <_svfiprintf_r+0x1e4>
 800537e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005382:	f04f 0901 	mov.w	r9, #1
 8005386:	4623      	mov	r3, r4
 8005388:	469a      	mov	sl, r3
 800538a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800538e:	b10a      	cbz	r2, 8005394 <_svfiprintf_r+0x60>
 8005390:	2a25      	cmp	r2, #37	@ 0x25
 8005392:	d1f9      	bne.n	8005388 <_svfiprintf_r+0x54>
 8005394:	ebba 0b04 	subs.w	fp, sl, r4
 8005398:	d00b      	beq.n	80053b2 <_svfiprintf_r+0x7e>
 800539a:	465b      	mov	r3, fp
 800539c:	4622      	mov	r2, r4
 800539e:	4629      	mov	r1, r5
 80053a0:	4638      	mov	r0, r7
 80053a2:	f7ff ff6b 	bl	800527c <__ssputs_r>
 80053a6:	3001      	adds	r0, #1
 80053a8:	f000 80a7 	beq.w	80054fa <_svfiprintf_r+0x1c6>
 80053ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80053ae:	445a      	add	r2, fp
 80053b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80053b2:	f89a 3000 	ldrb.w	r3, [sl]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f000 809f 	beq.w	80054fa <_svfiprintf_r+0x1c6>
 80053bc:	2300      	movs	r3, #0
 80053be:	f04f 32ff 	mov.w	r2, #4294967295
 80053c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053c6:	f10a 0a01 	add.w	sl, sl, #1
 80053ca:	9304      	str	r3, [sp, #16]
 80053cc:	9307      	str	r3, [sp, #28]
 80053ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80053d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80053d4:	4654      	mov	r4, sl
 80053d6:	2205      	movs	r2, #5
 80053d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053dc:	484e      	ldr	r0, [pc, #312]	@ (8005518 <_svfiprintf_r+0x1e4>)
 80053de:	f7fa ff07 	bl	80001f0 <memchr>
 80053e2:	9a04      	ldr	r2, [sp, #16]
 80053e4:	b9d8      	cbnz	r0, 800541e <_svfiprintf_r+0xea>
 80053e6:	06d0      	lsls	r0, r2, #27
 80053e8:	bf44      	itt	mi
 80053ea:	2320      	movmi	r3, #32
 80053ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053f0:	0711      	lsls	r1, r2, #28
 80053f2:	bf44      	itt	mi
 80053f4:	232b      	movmi	r3, #43	@ 0x2b
 80053f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053fa:	f89a 3000 	ldrb.w	r3, [sl]
 80053fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8005400:	d015      	beq.n	800542e <_svfiprintf_r+0xfa>
 8005402:	9a07      	ldr	r2, [sp, #28]
 8005404:	4654      	mov	r4, sl
 8005406:	2000      	movs	r0, #0
 8005408:	f04f 0c0a 	mov.w	ip, #10
 800540c:	4621      	mov	r1, r4
 800540e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005412:	3b30      	subs	r3, #48	@ 0x30
 8005414:	2b09      	cmp	r3, #9
 8005416:	d94b      	bls.n	80054b0 <_svfiprintf_r+0x17c>
 8005418:	b1b0      	cbz	r0, 8005448 <_svfiprintf_r+0x114>
 800541a:	9207      	str	r2, [sp, #28]
 800541c:	e014      	b.n	8005448 <_svfiprintf_r+0x114>
 800541e:	eba0 0308 	sub.w	r3, r0, r8
 8005422:	fa09 f303 	lsl.w	r3, r9, r3
 8005426:	4313      	orrs	r3, r2
 8005428:	9304      	str	r3, [sp, #16]
 800542a:	46a2      	mov	sl, r4
 800542c:	e7d2      	b.n	80053d4 <_svfiprintf_r+0xa0>
 800542e:	9b03      	ldr	r3, [sp, #12]
 8005430:	1d19      	adds	r1, r3, #4
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	9103      	str	r1, [sp, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	bfbb      	ittet	lt
 800543a:	425b      	neglt	r3, r3
 800543c:	f042 0202 	orrlt.w	r2, r2, #2
 8005440:	9307      	strge	r3, [sp, #28]
 8005442:	9307      	strlt	r3, [sp, #28]
 8005444:	bfb8      	it	lt
 8005446:	9204      	strlt	r2, [sp, #16]
 8005448:	7823      	ldrb	r3, [r4, #0]
 800544a:	2b2e      	cmp	r3, #46	@ 0x2e
 800544c:	d10a      	bne.n	8005464 <_svfiprintf_r+0x130>
 800544e:	7863      	ldrb	r3, [r4, #1]
 8005450:	2b2a      	cmp	r3, #42	@ 0x2a
 8005452:	d132      	bne.n	80054ba <_svfiprintf_r+0x186>
 8005454:	9b03      	ldr	r3, [sp, #12]
 8005456:	1d1a      	adds	r2, r3, #4
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	9203      	str	r2, [sp, #12]
 800545c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005460:	3402      	adds	r4, #2
 8005462:	9305      	str	r3, [sp, #20]
 8005464:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005528 <_svfiprintf_r+0x1f4>
 8005468:	7821      	ldrb	r1, [r4, #0]
 800546a:	2203      	movs	r2, #3
 800546c:	4650      	mov	r0, sl
 800546e:	f7fa febf 	bl	80001f0 <memchr>
 8005472:	b138      	cbz	r0, 8005484 <_svfiprintf_r+0x150>
 8005474:	9b04      	ldr	r3, [sp, #16]
 8005476:	eba0 000a 	sub.w	r0, r0, sl
 800547a:	2240      	movs	r2, #64	@ 0x40
 800547c:	4082      	lsls	r2, r0
 800547e:	4313      	orrs	r3, r2
 8005480:	3401      	adds	r4, #1
 8005482:	9304      	str	r3, [sp, #16]
 8005484:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005488:	4824      	ldr	r0, [pc, #144]	@ (800551c <_svfiprintf_r+0x1e8>)
 800548a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800548e:	2206      	movs	r2, #6
 8005490:	f7fa feae 	bl	80001f0 <memchr>
 8005494:	2800      	cmp	r0, #0
 8005496:	d036      	beq.n	8005506 <_svfiprintf_r+0x1d2>
 8005498:	4b21      	ldr	r3, [pc, #132]	@ (8005520 <_svfiprintf_r+0x1ec>)
 800549a:	bb1b      	cbnz	r3, 80054e4 <_svfiprintf_r+0x1b0>
 800549c:	9b03      	ldr	r3, [sp, #12]
 800549e:	3307      	adds	r3, #7
 80054a0:	f023 0307 	bic.w	r3, r3, #7
 80054a4:	3308      	adds	r3, #8
 80054a6:	9303      	str	r3, [sp, #12]
 80054a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054aa:	4433      	add	r3, r6
 80054ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80054ae:	e76a      	b.n	8005386 <_svfiprintf_r+0x52>
 80054b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80054b4:	460c      	mov	r4, r1
 80054b6:	2001      	movs	r0, #1
 80054b8:	e7a8      	b.n	800540c <_svfiprintf_r+0xd8>
 80054ba:	2300      	movs	r3, #0
 80054bc:	3401      	adds	r4, #1
 80054be:	9305      	str	r3, [sp, #20]
 80054c0:	4619      	mov	r1, r3
 80054c2:	f04f 0c0a 	mov.w	ip, #10
 80054c6:	4620      	mov	r0, r4
 80054c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054cc:	3a30      	subs	r2, #48	@ 0x30
 80054ce:	2a09      	cmp	r2, #9
 80054d0:	d903      	bls.n	80054da <_svfiprintf_r+0x1a6>
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d0c6      	beq.n	8005464 <_svfiprintf_r+0x130>
 80054d6:	9105      	str	r1, [sp, #20]
 80054d8:	e7c4      	b.n	8005464 <_svfiprintf_r+0x130>
 80054da:	fb0c 2101 	mla	r1, ip, r1, r2
 80054de:	4604      	mov	r4, r0
 80054e0:	2301      	movs	r3, #1
 80054e2:	e7f0      	b.n	80054c6 <_svfiprintf_r+0x192>
 80054e4:	ab03      	add	r3, sp, #12
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	462a      	mov	r2, r5
 80054ea:	4b0e      	ldr	r3, [pc, #56]	@ (8005524 <_svfiprintf_r+0x1f0>)
 80054ec:	a904      	add	r1, sp, #16
 80054ee:	4638      	mov	r0, r7
 80054f0:	f3af 8000 	nop.w
 80054f4:	1c42      	adds	r2, r0, #1
 80054f6:	4606      	mov	r6, r0
 80054f8:	d1d6      	bne.n	80054a8 <_svfiprintf_r+0x174>
 80054fa:	89ab      	ldrh	r3, [r5, #12]
 80054fc:	065b      	lsls	r3, r3, #25
 80054fe:	f53f af2d 	bmi.w	800535c <_svfiprintf_r+0x28>
 8005502:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005504:	e72c      	b.n	8005360 <_svfiprintf_r+0x2c>
 8005506:	ab03      	add	r3, sp, #12
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	462a      	mov	r2, r5
 800550c:	4b05      	ldr	r3, [pc, #20]	@ (8005524 <_svfiprintf_r+0x1f0>)
 800550e:	a904      	add	r1, sp, #16
 8005510:	4638      	mov	r0, r7
 8005512:	f000 f879 	bl	8005608 <_printf_i>
 8005516:	e7ed      	b.n	80054f4 <_svfiprintf_r+0x1c0>
 8005518:	080070c7 	.word	0x080070c7
 800551c:	080070d1 	.word	0x080070d1
 8005520:	00000000 	.word	0x00000000
 8005524:	0800527d 	.word	0x0800527d
 8005528:	080070cd 	.word	0x080070cd

0800552c <_printf_common>:
 800552c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005530:	4616      	mov	r6, r2
 8005532:	4698      	mov	r8, r3
 8005534:	688a      	ldr	r2, [r1, #8]
 8005536:	690b      	ldr	r3, [r1, #16]
 8005538:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800553c:	4293      	cmp	r3, r2
 800553e:	bfb8      	it	lt
 8005540:	4613      	movlt	r3, r2
 8005542:	6033      	str	r3, [r6, #0]
 8005544:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005548:	4607      	mov	r7, r0
 800554a:	460c      	mov	r4, r1
 800554c:	b10a      	cbz	r2, 8005552 <_printf_common+0x26>
 800554e:	3301      	adds	r3, #1
 8005550:	6033      	str	r3, [r6, #0]
 8005552:	6823      	ldr	r3, [r4, #0]
 8005554:	0699      	lsls	r1, r3, #26
 8005556:	bf42      	ittt	mi
 8005558:	6833      	ldrmi	r3, [r6, #0]
 800555a:	3302      	addmi	r3, #2
 800555c:	6033      	strmi	r3, [r6, #0]
 800555e:	6825      	ldr	r5, [r4, #0]
 8005560:	f015 0506 	ands.w	r5, r5, #6
 8005564:	d106      	bne.n	8005574 <_printf_common+0x48>
 8005566:	f104 0a19 	add.w	sl, r4, #25
 800556a:	68e3      	ldr	r3, [r4, #12]
 800556c:	6832      	ldr	r2, [r6, #0]
 800556e:	1a9b      	subs	r3, r3, r2
 8005570:	42ab      	cmp	r3, r5
 8005572:	dc26      	bgt.n	80055c2 <_printf_common+0x96>
 8005574:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005578:	6822      	ldr	r2, [r4, #0]
 800557a:	3b00      	subs	r3, #0
 800557c:	bf18      	it	ne
 800557e:	2301      	movne	r3, #1
 8005580:	0692      	lsls	r2, r2, #26
 8005582:	d42b      	bmi.n	80055dc <_printf_common+0xb0>
 8005584:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005588:	4641      	mov	r1, r8
 800558a:	4638      	mov	r0, r7
 800558c:	47c8      	blx	r9
 800558e:	3001      	adds	r0, #1
 8005590:	d01e      	beq.n	80055d0 <_printf_common+0xa4>
 8005592:	6823      	ldr	r3, [r4, #0]
 8005594:	6922      	ldr	r2, [r4, #16]
 8005596:	f003 0306 	and.w	r3, r3, #6
 800559a:	2b04      	cmp	r3, #4
 800559c:	bf02      	ittt	eq
 800559e:	68e5      	ldreq	r5, [r4, #12]
 80055a0:	6833      	ldreq	r3, [r6, #0]
 80055a2:	1aed      	subeq	r5, r5, r3
 80055a4:	68a3      	ldr	r3, [r4, #8]
 80055a6:	bf0c      	ite	eq
 80055a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055ac:	2500      	movne	r5, #0
 80055ae:	4293      	cmp	r3, r2
 80055b0:	bfc4      	itt	gt
 80055b2:	1a9b      	subgt	r3, r3, r2
 80055b4:	18ed      	addgt	r5, r5, r3
 80055b6:	2600      	movs	r6, #0
 80055b8:	341a      	adds	r4, #26
 80055ba:	42b5      	cmp	r5, r6
 80055bc:	d11a      	bne.n	80055f4 <_printf_common+0xc8>
 80055be:	2000      	movs	r0, #0
 80055c0:	e008      	b.n	80055d4 <_printf_common+0xa8>
 80055c2:	2301      	movs	r3, #1
 80055c4:	4652      	mov	r2, sl
 80055c6:	4641      	mov	r1, r8
 80055c8:	4638      	mov	r0, r7
 80055ca:	47c8      	blx	r9
 80055cc:	3001      	adds	r0, #1
 80055ce:	d103      	bne.n	80055d8 <_printf_common+0xac>
 80055d0:	f04f 30ff 	mov.w	r0, #4294967295
 80055d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055d8:	3501      	adds	r5, #1
 80055da:	e7c6      	b.n	800556a <_printf_common+0x3e>
 80055dc:	18e1      	adds	r1, r4, r3
 80055de:	1c5a      	adds	r2, r3, #1
 80055e0:	2030      	movs	r0, #48	@ 0x30
 80055e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80055e6:	4422      	add	r2, r4
 80055e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80055ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80055f0:	3302      	adds	r3, #2
 80055f2:	e7c7      	b.n	8005584 <_printf_common+0x58>
 80055f4:	2301      	movs	r3, #1
 80055f6:	4622      	mov	r2, r4
 80055f8:	4641      	mov	r1, r8
 80055fa:	4638      	mov	r0, r7
 80055fc:	47c8      	blx	r9
 80055fe:	3001      	adds	r0, #1
 8005600:	d0e6      	beq.n	80055d0 <_printf_common+0xa4>
 8005602:	3601      	adds	r6, #1
 8005604:	e7d9      	b.n	80055ba <_printf_common+0x8e>
	...

08005608 <_printf_i>:
 8005608:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800560c:	7e0f      	ldrb	r7, [r1, #24]
 800560e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005610:	2f78      	cmp	r7, #120	@ 0x78
 8005612:	4691      	mov	r9, r2
 8005614:	4680      	mov	r8, r0
 8005616:	460c      	mov	r4, r1
 8005618:	469a      	mov	sl, r3
 800561a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800561e:	d807      	bhi.n	8005630 <_printf_i+0x28>
 8005620:	2f62      	cmp	r7, #98	@ 0x62
 8005622:	d80a      	bhi.n	800563a <_printf_i+0x32>
 8005624:	2f00      	cmp	r7, #0
 8005626:	f000 80d1 	beq.w	80057cc <_printf_i+0x1c4>
 800562a:	2f58      	cmp	r7, #88	@ 0x58
 800562c:	f000 80b8 	beq.w	80057a0 <_printf_i+0x198>
 8005630:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005634:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005638:	e03a      	b.n	80056b0 <_printf_i+0xa8>
 800563a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800563e:	2b15      	cmp	r3, #21
 8005640:	d8f6      	bhi.n	8005630 <_printf_i+0x28>
 8005642:	a101      	add	r1, pc, #4	@ (adr r1, 8005648 <_printf_i+0x40>)
 8005644:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005648:	080056a1 	.word	0x080056a1
 800564c:	080056b5 	.word	0x080056b5
 8005650:	08005631 	.word	0x08005631
 8005654:	08005631 	.word	0x08005631
 8005658:	08005631 	.word	0x08005631
 800565c:	08005631 	.word	0x08005631
 8005660:	080056b5 	.word	0x080056b5
 8005664:	08005631 	.word	0x08005631
 8005668:	08005631 	.word	0x08005631
 800566c:	08005631 	.word	0x08005631
 8005670:	08005631 	.word	0x08005631
 8005674:	080057b3 	.word	0x080057b3
 8005678:	080056df 	.word	0x080056df
 800567c:	0800576d 	.word	0x0800576d
 8005680:	08005631 	.word	0x08005631
 8005684:	08005631 	.word	0x08005631
 8005688:	080057d5 	.word	0x080057d5
 800568c:	08005631 	.word	0x08005631
 8005690:	080056df 	.word	0x080056df
 8005694:	08005631 	.word	0x08005631
 8005698:	08005631 	.word	0x08005631
 800569c:	08005775 	.word	0x08005775
 80056a0:	6833      	ldr	r3, [r6, #0]
 80056a2:	1d1a      	adds	r2, r3, #4
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	6032      	str	r2, [r6, #0]
 80056a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80056b0:	2301      	movs	r3, #1
 80056b2:	e09c      	b.n	80057ee <_printf_i+0x1e6>
 80056b4:	6833      	ldr	r3, [r6, #0]
 80056b6:	6820      	ldr	r0, [r4, #0]
 80056b8:	1d19      	adds	r1, r3, #4
 80056ba:	6031      	str	r1, [r6, #0]
 80056bc:	0606      	lsls	r6, r0, #24
 80056be:	d501      	bpl.n	80056c4 <_printf_i+0xbc>
 80056c0:	681d      	ldr	r5, [r3, #0]
 80056c2:	e003      	b.n	80056cc <_printf_i+0xc4>
 80056c4:	0645      	lsls	r5, r0, #25
 80056c6:	d5fb      	bpl.n	80056c0 <_printf_i+0xb8>
 80056c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80056cc:	2d00      	cmp	r5, #0
 80056ce:	da03      	bge.n	80056d8 <_printf_i+0xd0>
 80056d0:	232d      	movs	r3, #45	@ 0x2d
 80056d2:	426d      	negs	r5, r5
 80056d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056d8:	4858      	ldr	r0, [pc, #352]	@ (800583c <_printf_i+0x234>)
 80056da:	230a      	movs	r3, #10
 80056dc:	e011      	b.n	8005702 <_printf_i+0xfa>
 80056de:	6821      	ldr	r1, [r4, #0]
 80056e0:	6833      	ldr	r3, [r6, #0]
 80056e2:	0608      	lsls	r0, r1, #24
 80056e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80056e8:	d402      	bmi.n	80056f0 <_printf_i+0xe8>
 80056ea:	0649      	lsls	r1, r1, #25
 80056ec:	bf48      	it	mi
 80056ee:	b2ad      	uxthmi	r5, r5
 80056f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80056f2:	4852      	ldr	r0, [pc, #328]	@ (800583c <_printf_i+0x234>)
 80056f4:	6033      	str	r3, [r6, #0]
 80056f6:	bf14      	ite	ne
 80056f8:	230a      	movne	r3, #10
 80056fa:	2308      	moveq	r3, #8
 80056fc:	2100      	movs	r1, #0
 80056fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005702:	6866      	ldr	r6, [r4, #4]
 8005704:	60a6      	str	r6, [r4, #8]
 8005706:	2e00      	cmp	r6, #0
 8005708:	db05      	blt.n	8005716 <_printf_i+0x10e>
 800570a:	6821      	ldr	r1, [r4, #0]
 800570c:	432e      	orrs	r6, r5
 800570e:	f021 0104 	bic.w	r1, r1, #4
 8005712:	6021      	str	r1, [r4, #0]
 8005714:	d04b      	beq.n	80057ae <_printf_i+0x1a6>
 8005716:	4616      	mov	r6, r2
 8005718:	fbb5 f1f3 	udiv	r1, r5, r3
 800571c:	fb03 5711 	mls	r7, r3, r1, r5
 8005720:	5dc7      	ldrb	r7, [r0, r7]
 8005722:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005726:	462f      	mov	r7, r5
 8005728:	42bb      	cmp	r3, r7
 800572a:	460d      	mov	r5, r1
 800572c:	d9f4      	bls.n	8005718 <_printf_i+0x110>
 800572e:	2b08      	cmp	r3, #8
 8005730:	d10b      	bne.n	800574a <_printf_i+0x142>
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	07df      	lsls	r7, r3, #31
 8005736:	d508      	bpl.n	800574a <_printf_i+0x142>
 8005738:	6923      	ldr	r3, [r4, #16]
 800573a:	6861      	ldr	r1, [r4, #4]
 800573c:	4299      	cmp	r1, r3
 800573e:	bfde      	ittt	le
 8005740:	2330      	movle	r3, #48	@ 0x30
 8005742:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005746:	f106 36ff 	addle.w	r6, r6, #4294967295
 800574a:	1b92      	subs	r2, r2, r6
 800574c:	6122      	str	r2, [r4, #16]
 800574e:	f8cd a000 	str.w	sl, [sp]
 8005752:	464b      	mov	r3, r9
 8005754:	aa03      	add	r2, sp, #12
 8005756:	4621      	mov	r1, r4
 8005758:	4640      	mov	r0, r8
 800575a:	f7ff fee7 	bl	800552c <_printf_common>
 800575e:	3001      	adds	r0, #1
 8005760:	d14a      	bne.n	80057f8 <_printf_i+0x1f0>
 8005762:	f04f 30ff 	mov.w	r0, #4294967295
 8005766:	b004      	add	sp, #16
 8005768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800576c:	6823      	ldr	r3, [r4, #0]
 800576e:	f043 0320 	orr.w	r3, r3, #32
 8005772:	6023      	str	r3, [r4, #0]
 8005774:	4832      	ldr	r0, [pc, #200]	@ (8005840 <_printf_i+0x238>)
 8005776:	2778      	movs	r7, #120	@ 0x78
 8005778:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800577c:	6823      	ldr	r3, [r4, #0]
 800577e:	6831      	ldr	r1, [r6, #0]
 8005780:	061f      	lsls	r7, r3, #24
 8005782:	f851 5b04 	ldr.w	r5, [r1], #4
 8005786:	d402      	bmi.n	800578e <_printf_i+0x186>
 8005788:	065f      	lsls	r7, r3, #25
 800578a:	bf48      	it	mi
 800578c:	b2ad      	uxthmi	r5, r5
 800578e:	6031      	str	r1, [r6, #0]
 8005790:	07d9      	lsls	r1, r3, #31
 8005792:	bf44      	itt	mi
 8005794:	f043 0320 	orrmi.w	r3, r3, #32
 8005798:	6023      	strmi	r3, [r4, #0]
 800579a:	b11d      	cbz	r5, 80057a4 <_printf_i+0x19c>
 800579c:	2310      	movs	r3, #16
 800579e:	e7ad      	b.n	80056fc <_printf_i+0xf4>
 80057a0:	4826      	ldr	r0, [pc, #152]	@ (800583c <_printf_i+0x234>)
 80057a2:	e7e9      	b.n	8005778 <_printf_i+0x170>
 80057a4:	6823      	ldr	r3, [r4, #0]
 80057a6:	f023 0320 	bic.w	r3, r3, #32
 80057aa:	6023      	str	r3, [r4, #0]
 80057ac:	e7f6      	b.n	800579c <_printf_i+0x194>
 80057ae:	4616      	mov	r6, r2
 80057b0:	e7bd      	b.n	800572e <_printf_i+0x126>
 80057b2:	6833      	ldr	r3, [r6, #0]
 80057b4:	6825      	ldr	r5, [r4, #0]
 80057b6:	6961      	ldr	r1, [r4, #20]
 80057b8:	1d18      	adds	r0, r3, #4
 80057ba:	6030      	str	r0, [r6, #0]
 80057bc:	062e      	lsls	r6, r5, #24
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	d501      	bpl.n	80057c6 <_printf_i+0x1be>
 80057c2:	6019      	str	r1, [r3, #0]
 80057c4:	e002      	b.n	80057cc <_printf_i+0x1c4>
 80057c6:	0668      	lsls	r0, r5, #25
 80057c8:	d5fb      	bpl.n	80057c2 <_printf_i+0x1ba>
 80057ca:	8019      	strh	r1, [r3, #0]
 80057cc:	2300      	movs	r3, #0
 80057ce:	6123      	str	r3, [r4, #16]
 80057d0:	4616      	mov	r6, r2
 80057d2:	e7bc      	b.n	800574e <_printf_i+0x146>
 80057d4:	6833      	ldr	r3, [r6, #0]
 80057d6:	1d1a      	adds	r2, r3, #4
 80057d8:	6032      	str	r2, [r6, #0]
 80057da:	681e      	ldr	r6, [r3, #0]
 80057dc:	6862      	ldr	r2, [r4, #4]
 80057de:	2100      	movs	r1, #0
 80057e0:	4630      	mov	r0, r6
 80057e2:	f7fa fd05 	bl	80001f0 <memchr>
 80057e6:	b108      	cbz	r0, 80057ec <_printf_i+0x1e4>
 80057e8:	1b80      	subs	r0, r0, r6
 80057ea:	6060      	str	r0, [r4, #4]
 80057ec:	6863      	ldr	r3, [r4, #4]
 80057ee:	6123      	str	r3, [r4, #16]
 80057f0:	2300      	movs	r3, #0
 80057f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057f6:	e7aa      	b.n	800574e <_printf_i+0x146>
 80057f8:	6923      	ldr	r3, [r4, #16]
 80057fa:	4632      	mov	r2, r6
 80057fc:	4649      	mov	r1, r9
 80057fe:	4640      	mov	r0, r8
 8005800:	47d0      	blx	sl
 8005802:	3001      	adds	r0, #1
 8005804:	d0ad      	beq.n	8005762 <_printf_i+0x15a>
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	079b      	lsls	r3, r3, #30
 800580a:	d413      	bmi.n	8005834 <_printf_i+0x22c>
 800580c:	68e0      	ldr	r0, [r4, #12]
 800580e:	9b03      	ldr	r3, [sp, #12]
 8005810:	4298      	cmp	r0, r3
 8005812:	bfb8      	it	lt
 8005814:	4618      	movlt	r0, r3
 8005816:	e7a6      	b.n	8005766 <_printf_i+0x15e>
 8005818:	2301      	movs	r3, #1
 800581a:	4632      	mov	r2, r6
 800581c:	4649      	mov	r1, r9
 800581e:	4640      	mov	r0, r8
 8005820:	47d0      	blx	sl
 8005822:	3001      	adds	r0, #1
 8005824:	d09d      	beq.n	8005762 <_printf_i+0x15a>
 8005826:	3501      	adds	r5, #1
 8005828:	68e3      	ldr	r3, [r4, #12]
 800582a:	9903      	ldr	r1, [sp, #12]
 800582c:	1a5b      	subs	r3, r3, r1
 800582e:	42ab      	cmp	r3, r5
 8005830:	dcf2      	bgt.n	8005818 <_printf_i+0x210>
 8005832:	e7eb      	b.n	800580c <_printf_i+0x204>
 8005834:	2500      	movs	r5, #0
 8005836:	f104 0619 	add.w	r6, r4, #25
 800583a:	e7f5      	b.n	8005828 <_printf_i+0x220>
 800583c:	080070d8 	.word	0x080070d8
 8005840:	080070e9 	.word	0x080070e9

08005844 <__sflush_r>:
 8005844:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800584c:	0716      	lsls	r6, r2, #28
 800584e:	4605      	mov	r5, r0
 8005850:	460c      	mov	r4, r1
 8005852:	d454      	bmi.n	80058fe <__sflush_r+0xba>
 8005854:	684b      	ldr	r3, [r1, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	dc02      	bgt.n	8005860 <__sflush_r+0x1c>
 800585a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800585c:	2b00      	cmp	r3, #0
 800585e:	dd48      	ble.n	80058f2 <__sflush_r+0xae>
 8005860:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005862:	2e00      	cmp	r6, #0
 8005864:	d045      	beq.n	80058f2 <__sflush_r+0xae>
 8005866:	2300      	movs	r3, #0
 8005868:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800586c:	682f      	ldr	r7, [r5, #0]
 800586e:	6a21      	ldr	r1, [r4, #32]
 8005870:	602b      	str	r3, [r5, #0]
 8005872:	d030      	beq.n	80058d6 <__sflush_r+0x92>
 8005874:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005876:	89a3      	ldrh	r3, [r4, #12]
 8005878:	0759      	lsls	r1, r3, #29
 800587a:	d505      	bpl.n	8005888 <__sflush_r+0x44>
 800587c:	6863      	ldr	r3, [r4, #4]
 800587e:	1ad2      	subs	r2, r2, r3
 8005880:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005882:	b10b      	cbz	r3, 8005888 <__sflush_r+0x44>
 8005884:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005886:	1ad2      	subs	r2, r2, r3
 8005888:	2300      	movs	r3, #0
 800588a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800588c:	6a21      	ldr	r1, [r4, #32]
 800588e:	4628      	mov	r0, r5
 8005890:	47b0      	blx	r6
 8005892:	1c43      	adds	r3, r0, #1
 8005894:	89a3      	ldrh	r3, [r4, #12]
 8005896:	d106      	bne.n	80058a6 <__sflush_r+0x62>
 8005898:	6829      	ldr	r1, [r5, #0]
 800589a:	291d      	cmp	r1, #29
 800589c:	d82b      	bhi.n	80058f6 <__sflush_r+0xb2>
 800589e:	4a2a      	ldr	r2, [pc, #168]	@ (8005948 <__sflush_r+0x104>)
 80058a0:	40ca      	lsrs	r2, r1
 80058a2:	07d6      	lsls	r6, r2, #31
 80058a4:	d527      	bpl.n	80058f6 <__sflush_r+0xb2>
 80058a6:	2200      	movs	r2, #0
 80058a8:	6062      	str	r2, [r4, #4]
 80058aa:	04d9      	lsls	r1, r3, #19
 80058ac:	6922      	ldr	r2, [r4, #16]
 80058ae:	6022      	str	r2, [r4, #0]
 80058b0:	d504      	bpl.n	80058bc <__sflush_r+0x78>
 80058b2:	1c42      	adds	r2, r0, #1
 80058b4:	d101      	bne.n	80058ba <__sflush_r+0x76>
 80058b6:	682b      	ldr	r3, [r5, #0]
 80058b8:	b903      	cbnz	r3, 80058bc <__sflush_r+0x78>
 80058ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80058bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80058be:	602f      	str	r7, [r5, #0]
 80058c0:	b1b9      	cbz	r1, 80058f2 <__sflush_r+0xae>
 80058c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80058c6:	4299      	cmp	r1, r3
 80058c8:	d002      	beq.n	80058d0 <__sflush_r+0x8c>
 80058ca:	4628      	mov	r0, r5
 80058cc:	f7ff fbd6 	bl	800507c <_free_r>
 80058d0:	2300      	movs	r3, #0
 80058d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80058d4:	e00d      	b.n	80058f2 <__sflush_r+0xae>
 80058d6:	2301      	movs	r3, #1
 80058d8:	4628      	mov	r0, r5
 80058da:	47b0      	blx	r6
 80058dc:	4602      	mov	r2, r0
 80058de:	1c50      	adds	r0, r2, #1
 80058e0:	d1c9      	bne.n	8005876 <__sflush_r+0x32>
 80058e2:	682b      	ldr	r3, [r5, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d0c6      	beq.n	8005876 <__sflush_r+0x32>
 80058e8:	2b1d      	cmp	r3, #29
 80058ea:	d001      	beq.n	80058f0 <__sflush_r+0xac>
 80058ec:	2b16      	cmp	r3, #22
 80058ee:	d11e      	bne.n	800592e <__sflush_r+0xea>
 80058f0:	602f      	str	r7, [r5, #0]
 80058f2:	2000      	movs	r0, #0
 80058f4:	e022      	b.n	800593c <__sflush_r+0xf8>
 80058f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058fa:	b21b      	sxth	r3, r3
 80058fc:	e01b      	b.n	8005936 <__sflush_r+0xf2>
 80058fe:	690f      	ldr	r7, [r1, #16]
 8005900:	2f00      	cmp	r7, #0
 8005902:	d0f6      	beq.n	80058f2 <__sflush_r+0xae>
 8005904:	0793      	lsls	r3, r2, #30
 8005906:	680e      	ldr	r6, [r1, #0]
 8005908:	bf08      	it	eq
 800590a:	694b      	ldreq	r3, [r1, #20]
 800590c:	600f      	str	r7, [r1, #0]
 800590e:	bf18      	it	ne
 8005910:	2300      	movne	r3, #0
 8005912:	eba6 0807 	sub.w	r8, r6, r7
 8005916:	608b      	str	r3, [r1, #8]
 8005918:	f1b8 0f00 	cmp.w	r8, #0
 800591c:	dde9      	ble.n	80058f2 <__sflush_r+0xae>
 800591e:	6a21      	ldr	r1, [r4, #32]
 8005920:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005922:	4643      	mov	r3, r8
 8005924:	463a      	mov	r2, r7
 8005926:	4628      	mov	r0, r5
 8005928:	47b0      	blx	r6
 800592a:	2800      	cmp	r0, #0
 800592c:	dc08      	bgt.n	8005940 <__sflush_r+0xfc>
 800592e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005932:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005936:	81a3      	strh	r3, [r4, #12]
 8005938:	f04f 30ff 	mov.w	r0, #4294967295
 800593c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005940:	4407      	add	r7, r0
 8005942:	eba8 0800 	sub.w	r8, r8, r0
 8005946:	e7e7      	b.n	8005918 <__sflush_r+0xd4>
 8005948:	20400001 	.word	0x20400001

0800594c <_fflush_r>:
 800594c:	b538      	push	{r3, r4, r5, lr}
 800594e:	690b      	ldr	r3, [r1, #16]
 8005950:	4605      	mov	r5, r0
 8005952:	460c      	mov	r4, r1
 8005954:	b913      	cbnz	r3, 800595c <_fflush_r+0x10>
 8005956:	2500      	movs	r5, #0
 8005958:	4628      	mov	r0, r5
 800595a:	bd38      	pop	{r3, r4, r5, pc}
 800595c:	b118      	cbz	r0, 8005966 <_fflush_r+0x1a>
 800595e:	6a03      	ldr	r3, [r0, #32]
 8005960:	b90b      	cbnz	r3, 8005966 <_fflush_r+0x1a>
 8005962:	f7ff fa27 	bl	8004db4 <__sinit>
 8005966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d0f3      	beq.n	8005956 <_fflush_r+0xa>
 800596e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005970:	07d0      	lsls	r0, r2, #31
 8005972:	d404      	bmi.n	800597e <_fflush_r+0x32>
 8005974:	0599      	lsls	r1, r3, #22
 8005976:	d402      	bmi.n	800597e <_fflush_r+0x32>
 8005978:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800597a:	f7ff fb5e 	bl	800503a <__retarget_lock_acquire_recursive>
 800597e:	4628      	mov	r0, r5
 8005980:	4621      	mov	r1, r4
 8005982:	f7ff ff5f 	bl	8005844 <__sflush_r>
 8005986:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005988:	07da      	lsls	r2, r3, #31
 800598a:	4605      	mov	r5, r0
 800598c:	d4e4      	bmi.n	8005958 <_fflush_r+0xc>
 800598e:	89a3      	ldrh	r3, [r4, #12]
 8005990:	059b      	lsls	r3, r3, #22
 8005992:	d4e1      	bmi.n	8005958 <_fflush_r+0xc>
 8005994:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005996:	f7ff fb51 	bl	800503c <__retarget_lock_release_recursive>
 800599a:	e7dd      	b.n	8005958 <_fflush_r+0xc>

0800599c <fiprintf>:
 800599c:	b40e      	push	{r1, r2, r3}
 800599e:	b503      	push	{r0, r1, lr}
 80059a0:	4601      	mov	r1, r0
 80059a2:	ab03      	add	r3, sp, #12
 80059a4:	4805      	ldr	r0, [pc, #20]	@ (80059bc <fiprintf+0x20>)
 80059a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80059aa:	6800      	ldr	r0, [r0, #0]
 80059ac:	9301      	str	r3, [sp, #4]
 80059ae:	f000 f89d 	bl	8005aec <_vfiprintf_r>
 80059b2:	b002      	add	sp, #8
 80059b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80059b8:	b003      	add	sp, #12
 80059ba:	4770      	bx	lr
 80059bc:	2000002c 	.word	0x2000002c

080059c0 <memmove>:
 80059c0:	4288      	cmp	r0, r1
 80059c2:	b510      	push	{r4, lr}
 80059c4:	eb01 0402 	add.w	r4, r1, r2
 80059c8:	d902      	bls.n	80059d0 <memmove+0x10>
 80059ca:	4284      	cmp	r4, r0
 80059cc:	4623      	mov	r3, r4
 80059ce:	d807      	bhi.n	80059e0 <memmove+0x20>
 80059d0:	1e43      	subs	r3, r0, #1
 80059d2:	42a1      	cmp	r1, r4
 80059d4:	d008      	beq.n	80059e8 <memmove+0x28>
 80059d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059de:	e7f8      	b.n	80059d2 <memmove+0x12>
 80059e0:	4402      	add	r2, r0
 80059e2:	4601      	mov	r1, r0
 80059e4:	428a      	cmp	r2, r1
 80059e6:	d100      	bne.n	80059ea <memmove+0x2a>
 80059e8:	bd10      	pop	{r4, pc}
 80059ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80059f2:	e7f7      	b.n	80059e4 <memmove+0x24>

080059f4 <_sbrk_r>:
 80059f4:	b538      	push	{r3, r4, r5, lr}
 80059f6:	4d06      	ldr	r5, [pc, #24]	@ (8005a10 <_sbrk_r+0x1c>)
 80059f8:	2300      	movs	r3, #0
 80059fa:	4604      	mov	r4, r0
 80059fc:	4608      	mov	r0, r1
 80059fe:	602b      	str	r3, [r5, #0]
 8005a00:	f7fc fde8 	bl	80025d4 <_sbrk>
 8005a04:	1c43      	adds	r3, r0, #1
 8005a06:	d102      	bne.n	8005a0e <_sbrk_r+0x1a>
 8005a08:	682b      	ldr	r3, [r5, #0]
 8005a0a:	b103      	cbz	r3, 8005a0e <_sbrk_r+0x1a>
 8005a0c:	6023      	str	r3, [r4, #0]
 8005a0e:	bd38      	pop	{r3, r4, r5, pc}
 8005a10:	20000870 	.word	0x20000870

08005a14 <memcpy>:
 8005a14:	440a      	add	r2, r1
 8005a16:	4291      	cmp	r1, r2
 8005a18:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a1c:	d100      	bne.n	8005a20 <memcpy+0xc>
 8005a1e:	4770      	bx	lr
 8005a20:	b510      	push	{r4, lr}
 8005a22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a2a:	4291      	cmp	r1, r2
 8005a2c:	d1f9      	bne.n	8005a22 <memcpy+0xe>
 8005a2e:	bd10      	pop	{r4, pc}

08005a30 <abort>:
 8005a30:	b508      	push	{r3, lr}
 8005a32:	2006      	movs	r0, #6
 8005a34:	f000 fa2e 	bl	8005e94 <raise>
 8005a38:	2001      	movs	r0, #1
 8005a3a:	f7fc fd53 	bl	80024e4 <_exit>

08005a3e <_realloc_r>:
 8005a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a42:	4607      	mov	r7, r0
 8005a44:	4614      	mov	r4, r2
 8005a46:	460d      	mov	r5, r1
 8005a48:	b921      	cbnz	r1, 8005a54 <_realloc_r+0x16>
 8005a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a4e:	4611      	mov	r1, r2
 8005a50:	f7ff bb88 	b.w	8005164 <_malloc_r>
 8005a54:	b92a      	cbnz	r2, 8005a62 <_realloc_r+0x24>
 8005a56:	f7ff fb11 	bl	800507c <_free_r>
 8005a5a:	4625      	mov	r5, r4
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a62:	f000 fa33 	bl	8005ecc <_malloc_usable_size_r>
 8005a66:	4284      	cmp	r4, r0
 8005a68:	4606      	mov	r6, r0
 8005a6a:	d802      	bhi.n	8005a72 <_realloc_r+0x34>
 8005a6c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a70:	d8f4      	bhi.n	8005a5c <_realloc_r+0x1e>
 8005a72:	4621      	mov	r1, r4
 8005a74:	4638      	mov	r0, r7
 8005a76:	f7ff fb75 	bl	8005164 <_malloc_r>
 8005a7a:	4680      	mov	r8, r0
 8005a7c:	b908      	cbnz	r0, 8005a82 <_realloc_r+0x44>
 8005a7e:	4645      	mov	r5, r8
 8005a80:	e7ec      	b.n	8005a5c <_realloc_r+0x1e>
 8005a82:	42b4      	cmp	r4, r6
 8005a84:	4622      	mov	r2, r4
 8005a86:	4629      	mov	r1, r5
 8005a88:	bf28      	it	cs
 8005a8a:	4632      	movcs	r2, r6
 8005a8c:	f7ff ffc2 	bl	8005a14 <memcpy>
 8005a90:	4629      	mov	r1, r5
 8005a92:	4638      	mov	r0, r7
 8005a94:	f7ff faf2 	bl	800507c <_free_r>
 8005a98:	e7f1      	b.n	8005a7e <_realloc_r+0x40>

08005a9a <__sfputc_r>:
 8005a9a:	6893      	ldr	r3, [r2, #8]
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	b410      	push	{r4}
 8005aa2:	6093      	str	r3, [r2, #8]
 8005aa4:	da08      	bge.n	8005ab8 <__sfputc_r+0x1e>
 8005aa6:	6994      	ldr	r4, [r2, #24]
 8005aa8:	42a3      	cmp	r3, r4
 8005aaa:	db01      	blt.n	8005ab0 <__sfputc_r+0x16>
 8005aac:	290a      	cmp	r1, #10
 8005aae:	d103      	bne.n	8005ab8 <__sfputc_r+0x1e>
 8005ab0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ab4:	f000 b932 	b.w	8005d1c <__swbuf_r>
 8005ab8:	6813      	ldr	r3, [r2, #0]
 8005aba:	1c58      	adds	r0, r3, #1
 8005abc:	6010      	str	r0, [r2, #0]
 8005abe:	7019      	strb	r1, [r3, #0]
 8005ac0:	4608      	mov	r0, r1
 8005ac2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <__sfputs_r>:
 8005ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aca:	4606      	mov	r6, r0
 8005acc:	460f      	mov	r7, r1
 8005ace:	4614      	mov	r4, r2
 8005ad0:	18d5      	adds	r5, r2, r3
 8005ad2:	42ac      	cmp	r4, r5
 8005ad4:	d101      	bne.n	8005ada <__sfputs_r+0x12>
 8005ad6:	2000      	movs	r0, #0
 8005ad8:	e007      	b.n	8005aea <__sfputs_r+0x22>
 8005ada:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ade:	463a      	mov	r2, r7
 8005ae0:	4630      	mov	r0, r6
 8005ae2:	f7ff ffda 	bl	8005a9a <__sfputc_r>
 8005ae6:	1c43      	adds	r3, r0, #1
 8005ae8:	d1f3      	bne.n	8005ad2 <__sfputs_r+0xa>
 8005aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005aec <_vfiprintf_r>:
 8005aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005af0:	460d      	mov	r5, r1
 8005af2:	b09d      	sub	sp, #116	@ 0x74
 8005af4:	4614      	mov	r4, r2
 8005af6:	4698      	mov	r8, r3
 8005af8:	4606      	mov	r6, r0
 8005afa:	b118      	cbz	r0, 8005b04 <_vfiprintf_r+0x18>
 8005afc:	6a03      	ldr	r3, [r0, #32]
 8005afe:	b90b      	cbnz	r3, 8005b04 <_vfiprintf_r+0x18>
 8005b00:	f7ff f958 	bl	8004db4 <__sinit>
 8005b04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b06:	07d9      	lsls	r1, r3, #31
 8005b08:	d405      	bmi.n	8005b16 <_vfiprintf_r+0x2a>
 8005b0a:	89ab      	ldrh	r3, [r5, #12]
 8005b0c:	059a      	lsls	r2, r3, #22
 8005b0e:	d402      	bmi.n	8005b16 <_vfiprintf_r+0x2a>
 8005b10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b12:	f7ff fa92 	bl	800503a <__retarget_lock_acquire_recursive>
 8005b16:	89ab      	ldrh	r3, [r5, #12]
 8005b18:	071b      	lsls	r3, r3, #28
 8005b1a:	d501      	bpl.n	8005b20 <_vfiprintf_r+0x34>
 8005b1c:	692b      	ldr	r3, [r5, #16]
 8005b1e:	b99b      	cbnz	r3, 8005b48 <_vfiprintf_r+0x5c>
 8005b20:	4629      	mov	r1, r5
 8005b22:	4630      	mov	r0, r6
 8005b24:	f000 f938 	bl	8005d98 <__swsetup_r>
 8005b28:	b170      	cbz	r0, 8005b48 <_vfiprintf_r+0x5c>
 8005b2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b2c:	07dc      	lsls	r4, r3, #31
 8005b2e:	d504      	bpl.n	8005b3a <_vfiprintf_r+0x4e>
 8005b30:	f04f 30ff 	mov.w	r0, #4294967295
 8005b34:	b01d      	add	sp, #116	@ 0x74
 8005b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b3a:	89ab      	ldrh	r3, [r5, #12]
 8005b3c:	0598      	lsls	r0, r3, #22
 8005b3e:	d4f7      	bmi.n	8005b30 <_vfiprintf_r+0x44>
 8005b40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b42:	f7ff fa7b 	bl	800503c <__retarget_lock_release_recursive>
 8005b46:	e7f3      	b.n	8005b30 <_vfiprintf_r+0x44>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b4c:	2320      	movs	r3, #32
 8005b4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b52:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b56:	2330      	movs	r3, #48	@ 0x30
 8005b58:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005d08 <_vfiprintf_r+0x21c>
 8005b5c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b60:	f04f 0901 	mov.w	r9, #1
 8005b64:	4623      	mov	r3, r4
 8005b66:	469a      	mov	sl, r3
 8005b68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b6c:	b10a      	cbz	r2, 8005b72 <_vfiprintf_r+0x86>
 8005b6e:	2a25      	cmp	r2, #37	@ 0x25
 8005b70:	d1f9      	bne.n	8005b66 <_vfiprintf_r+0x7a>
 8005b72:	ebba 0b04 	subs.w	fp, sl, r4
 8005b76:	d00b      	beq.n	8005b90 <_vfiprintf_r+0xa4>
 8005b78:	465b      	mov	r3, fp
 8005b7a:	4622      	mov	r2, r4
 8005b7c:	4629      	mov	r1, r5
 8005b7e:	4630      	mov	r0, r6
 8005b80:	f7ff ffa2 	bl	8005ac8 <__sfputs_r>
 8005b84:	3001      	adds	r0, #1
 8005b86:	f000 80a7 	beq.w	8005cd8 <_vfiprintf_r+0x1ec>
 8005b8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b8c:	445a      	add	r2, fp
 8005b8e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b90:	f89a 3000 	ldrb.w	r3, [sl]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f000 809f 	beq.w	8005cd8 <_vfiprintf_r+0x1ec>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005ba0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ba4:	f10a 0a01 	add.w	sl, sl, #1
 8005ba8:	9304      	str	r3, [sp, #16]
 8005baa:	9307      	str	r3, [sp, #28]
 8005bac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005bb0:	931a      	str	r3, [sp, #104]	@ 0x68
 8005bb2:	4654      	mov	r4, sl
 8005bb4:	2205      	movs	r2, #5
 8005bb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bba:	4853      	ldr	r0, [pc, #332]	@ (8005d08 <_vfiprintf_r+0x21c>)
 8005bbc:	f7fa fb18 	bl	80001f0 <memchr>
 8005bc0:	9a04      	ldr	r2, [sp, #16]
 8005bc2:	b9d8      	cbnz	r0, 8005bfc <_vfiprintf_r+0x110>
 8005bc4:	06d1      	lsls	r1, r2, #27
 8005bc6:	bf44      	itt	mi
 8005bc8:	2320      	movmi	r3, #32
 8005bca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bce:	0713      	lsls	r3, r2, #28
 8005bd0:	bf44      	itt	mi
 8005bd2:	232b      	movmi	r3, #43	@ 0x2b
 8005bd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bd8:	f89a 3000 	ldrb.w	r3, [sl]
 8005bdc:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bde:	d015      	beq.n	8005c0c <_vfiprintf_r+0x120>
 8005be0:	9a07      	ldr	r2, [sp, #28]
 8005be2:	4654      	mov	r4, sl
 8005be4:	2000      	movs	r0, #0
 8005be6:	f04f 0c0a 	mov.w	ip, #10
 8005bea:	4621      	mov	r1, r4
 8005bec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bf0:	3b30      	subs	r3, #48	@ 0x30
 8005bf2:	2b09      	cmp	r3, #9
 8005bf4:	d94b      	bls.n	8005c8e <_vfiprintf_r+0x1a2>
 8005bf6:	b1b0      	cbz	r0, 8005c26 <_vfiprintf_r+0x13a>
 8005bf8:	9207      	str	r2, [sp, #28]
 8005bfa:	e014      	b.n	8005c26 <_vfiprintf_r+0x13a>
 8005bfc:	eba0 0308 	sub.w	r3, r0, r8
 8005c00:	fa09 f303 	lsl.w	r3, r9, r3
 8005c04:	4313      	orrs	r3, r2
 8005c06:	9304      	str	r3, [sp, #16]
 8005c08:	46a2      	mov	sl, r4
 8005c0a:	e7d2      	b.n	8005bb2 <_vfiprintf_r+0xc6>
 8005c0c:	9b03      	ldr	r3, [sp, #12]
 8005c0e:	1d19      	adds	r1, r3, #4
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	9103      	str	r1, [sp, #12]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	bfbb      	ittet	lt
 8005c18:	425b      	neglt	r3, r3
 8005c1a:	f042 0202 	orrlt.w	r2, r2, #2
 8005c1e:	9307      	strge	r3, [sp, #28]
 8005c20:	9307      	strlt	r3, [sp, #28]
 8005c22:	bfb8      	it	lt
 8005c24:	9204      	strlt	r2, [sp, #16]
 8005c26:	7823      	ldrb	r3, [r4, #0]
 8005c28:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c2a:	d10a      	bne.n	8005c42 <_vfiprintf_r+0x156>
 8005c2c:	7863      	ldrb	r3, [r4, #1]
 8005c2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c30:	d132      	bne.n	8005c98 <_vfiprintf_r+0x1ac>
 8005c32:	9b03      	ldr	r3, [sp, #12]
 8005c34:	1d1a      	adds	r2, r3, #4
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	9203      	str	r2, [sp, #12]
 8005c3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c3e:	3402      	adds	r4, #2
 8005c40:	9305      	str	r3, [sp, #20]
 8005c42:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005d18 <_vfiprintf_r+0x22c>
 8005c46:	7821      	ldrb	r1, [r4, #0]
 8005c48:	2203      	movs	r2, #3
 8005c4a:	4650      	mov	r0, sl
 8005c4c:	f7fa fad0 	bl	80001f0 <memchr>
 8005c50:	b138      	cbz	r0, 8005c62 <_vfiprintf_r+0x176>
 8005c52:	9b04      	ldr	r3, [sp, #16]
 8005c54:	eba0 000a 	sub.w	r0, r0, sl
 8005c58:	2240      	movs	r2, #64	@ 0x40
 8005c5a:	4082      	lsls	r2, r0
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	3401      	adds	r4, #1
 8005c60:	9304      	str	r3, [sp, #16]
 8005c62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c66:	4829      	ldr	r0, [pc, #164]	@ (8005d0c <_vfiprintf_r+0x220>)
 8005c68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c6c:	2206      	movs	r2, #6
 8005c6e:	f7fa fabf 	bl	80001f0 <memchr>
 8005c72:	2800      	cmp	r0, #0
 8005c74:	d03f      	beq.n	8005cf6 <_vfiprintf_r+0x20a>
 8005c76:	4b26      	ldr	r3, [pc, #152]	@ (8005d10 <_vfiprintf_r+0x224>)
 8005c78:	bb1b      	cbnz	r3, 8005cc2 <_vfiprintf_r+0x1d6>
 8005c7a:	9b03      	ldr	r3, [sp, #12]
 8005c7c:	3307      	adds	r3, #7
 8005c7e:	f023 0307 	bic.w	r3, r3, #7
 8005c82:	3308      	adds	r3, #8
 8005c84:	9303      	str	r3, [sp, #12]
 8005c86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c88:	443b      	add	r3, r7
 8005c8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c8c:	e76a      	b.n	8005b64 <_vfiprintf_r+0x78>
 8005c8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c92:	460c      	mov	r4, r1
 8005c94:	2001      	movs	r0, #1
 8005c96:	e7a8      	b.n	8005bea <_vfiprintf_r+0xfe>
 8005c98:	2300      	movs	r3, #0
 8005c9a:	3401      	adds	r4, #1
 8005c9c:	9305      	str	r3, [sp, #20]
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	f04f 0c0a 	mov.w	ip, #10
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005caa:	3a30      	subs	r2, #48	@ 0x30
 8005cac:	2a09      	cmp	r2, #9
 8005cae:	d903      	bls.n	8005cb8 <_vfiprintf_r+0x1cc>
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d0c6      	beq.n	8005c42 <_vfiprintf_r+0x156>
 8005cb4:	9105      	str	r1, [sp, #20]
 8005cb6:	e7c4      	b.n	8005c42 <_vfiprintf_r+0x156>
 8005cb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cbc:	4604      	mov	r4, r0
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e7f0      	b.n	8005ca4 <_vfiprintf_r+0x1b8>
 8005cc2:	ab03      	add	r3, sp, #12
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	462a      	mov	r2, r5
 8005cc8:	4b12      	ldr	r3, [pc, #72]	@ (8005d14 <_vfiprintf_r+0x228>)
 8005cca:	a904      	add	r1, sp, #16
 8005ccc:	4630      	mov	r0, r6
 8005cce:	f3af 8000 	nop.w
 8005cd2:	4607      	mov	r7, r0
 8005cd4:	1c78      	adds	r0, r7, #1
 8005cd6:	d1d6      	bne.n	8005c86 <_vfiprintf_r+0x19a>
 8005cd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005cda:	07d9      	lsls	r1, r3, #31
 8005cdc:	d405      	bmi.n	8005cea <_vfiprintf_r+0x1fe>
 8005cde:	89ab      	ldrh	r3, [r5, #12]
 8005ce0:	059a      	lsls	r2, r3, #22
 8005ce2:	d402      	bmi.n	8005cea <_vfiprintf_r+0x1fe>
 8005ce4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ce6:	f7ff f9a9 	bl	800503c <__retarget_lock_release_recursive>
 8005cea:	89ab      	ldrh	r3, [r5, #12]
 8005cec:	065b      	lsls	r3, r3, #25
 8005cee:	f53f af1f 	bmi.w	8005b30 <_vfiprintf_r+0x44>
 8005cf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005cf4:	e71e      	b.n	8005b34 <_vfiprintf_r+0x48>
 8005cf6:	ab03      	add	r3, sp, #12
 8005cf8:	9300      	str	r3, [sp, #0]
 8005cfa:	462a      	mov	r2, r5
 8005cfc:	4b05      	ldr	r3, [pc, #20]	@ (8005d14 <_vfiprintf_r+0x228>)
 8005cfe:	a904      	add	r1, sp, #16
 8005d00:	4630      	mov	r0, r6
 8005d02:	f7ff fc81 	bl	8005608 <_printf_i>
 8005d06:	e7e4      	b.n	8005cd2 <_vfiprintf_r+0x1e6>
 8005d08:	080070c7 	.word	0x080070c7
 8005d0c:	080070d1 	.word	0x080070d1
 8005d10:	00000000 	.word	0x00000000
 8005d14:	08005ac9 	.word	0x08005ac9
 8005d18:	080070cd 	.word	0x080070cd

08005d1c <__swbuf_r>:
 8005d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d1e:	460e      	mov	r6, r1
 8005d20:	4614      	mov	r4, r2
 8005d22:	4605      	mov	r5, r0
 8005d24:	b118      	cbz	r0, 8005d2e <__swbuf_r+0x12>
 8005d26:	6a03      	ldr	r3, [r0, #32]
 8005d28:	b90b      	cbnz	r3, 8005d2e <__swbuf_r+0x12>
 8005d2a:	f7ff f843 	bl	8004db4 <__sinit>
 8005d2e:	69a3      	ldr	r3, [r4, #24]
 8005d30:	60a3      	str	r3, [r4, #8]
 8005d32:	89a3      	ldrh	r3, [r4, #12]
 8005d34:	071a      	lsls	r2, r3, #28
 8005d36:	d501      	bpl.n	8005d3c <__swbuf_r+0x20>
 8005d38:	6923      	ldr	r3, [r4, #16]
 8005d3a:	b943      	cbnz	r3, 8005d4e <__swbuf_r+0x32>
 8005d3c:	4621      	mov	r1, r4
 8005d3e:	4628      	mov	r0, r5
 8005d40:	f000 f82a 	bl	8005d98 <__swsetup_r>
 8005d44:	b118      	cbz	r0, 8005d4e <__swbuf_r+0x32>
 8005d46:	f04f 37ff 	mov.w	r7, #4294967295
 8005d4a:	4638      	mov	r0, r7
 8005d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d4e:	6823      	ldr	r3, [r4, #0]
 8005d50:	6922      	ldr	r2, [r4, #16]
 8005d52:	1a98      	subs	r0, r3, r2
 8005d54:	6963      	ldr	r3, [r4, #20]
 8005d56:	b2f6      	uxtb	r6, r6
 8005d58:	4283      	cmp	r3, r0
 8005d5a:	4637      	mov	r7, r6
 8005d5c:	dc05      	bgt.n	8005d6a <__swbuf_r+0x4e>
 8005d5e:	4621      	mov	r1, r4
 8005d60:	4628      	mov	r0, r5
 8005d62:	f7ff fdf3 	bl	800594c <_fflush_r>
 8005d66:	2800      	cmp	r0, #0
 8005d68:	d1ed      	bne.n	8005d46 <__swbuf_r+0x2a>
 8005d6a:	68a3      	ldr	r3, [r4, #8]
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	60a3      	str	r3, [r4, #8]
 8005d70:	6823      	ldr	r3, [r4, #0]
 8005d72:	1c5a      	adds	r2, r3, #1
 8005d74:	6022      	str	r2, [r4, #0]
 8005d76:	701e      	strb	r6, [r3, #0]
 8005d78:	6962      	ldr	r2, [r4, #20]
 8005d7a:	1c43      	adds	r3, r0, #1
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d004      	beq.n	8005d8a <__swbuf_r+0x6e>
 8005d80:	89a3      	ldrh	r3, [r4, #12]
 8005d82:	07db      	lsls	r3, r3, #31
 8005d84:	d5e1      	bpl.n	8005d4a <__swbuf_r+0x2e>
 8005d86:	2e0a      	cmp	r6, #10
 8005d88:	d1df      	bne.n	8005d4a <__swbuf_r+0x2e>
 8005d8a:	4621      	mov	r1, r4
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	f7ff fddd 	bl	800594c <_fflush_r>
 8005d92:	2800      	cmp	r0, #0
 8005d94:	d0d9      	beq.n	8005d4a <__swbuf_r+0x2e>
 8005d96:	e7d6      	b.n	8005d46 <__swbuf_r+0x2a>

08005d98 <__swsetup_r>:
 8005d98:	b538      	push	{r3, r4, r5, lr}
 8005d9a:	4b29      	ldr	r3, [pc, #164]	@ (8005e40 <__swsetup_r+0xa8>)
 8005d9c:	4605      	mov	r5, r0
 8005d9e:	6818      	ldr	r0, [r3, #0]
 8005da0:	460c      	mov	r4, r1
 8005da2:	b118      	cbz	r0, 8005dac <__swsetup_r+0x14>
 8005da4:	6a03      	ldr	r3, [r0, #32]
 8005da6:	b90b      	cbnz	r3, 8005dac <__swsetup_r+0x14>
 8005da8:	f7ff f804 	bl	8004db4 <__sinit>
 8005dac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005db0:	0719      	lsls	r1, r3, #28
 8005db2:	d422      	bmi.n	8005dfa <__swsetup_r+0x62>
 8005db4:	06da      	lsls	r2, r3, #27
 8005db6:	d407      	bmi.n	8005dc8 <__swsetup_r+0x30>
 8005db8:	2209      	movs	r2, #9
 8005dba:	602a      	str	r2, [r5, #0]
 8005dbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005dc0:	81a3      	strh	r3, [r4, #12]
 8005dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc6:	e033      	b.n	8005e30 <__swsetup_r+0x98>
 8005dc8:	0758      	lsls	r0, r3, #29
 8005dca:	d512      	bpl.n	8005df2 <__swsetup_r+0x5a>
 8005dcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005dce:	b141      	cbz	r1, 8005de2 <__swsetup_r+0x4a>
 8005dd0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005dd4:	4299      	cmp	r1, r3
 8005dd6:	d002      	beq.n	8005dde <__swsetup_r+0x46>
 8005dd8:	4628      	mov	r0, r5
 8005dda:	f7ff f94f 	bl	800507c <_free_r>
 8005dde:	2300      	movs	r3, #0
 8005de0:	6363      	str	r3, [r4, #52]	@ 0x34
 8005de2:	89a3      	ldrh	r3, [r4, #12]
 8005de4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005de8:	81a3      	strh	r3, [r4, #12]
 8005dea:	2300      	movs	r3, #0
 8005dec:	6063      	str	r3, [r4, #4]
 8005dee:	6923      	ldr	r3, [r4, #16]
 8005df0:	6023      	str	r3, [r4, #0]
 8005df2:	89a3      	ldrh	r3, [r4, #12]
 8005df4:	f043 0308 	orr.w	r3, r3, #8
 8005df8:	81a3      	strh	r3, [r4, #12]
 8005dfa:	6923      	ldr	r3, [r4, #16]
 8005dfc:	b94b      	cbnz	r3, 8005e12 <__swsetup_r+0x7a>
 8005dfe:	89a3      	ldrh	r3, [r4, #12]
 8005e00:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005e04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e08:	d003      	beq.n	8005e12 <__swsetup_r+0x7a>
 8005e0a:	4621      	mov	r1, r4
 8005e0c:	4628      	mov	r0, r5
 8005e0e:	f000 f88b 	bl	8005f28 <__smakebuf_r>
 8005e12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e16:	f013 0201 	ands.w	r2, r3, #1
 8005e1a:	d00a      	beq.n	8005e32 <__swsetup_r+0x9a>
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	60a2      	str	r2, [r4, #8]
 8005e20:	6962      	ldr	r2, [r4, #20]
 8005e22:	4252      	negs	r2, r2
 8005e24:	61a2      	str	r2, [r4, #24]
 8005e26:	6922      	ldr	r2, [r4, #16]
 8005e28:	b942      	cbnz	r2, 8005e3c <__swsetup_r+0xa4>
 8005e2a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005e2e:	d1c5      	bne.n	8005dbc <__swsetup_r+0x24>
 8005e30:	bd38      	pop	{r3, r4, r5, pc}
 8005e32:	0799      	lsls	r1, r3, #30
 8005e34:	bf58      	it	pl
 8005e36:	6962      	ldrpl	r2, [r4, #20]
 8005e38:	60a2      	str	r2, [r4, #8]
 8005e3a:	e7f4      	b.n	8005e26 <__swsetup_r+0x8e>
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	e7f7      	b.n	8005e30 <__swsetup_r+0x98>
 8005e40:	2000002c 	.word	0x2000002c

08005e44 <_raise_r>:
 8005e44:	291f      	cmp	r1, #31
 8005e46:	b538      	push	{r3, r4, r5, lr}
 8005e48:	4605      	mov	r5, r0
 8005e4a:	460c      	mov	r4, r1
 8005e4c:	d904      	bls.n	8005e58 <_raise_r+0x14>
 8005e4e:	2316      	movs	r3, #22
 8005e50:	6003      	str	r3, [r0, #0]
 8005e52:	f04f 30ff 	mov.w	r0, #4294967295
 8005e56:	bd38      	pop	{r3, r4, r5, pc}
 8005e58:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005e5a:	b112      	cbz	r2, 8005e62 <_raise_r+0x1e>
 8005e5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005e60:	b94b      	cbnz	r3, 8005e76 <_raise_r+0x32>
 8005e62:	4628      	mov	r0, r5
 8005e64:	f000 f830 	bl	8005ec8 <_getpid_r>
 8005e68:	4622      	mov	r2, r4
 8005e6a:	4601      	mov	r1, r0
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e72:	f000 b817 	b.w	8005ea4 <_kill_r>
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d00a      	beq.n	8005e90 <_raise_r+0x4c>
 8005e7a:	1c59      	adds	r1, r3, #1
 8005e7c:	d103      	bne.n	8005e86 <_raise_r+0x42>
 8005e7e:	2316      	movs	r3, #22
 8005e80:	6003      	str	r3, [r0, #0]
 8005e82:	2001      	movs	r0, #1
 8005e84:	e7e7      	b.n	8005e56 <_raise_r+0x12>
 8005e86:	2100      	movs	r1, #0
 8005e88:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005e8c:	4620      	mov	r0, r4
 8005e8e:	4798      	blx	r3
 8005e90:	2000      	movs	r0, #0
 8005e92:	e7e0      	b.n	8005e56 <_raise_r+0x12>

08005e94 <raise>:
 8005e94:	4b02      	ldr	r3, [pc, #8]	@ (8005ea0 <raise+0xc>)
 8005e96:	4601      	mov	r1, r0
 8005e98:	6818      	ldr	r0, [r3, #0]
 8005e9a:	f7ff bfd3 	b.w	8005e44 <_raise_r>
 8005e9e:	bf00      	nop
 8005ea0:	2000002c 	.word	0x2000002c

08005ea4 <_kill_r>:
 8005ea4:	b538      	push	{r3, r4, r5, lr}
 8005ea6:	4d07      	ldr	r5, [pc, #28]	@ (8005ec4 <_kill_r+0x20>)
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	4604      	mov	r4, r0
 8005eac:	4608      	mov	r0, r1
 8005eae:	4611      	mov	r1, r2
 8005eb0:	602b      	str	r3, [r5, #0]
 8005eb2:	f7fc fb07 	bl	80024c4 <_kill>
 8005eb6:	1c43      	adds	r3, r0, #1
 8005eb8:	d102      	bne.n	8005ec0 <_kill_r+0x1c>
 8005eba:	682b      	ldr	r3, [r5, #0]
 8005ebc:	b103      	cbz	r3, 8005ec0 <_kill_r+0x1c>
 8005ebe:	6023      	str	r3, [r4, #0]
 8005ec0:	bd38      	pop	{r3, r4, r5, pc}
 8005ec2:	bf00      	nop
 8005ec4:	20000870 	.word	0x20000870

08005ec8 <_getpid_r>:
 8005ec8:	f7fc baf4 	b.w	80024b4 <_getpid>

08005ecc <_malloc_usable_size_r>:
 8005ecc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ed0:	1f18      	subs	r0, r3, #4
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	bfbc      	itt	lt
 8005ed6:	580b      	ldrlt	r3, [r1, r0]
 8005ed8:	18c0      	addlt	r0, r0, r3
 8005eda:	4770      	bx	lr

08005edc <__swhatbuf_r>:
 8005edc:	b570      	push	{r4, r5, r6, lr}
 8005ede:	460c      	mov	r4, r1
 8005ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ee4:	2900      	cmp	r1, #0
 8005ee6:	b096      	sub	sp, #88	@ 0x58
 8005ee8:	4615      	mov	r5, r2
 8005eea:	461e      	mov	r6, r3
 8005eec:	da0d      	bge.n	8005f0a <__swhatbuf_r+0x2e>
 8005eee:	89a3      	ldrh	r3, [r4, #12]
 8005ef0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005ef4:	f04f 0100 	mov.w	r1, #0
 8005ef8:	bf14      	ite	ne
 8005efa:	2340      	movne	r3, #64	@ 0x40
 8005efc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005f00:	2000      	movs	r0, #0
 8005f02:	6031      	str	r1, [r6, #0]
 8005f04:	602b      	str	r3, [r5, #0]
 8005f06:	b016      	add	sp, #88	@ 0x58
 8005f08:	bd70      	pop	{r4, r5, r6, pc}
 8005f0a:	466a      	mov	r2, sp
 8005f0c:	f000 f848 	bl	8005fa0 <_fstat_r>
 8005f10:	2800      	cmp	r0, #0
 8005f12:	dbec      	blt.n	8005eee <__swhatbuf_r+0x12>
 8005f14:	9901      	ldr	r1, [sp, #4]
 8005f16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005f1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005f1e:	4259      	negs	r1, r3
 8005f20:	4159      	adcs	r1, r3
 8005f22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f26:	e7eb      	b.n	8005f00 <__swhatbuf_r+0x24>

08005f28 <__smakebuf_r>:
 8005f28:	898b      	ldrh	r3, [r1, #12]
 8005f2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f2c:	079d      	lsls	r5, r3, #30
 8005f2e:	4606      	mov	r6, r0
 8005f30:	460c      	mov	r4, r1
 8005f32:	d507      	bpl.n	8005f44 <__smakebuf_r+0x1c>
 8005f34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005f38:	6023      	str	r3, [r4, #0]
 8005f3a:	6123      	str	r3, [r4, #16]
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	6163      	str	r3, [r4, #20]
 8005f40:	b003      	add	sp, #12
 8005f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f44:	ab01      	add	r3, sp, #4
 8005f46:	466a      	mov	r2, sp
 8005f48:	f7ff ffc8 	bl	8005edc <__swhatbuf_r>
 8005f4c:	9f00      	ldr	r7, [sp, #0]
 8005f4e:	4605      	mov	r5, r0
 8005f50:	4639      	mov	r1, r7
 8005f52:	4630      	mov	r0, r6
 8005f54:	f7ff f906 	bl	8005164 <_malloc_r>
 8005f58:	b948      	cbnz	r0, 8005f6e <__smakebuf_r+0x46>
 8005f5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f5e:	059a      	lsls	r2, r3, #22
 8005f60:	d4ee      	bmi.n	8005f40 <__smakebuf_r+0x18>
 8005f62:	f023 0303 	bic.w	r3, r3, #3
 8005f66:	f043 0302 	orr.w	r3, r3, #2
 8005f6a:	81a3      	strh	r3, [r4, #12]
 8005f6c:	e7e2      	b.n	8005f34 <__smakebuf_r+0xc>
 8005f6e:	89a3      	ldrh	r3, [r4, #12]
 8005f70:	6020      	str	r0, [r4, #0]
 8005f72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f76:	81a3      	strh	r3, [r4, #12]
 8005f78:	9b01      	ldr	r3, [sp, #4]
 8005f7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005f7e:	b15b      	cbz	r3, 8005f98 <__smakebuf_r+0x70>
 8005f80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f84:	4630      	mov	r0, r6
 8005f86:	f000 f81d 	bl	8005fc4 <_isatty_r>
 8005f8a:	b128      	cbz	r0, 8005f98 <__smakebuf_r+0x70>
 8005f8c:	89a3      	ldrh	r3, [r4, #12]
 8005f8e:	f023 0303 	bic.w	r3, r3, #3
 8005f92:	f043 0301 	orr.w	r3, r3, #1
 8005f96:	81a3      	strh	r3, [r4, #12]
 8005f98:	89a3      	ldrh	r3, [r4, #12]
 8005f9a:	431d      	orrs	r5, r3
 8005f9c:	81a5      	strh	r5, [r4, #12]
 8005f9e:	e7cf      	b.n	8005f40 <__smakebuf_r+0x18>

08005fa0 <_fstat_r>:
 8005fa0:	b538      	push	{r3, r4, r5, lr}
 8005fa2:	4d07      	ldr	r5, [pc, #28]	@ (8005fc0 <_fstat_r+0x20>)
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	4604      	mov	r4, r0
 8005fa8:	4608      	mov	r0, r1
 8005faa:	4611      	mov	r1, r2
 8005fac:	602b      	str	r3, [r5, #0]
 8005fae:	f7fc fae9 	bl	8002584 <_fstat>
 8005fb2:	1c43      	adds	r3, r0, #1
 8005fb4:	d102      	bne.n	8005fbc <_fstat_r+0x1c>
 8005fb6:	682b      	ldr	r3, [r5, #0]
 8005fb8:	b103      	cbz	r3, 8005fbc <_fstat_r+0x1c>
 8005fba:	6023      	str	r3, [r4, #0]
 8005fbc:	bd38      	pop	{r3, r4, r5, pc}
 8005fbe:	bf00      	nop
 8005fc0:	20000870 	.word	0x20000870

08005fc4 <_isatty_r>:
 8005fc4:	b538      	push	{r3, r4, r5, lr}
 8005fc6:	4d06      	ldr	r5, [pc, #24]	@ (8005fe0 <_isatty_r+0x1c>)
 8005fc8:	2300      	movs	r3, #0
 8005fca:	4604      	mov	r4, r0
 8005fcc:	4608      	mov	r0, r1
 8005fce:	602b      	str	r3, [r5, #0]
 8005fd0:	f7fc fae8 	bl	80025a4 <_isatty>
 8005fd4:	1c43      	adds	r3, r0, #1
 8005fd6:	d102      	bne.n	8005fde <_isatty_r+0x1a>
 8005fd8:	682b      	ldr	r3, [r5, #0]
 8005fda:	b103      	cbz	r3, 8005fde <_isatty_r+0x1a>
 8005fdc:	6023      	str	r3, [r4, #0]
 8005fde:	bd38      	pop	{r3, r4, r5, pc}
 8005fe0:	20000870 	.word	0x20000870

08005fe4 <_gettimeofday>:
 8005fe4:	4b02      	ldr	r3, [pc, #8]	@ (8005ff0 <_gettimeofday+0xc>)
 8005fe6:	2258      	movs	r2, #88	@ 0x58
 8005fe8:	601a      	str	r2, [r3, #0]
 8005fea:	f04f 30ff 	mov.w	r0, #4294967295
 8005fee:	4770      	bx	lr
 8005ff0:	20000870 	.word	0x20000870

08005ff4 <_init>:
 8005ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ff6:	bf00      	nop
 8005ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ffa:	bc08      	pop	{r3}
 8005ffc:	469e      	mov	lr, r3
 8005ffe:	4770      	bx	lr

08006000 <_fini>:
 8006000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006002:	bf00      	nop
 8006004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006006:	bc08      	pop	{r3}
 8006008:	469e      	mov	lr, r3
 800600a:	4770      	bx	lr
