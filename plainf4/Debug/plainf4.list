
plainf4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e28  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010f0  08005fd8  08005fd8  00006fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070c8  080070c8  00009080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080070c8  080070c8  000080c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070d0  080070d0  00009080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070d0  080070d0  000080d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080070d4  080070d4  000080d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  080070d8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009080  2**0
                  CONTENTS
 10 .bss          000005b0  20000080  20000080  00009080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000630  20000630  00009080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ae4f  00000000  00000000  000090b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023eb  00000000  00000000  00013eff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ae8  00000000  00000000  000162f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000081e  00000000  00000000  00016dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e8e  00000000  00000000  000175f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dc26  00000000  00000000  0003c484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da265  00000000  00000000  0004a0aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012430f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003650  00000000  00000000  00124354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000044  00000000  00000000  001279a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005fc0 	.word	0x08005fc0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08005fc0 	.word	0x08005fc0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b08d      	sub	sp, #52	@ 0x34
 80005c0:	af02      	add	r7, sp, #8
 80005c2:	60b9      	str	r1, [r7, #8]
 80005c4:	4611      	mov	r1, r2
 80005c6:	461a      	mov	r2, r3
 80005c8:	4603      	mov	r3, r0
 80005ca:	73fb      	strb	r3, [r7, #15]
 80005cc:	460b      	mov	r3, r1
 80005ce:	81bb      	strh	r3, [r7, #12]
 80005d0:	4613      	mov	r3, r2
 80005d2:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	2b1e      	cmp	r3, #30
 80005d8:	d964      	bls.n	80006a4 <ILI9341_DrawChar+0xe8>
 80005da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	db60      	blt.n	80006a4 <ILI9341_DrawChar+0xe8>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	3301      	adds	r3, #1
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	3302      	adds	r3, #2
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	3303      	adds	r3, #3
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8000600:	7bfb      	ldrb	r3, [r7, #15]
 8000602:	3b20      	subs	r3, #32
 8000604:	7ffa      	ldrb	r2, [r7, #31]
 8000606:	fb02 f303 	mul.w	r3, r2, r3
 800060a:	3304      	adds	r3, #4
 800060c:	68ba      	ldr	r2, [r7, #8]
 800060e:	4413      	add	r3, r2
 8000610:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 8000612:	7fbb      	ldrb	r3, [r7, #30]
 8000614:	b29a      	uxth	r2, r3
 8000616:	7f7b      	ldrb	r3, [r7, #29]
 8000618:	b29c      	uxth	r4, r3
 800061a:	88f9      	ldrh	r1, [r7, #6]
 800061c:	89b8      	ldrh	r0, [r7, #12]
 800061e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	4623      	mov	r3, r4
 8000624:	f000 fc28 	bl	8000e78 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 8000628:	2300      	movs	r3, #0
 800062a:	627b      	str	r3, [r7, #36]	@ 0x24
 800062c:	e035      	b.n	800069a <ILI9341_DrawChar+0xde>
	{
		for (int i=0; i < fWidth; i++)
 800062e:	2300      	movs	r3, #0
 8000630:	623b      	str	r3, [r7, #32]
 8000632:	e02b      	b.n	800068c <ILI9341_DrawChar+0xd0>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 8000634:	7f3b      	ldrb	r3, [r7, #28]
 8000636:	6a3a      	ldr	r2, [r7, #32]
 8000638:	fb03 f202 	mul.w	r2, r3, r2
 800063c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800063e:	10db      	asrs	r3, r3, #3
 8000640:	f003 031f 	and.w	r3, r3, #31
 8000644:	4413      	add	r3, r2
 8000646:	3301      	adds	r3, #1
 8000648:	69ba      	ldr	r2, [r7, #24]
 800064a:	4413      	add	r3, r2
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 8000650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000652:	f003 0307 	and.w	r3, r3, #7
 8000656:	2201      	movs	r2, #1
 8000658:	fa02 f303 	lsl.w	r3, r2, r3
 800065c:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 800065e:	7dfa      	ldrb	r2, [r7, #23]
 8000660:	7dbb      	ldrb	r3, [r7, #22]
 8000662:	4013      	ands	r3, r2
 8000664:	b2db      	uxtb	r3, r3
 8000666:	2b00      	cmp	r3, #0
 8000668:	d00d      	beq.n	8000686 <ILI9341_DrawChar+0xca>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 800066a:	6a3b      	ldr	r3, [r7, #32]
 800066c:	b29a      	uxth	r2, r3
 800066e:	89bb      	ldrh	r3, [r7, #12]
 8000670:	4413      	add	r3, r2
 8000672:	b298      	uxth	r0, r3
 8000674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000676:	b29a      	uxth	r2, r3
 8000678:	88fb      	ldrh	r3, [r7, #6]
 800067a:	4413      	add	r3, r2
 800067c:	b29b      	uxth	r3, r3
 800067e:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8000680:	4619      	mov	r1, r3
 8000682:	f000 fb93 	bl	8000dac <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 8000686:	6a3b      	ldr	r3, [r7, #32]
 8000688:	3301      	adds	r3, #1
 800068a:	623b      	str	r3, [r7, #32]
 800068c:	7fbb      	ldrb	r3, [r7, #30]
 800068e:	6a3a      	ldr	r2, [r7, #32]
 8000690:	429a      	cmp	r2, r3
 8000692:	dbcf      	blt.n	8000634 <ILI9341_DrawChar+0x78>
	for (int j=0; j < fHeight; j++)
 8000694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000696:	3301      	adds	r3, #1
 8000698:	627b      	str	r3, [r7, #36]	@ 0x24
 800069a:	7f7b      	ldrb	r3, [r7, #29]
 800069c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800069e:	429a      	cmp	r2, r3
 80006a0:	dbc5      	blt.n	800062e <ILI9341_DrawChar+0x72>
 80006a2:	e000      	b.n	80006a6 <ILI9341_DrawChar+0xea>
	if ((ch < 31) || (ch > 127)) return;
 80006a4:	bf00      	nop
			}
		}
	}
}
 80006a6:	372c      	adds	r7, #44	@ 0x2c
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd90      	pop	{r4, r7, pc}

080006ac <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	@ 0x28
 80006b0:	af02      	add	r7, sp, #8
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	4611      	mov	r1, r2
 80006b8:	461a      	mov	r2, r3
 80006ba:	460b      	mov	r3, r1
 80006bc:	80fb      	strh	r3, [r7, #6]
 80006be:	4613      	mov	r3, r2
 80006c0:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	3301      	adds	r3, #1
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	77bb      	strb	r3, [r7, #30]

	while (*str)
 80006d0:	e02d      	b.n	800072e <ILI9341_DrawText+0x82>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	7818      	ldrb	r0, [r3, #0]
 80006d6:	88b9      	ldrh	r1, [r7, #4]
 80006d8:	88fa      	ldrh	r2, [r7, #6]
 80006da:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	460b      	mov	r3, r1
 80006e4:	68b9      	ldr	r1, [r7, #8]
 80006e6:	f7ff ff69 	bl	80005bc <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	3b20      	subs	r3, #32
 80006f0:	7ffa      	ldrb	r2, [r7, #31]
 80006f2:	fb02 f303 	mul.w	r3, r2, r3
 80006f6:	3304      	adds	r3, #4
 80006f8:	68ba      	ldr	r2, [r7, #8]
 80006fa:	4413      	add	r3, r2
 80006fc:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 80006fe:	69bb      	ldr	r3, [r7, #24]
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 8000704:	7dfb      	ldrb	r3, [r7, #23]
 8000706:	1c9a      	adds	r2, r3, #2
 8000708:	7fbb      	ldrb	r3, [r7, #30]
 800070a:	429a      	cmp	r2, r3
 800070c:	da07      	bge.n	800071e <ILI9341_DrawText+0x72>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 800070e:	7dfb      	ldrb	r3, [r7, #23]
 8000710:	b29a      	uxth	r2, r3
 8000712:	88fb      	ldrh	r3, [r7, #6]
 8000714:	4413      	add	r3, r2
 8000716:	b29b      	uxth	r3, r3
 8000718:	3302      	adds	r3, #2
 800071a:	80fb      	strh	r3, [r7, #6]
 800071c:	e004      	b.n	8000728 <ILI9341_DrawText+0x7c>
		}
		else
		{
			X += fWidth;
 800071e:	7fbb      	ldrb	r3, [r7, #30]
 8000720:	b29a      	uxth	r2, r3
 8000722:	88fb      	ldrh	r3, [r7, #6]
 8000724:	4413      	add	r3, r2
 8000726:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	3301      	adds	r3, #1
 800072c:	60fb      	str	r3, [r7, #12]
	while (*str)
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d1cd      	bne.n	80006d2 <ILI9341_DrawText+0x26>
	}
}
 8000736:	bf00      	nop
 8000738:	bf00      	nop
 800073a:	3720      	adds	r7, #32
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4a06      	ldr	r2, [pc, #24]	@ (8000764 <HAL_SPI_TxCpltCallback+0x24>)
 800074c:	4293      	cmp	r3, r2
 800074e:	d104      	bne.n	800075a <HAL_SPI_TxCpltCallback+0x1a>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000750:	2201      	movs	r2, #1
 8000752:	2104      	movs	r1, #4
 8000754:	4804      	ldr	r0, [pc, #16]	@ (8000768 <HAL_SPI_TxCpltCallback+0x28>)
 8000756:	f002 fe59 	bl	800340c <HAL_GPIO_WritePin>
  }
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	200000bc 	.word	0x200000bc
 8000768:	40020800 	.word	0x40020800

0800076c <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000776:	bf00      	nop
 8000778:	4b08      	ldr	r3, [pc, #32]	@ (800079c <ILI9341_SPI_Tx+0x30>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	689b      	ldr	r3, [r3, #8]
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	2b02      	cmp	r3, #2
 8000784:	d1f8      	bne.n	8000778 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 8000786:	1dfb      	adds	r3, r7, #7
 8000788:	2201      	movs	r2, #1
 800078a:	4619      	mov	r1, r3
 800078c:	4803      	ldr	r0, [pc, #12]	@ (800079c <ILI9341_SPI_Tx+0x30>)
 800078e:	f003 ffdb 	bl	8004748 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200000bc 	.word	0x200000bc

080007a0 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	460b      	mov	r3, r1
 80007aa:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80007ac:	bf00      	nop
 80007ae:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <ILI9341_SPI_TxBuffer+0x30>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	689b      	ldr	r3, [r3, #8]
 80007b4:	f003 0302 	and.w	r3, r3, #2
 80007b8:	2b02      	cmp	r3, #2
 80007ba:	d1f8      	bne.n	80007ae <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 80007bc:	887b      	ldrh	r3, [r7, #2]
 80007be:	461a      	mov	r2, r3
 80007c0:	6879      	ldr	r1, [r7, #4]
 80007c2:	4803      	ldr	r0, [pc, #12]	@ (80007d0 <ILI9341_SPI_TxBuffer+0x30>)
 80007c4:	f003 ffc0 	bl	8004748 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200000bc 	.word	0x200000bc

080007d4 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007e4:	4807      	ldr	r0, [pc, #28]	@ (8000804 <ILI9341_WriteCommand+0x30>)
 80007e6:	f002 fe11 	bl	800340c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80007ea:	2200      	movs	r2, #0
 80007ec:	2104      	movs	r1, #4
 80007ee:	4806      	ldr	r0, [pc, #24]	@ (8000808 <ILI9341_WriteCommand+0x34>)
 80007f0:	f002 fe0c 	bl	800340c <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff ffb8 	bl	800076c <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40020c00 	.word	0x40020c00
 8000808:	40020800 	.word	0x40020800

0800080c <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000816:	2201      	movs	r2, #1
 8000818:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800081c:	4807      	ldr	r0, [pc, #28]	@ (800083c <ILI9341_WriteData+0x30>)
 800081e:	f002 fdf5 	bl	800340c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000822:	2200      	movs	r2, #0
 8000824:	2104      	movs	r1, #4
 8000826:	4806      	ldr	r0, [pc, #24]	@ (8000840 <ILI9341_WriteData+0x34>)
 8000828:	f002 fdf0 	bl	800340c <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ff9c 	bl	800076c <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40020c00 	.word	0x40020c00
 8000840:	40020800 	.word	0x40020800

08000844 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000850:	2201      	movs	r2, #1
 8000852:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000856:	4808      	ldr	r0, [pc, #32]	@ (8000878 <ILI9341_WriteBuffer+0x34>)
 8000858:	f002 fdd8 	bl	800340c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 800085c:	2200      	movs	r2, #0
 800085e:	2104      	movs	r1, #4
 8000860:	4806      	ldr	r0, [pc, #24]	@ (800087c <ILI9341_WriteBuffer+0x38>)
 8000862:	f002 fdd3 	bl	800340c <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8000866:	887b      	ldrh	r3, [r7, #2]
 8000868:	4619      	mov	r1, r3
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff ff98 	bl	80007a0 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40020c00 	.word	0x40020c00
 800087c:	40020800 	.word	0x40020800

08000880 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000880:	b590      	push	{r4, r7, lr}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	4604      	mov	r4, r0
 8000888:	4608      	mov	r0, r1
 800088a:	4611      	mov	r1, r2
 800088c:	461a      	mov	r2, r3
 800088e:	4623      	mov	r3, r4
 8000890:	80fb      	strh	r3, [r7, #6]
 8000892:	4603      	mov	r3, r0
 8000894:	80bb      	strh	r3, [r7, #4]
 8000896:	460b      	mov	r3, r1
 8000898:	807b      	strh	r3, [r7, #2]
 800089a:	4613      	mov	r3, r2
 800089c:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 800089e:	88fb      	ldrh	r3, [r7, #6]
 80008a0:	0a1b      	lsrs	r3, r3, #8
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 80008a8:	88fb      	ldrh	r3, [r7, #6]
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 80008ae:	887b      	ldrh	r3, [r7, #2]
 80008b0:	0a1b      	lsrs	r3, r3, #8
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 80008b8:	887b      	ldrh	r3, [r7, #2]
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 80008be:	202a      	movs	r0, #42	@ 0x2a
 80008c0:	f7ff ff88 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	2104      	movs	r1, #4
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff ffba 	bl	8000844 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 80008d0:	88bb      	ldrh	r3, [r7, #4]
 80008d2:	0a1b      	lsrs	r3, r3, #8
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 80008da:	88bb      	ldrh	r3, [r7, #4]
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 80008e0:	883b      	ldrh	r3, [r7, #0]
 80008e2:	0a1b      	lsrs	r3, r3, #8
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 80008ea:	883b      	ldrh	r3, [r7, #0]
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 80008f0:	202b      	movs	r0, #43	@ 0x2b
 80008f2:	f7ff ff6f 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	2104      	movs	r1, #4
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff ffa1 	bl	8000844 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 8000902:	202c      	movs	r0, #44	@ 0x2c
 8000904:	f7ff ff66 	bl	80007d4 <ILI9341_WriteCommand>
}
 8000908:	bf00      	nop
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	bd90      	pop	{r4, r7, pc}

08000910 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8000914:	2200      	movs	r2, #0
 8000916:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800091a:	480d      	ldr	r0, [pc, #52]	@ (8000950 <ILI9341_Reset+0x40>)
 800091c:	f002 fd76 	bl	800340c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000920:	200a      	movs	r0, #10
 8000922:	f001 ff21 	bl	8002768 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 8000926:	2200      	movs	r2, #0
 8000928:	2104      	movs	r1, #4
 800092a:	480a      	ldr	r0, [pc, #40]	@ (8000954 <ILI9341_Reset+0x44>)
 800092c:	f002 fd6e 	bl	800340c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000930:	200a      	movs	r0, #10
 8000932:	f001 ff19 	bl	8002768 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000936:	2201      	movs	r2, #1
 8000938:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800093c:	4804      	ldr	r0, [pc, #16]	@ (8000950 <ILI9341_Reset+0x40>)
 800093e:	f002 fd65 	bl	800340c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8000942:	2201      	movs	r2, #1
 8000944:	2104      	movs	r1, #4
 8000946:	4803      	ldr	r0, [pc, #12]	@ (8000954 <ILI9341_Reset+0x44>)
 8000948:	f002 fd60 	bl	800340c <HAL_GPIO_WritePin>
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40020c00 	.word	0x40020c00
 8000954:	40020800 	.word	0x40020800

08000958 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 800095c:	2201      	movs	r2, #1
 800095e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000962:	4802      	ldr	r0, [pc, #8]	@ (800096c <ILI9341_Enable+0x14>)
 8000964:	f002 fd52 	bl	800340c <HAL_GPIO_WritePin>
}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40020c00 	.word	0x40020c00

08000970 <ILI9341_Init>:

void ILI9341_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8000974:	f7ff fff0 	bl	8000958 <ILI9341_Enable>
	ILI9341_Reset();
 8000978:	f7ff ffca 	bl	8000910 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 800097c:	2001      	movs	r0, #1
 800097e:	f7ff ff29 	bl	80007d4 <ILI9341_WriteCommand>
	HAL_Delay(10);
 8000982:	200a      	movs	r0, #10
 8000984:	f001 fef0 	bl	8002768 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8000988:	20cb      	movs	r0, #203	@ 0xcb
 800098a:	f7ff ff23 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 800098e:	2039      	movs	r0, #57	@ 0x39
 8000990:	f7ff ff3c 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8000994:	202c      	movs	r0, #44	@ 0x2c
 8000996:	f7ff ff39 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 800099a:	2000      	movs	r0, #0
 800099c:	f7ff ff36 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 80009a0:	2034      	movs	r0, #52	@ 0x34
 80009a2:	f7ff ff33 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 80009a6:	2002      	movs	r0, #2
 80009a8:	f7ff ff30 	bl	800080c <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 80009ac:	20cf      	movs	r0, #207	@ 0xcf
 80009ae:	f7ff ff11 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80009b2:	2000      	movs	r0, #0
 80009b4:	f7ff ff2a 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 80009b8:	20c1      	movs	r0, #193	@ 0xc1
 80009ba:	f7ff ff27 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 80009be:	2030      	movs	r0, #48	@ 0x30
 80009c0:	f7ff ff24 	bl	800080c <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 80009c4:	20e8      	movs	r0, #232	@ 0xe8
 80009c6:	f7ff ff05 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 80009ca:	2085      	movs	r0, #133	@ 0x85
 80009cc:	f7ff ff1e 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80009d0:	2000      	movs	r0, #0
 80009d2:	f7ff ff1b 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 80009d6:	2078      	movs	r0, #120	@ 0x78
 80009d8:	f7ff ff18 	bl	800080c <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 80009dc:	20ea      	movs	r0, #234	@ 0xea
 80009de:	f7ff fef9 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80009e2:	2000      	movs	r0, #0
 80009e4:	f7ff ff12 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80009e8:	2000      	movs	r0, #0
 80009ea:	f7ff ff0f 	bl	800080c <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 80009ee:	20ed      	movs	r0, #237	@ 0xed
 80009f0:	f7ff fef0 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 80009f4:	2064      	movs	r0, #100	@ 0x64
 80009f6:	f7ff ff09 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80009fa:	2003      	movs	r0, #3
 80009fc:	f7ff ff06 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8000a00:	2012      	movs	r0, #18
 8000a02:	f7ff ff03 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8000a06:	2081      	movs	r0, #129	@ 0x81
 8000a08:	f7ff ff00 	bl	800080c <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8000a0c:	20f7      	movs	r0, #247	@ 0xf7
 8000a0e:	f7ff fee1 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8000a12:	2020      	movs	r0, #32
 8000a14:	f7ff fefa 	bl	800080c <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8000a18:	20c0      	movs	r0, #192	@ 0xc0
 8000a1a:	f7ff fedb 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8000a1e:	2023      	movs	r0, #35	@ 0x23
 8000a20:	f7ff fef4 	bl	800080c <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8000a24:	20c1      	movs	r0, #193	@ 0xc1
 8000a26:	f7ff fed5 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8000a2a:	2010      	movs	r0, #16
 8000a2c:	f7ff feee 	bl	800080c <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8000a30:	20c5      	movs	r0, #197	@ 0xc5
 8000a32:	f7ff fecf 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8000a36:	203e      	movs	r0, #62	@ 0x3e
 8000a38:	f7ff fee8 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8000a3c:	2028      	movs	r0, #40	@ 0x28
 8000a3e:	f7ff fee5 	bl	800080c <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8000a42:	20c7      	movs	r0, #199	@ 0xc7
 8000a44:	f7ff fec6 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8000a48:	2086      	movs	r0, #134	@ 0x86
 8000a4a:	f7ff fedf 	bl	800080c <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8000a4e:	2036      	movs	r0, #54	@ 0x36
 8000a50:	f7ff fec0 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8000a54:	2048      	movs	r0, #72	@ 0x48
 8000a56:	f7ff fed9 	bl	800080c <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8000a5a:	203a      	movs	r0, #58	@ 0x3a
 8000a5c:	f7ff feba 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8000a60:	2055      	movs	r0, #85	@ 0x55
 8000a62:	f7ff fed3 	bl	800080c <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8000a66:	20b1      	movs	r0, #177	@ 0xb1
 8000a68:	f7ff feb4 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f7ff fecd 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8000a72:	2018      	movs	r0, #24
 8000a74:	f7ff feca 	bl	800080c <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8000a78:	20b6      	movs	r0, #182	@ 0xb6
 8000a7a:	f7ff feab 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8000a7e:	2008      	movs	r0, #8
 8000a80:	f7ff fec4 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8000a84:	2082      	movs	r0, #130	@ 0x82
 8000a86:	f7ff fec1 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8000a8a:	2027      	movs	r0, #39	@ 0x27
 8000a8c:	f7ff febe 	bl	800080c <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8000a90:	20f2      	movs	r0, #242	@ 0xf2
 8000a92:	f7ff fe9f 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000a96:	2000      	movs	r0, #0
 8000a98:	f7ff feb8 	bl	800080c <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8000a9c:	2026      	movs	r0, #38	@ 0x26
 8000a9e:	f7ff fe99 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	f7ff feb2 	bl	800080c <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8000aa8:	20e0      	movs	r0, #224	@ 0xe0
 8000aaa:	f7ff fe93 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8000aae:	200f      	movs	r0, #15
 8000ab0:	f7ff feac 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000ab4:	2031      	movs	r0, #49	@ 0x31
 8000ab6:	f7ff fea9 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8000aba:	202b      	movs	r0, #43	@ 0x2b
 8000abc:	f7ff fea6 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000ac0:	200c      	movs	r0, #12
 8000ac2:	f7ff fea3 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000ac6:	200e      	movs	r0, #14
 8000ac8:	f7ff fea0 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000acc:	2008      	movs	r0, #8
 8000ace:	f7ff fe9d 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 8000ad2:	204e      	movs	r0, #78	@ 0x4e
 8000ad4:	f7ff fe9a 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8000ad8:	20f1      	movs	r0, #241	@ 0xf1
 8000ada:	f7ff fe97 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8000ade:	2037      	movs	r0, #55	@ 0x37
 8000ae0:	f7ff fe94 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000ae4:	2007      	movs	r0, #7
 8000ae6:	f7ff fe91 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8000aea:	2010      	movs	r0, #16
 8000aec:	f7ff fe8e 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000af0:	2003      	movs	r0, #3
 8000af2:	f7ff fe8b 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000af6:	200e      	movs	r0, #14
 8000af8:	f7ff fe88 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8000afc:	2009      	movs	r0, #9
 8000afe:	f7ff fe85 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000b02:	2000      	movs	r0, #0
 8000b04:	f7ff fe82 	bl	800080c <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8000b08:	20e1      	movs	r0, #225	@ 0xe1
 8000b0a:	f7ff fe63 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f7ff fe7c 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000b14:	200e      	movs	r0, #14
 8000b16:	f7ff fe79 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8000b1a:	2014      	movs	r0, #20
 8000b1c:	f7ff fe76 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000b20:	2003      	movs	r0, #3
 8000b22:	f7ff fe73 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8000b26:	2011      	movs	r0, #17
 8000b28:	f7ff fe70 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000b2c:	2007      	movs	r0, #7
 8000b2e:	f7ff fe6d 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000b32:	2031      	movs	r0, #49	@ 0x31
 8000b34:	f7ff fe6a 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000b38:	20c1      	movs	r0, #193	@ 0xc1
 8000b3a:	f7ff fe67 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8000b3e:	2048      	movs	r0, #72	@ 0x48
 8000b40:	f7ff fe64 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000b44:	2008      	movs	r0, #8
 8000b46:	f7ff fe61 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000b4a:	200f      	movs	r0, #15
 8000b4c:	f7ff fe5e 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000b50:	200c      	movs	r0, #12
 8000b52:	f7ff fe5b 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000b56:	2031      	movs	r0, #49	@ 0x31
 8000b58:	f7ff fe58 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8000b5c:	2036      	movs	r0, #54	@ 0x36
 8000b5e:	f7ff fe55 	bl	800080c <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000b62:	200f      	movs	r0, #15
 8000b64:	f7ff fe52 	bl	800080c <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8000b68:	2011      	movs	r0, #17
 8000b6a:	f7ff fe33 	bl	80007d4 <ILI9341_WriteCommand>
	HAL_Delay(100);
 8000b6e:	2064      	movs	r0, #100	@ 0x64
 8000b70:	f001 fdfa 	bl	8002768 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8000b74:	2029      	movs	r0, #41	@ 0x29
 8000b76:	f7ff fe2d 	bl	80007d4 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f000 f802 	bl	8000b84 <ILI9341_SetRotation>
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 8000b8e:	2036      	movs	r0, #54	@ 0x36
 8000b90:	f7ff fe20 	bl	80007d4 <ILI9341_WriteCommand>
	HAL_Delay(1);
 8000b94:	2001      	movs	r0, #1
 8000b96:	f001 fde7 	bl	8002768 <HAL_Delay>

	switch(rotation)
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	2b03      	cmp	r3, #3
 8000b9e:	d837      	bhi.n	8000c10 <ILI9341_SetRotation+0x8c>
 8000ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8000ba8 <ILI9341_SetRotation+0x24>)
 8000ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba6:	bf00      	nop
 8000ba8:	08000bb9 	.word	0x08000bb9
 8000bac:	08000bcf 	.word	0x08000bcf
 8000bb0:	08000be5 	.word	0x08000be5
 8000bb4:	08000bfb 	.word	0x08000bfb
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8000bb8:	2048      	movs	r0, #72	@ 0x48
 8000bba:	f7ff fe27 	bl	800080c <ILI9341_WriteData>
		LCD_WIDTH = 240;
 8000bbe:	4b17      	ldr	r3, [pc, #92]	@ (8000c1c <ILI9341_SetRotation+0x98>)
 8000bc0:	22f0      	movs	r2, #240	@ 0xf0
 8000bc2:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000bc4:	4b16      	ldr	r3, [pc, #88]	@ (8000c20 <ILI9341_SetRotation+0x9c>)
 8000bc6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000bca:	801a      	strh	r2, [r3, #0]
		break;
 8000bcc:	e021      	b.n	8000c12 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 8000bce:	2028      	movs	r0, #40	@ 0x28
 8000bd0:	f7ff fe1c 	bl	800080c <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <ILI9341_SetRotation+0x98>)
 8000bd6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000bda:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000bdc:	4b10      	ldr	r3, [pc, #64]	@ (8000c20 <ILI9341_SetRotation+0x9c>)
 8000bde:	22f0      	movs	r2, #240	@ 0xf0
 8000be0:	801a      	strh	r2, [r3, #0]
		break;
 8000be2:	e016      	b.n	8000c12 <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8000be4:	2088      	movs	r0, #136	@ 0x88
 8000be6:	f7ff fe11 	bl	800080c <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8000bea:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <ILI9341_SetRotation+0x98>)
 8000bec:	22f0      	movs	r2, #240	@ 0xf0
 8000bee:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c20 <ILI9341_SetRotation+0x9c>)
 8000bf2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000bf6:	801a      	strh	r2, [r3, #0]
		break;
 8000bf8:	e00b      	b.n	8000c12 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8000bfa:	20e8      	movs	r0, #232	@ 0xe8
 8000bfc:	f7ff fe06 	bl	800080c <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000c00:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <ILI9341_SetRotation+0x98>)
 8000c02:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000c06:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000c08:	4b05      	ldr	r3, [pc, #20]	@ (8000c20 <ILI9341_SetRotation+0x9c>)
 8000c0a:	22f0      	movs	r2, #240	@ 0xf0
 8000c0c:	801a      	strh	r2, [r3, #0]
		break;
 8000c0e:	e000      	b.n	8000c12 <ILI9341_SetRotation+0x8e>
	default:
		break;
 8000c10:	bf00      	nop
	}
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000002 	.word	0x20000002
 8000c20:	20000000 	.word	0x20000000

08000c24 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8000c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c28:	b08d      	sub	sp, #52	@ 0x34
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	6039      	str	r1, [r7, #0]
 8000c30:	80fb      	strh	r3, [r7, #6]
 8000c32:	466b      	mov	r3, sp
 8000c34:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if((size*2) < BURST_MAX_SIZE)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000c42:	d202      	bcs.n	8000c4a <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c48:	e002      	b.n	8000c50 <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8000c4a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000c50:	2201      	movs	r2, #1
 8000c52:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c56:	483f      	ldr	r0, [pc, #252]	@ (8000d54 <ILI9341_DrawColorBurst+0x130>)
 8000c58:	f002 fbd8 	bl	800340c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2104      	movs	r1, #4
 8000c60:	483d      	ldr	r0, [pc, #244]	@ (8000d58 <ILI9341_DrawColorBurst+0x134>)
 8000c62:	f002 fbd3 	bl	800340c <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8000c66:	88fb      	ldrh	r3, [r7, #6]
 8000c68:	0a1b      	lsrs	r3, r3, #8
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t BurstBuffer[BufferSize];
 8000c70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000c72:	460b      	mov	r3, r1
 8000c74:	3b01      	subs	r3, #1
 8000c76:	61fb      	str	r3, [r7, #28]
 8000c78:	2300      	movs	r3, #0
 8000c7a:	4688      	mov	r8, r1
 8000c7c:	4699      	mov	r9, r3
 8000c7e:	f04f 0200 	mov.w	r2, #0
 8000c82:	f04f 0300 	mov.w	r3, #0
 8000c86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000c8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000c8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000c92:	2300      	movs	r3, #0
 8000c94:	460c      	mov	r4, r1
 8000c96:	461d      	mov	r5, r3
 8000c98:	f04f 0200 	mov.w	r2, #0
 8000c9c:	f04f 0300 	mov.w	r3, #0
 8000ca0:	00eb      	lsls	r3, r5, #3
 8000ca2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000ca6:	00e2      	lsls	r2, r4, #3
 8000ca8:	1dcb      	adds	r3, r1, #7
 8000caa:	08db      	lsrs	r3, r3, #3
 8000cac:	00db      	lsls	r3, r3, #3
 8000cae:	ebad 0d03 	sub.w	sp, sp, r3
 8000cb2:	466b      	mov	r3, sp
 8000cb4:	3300      	adds	r3, #0
 8000cb6:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cbc:	e00e      	b.n	8000cdc <ILI9341_DrawColorBurst+0xb8>
	{
		BurstBuffer[j] = chifted;
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cc2:	4413      	add	r3, r2
 8000cc4:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000cc8:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8000cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ccc:	3301      	adds	r3, #1
 8000cce:	88fa      	ldrh	r2, [r7, #6]
 8000cd0:	b2d1      	uxtb	r1, r2
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cd8:	3302      	adds	r3, #2
 8000cda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cdc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d3ec      	bcc.n	8000cbe <ILI9341_DrawColorBurst+0x9a>
	}

	uint32_t SendingSize = size * 2;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8000cea:	697a      	ldr	r2, [r7, #20]
 8000cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf2:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000cf8:	fbb3 f2f2 	udiv	r2, r3, r2
 8000cfc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000cfe:	fb01 f202 	mul.w	r2, r1, r2
 8000d02:	1a9b      	subs	r3, r3, r2
 8000d04:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d010      	beq.n	8000d2e <ILI9341_DrawColorBurst+0x10a>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d10:	e009      	b.n	8000d26 <ILI9341_DrawColorBurst+0x102>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8000d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d14:	b29a      	uxth	r2, r3
 8000d16:	230a      	movs	r3, #10
 8000d18:	69b9      	ldr	r1, [r7, #24]
 8000d1a:	4810      	ldr	r0, [pc, #64]	@ (8000d5c <ILI9341_DrawColorBurst+0x138>)
 8000d1c:	f003 fbcf 	bl	80044be <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d22:	3301      	adds	r3, #1
 8000d24:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d3f1      	bcc.n	8000d12 <ILI9341_DrawColorBurst+0xee>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	230a      	movs	r3, #10
 8000d34:	69b9      	ldr	r1, [r7, #24]
 8000d36:	4809      	ldr	r0, [pc, #36]	@ (8000d5c <ILI9341_DrawColorBurst+0x138>)
 8000d38:	f003 fbc1 	bl	80044be <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	2104      	movs	r1, #4
 8000d40:	4805      	ldr	r0, [pc, #20]	@ (8000d58 <ILI9341_DrawColorBurst+0x134>)
 8000d42:	f002 fb63 	bl	800340c <HAL_GPIO_WritePin>
 8000d46:	46b5      	mov	sp, r6
}
 8000d48:	bf00      	nop
 8000d4a:	3734      	adds	r7, #52	@ 0x34
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d52:	bf00      	nop
 8000d54:	40020c00 	.word	0x40020c00
 8000d58:	40020800 	.word	0x40020800
 8000d5c:	200000bc 	.word	0x200000bc

08000d60 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000da4 <ILI9341_FillScreen+0x44>)
 8000d6c:	881b      	ldrh	r3, [r3, #0]
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	4b0d      	ldr	r3, [pc, #52]	@ (8000da8 <ILI9341_FillScreen+0x48>)
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	2100      	movs	r1, #0
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f7ff fd81 	bl	8000880 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8000d7e:	4b09      	ldr	r3, [pc, #36]	@ (8000da4 <ILI9341_FillScreen+0x44>)
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b08      	ldr	r3, [pc, #32]	@ (8000da8 <ILI9341_FillScreen+0x48>)
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	fb02 f303 	mul.w	r3, r2, r3
 8000d90:	461a      	mov	r2, r3
 8000d92:	88fb      	ldrh	r3, [r7, #6]
 8000d94:	4611      	mov	r1, r2
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff ff44 	bl	8000c24 <ILI9341_DrawColorBurst>
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000002 	.word	0x20000002
 8000da8:	20000000 	.word	0x20000000

08000dac <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	80fb      	strh	r3, [r7, #6]
 8000db6:	460b      	mov	r3, r1
 8000db8:	80bb      	strh	r3, [r7, #4]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000dbe:	4b2c      	ldr	r3, [pc, #176]	@ (8000e70 <ILI9341_DrawPixel+0xc4>)
 8000dc0:	881b      	ldrh	r3, [r3, #0]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	88fa      	ldrh	r2, [r7, #6]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d24d      	bcs.n	8000e66 <ILI9341_DrawPixel+0xba>
 8000dca:	4b2a      	ldr	r3, [pc, #168]	@ (8000e74 <ILI9341_DrawPixel+0xc8>)
 8000dcc:	881b      	ldrh	r3, [r3, #0]
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	88ba      	ldrh	r2, [r7, #4]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d247      	bcs.n	8000e66 <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
 8000dd8:	0a1b      	lsrs	r3, r3, #8
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	753b      	strb	r3, [r7, #20]
 8000de0:	88fb      	ldrh	r3, [r7, #6]
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	757b      	strb	r3, [r7, #21]
 8000de6:	88fb      	ldrh	r3, [r7, #6]
 8000de8:	3301      	adds	r3, #1
 8000dea:	121b      	asrs	r3, r3, #8
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	75bb      	strb	r3, [r7, #22]
 8000df0:	88fb      	ldrh	r3, [r7, #6]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	3301      	adds	r3, #1
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8000dfa:	88bb      	ldrh	r3, [r7, #4]
 8000dfc:	0a1b      	lsrs	r3, r3, #8
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	743b      	strb	r3, [r7, #16]
 8000e04:	88bb      	ldrh	r3, [r7, #4]
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	747b      	strb	r3, [r7, #17]
 8000e0a:	88bb      	ldrh	r3, [r7, #4]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	121b      	asrs	r3, r3, #8
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	74bb      	strb	r3, [r7, #18]
 8000e14:	88bb      	ldrh	r3, [r7, #4]
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	3301      	adds	r3, #1
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8000e1e:	887b      	ldrh	r3, [r7, #2]
 8000e20:	0a1b      	lsrs	r3, r3, #8
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	733b      	strb	r3, [r7, #12]
 8000e28:	887b      	ldrh	r3, [r7, #2]
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8000e2e:	202a      	movs	r0, #42	@ 0x2a
 8000e30:	f7ff fcd0 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	2104      	movs	r1, #4
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fd02 	bl	8000844 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8000e40:	202b      	movs	r0, #43	@ 0x2b
 8000e42:	f7ff fcc7 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 8000e46:	f107 0310 	add.w	r3, r7, #16
 8000e4a:	2104      	movs	r1, #4
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fcf9 	bl	8000844 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8000e52:	202c      	movs	r0, #44	@ 0x2c
 8000e54:	f7ff fcbe 	bl	80007d4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8000e58:	f107 030c 	add.w	r3, r7, #12
 8000e5c:	2102      	movs	r1, #2
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fcf0 	bl	8000844 <ILI9341_WriteBuffer>
 8000e64:	e000      	b.n	8000e68 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000e66:	bf00      	nop
}
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000002 	.word	0x20000002
 8000e74:	20000000 	.word	0x20000000

08000e78 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8000e78:	b590      	push	{r4, r7, lr}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4604      	mov	r4, r0
 8000e80:	4608      	mov	r0, r1
 8000e82:	4611      	mov	r1, r2
 8000e84:	461a      	mov	r2, r3
 8000e86:	4623      	mov	r3, r4
 8000e88:	80fb      	strh	r3, [r7, #6]
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	80bb      	strh	r3, [r7, #4]
 8000e8e:	460b      	mov	r3, r1
 8000e90:	807b      	strh	r3, [r7, #2]
 8000e92:	4613      	mov	r3, r2
 8000e94:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000e96:	4b24      	ldr	r3, [pc, #144]	@ (8000f28 <ILI9341_DrawRectangle+0xb0>)
 8000e98:	881b      	ldrh	r3, [r3, #0]
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	88fa      	ldrh	r2, [r7, #6]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d23d      	bcs.n	8000f1e <ILI9341_DrawRectangle+0xa6>
 8000ea2:	4b22      	ldr	r3, [pc, #136]	@ (8000f2c <ILI9341_DrawRectangle+0xb4>)
 8000ea4:	881b      	ldrh	r3, [r3, #0]
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	88ba      	ldrh	r2, [r7, #4]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d237      	bcs.n	8000f1e <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 8000eae:	88fa      	ldrh	r2, [r7, #6]
 8000eb0:	887b      	ldrh	r3, [r7, #2]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4a1c      	ldr	r2, [pc, #112]	@ (8000f28 <ILI9341_DrawRectangle+0xb0>)
 8000eb6:	8812      	ldrh	r2, [r2, #0]
 8000eb8:	b292      	uxth	r2, r2
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	dd05      	ble.n	8000eca <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8000f28 <ILI9341_DrawRectangle+0xb0>)
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 8000eca:	88ba      	ldrh	r2, [r7, #4]
 8000ecc:	883b      	ldrh	r3, [r7, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	4a16      	ldr	r2, [pc, #88]	@ (8000f2c <ILI9341_DrawRectangle+0xb4>)
 8000ed2:	8812      	ldrh	r2, [r2, #0]
 8000ed4:	b292      	uxth	r2, r2
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	dd05      	ble.n	8000ee6 <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 8000eda:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <ILI9341_DrawRectangle+0xb4>)
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	88bb      	ldrh	r3, [r7, #4]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8000ee6:	88fa      	ldrh	r2, [r7, #6]
 8000ee8:	887b      	ldrh	r3, [r7, #2]
 8000eea:	4413      	add	r3, r2
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	b29c      	uxth	r4, r3
 8000ef2:	88ba      	ldrh	r2, [r7, #4]
 8000ef4:	883b      	ldrh	r3, [r7, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	3b01      	subs	r3, #1
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	88b9      	ldrh	r1, [r7, #4]
 8000f00:	88f8      	ldrh	r0, [r7, #6]
 8000f02:	4622      	mov	r2, r4
 8000f04:	f7ff fcbc 	bl	8000880 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8000f08:	883b      	ldrh	r3, [r7, #0]
 8000f0a:	887a      	ldrh	r2, [r7, #2]
 8000f0c:	fb02 f303 	mul.w	r3, r2, r3
 8000f10:	461a      	mov	r2, r3
 8000f12:	8b3b      	ldrh	r3, [r7, #24]
 8000f14:	4611      	mov	r1, r2
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fe84 	bl	8000c24 <ILI9341_DrawColorBurst>
 8000f1c:	e000      	b.n	8000f20 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000f1e:	bf00      	nop
}
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd90      	pop	{r4, r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000002 	.word	0x20000002
 8000f2c:	20000000 	.word	0x20000000

08000f30 <ILI9341_DrawLine>:

	ILI9341_SetAddress(x, y, x, y+height-1);
	ILI9341_DrawColorBurst(color, height);
}

void ILI9341_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b089      	sub	sp, #36	@ 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4604      	mov	r4, r0
 8000f38:	4608      	mov	r0, r1
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4623      	mov	r3, r4
 8000f40:	80fb      	strh	r3, [r7, #6]
 8000f42:	4603      	mov	r3, r0
 8000f44:	80bb      	strh	r3, [r7, #4]
 8000f46:	460b      	mov	r3, r1
 8000f48:	807b      	strh	r3, [r7, #2]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	803b      	strh	r3, [r7, #0]
    int dx = abs(x1 - x0);
 8000f4e:	887a      	ldrh	r2, [r7, #2]
 8000f50:	88fb      	ldrh	r3, [r7, #6]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	bfb8      	it	lt
 8000f58:	425b      	neglt	r3, r3
 8000f5a:	61bb      	str	r3, [r7, #24]
    int sx = x0 < x1 ? 1 : -1;
 8000f5c:	88fa      	ldrh	r2, [r7, #6]
 8000f5e:	887b      	ldrh	r3, [r7, #2]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d201      	bcs.n	8000f68 <ILI9341_DrawLine+0x38>
 8000f64:	2301      	movs	r3, #1
 8000f66:	e001      	b.n	8000f6c <ILI9341_DrawLine+0x3c>
 8000f68:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6c:	617b      	str	r3, [r7, #20]
    int dy = -abs(y1 - y0);
 8000f6e:	883a      	ldrh	r2, [r7, #0]
 8000f70:	88bb      	ldrh	r3, [r7, #4]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	bfb8      	it	lt
 8000f78:	425b      	neglt	r3, r3
 8000f7a:	425b      	negs	r3, r3
 8000f7c:	613b      	str	r3, [r7, #16]
    int sy = y0 < y1 ? 1 : -1;
 8000f7e:	88ba      	ldrh	r2, [r7, #4]
 8000f80:	883b      	ldrh	r3, [r7, #0]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d201      	bcs.n	8000f8a <ILI9341_DrawLine+0x5a>
 8000f86:	2301      	movs	r3, #1
 8000f88:	e001      	b.n	8000f8e <ILI9341_DrawLine+0x5e>
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8e:	60fb      	str	r3, [r7, #12]
    int err = dx + dy;
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	4413      	add	r3, r2
 8000f96:	61fb      	str	r3, [r7, #28]
    int e2;

    while (1) {
        ILI9341_DrawPixel(x0, y0, color);
 8000f98:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8000f9a:	88b9      	ldrh	r1, [r7, #4]
 8000f9c:	88fb      	ldrh	r3, [r7, #6]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff ff04 	bl	8000dac <ILI9341_DrawPixel>
        if (x0 == x1 && y0 == y1) break;
 8000fa4:	88fa      	ldrh	r2, [r7, #6]
 8000fa6:	887b      	ldrh	r3, [r7, #2]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d103      	bne.n	8000fb4 <ILI9341_DrawLine+0x84>
 8000fac:	88ba      	ldrh	r2, [r7, #4]
 8000fae:	883b      	ldrh	r3, [r7, #0]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d01d      	beq.n	8000ff0 <ILI9341_DrawLine+0xc0>
        e2 = 2 * err;
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	60bb      	str	r3, [r7, #8]
        if (e2 >= dy) { err += dy; x0 += sx; }
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	db08      	blt.n	8000fd4 <ILI9341_DrawLine+0xa4>
 8000fc2:	69fa      	ldr	r2, [r7, #28]
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	61fb      	str	r3, [r7, #28]
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	80fb      	strh	r3, [r7, #6]
        if (e2 <= dx) { err += dx; y0 += sy; }
 8000fd4:	68ba      	ldr	r2, [r7, #8]
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	dcdd      	bgt.n	8000f98 <ILI9341_DrawLine+0x68>
 8000fdc:	69fa      	ldr	r2, [r7, #28]
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	61fb      	str	r3, [r7, #28]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	88bb      	ldrh	r3, [r7, #4]
 8000fea:	4413      	add	r3, r2
 8000fec:	80bb      	strh	r3, [r7, #4]
        ILI9341_DrawPixel(x0, y0, color);
 8000fee:	e7d3      	b.n	8000f98 <ILI9341_DrawLine+0x68>
        if (x0 == x1 && y0 == y1) break;
 8000ff0:	bf00      	nop
    }
}
 8000ff2:	bf00      	nop
 8000ff4:	3724      	adds	r7, #36	@ 0x24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd90      	pop	{r4, r7, pc}

08000ffa <draw_plane>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Game logic ----------------------------------------------------------------*/

// (x,y) = (0,0) tại góc trái gần nút bấm, x theo chiểu dài, y theo chiều rộng
void draw_plane(int x, int y) { // O(x,y) trung điểm của cạnh đáy tam giác
 8000ffa:	b590      	push	{r4, r7, lr}
 8000ffc:	b08b      	sub	sp, #44	@ 0x2c
 8000ffe:	af02      	add	r7, sp, #8
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	6039      	str	r1, [r7, #0]
	int x1 = x;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	61fb      	str	r3, [r7, #28]
	int y1 = y - PLANE_HEIGHT / 2;
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	3b0a      	subs	r3, #10
 800100c:	61bb      	str	r3, [r7, #24]

	int x2 = x;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	617b      	str	r3, [r7, #20]
	int y2 = y + PLANE_HEIGHT / 2;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	330a      	adds	r3, #10
 8001016:	613b      	str	r3, [r7, #16]

	int x3 = x + PLANE_WIDTH;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3314      	adds	r3, #20
 800101c:	60fb      	str	r3, [r7, #12]
	int y3 = y;
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	60bb      	str	r3, [r7, #8]

	// Vẽ viền tam giác
	ILI9341_DrawLine(x1, y1, x2, y2, BLUE);
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	b298      	uxth	r0, r3
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	b299      	uxth	r1, r3
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	b29a      	uxth	r2, r3
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	b29b      	uxth	r3, r3
 8001032:	241f      	movs	r4, #31
 8001034:	9400      	str	r4, [sp, #0]
 8001036:	f7ff ff7b 	bl	8000f30 <ILI9341_DrawLine>
	ILI9341_DrawLine(x2, y2, x3, y3, BLUE);
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	b298      	uxth	r0, r3
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	b299      	uxth	r1, r3
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	b29a      	uxth	r2, r3
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	b29b      	uxth	r3, r3
 800104a:	241f      	movs	r4, #31
 800104c:	9400      	str	r4, [sp, #0]
 800104e:	f7ff ff6f 	bl	8000f30 <ILI9341_DrawLine>
	ILI9341_DrawLine(x3, y3, x1, y1, BLUE);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	b298      	uxth	r0, r3
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	b299      	uxth	r1, r3
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	b29a      	uxth	r2, r3
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	b29b      	uxth	r3, r3
 8001062:	241f      	movs	r4, #31
 8001064:	9400      	str	r4, [sp, #0]
 8001066:	f7ff ff63 	bl	8000f30 <ILI9341_DrawLine>
	// Nếu có hàm tô màu tam giác:
}
 800106a:	bf00      	nop
 800106c:	3724      	adds	r7, #36	@ 0x24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd90      	pop	{r4, r7, pc}

08001072 <erase_plane>:

void erase_plane(int x, int y) { // hàm xóa máy bay
 8001072:	b590      	push	{r4, r7, lr}
 8001074:	b08b      	sub	sp, #44	@ 0x2c
 8001076:	af02      	add	r7, sp, #8
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	6039      	str	r1, [r7, #0]
	int x1 = x;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	61fb      	str	r3, [r7, #28]
	int y1 = y - PLANE_HEIGHT / 2;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	3b0a      	subs	r3, #10
 8001084:	61bb      	str	r3, [r7, #24]

	int x2 = x;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	617b      	str	r3, [r7, #20]
	int y2 = y + PLANE_HEIGHT / 2;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	330a      	adds	r3, #10
 800108e:	613b      	str	r3, [r7, #16]

	int x3 = x + PLANE_WIDTH;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3314      	adds	r3, #20
 8001094:	60fb      	str	r3, [r7, #12]
	int y3 = y;
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	60bb      	str	r3, [r7, #8]

	// Vẽ lại bằng màu nền (trắng)
	ILI9341_DrawLine(x1, y1, x2, y2, WHITE);
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	b298      	uxth	r0, r3
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	b299      	uxth	r1, r3
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 80010ae:	9400      	str	r4, [sp, #0]
 80010b0:	f7ff ff3e 	bl	8000f30 <ILI9341_DrawLine>
	ILI9341_DrawLine(x2, y2, x3, y3, WHITE);
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	b298      	uxth	r0, r3
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	b299      	uxth	r1, r3
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	b29a      	uxth	r2, r3
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 80010c8:	9400      	str	r4, [sp, #0]
 80010ca:	f7ff ff31 	bl	8000f30 <ILI9341_DrawLine>
	ILI9341_DrawLine(x3, y3, x1, y1, WHITE);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	b298      	uxth	r0, r3
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	b299      	uxth	r1, r3
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	b29a      	uxth	r2, r3
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	b29b      	uxth	r3, r3
 80010de:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 80010e2:	9400      	str	r4, [sp, #0]
 80010e4:	f7ff ff24 	bl	8000f30 <ILI9341_DrawLine>
}
 80010e8:	bf00      	nop
 80010ea:	3724      	adds	r7, #36	@ 0x24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd90      	pop	{r4, r7, pc}

080010f0 <draw_enemies>:

void draw_enemies(int x, int y) { //hàm vẽ enemies
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af02      	add	r7, sp, #8
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
	ILI9341_DrawRectangle(x, y, PLANE_WIDTH, PLANE_HEIGHT, GREEN);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	b298      	uxth	r0, r3
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	b299      	uxth	r1, r3
 8001102:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2314      	movs	r3, #20
 800110a:	2214      	movs	r2, #20
 800110c:	f7ff feb4 	bl	8000e78 <ILI9341_DrawRectangle>
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <init_enemies>:

void init_enemies() { //hàm khởi tạo enemies
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
	for (int i = 0; i < current_enemy_count; i++) {
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	e031      	b.n	8001188 <init_enemies+0x70>
		enemies[i].x = 280 + i * 10;
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	4613      	mov	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	f503 718c 	add.w	r1, r3, #280	@ 0x118
 8001132:	481a      	ldr	r0, [pc, #104]	@ (800119c <init_enemies+0x84>)
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	4613      	mov	r3, r2
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	4413      	add	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4403      	add	r3, r0
 8001140:	6019      	str	r1, [r3, #0]
		enemies[i].y = rand() % 100;
 8001142:	f003 fd53 	bl	8004bec <rand>
 8001146:	4603      	mov	r3, r0
 8001148:	4a15      	ldr	r2, [pc, #84]	@ (80011a0 <init_enemies+0x88>)
 800114a:	fb82 1203 	smull	r1, r2, r2, r3
 800114e:	1151      	asrs	r1, r2, #5
 8001150:	17da      	asrs	r2, r3, #31
 8001152:	1a8a      	subs	r2, r1, r2
 8001154:	2164      	movs	r1, #100	@ 0x64
 8001156:	fb01 f202 	mul.w	r2, r1, r2
 800115a:	1a9a      	subs	r2, r3, r2
 800115c:	480f      	ldr	r0, [pc, #60]	@ (800119c <init_enemies+0x84>)
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	440b      	add	r3, r1
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	4403      	add	r3, r0
 800116a:	3304      	adds	r3, #4
 800116c:	601a      	str	r2, [r3, #0]
		enemies[i].active = 1;
 800116e:	490b      	ldr	r1, [pc, #44]	@ (800119c <init_enemies+0x84>)
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	4613      	mov	r3, r2
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	4413      	add	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	440b      	add	r3, r1
 800117c:	3308      	adds	r3, #8
 800117e:	2201      	movs	r2, #1
 8001180:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < current_enemy_count; i++) {
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3301      	adds	r3, #1
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <init_enemies+0x8c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	429a      	cmp	r2, r3
 8001190:	dbc8      	blt.n	8001124 <init_enemies+0xc>
	}
}
 8001192:	bf00      	nop
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000174 	.word	0x20000174
 80011a0:	51eb851f 	.word	0x51eb851f
 80011a4:	2000000c 	.word	0x2000000c

080011a8 <erase_enemies>:

void erase_enemies(int x, int y) { //hàm xóa enemies
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af02      	add	r7, sp, #8
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
	ILI9341_DrawRectangle(x, y, PLANE_WIDTH, PLANE_HEIGHT, WHITE);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	b298      	uxth	r0, r3
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	b299      	uxth	r1, r3
 80011ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	2314      	movs	r3, #20
 80011c2:	2214      	movs	r2, #20
 80011c4:	f7ff fe58 	bl	8000e78 <ILI9341_DrawRectangle>
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <update_enemies>:
void update_enemies() { //hàm cập nhật enemies
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
	for (int i = 0; i < current_enemy_count; i++) {
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	e08a      	b.n	80012f2 <update_enemies+0x122>
		if (enemies[i].active) {
 80011dc:	494a      	ldr	r1, [pc, #296]	@ (8001308 <update_enemies+0x138>)
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	4613      	mov	r3, r2
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	4413      	add	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	440b      	add	r3, r1
 80011ea:	3308      	adds	r3, #8
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d07c      	beq.n	80012ec <update_enemies+0x11c>
			erase_enemies(enemies[i].x, enemies[i].y);
 80011f2:	4945      	ldr	r1, [pc, #276]	@ (8001308 <update_enemies+0x138>)
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	4613      	mov	r3, r2
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	4413      	add	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	440b      	add	r3, r1
 8001200:	6818      	ldr	r0, [r3, #0]
 8001202:	4941      	ldr	r1, [pc, #260]	@ (8001308 <update_enemies+0x138>)
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	4613      	mov	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	4413      	add	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	440b      	add	r3, r1
 8001210:	3304      	adds	r3, #4
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4619      	mov	r1, r3
 8001216:	f7ff ffc7 	bl	80011a8 <erase_enemies>
			enemies[i].x -= 2;
 800121a:	493b      	ldr	r1, [pc, #236]	@ (8001308 <update_enemies+0x138>)
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	4613      	mov	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	4413      	add	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	440b      	add	r3, r1
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	1e99      	subs	r1, r3, #2
 800122c:	4836      	ldr	r0, [pc, #216]	@ (8001308 <update_enemies+0x138>)
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	4613      	mov	r3, r2
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	4413      	add	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4403      	add	r3, r0
 800123a:	6019      	str	r1, [r3, #0]

			if (enemies[i].x <= 0) {
 800123c:	4932      	ldr	r1, [pc, #200]	@ (8001308 <update_enemies+0x138>)
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	4613      	mov	r3, r2
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	4413      	add	r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	440b      	add	r3, r1
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	dc39      	bgt.n	80012c4 <update_enemies+0xf4>
				enemies[i].x = 320;
 8001250:	492d      	ldr	r1, [pc, #180]	@ (8001308 <update_enemies+0x138>)
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	4613      	mov	r3, r2
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	4413      	add	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	440b      	add	r3, r1
 800125e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001262:	601a      	str	r2, [r3, #0]
				enemies[i].y = (enemies[i].y + 100 + rand()* 3 % 70) % 220;
 8001264:	4928      	ldr	r1, [pc, #160]	@ (8001308 <update_enemies+0x138>)
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4413      	add	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	440b      	add	r3, r1
 8001272:	3304      	adds	r3, #4
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f103 0464 	add.w	r4, r3, #100	@ 0x64
 800127a:	f003 fcb7 	bl	8004bec <rand>
 800127e:	4602      	mov	r2, r0
 8001280:	4613      	mov	r3, r2
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	4413      	add	r3, r2
 8001286:	4a21      	ldr	r2, [pc, #132]	@ (800130c <update_enemies+0x13c>)
 8001288:	fb82 1203 	smull	r1, r2, r2, r3
 800128c:	441a      	add	r2, r3
 800128e:	1191      	asrs	r1, r2, #6
 8001290:	17da      	asrs	r2, r3, #31
 8001292:	1a8a      	subs	r2, r1, r2
 8001294:	2146      	movs	r1, #70	@ 0x46
 8001296:	fb01 f202 	mul.w	r2, r1, r2
 800129a:	1a9a      	subs	r2, r3, r2
 800129c:	18a3      	adds	r3, r4, r2
 800129e:	4a1c      	ldr	r2, [pc, #112]	@ (8001310 <update_enemies+0x140>)
 80012a0:	fb82 1203 	smull	r1, r2, r2, r3
 80012a4:	10d1      	asrs	r1, r2, #3
 80012a6:	17da      	asrs	r2, r3, #31
 80012a8:	1a8a      	subs	r2, r1, r2
 80012aa:	21dc      	movs	r1, #220	@ 0xdc
 80012ac:	fb01 f202 	mul.w	r2, r1, r2
 80012b0:	1a9a      	subs	r2, r3, r2
 80012b2:	4815      	ldr	r0, [pc, #84]	@ (8001308 <update_enemies+0x138>)
 80012b4:	6879      	ldr	r1, [r7, #4]
 80012b6:	460b      	mov	r3, r1
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	440b      	add	r3, r1
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	4403      	add	r3, r0
 80012c0:	3304      	adds	r3, #4
 80012c2:	601a      	str	r2, [r3, #0]
			}

			draw_enemies(enemies[i].x, enemies[i].y); // vẽ lại enemy
 80012c4:	4910      	ldr	r1, [pc, #64]	@ (8001308 <update_enemies+0x138>)
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	4613      	mov	r3, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4413      	add	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	440b      	add	r3, r1
 80012d2:	6818      	ldr	r0, [r3, #0]
 80012d4:	490c      	ldr	r1, [pc, #48]	@ (8001308 <update_enemies+0x138>)
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	4613      	mov	r3, r2
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	4413      	add	r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	440b      	add	r3, r1
 80012e2:	3304      	adds	r3, #4
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4619      	mov	r1, r3
 80012e8:	f7ff ff02 	bl	80010f0 <draw_enemies>
	for (int i = 0; i < current_enemy_count; i++) {
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3301      	adds	r3, #1
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	4b08      	ldr	r3, [pc, #32]	@ (8001314 <update_enemies+0x144>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	f6ff af6f 	blt.w	80011dc <update_enemies+0xc>
		}
	}
}
 80012fe:	bf00      	nop
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	bd90      	pop	{r4, r7, pc}
 8001308:	20000174 	.word	0x20000174
 800130c:	ea0ea0eb 	.word	0xea0ea0eb
 8001310:	094f2095 	.word	0x094f2095
 8001314:	2000000c 	.word	0x2000000c

08001318 <init_boss>:

void init_boss() { //hàm khởi tạo boss
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
	boss.x = 280;
 800131c:	4b0a      	ldr	r3, [pc, #40]	@ (8001348 <init_boss+0x30>)
 800131e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8001322:	601a      	str	r2, [r3, #0]
	boss.y = 20;
 8001324:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <init_boss+0x30>)
 8001326:	2214      	movs	r2, #20
 8001328:	605a      	str	r2, [r3, #4]
	boss.hp = 10;
 800132a:	4b07      	ldr	r3, [pc, #28]	@ (8001348 <init_boss+0x30>)
 800132c:	220a      	movs	r2, #10
 800132e:	609a      	str	r2, [r3, #8]
	boss.active = 1;
 8001330:	4b05      	ldr	r3, [pc, #20]	@ (8001348 <init_boss+0x30>)
 8001332:	2201      	movs	r2, #1
 8001334:	60da      	str	r2, [r3, #12]
	boss.laser_timer = 0;
 8001336:	4b04      	ldr	r3, [pc, #16]	@ (8001348 <init_boss+0x30>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	20000264 	.word	0x20000264

0800134c <draw_boss>:

void draw_boss(int x, int y) { //vẽ boss
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af02      	add	r7, sp, #8
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
	ILI9341_DrawRectangle(x, y, BOSS_WIDTH, BOSS_HEIGHT, RED);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	b298      	uxth	r0, r3
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	b299      	uxth	r1, r3
 800135e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	231e      	movs	r3, #30
 8001366:	2228      	movs	r2, #40	@ 0x28
 8001368:	f7ff fd86 	bl	8000e78 <ILI9341_DrawRectangle>
}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <erase_boss>:

void erase_boss(int x, int y) { //xóa boss
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af02      	add	r7, sp, #8
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
	ILI9341_DrawRectangle(x, y, BOSS_WIDTH, BOSS_HEIGHT, WHITE);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	b298      	uxth	r0, r3
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	b299      	uxth	r1, r3
 8001386:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	231e      	movs	r3, #30
 800138e:	2228      	movs	r2, #40	@ 0x28
 8001390:	f7ff fd72 	bl	8000e78 <ILI9341_DrawRectangle>
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <fire_boss_laser>:

void fire_boss_laser() { // hàm bắn đạn của boss
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_BOSS_BULLETS; i++) {
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	e02d      	b.n	8001404 <fire_boss_laser+0x68>
		if (!boss_bullets[i].active) {
 80013a8:	491b      	ldr	r1, [pc, #108]	@ (8001418 <fire_boss_laser+0x7c>)
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	4613      	mov	r3, r2
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4413      	add	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	440b      	add	r3, r1
 80013b6:	3308      	adds	r3, #8
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d11f      	bne.n	80013fe <fire_boss_laser+0x62>
			boss_bullets[i].x = boss.x;
 80013be:	4b17      	ldr	r3, [pc, #92]	@ (800141c <fire_boss_laser+0x80>)
 80013c0:	6819      	ldr	r1, [r3, #0]
 80013c2:	4815      	ldr	r0, [pc, #84]	@ (8001418 <fire_boss_laser+0x7c>)
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	4613      	mov	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4413      	add	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4403      	add	r3, r0
 80013d0:	6019      	str	r1, [r3, #0]
			boss_bullets[i].y = boss.y;
 80013d2:	4b12      	ldr	r3, [pc, #72]	@ (800141c <fire_boss_laser+0x80>)
 80013d4:	6859      	ldr	r1, [r3, #4]
 80013d6:	4810      	ldr	r0, [pc, #64]	@ (8001418 <fire_boss_laser+0x7c>)
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	4613      	mov	r3, r2
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	4413      	add	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4403      	add	r3, r0
 80013e4:	3304      	adds	r3, #4
 80013e6:	6019      	str	r1, [r3, #0]
			boss_bullets[i].active = 1;
 80013e8:	490b      	ldr	r1, [pc, #44]	@ (8001418 <fire_boss_laser+0x7c>)
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	4613      	mov	r3, r2
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	4413      	add	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	440b      	add	r3, r1
 80013f6:	3308      	adds	r3, #8
 80013f8:	2201      	movs	r2, #1
 80013fa:	601a      	str	r2, [r3, #0]
			break;
 80013fc:	e006      	b.n	800140c <fire_boss_laser+0x70>
	for (int i = 0; i < MAX_BOSS_BULLETS; i++) {
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3301      	adds	r3, #1
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b31      	cmp	r3, #49	@ 0x31
 8001408:	ddce      	ble.n	80013a8 <fire_boss_laser+0xc>
		}
	}
}
 800140a:	bf00      	nop
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	20000278 	.word	0x20000278
 800141c:	20000264 	.word	0x20000264

08001420 <update_boss_bullets>:

void update_boss_bullets() { // hàm cập nhật tình trạng đạn của boss
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af02      	add	r7, sp, #8
	//nếu viên đạn được active, vẽ lại đường đạn đi xuống, nếu va chạm vào máy bay thì thua
	for (int i = 0; i < MAX_BOSS_BULLETS; i++) {
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	e0b3      	b.n	8001594 <update_boss_bullets+0x174>
		if (boss_bullets[i].active) {
 800142c:	495e      	ldr	r1, [pc, #376]	@ (80015a8 <update_boss_bullets+0x188>)
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	4613      	mov	r3, r2
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4413      	add	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	440b      	add	r3, r1
 800143a:	3308      	adds	r3, #8
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 80a5 	beq.w	800158e <update_boss_bullets+0x16e>
			// Xóa viên đạn cũ
			ILI9341_DrawRectangle(boss_bullets[i].x, boss_bullets[i].y,
 8001444:	4958      	ldr	r1, [pc, #352]	@ (80015a8 <update_boss_bullets+0x188>)
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	4613      	mov	r3, r2
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4413      	add	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	440b      	add	r3, r1
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	b298      	uxth	r0, r3
 8001456:	4954      	ldr	r1, [pc, #336]	@ (80015a8 <update_boss_bullets+0x188>)
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	4613      	mov	r3, r2
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	4413      	add	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	440b      	add	r3, r1
 8001464:	3304      	adds	r3, #4
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	b299      	uxth	r1, r3
 800146a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	2308      	movs	r3, #8
 8001472:	2204      	movs	r2, #4
 8001474:	f7ff fd00 	bl	8000e78 <ILI9341_DrawRectangle>
					BULLET_WIDTH, BULLET_HEIGHT, WHITE);

			// Di chuyển đạn xuống
			boss_bullets[i].x -= 2;
 8001478:	494b      	ldr	r1, [pc, #300]	@ (80015a8 <update_boss_bullets+0x188>)
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	4613      	mov	r3, r2
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	4413      	add	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	440b      	add	r3, r1
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	1e99      	subs	r1, r3, #2
 800148a:	4847      	ldr	r0, [pc, #284]	@ (80015a8 <update_boss_bullets+0x188>)
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4413      	add	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4403      	add	r3, r0
 8001498:	6019      	str	r1, [r3, #0]

			// Nếu ra khỏi màn hình
			if (boss_bullets[i].x <= 0) {
 800149a:	4943      	ldr	r1, [pc, #268]	@ (80015a8 <update_boss_bullets+0x188>)
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	4413      	add	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	440b      	add	r3, r1
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	dc0a      	bgt.n	80014c4 <update_boss_bullets+0xa4>
				boss_bullets[i].active = 0;
 80014ae:	493e      	ldr	r1, [pc, #248]	@ (80015a8 <update_boss_bullets+0x188>)
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	4613      	mov	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	440b      	add	r3, r1
 80014bc:	3308      	adds	r3, #8
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
				continue;
 80014c2:	e064      	b.n	800158e <update_boss_bullets+0x16e>
			}

			// Vẽ lại viên đạn mới
			ILI9341_DrawRectangle(boss_bullets[i].x, boss_bullets[i].y,
 80014c4:	4938      	ldr	r1, [pc, #224]	@ (80015a8 <update_boss_bullets+0x188>)
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	4613      	mov	r3, r2
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	4413      	add	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	440b      	add	r3, r1
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	b298      	uxth	r0, r3
 80014d6:	4934      	ldr	r1, [pc, #208]	@ (80015a8 <update_boss_bullets+0x188>)
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4413      	add	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	440b      	add	r3, r1
 80014e4:	3304      	adds	r3, #4
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	b299      	uxth	r1, r3
 80014ea:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	2308      	movs	r3, #8
 80014f2:	2204      	movs	r2, #4
 80014f4:	f7ff fcc0 	bl	8000e78 <ILI9341_DrawRectangle>
					BULLET_WIDTH, BULLET_HEIGHT, RED);

			// Kiểm tra va chạm với máy bay người chơi
			if (boss_bullets[i].x + 4 <= plane_x
 80014f8:	492b      	ldr	r1, [pc, #172]	@ (80015a8 <update_boss_bullets+0x188>)
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	440b      	add	r3, r1
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	1cda      	adds	r2, r3, #3
 800150a:	4b28      	ldr	r3, [pc, #160]	@ (80015ac <update_boss_bullets+0x18c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	db3d      	blt.n	800158e <update_boss_bullets+0x16e>
							|| boss_bullets[i].x >= plane_x + PLANE_WIDTH
 8001512:	4b26      	ldr	r3, [pc, #152]	@ (80015ac <update_boss_bullets+0x18c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f103 0113 	add.w	r1, r3, #19
 800151a:	4823      	ldr	r0, [pc, #140]	@ (80015a8 <update_boss_bullets+0x188>)
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	4613      	mov	r3, r2
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	4413      	add	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4403      	add	r3, r0
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4299      	cmp	r1, r3
 800152c:	db2f      	blt.n	800158e <update_boss_bullets+0x16e>
							|| boss_bullets[i].y + 4 <= plane_y - PLANE_WIDTH / 2
 800152e:	491e      	ldr	r1, [pc, #120]	@ (80015a8 <update_boss_bullets+0x188>)
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	4613      	mov	r3, r2
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	4413      	add	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	440b      	add	r3, r1
 800153c:	3304      	adds	r3, #4
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	1cda      	adds	r2, r3, #3
 8001542:	4b1b      	ldr	r3, [pc, #108]	@ (80015b0 <update_boss_bullets+0x190>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	3b0a      	subs	r3, #10
 8001548:	429a      	cmp	r2, r3
 800154a:	db20      	blt.n	800158e <update_boss_bullets+0x16e>
							|| boss_bullets[i].y >= plane_y + PLANE_HEIGHT / 2) {
 800154c:	4b18      	ldr	r3, [pc, #96]	@ (80015b0 <update_boss_bullets+0x190>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f103 0109 	add.w	r1, r3, #9
 8001554:	4814      	ldr	r0, [pc, #80]	@ (80015a8 <update_boss_bullets+0x188>)
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	4613      	mov	r3, r2
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	4413      	add	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4403      	add	r3, r0
 8001562:	3304      	adds	r3, #4
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4299      	cmp	r1, r3
 8001568:	db11      	blt.n	800158e <update_boss_bullets+0x16e>
					} else {
						ILI9341_FillScreen(WHITE);
 800156a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800156e:	f7ff fbf7 	bl	8000d60 <ILI9341_FillScreen>
						ILI9341_DrawText("GAME OVER", FONT3, 50, 120, RED, WHITE);
 8001572:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001576:	9301      	str	r3, [sp, #4]
 8001578:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	2378      	movs	r3, #120	@ 0x78
 8001580:	2232      	movs	r2, #50	@ 0x32
 8001582:	490c      	ldr	r1, [pc, #48]	@ (80015b4 <update_boss_bullets+0x194>)
 8001584:	480c      	ldr	r0, [pc, #48]	@ (80015b8 <update_boss_bullets+0x198>)
 8001586:	f7ff f891 	bl	80006ac <ILI9341_DrawText>
						while (1); // Dừng game tại đây
 800158a:	bf00      	nop
 800158c:	e7fd      	b.n	800158a <update_boss_bullets+0x16a>
	for (int i = 0; i < MAX_BOSS_BULLETS; i++) {
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3301      	adds	r3, #1
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b31      	cmp	r3, #49	@ 0x31
 8001598:	f77f af48 	ble.w	800142c <update_boss_bullets+0xc>
					}
		}
	}
}
 800159c:	bf00      	nop
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000278 	.word	0x20000278
 80015ac:	20000004 	.word	0x20000004
 80015b0:	20000008 	.word	0x20000008
 80015b4:	0800666c 	.word	0x0800666c
 80015b8:	08005fd8 	.word	0x08005fd8

080015bc <update_boss>:

void update_boss() {
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
	//hàm cập nhật tình trạng của boss, boss di chuyển qua lại màn hình, sau 100 chu kì sẽ bắn đạn 1 lần
	if (!boss.active)
 80015c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001638 <update_boss+0x7c>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d035      	beq.n	8001634 <update_boss+0x78>
		return;
	erase_boss(boss.x, boss.y);
 80015c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001638 <update_boss+0x7c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a1a      	ldr	r2, [pc, #104]	@ (8001638 <update_boss+0x7c>)
 80015ce:	6852      	ldr	r2, [r2, #4]
 80015d0:	4611      	mov	r1, r2
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fece 	bl	8001374 <erase_boss>
	if (boss.y <= 0)
 80015d8:	4b17      	ldr	r3, [pc, #92]	@ (8001638 <update_boss+0x7c>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	dc03      	bgt.n	80015e8 <update_boss+0x2c>
		a = 1;
 80015e0:	4b16      	ldr	r3, [pc, #88]	@ (800163c <update_boss+0x80>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	e007      	b.n	80015f8 <update_boss+0x3c>
	else if (boss.y >= 210)
 80015e8:	4b13      	ldr	r3, [pc, #76]	@ (8001638 <update_boss+0x7c>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2bd1      	cmp	r3, #209	@ 0xd1
 80015ee:	dd03      	ble.n	80015f8 <update_boss+0x3c>
		a = -1; // Di chuyển lại từ phải sang trái
 80015f0:	4b12      	ldr	r3, [pc, #72]	@ (800163c <update_boss+0x80>)
 80015f2:	f04f 32ff 	mov.w	r2, #4294967295
 80015f6:	601a      	str	r2, [r3, #0]
	boss.y += a;
 80015f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001638 <update_boss+0x7c>)
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	4b0f      	ldr	r3, [pc, #60]	@ (800163c <update_boss+0x80>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4413      	add	r3, r2
 8001602:	4a0d      	ldr	r2, [pc, #52]	@ (8001638 <update_boss+0x7c>)
 8001604:	6053      	str	r3, [r2, #4]

	draw_boss(boss.x, boss.y);
 8001606:	4b0c      	ldr	r3, [pc, #48]	@ (8001638 <update_boss+0x7c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a0b      	ldr	r2, [pc, #44]	@ (8001638 <update_boss+0x7c>)
 800160c:	6852      	ldr	r2, [r2, #4]
 800160e:	4611      	mov	r1, r2
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fe9b 	bl	800134c <draw_boss>

	boss.laser_timer++;
 8001616:	4b08      	ldr	r3, [pc, #32]	@ (8001638 <update_boss+0x7c>)
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	3301      	adds	r3, #1
 800161c:	4a06      	ldr	r2, [pc, #24]	@ (8001638 <update_boss+0x7c>)
 800161e:	6113      	str	r3, [r2, #16]
	if (boss.laser_timer >= 100) { // Bắn laser sau mỗi 100 chu kỳ
 8001620:	4b05      	ldr	r3, [pc, #20]	@ (8001638 <update_boss+0x7c>)
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	2b63      	cmp	r3, #99	@ 0x63
 8001626:	dd06      	ble.n	8001636 <update_boss+0x7a>
		fire_boss_laser();
 8001628:	f7ff feb8 	bl	800139c <fire_boss_laser>
		boss.laser_timer = 0;
 800162c:	4b02      	ldr	r3, [pc, #8]	@ (8001638 <update_boss+0x7c>)
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
 8001632:	e000      	b.n	8001636 <update_boss+0x7a>
		return;
 8001634:	bf00      	nop
	}
}
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000264 	.word	0x20000264
 800163c:	20000014 	.word	0x20000014

08001640 <check_bullet_boss_collision>:

void check_bullet_boss_collision() {
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af02      	add	r7, sp, #8
	// hàm check va chạm boss với đạn, nếu bắn boss đủ số lượng đạn, boss sẽ chết
	if (!boss.active)
 8001646:	4b4b      	ldr	r3, [pc, #300]	@ (8001774 <check_bullet_boss_collision+0x134>)
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 808d 	beq.w	800176a <check_bullet_boss_collision+0x12a>
		return;

	for (int i = 0; i < MAX_BULLETS; i++) {
 8001650:	2300      	movs	r3, #0
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	e084      	b.n	8001760 <check_bullet_boss_collision+0x120>
		if (!bullets[i].active)
 8001656:	4948      	ldr	r1, [pc, #288]	@ (8001778 <check_bullet_boss_collision+0x138>)
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	4613      	mov	r3, r2
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	4413      	add	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	3308      	adds	r3, #8
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d075      	beq.n	8001758 <check_bullet_boss_collision+0x118>
			continue;

		if (bullets[i].x + BULLET_HEIGHT > boss.x&&
 800166c:	4942      	ldr	r1, [pc, #264]	@ (8001778 <check_bullet_boss_collision+0x138>)
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	4613      	mov	r3, r2
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	4413      	add	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	1dda      	adds	r2, r3, #7
 800167e:	4b3d      	ldr	r3, [pc, #244]	@ (8001774 <check_bullet_boss_collision+0x134>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	db69      	blt.n	800175a <check_bullet_boss_collision+0x11a>
		bullets[i].x < boss.x + BOSS_WIDTH &&
 8001686:	4b3b      	ldr	r3, [pc, #236]	@ (8001774 <check_bullet_boss_collision+0x134>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f103 0127 	add.w	r1, r3, #39	@ 0x27
 800168e:	483a      	ldr	r0, [pc, #232]	@ (8001778 <check_bullet_boss_collision+0x138>)
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	4613      	mov	r3, r2
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	4413      	add	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4403      	add	r3, r0
 800169c:	681b      	ldr	r3, [r3, #0]
		if (bullets[i].x + BULLET_HEIGHT > boss.x&&
 800169e:	4299      	cmp	r1, r3
 80016a0:	db5b      	blt.n	800175a <check_bullet_boss_collision+0x11a>
		bullets[i].y + BULLET_WIDTH > boss.y &&
 80016a2:	4935      	ldr	r1, [pc, #212]	@ (8001778 <check_bullet_boss_collision+0x138>)
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	4413      	add	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	440b      	add	r3, r1
 80016b0:	3304      	adds	r3, #4
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	1cda      	adds	r2, r3, #3
 80016b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001774 <check_bullet_boss_collision+0x134>)
 80016b8:	685b      	ldr	r3, [r3, #4]
		bullets[i].x < boss.x + BOSS_WIDTH &&
 80016ba:	429a      	cmp	r2, r3
 80016bc:	db4d      	blt.n	800175a <check_bullet_boss_collision+0x11a>
		bullets[i].y < boss.y + BOSS_HEIGHT) {
 80016be:	4b2d      	ldr	r3, [pc, #180]	@ (8001774 <check_bullet_boss_collision+0x134>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f103 011d 	add.w	r1, r3, #29
 80016c6:	482c      	ldr	r0, [pc, #176]	@ (8001778 <check_bullet_boss_collision+0x138>)
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	4613      	mov	r3, r2
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	4413      	add	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4403      	add	r3, r0
 80016d4:	3304      	adds	r3, #4
 80016d6:	681b      	ldr	r3, [r3, #0]
		bullets[i].y + BULLET_WIDTH > boss.y &&
 80016d8:	4299      	cmp	r1, r3
 80016da:	db3e      	blt.n	800175a <check_bullet_boss_collision+0x11a>

			bullets[i].active = 0;
 80016dc:	4926      	ldr	r1, [pc, #152]	@ (8001778 <check_bullet_boss_collision+0x138>)
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	4613      	mov	r3, r2
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4413      	add	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	440b      	add	r3, r1
 80016ea:	3308      	adds	r3, #8
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
			ILI9341_DrawRectangle(bullets[i].x, bullets[i].y,
 80016f0:	4921      	ldr	r1, [pc, #132]	@ (8001778 <check_bullet_boss_collision+0x138>)
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	4613      	mov	r3, r2
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	4413      	add	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	440b      	add	r3, r1
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	b298      	uxth	r0, r3
 8001702:	491d      	ldr	r1, [pc, #116]	@ (8001778 <check_bullet_boss_collision+0x138>)
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	4613      	mov	r3, r2
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	4413      	add	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	440b      	add	r3, r1
 8001710:	3304      	adds	r3, #4
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	b299      	uxth	r1, r3
 8001716:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	2304      	movs	r3, #4
 800171e:	2208      	movs	r2, #8
 8001720:	f7ff fbaa 	bl	8000e78 <ILI9341_DrawRectangle>
			BULLET_HEIGHT, BULLET_WIDTH, WHITE);

			boss.hp--;
 8001724:	4b13      	ldr	r3, [pc, #76]	@ (8001774 <check_bullet_boss_collision+0x134>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	3b01      	subs	r3, #1
 800172a:	4a12      	ldr	r2, [pc, #72]	@ (8001774 <check_bullet_boss_collision+0x134>)
 800172c:	6093      	str	r3, [r2, #8]
			if (boss.hp <= 0) {
 800172e:	4b11      	ldr	r3, [pc, #68]	@ (8001774 <check_bullet_boss_collision+0x134>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	2b00      	cmp	r3, #0
 8001734:	dc11      	bgt.n	800175a <check_bullet_boss_collision+0x11a>
				erase_boss(boss.x, boss.y);
 8001736:	4b0f      	ldr	r3, [pc, #60]	@ (8001774 <check_bullet_boss_collision+0x134>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a0e      	ldr	r2, [pc, #56]	@ (8001774 <check_bullet_boss_collision+0x134>)
 800173c:	6852      	ldr	r2, [r2, #4]
 800173e:	4611      	mov	r1, r2
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fe17 	bl	8001374 <erase_boss>
				boss.active = 0;
 8001746:	4b0b      	ldr	r3, [pc, #44]	@ (8001774 <check_bullet_boss_collision+0x134>)
 8001748:	2200      	movs	r2, #0
 800174a:	60da      	str	r2, [r3, #12]
				point += 50; // thưởng điểm
 800174c:	4b0b      	ldr	r3, [pc, #44]	@ (800177c <check_bullet_boss_collision+0x13c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	3332      	adds	r3, #50	@ 0x32
 8001752:	4a0a      	ldr	r2, [pc, #40]	@ (800177c <check_bullet_boss_collision+0x13c>)
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	e000      	b.n	800175a <check_bullet_boss_collision+0x11a>
			continue;
 8001758:	bf00      	nop
	for (int i = 0; i < MAX_BULLETS; i++) {
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3301      	adds	r3, #1
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b04      	cmp	r3, #4
 8001764:	f77f af77 	ble.w	8001656 <check_bullet_boss_collision+0x16>
 8001768:	e000      	b.n	800176c <check_bullet_boss_collision+0x12c>
		return;
 800176a:	bf00      	nop
			}
		}
	}
}
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000264 	.word	0x20000264
 8001778:	20000228 	.word	0x20000228
 800177c:	200004d4 	.word	0x200004d4

08001780 <draw_bullet>:
//				; // Dừng game tại đây
//		}
//	}
//}

void draw_bullet(Bullet *b) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af02      	add	r7, sp, #8
 8001786:	6078      	str	r0, [r7, #4]
	ILI9341_DrawRectangle(b->x, b->y, BULLET_HEIGHT, BULLET_WIDTH, RED);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	b298      	uxth	r0, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	b299      	uxth	r1, r3
 8001794:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	2304      	movs	r3, #4
 800179c:	2208      	movs	r2, #8
 800179e:	f7ff fb6b 	bl	8000e78 <ILI9341_DrawRectangle>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <erase_bullet>:

void erase_bullet(Bullet *b) {
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b084      	sub	sp, #16
 80017ae:	af02      	add	r7, sp, #8
 80017b0:	6078      	str	r0, [r7, #4]
	ILI9341_DrawRectangle(b->x, b->y, BULLET_HEIGHT, BULLET_WIDTH, WHITE);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	b298      	uxth	r0, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	b299      	uxth	r1, r3
 80017be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	2304      	movs	r3, #4
 80017c6:	2208      	movs	r2, #8
 80017c8:	f7ff fb56 	bl	8000e78 <ILI9341_DrawRectangle>
}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <shoot_bullet>:

void shoot_bullet() {
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
	//hàm khởi tạo đạn của máy bay
	for (int i = 0; i < MAX_BULLETS; i++) {
 80017da:	2300      	movs	r3, #0
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	e02f      	b.n	8001840 <shoot_bullet+0x6c>
		if (!bullets[i].active) {
 80017e0:	491c      	ldr	r1, [pc, #112]	@ (8001854 <shoot_bullet+0x80>)
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	4613      	mov	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4413      	add	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	440b      	add	r3, r1
 80017ee:	3308      	adds	r3, #8
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d121      	bne.n	800183a <shoot_bullet+0x66>
			bullets[i].x = plane_x + PLANE_WIDTH;
 80017f6:	4b18      	ldr	r3, [pc, #96]	@ (8001858 <shoot_bullet+0x84>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f103 0114 	add.w	r1, r3, #20
 80017fe:	4815      	ldr	r0, [pc, #84]	@ (8001854 <shoot_bullet+0x80>)
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	4613      	mov	r3, r2
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	4413      	add	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4403      	add	r3, r0
 800180c:	6019      	str	r1, [r3, #0]
			bullets[i].y = plane_y;
 800180e:	4b13      	ldr	r3, [pc, #76]	@ (800185c <shoot_bullet+0x88>)
 8001810:	6819      	ldr	r1, [r3, #0]
 8001812:	4810      	ldr	r0, [pc, #64]	@ (8001854 <shoot_bullet+0x80>)
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	4613      	mov	r3, r2
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	4413      	add	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4403      	add	r3, r0
 8001820:	3304      	adds	r3, #4
 8001822:	6019      	str	r1, [r3, #0]
			bullets[i].active = 1;
 8001824:	490b      	ldr	r1, [pc, #44]	@ (8001854 <shoot_bullet+0x80>)
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	4613      	mov	r3, r2
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	4413      	add	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	440b      	add	r3, r1
 8001832:	3308      	adds	r3, #8
 8001834:	2201      	movs	r2, #1
 8001836:	601a      	str	r2, [r3, #0]
			break;
 8001838:	e006      	b.n	8001848 <shoot_bullet+0x74>
	for (int i = 0; i < MAX_BULLETS; i++) {
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	3301      	adds	r3, #1
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b04      	cmp	r3, #4
 8001844:	ddcc      	ble.n	80017e0 <shoot_bullet+0xc>
		}
	}
}
 8001846:	bf00      	nop
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	20000228 	.word	0x20000228
 8001858:	20000004 	.word	0x20000004
 800185c:	20000008 	.word	0x20000008

08001860 <update_bullets>:

void update_bullets() {
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
	//hàm cập nhật tình trạng đạn, nếu viên đạn active thì sẽ di chuyển lên
	for (int i = 0; i < MAX_BULLETS; i++) {
 8001866:	2300      	movs	r3, #0
 8001868:	607b      	str	r3, [r7, #4]
 800186a:	e048      	b.n	80018fe <update_bullets+0x9e>
		if (bullets[i].active) {
 800186c:	4928      	ldr	r1, [pc, #160]	@ (8001910 <update_bullets+0xb0>)
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	4613      	mov	r3, r2
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	4413      	add	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	440b      	add	r3, r1
 800187a:	3308      	adds	r3, #8
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d03a      	beq.n	80018f8 <update_bullets+0x98>
			erase_bullet(&bullets[i]);
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	4613      	mov	r3, r2
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	4413      	add	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4a20      	ldr	r2, [pc, #128]	@ (8001910 <update_bullets+0xb0>)
 800188e:	4413      	add	r3, r2
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff ff8a 	bl	80017aa <erase_bullet>
			bullets[i].x += 5;
 8001896:	491e      	ldr	r1, [pc, #120]	@ (8001910 <update_bullets+0xb0>)
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	4413      	add	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	440b      	add	r3, r1
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	1d59      	adds	r1, r3, #5
 80018a8:	4819      	ldr	r0, [pc, #100]	@ (8001910 <update_bullets+0xb0>)
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	4613      	mov	r3, r2
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	4413      	add	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4403      	add	r3, r0
 80018b6:	6019      	str	r1, [r3, #0]
			if (bullets[i].x >= 320) {
 80018b8:	4915      	ldr	r1, [pc, #84]	@ (8001910 <update_bullets+0xb0>)
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	4413      	add	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80018cc:	db0a      	blt.n	80018e4 <update_bullets+0x84>
				bullets[i].active = 0;
 80018ce:	4910      	ldr	r1, [pc, #64]	@ (8001910 <update_bullets+0xb0>)
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	4613      	mov	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4413      	add	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	440b      	add	r3, r1
 80018dc:	3308      	adds	r3, #8
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	e009      	b.n	80018f8 <update_bullets+0x98>
			} else {
				draw_bullet(&bullets[i]);
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4413      	add	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4a08      	ldr	r2, [pc, #32]	@ (8001910 <update_bullets+0xb0>)
 80018f0:	4413      	add	r3, r2
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff ff44 	bl	8001780 <draw_bullet>
	for (int i = 0; i < MAX_BULLETS; i++) {
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3301      	adds	r3, #1
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b04      	cmp	r3, #4
 8001902:	ddb3      	ble.n	800186c <update_bullets+0xc>
			}
		}
	}
}
 8001904:	bf00      	nop
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000228 	.word	0x20000228

08001914 <draw_score>:

void draw_score(int point) {
 8001914:	b580      	push	{r7, lr}
 8001916:	b08a      	sub	sp, #40	@ 0x28
 8001918:	af02      	add	r7, sp, #8
 800191a:	6078      	str	r0, [r7, #4]
	char buffer[20];
	sprintf(buffer, "Score: %d", point);
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	490e      	ldr	r1, [pc, #56]	@ (800195c <draw_score+0x48>)
 8001924:	4618      	mov	r0, r3
 8001926:	f003 fa61 	bl	8004dec <siprintf>

	// Xóa vùng cũ (giả sử vùng rộng 120px, cao 18px)
	ILI9341_DrawRectangle(0, 0, 120, 18, WHITE);
 800192a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	2312      	movs	r3, #18
 8001932:	2278      	movs	r2, #120	@ 0x78
 8001934:	2100      	movs	r1, #0
 8001936:	2000      	movs	r0, #0
 8001938:	f7ff fa9e 	bl	8000e78 <ILI9341_DrawRectangle>

	// Vẽ chuỗi mới (x=0, y=0), dùng font 11x18
	ILI9341_DrawText(buffer, Arial_Narrow8x12, 0, 0, BLACK, WHITE);
 800193c:	f107 000c 	add.w	r0, r7, #12
 8001940:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001944:	9301      	str	r3, [sp, #4]
 8001946:	2300      	movs	r3, #0
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	2300      	movs	r3, #0
 800194c:	2200      	movs	r2, #0
 800194e:	4904      	ldr	r1, [pc, #16]	@ (8001960 <draw_score+0x4c>)
 8001950:	f7fe feac 	bl	80006ac <ILI9341_DrawText>
}
 8001954:	bf00      	nop
 8001956:	3720      	adds	r7, #32
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	08005fe4 	.word	0x08005fe4
 8001960:	08006008 	.word	0x08006008

08001964 <check_bullet_enemy_collision>:

void check_bullet_enemy_collision() { //hàm check máy bay địch chạm đạn
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_BULLETS; i++) {
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	e0df      	b.n	8001b30 <check_bullet_enemy_collision+0x1cc>
		if (!bullets[i].active)
 8001970:	4974      	ldr	r1, [pc, #464]	@ (8001b44 <check_bullet_enemy_collision+0x1e0>)
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	4613      	mov	r3, r2
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4413      	add	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	440b      	add	r3, r1
 800197e:	3308      	adds	r3, #8
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 80d0 	beq.w	8001b28 <check_bullet_enemy_collision+0x1c4>
			continue;
		for (int j = 0; j < current_enemy_count; j++) {
 8001988:	2300      	movs	r3, #0
 800198a:	603b      	str	r3, [r7, #0]
 800198c:	e0c5      	b.n	8001b1a <check_bullet_enemy_collision+0x1b6>
			if (!enemies[j].active)
 800198e:	496e      	ldr	r1, [pc, #440]	@ (8001b48 <check_bullet_enemy_collision+0x1e4>)
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	4613      	mov	r3, r2
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	4413      	add	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	440b      	add	r3, r1
 800199c:	3308      	adds	r3, #8
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f000 80b6 	beq.w	8001b12 <check_bullet_enemy_collision+0x1ae>
				continue;

			// Kiểm tra va chạm hình chữ nhật
			if (bullets[i].x + BULLET_HEIGHT > enemies[j].x&&
 80019a6:	4967      	ldr	r1, [pc, #412]	@ (8001b44 <check_bullet_enemy_collision+0x1e0>)
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	4613      	mov	r3, r2
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	4413      	add	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	440b      	add	r3, r1
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	1dd9      	adds	r1, r3, #7
 80019b8:	4863      	ldr	r0, [pc, #396]	@ (8001b48 <check_bullet_enemy_collision+0x1e4>)
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	4613      	mov	r3, r2
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	4413      	add	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4403      	add	r3, r0
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4299      	cmp	r1, r3
 80019ca:	f2c0 80a3 	blt.w	8001b14 <check_bullet_enemy_collision+0x1b0>
			bullets[i].x < enemies[j].x + PLANE_WIDTH &&
 80019ce:	495e      	ldr	r1, [pc, #376]	@ (8001b48 <check_bullet_enemy_collision+0x1e4>)
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	4613      	mov	r3, r2
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	440b      	add	r3, r1
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f103 0113 	add.w	r1, r3, #19
 80019e2:	4858      	ldr	r0, [pc, #352]	@ (8001b44 <check_bullet_enemy_collision+0x1e0>)
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	4613      	mov	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	4413      	add	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4403      	add	r3, r0
 80019f0:	681b      	ldr	r3, [r3, #0]
			if (bullets[i].x + BULLET_HEIGHT > enemies[j].x&&
 80019f2:	4299      	cmp	r1, r3
 80019f4:	f2c0 808e 	blt.w	8001b14 <check_bullet_enemy_collision+0x1b0>
			bullets[i].y + BULLET_WIDTH > enemies[j].y &&
 80019f8:	4952      	ldr	r1, [pc, #328]	@ (8001b44 <check_bullet_enemy_collision+0x1e0>)
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	4613      	mov	r3, r2
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	4413      	add	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	440b      	add	r3, r1
 8001a06:	3304      	adds	r3, #4
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	1cd9      	adds	r1, r3, #3
 8001a0c:	484e      	ldr	r0, [pc, #312]	@ (8001b48 <check_bullet_enemy_collision+0x1e4>)
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	4613      	mov	r3, r2
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	4413      	add	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4403      	add	r3, r0
 8001a1a:	3304      	adds	r3, #4
 8001a1c:	681b      	ldr	r3, [r3, #0]
			bullets[i].x < enemies[j].x + PLANE_WIDTH &&
 8001a1e:	4299      	cmp	r1, r3
 8001a20:	db78      	blt.n	8001b14 <check_bullet_enemy_collision+0x1b0>
			bullets[i].y < enemies[j].y + PLANE_HEIGHT) {
 8001a22:	4949      	ldr	r1, [pc, #292]	@ (8001b48 <check_bullet_enemy_collision+0x1e4>)
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	4613      	mov	r3, r2
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	4413      	add	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	440b      	add	r3, r1
 8001a30:	3304      	adds	r3, #4
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f103 0113 	add.w	r1, r3, #19
 8001a38:	4842      	ldr	r0, [pc, #264]	@ (8001b44 <check_bullet_enemy_collision+0x1e0>)
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	4413      	add	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4403      	add	r3, r0
 8001a46:	3304      	adds	r3, #4
 8001a48:	681b      	ldr	r3, [r3, #0]
			bullets[i].y + BULLET_WIDTH > enemies[j].y &&
 8001a4a:	4299      	cmp	r1, r3
 8001a4c:	db62      	blt.n	8001b14 <check_bullet_enemy_collision+0x1b0>

				// Xóa máy bay địch và đạn
				erase_enemies(enemies[j].x, enemies[j].y);
 8001a4e:	493e      	ldr	r1, [pc, #248]	@ (8001b48 <check_bullet_enemy_collision+0x1e4>)
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	4613      	mov	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	4413      	add	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	6818      	ldr	r0, [r3, #0]
 8001a5e:	493a      	ldr	r1, [pc, #232]	@ (8001b48 <check_bullet_enemy_collision+0x1e4>)
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	4613      	mov	r3, r2
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	4413      	add	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4619      	mov	r1, r3
 8001a72:	f7ff fb99 	bl	80011a8 <erase_enemies>
				erase_bullet(&bullets[i]);
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	4413      	add	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4a30      	ldr	r2, [pc, #192]	@ (8001b44 <check_bullet_enemy_collision+0x1e0>)
 8001a82:	4413      	add	r3, r2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff fe90 	bl	80017aa <erase_bullet>
				bullets[i].active = 0;
 8001a8a:	492e      	ldr	r1, [pc, #184]	@ (8001b44 <check_bullet_enemy_collision+0x1e0>)
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	4413      	add	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	440b      	add	r3, r1
 8001a98:	3308      	adds	r3, #8
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
				enemies[j].active = 0;
 8001a9e:	492a      	ldr	r1, [pc, #168]	@ (8001b48 <check_bullet_enemy_collision+0x1e4>)
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	4413      	add	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	440b      	add	r3, r1
 8001aac:	3308      	adds	r3, #8
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]

				// (Tùy chọn) Reset lại địch sau khi bị bắn( đảm bảo màn hình luốn đủ số lượng địch)
				enemies[j].x = 320;
 8001ab2:	4925      	ldr	r1, [pc, #148]	@ (8001b48 <check_bullet_enemy_collision+0x1e4>)
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	4413      	add	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	440b      	add	r3, r1
 8001ac0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001ac4:	601a      	str	r2, [r3, #0]
				enemies[j].y = rand() % 100; // rand chạy từ 0 -> 32767
 8001ac6:	f003 f891 	bl	8004bec <rand>
 8001aca:	4603      	mov	r3, r0
 8001acc:	4a1f      	ldr	r2, [pc, #124]	@ (8001b4c <check_bullet_enemy_collision+0x1e8>)
 8001ace:	fb82 1203 	smull	r1, r2, r2, r3
 8001ad2:	1151      	asrs	r1, r2, #5
 8001ad4:	17da      	asrs	r2, r3, #31
 8001ad6:	1a8a      	subs	r2, r1, r2
 8001ad8:	2164      	movs	r1, #100	@ 0x64
 8001ada:	fb01 f202 	mul.w	r2, r1, r2
 8001ade:	1a9a      	subs	r2, r3, r2
 8001ae0:	4819      	ldr	r0, [pc, #100]	@ (8001b48 <check_bullet_enemy_collision+0x1e4>)
 8001ae2:	6839      	ldr	r1, [r7, #0]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	440b      	add	r3, r1
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4403      	add	r3, r0
 8001aee:	3304      	adds	r3, #4
 8001af0:	601a      	str	r2, [r3, #0]
				enemies[j].active = 1;
 8001af2:	4915      	ldr	r1, [pc, #84]	@ (8001b48 <check_bullet_enemy_collision+0x1e4>)
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	4613      	mov	r3, r2
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	4413      	add	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	440b      	add	r3, r1
 8001b00:	3308      	adds	r3, #8
 8001b02:	2201      	movs	r2, #1
 8001b04:	601a      	str	r2, [r3, #0]

				//cộng điểm
				point += 10;
 8001b06:	4b12      	ldr	r3, [pc, #72]	@ (8001b50 <check_bullet_enemy_collision+0x1ec>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	330a      	adds	r3, #10
 8001b0c:	4a10      	ldr	r2, [pc, #64]	@ (8001b50 <check_bullet_enemy_collision+0x1ec>)
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	e000      	b.n	8001b14 <check_bullet_enemy_collision+0x1b0>
				continue;
 8001b12:	bf00      	nop
		for (int j = 0; j < current_enemy_count; j++) {
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	3301      	adds	r3, #1
 8001b18:	603b      	str	r3, [r7, #0]
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b54 <check_bullet_enemy_collision+0x1f0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	f6ff af34 	blt.w	800198e <check_bullet_enemy_collision+0x2a>
 8001b26:	e000      	b.n	8001b2a <check_bullet_enemy_collision+0x1c6>
			continue;
 8001b28:	bf00      	nop
	for (int i = 0; i < MAX_BULLETS; i++) {
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	607b      	str	r3, [r7, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	f77f af1c 	ble.w	8001970 <check_bullet_enemy_collision+0xc>

			}
		}
	}
}
 8001b38:	bf00      	nop
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000228 	.word	0x20000228
 8001b48:	20000174 	.word	0x20000174
 8001b4c:	51eb851f 	.word	0x51eb851f
 8001b50:	200004d4 	.word	0x200004d4
 8001b54:	2000000c 	.word	0x2000000c

08001b58 <check_collision>:

int check_collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2,
		int h2)
// hàm check va chạm máy bay ta với địch
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
 8001b64:	603b      	str	r3, [r7, #0]
	return !(x1 + w1 <= x2 ||  // máy bay ta ở hoàn toàn ở dưới máy bay địch
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	da1e      	bge.n	8001bb0 <check_collision+0x58>
			x2 + w2 <= x1 ||  // máy bay địch hoàn toàn ở dưới máy bay ta
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	4413      	add	r3, r2
	return !(x1 + w1 <= x2 ||  // máy bay ta ở hoàn toàn ở dưới máy bay địch
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	da18      	bge.n	8001bb0 <check_collision+0x58>
			y1 + h1 / 2 <= y2 ||  // máy bay ta hoàn toàn bên phải máy bay đich
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	0fda      	lsrs	r2, r3, #31
 8001b82:	4413      	add	r3, r2
 8001b84:	105b      	asrs	r3, r3, #1
 8001b86:	461a      	mov	r2, r3
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	4413      	add	r3, r2
			x2 + w2 <= x1 ||  // máy bay địch hoàn toàn ở dưới máy bay ta
 8001b8c:	69fa      	ldr	r2, [r7, #28]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	da0e      	bge.n	8001bb0 <check_collision+0x58>
			y1 - h1 / 2 >= y2 + h2); // máy bay địch ở hoàn toàn bên phải máy bay ta
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	0fda      	lsrs	r2, r3, #31
 8001b96:	4413      	add	r3, r2
 8001b98:	105b      	asrs	r3, r3, #1
 8001b9a:	425b      	negs	r3, r3
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	441a      	add	r2, r3
 8001ba2:	69f9      	ldr	r1, [r7, #28]
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba6:	440b      	add	r3, r1
	return !(x1 + w1 <= x2 ||  // máy bay ta ở hoàn toàn ở dưới máy bay địch
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	da01      	bge.n	8001bb0 <check_collision+0x58>
 8001bac:	2301      	movs	r3, #1
 8001bae:	e000      	b.n	8001bb2 <check_collision+0x5a>
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001bc0:	b5b0      	push	{r4, r5, r7, lr}
 8001bc2:	b09a      	sub	sp, #104	@ 0x68
 8001bc4:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001bc6:	f000 fd5d 	bl	8002684 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001bca:	f000 f98b 	bl	8001ee4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001bce:	f000 fa77 	bl	80020c0 <MX_GPIO_Init>
	MX_DMA_Init();
 8001bd2:	f000 fa55 	bl	8002080 <MX_DMA_Init>
	MX_RTC_Init();
 8001bd6:	f000 f9f7 	bl	8001fc8 <MX_RTC_Init>
	MX_SPI5_Init();
 8001bda:	f000 fa1b 	bl	8002014 <MX_SPI5_Init>
	/* USER CODE BEGIN 2 */
	ILI9341_Init();
 8001bde:	f7fe fec7 	bl	8000970 <ILI9341_Init>
	ILI9341_FillScreen(WHITE); //xóa màn hình cũ
 8001be2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001be6:	f7ff f8bb 	bl	8000d60 <ILI9341_FillScreen>
	ILI9341_SetRotation(SCREEN_HORIZONTAL_2); // khởi tạo trục Oxy
 8001bea:	2003      	movs	r0, #3
 8001bec:	f7fe ffca 	bl	8000b84 <ILI9341_SetRotation>

	srand(time(NULL)); // lệnh này khởi tạo "seed" (hạt giống) cho bộ sinh số ngẫu nhiên rand()
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	f003 f969 	bl	8004ec8 <time>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f002 ffc7 	bl	8004b90 <srand>

	/* USER CODE END 2 */
	/* Infinite loop */
	for (int i = 0; i < MAX_BULLETS; i++)
 8001c02:	2300      	movs	r3, #0
 8001c04:	657b      	str	r3, [r7, #84]	@ 0x54
 8001c06:	e00c      	b.n	8001c22 <main+0x62>
		bullets[i].active = 0;
 8001c08:	49a7      	ldr	r1, [pc, #668]	@ (8001ea8 <main+0x2e8>)
 8001c0a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	4413      	add	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	440b      	add	r3, r1
 8001c16:	3308      	adds	r3, #8
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < MAX_BULLETS; i++)
 8001c1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c1e:	3301      	adds	r3, #1
 8001c20:	657b      	str	r3, [r7, #84]	@ 0x54
 8001c22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c24:	2b04      	cmp	r3, #4
 8001c26:	ddef      	ble.n	8001c08 <main+0x48>

	draw_plane(plane_x, plane_y);
 8001c28:	4ba0      	ldr	r3, [pc, #640]	@ (8001eac <main+0x2ec>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4aa0      	ldr	r2, [pc, #640]	@ (8001eb0 <main+0x2f0>)
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	4611      	mov	r1, r2
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff f9e1 	bl	8000ffa <draw_plane>
	init_enemies(); // ← Thêm dòng này
 8001c38:	f7ff fa6e 	bl	8001118 <init_enemies>
	draw_score(point);
 8001c3c:	4b9d      	ldr	r3, [pc, #628]	@ (8001eb4 <main+0x2f4>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff fe67 	bl	8001914 <draw_score>

	while (1) {

		draw_score(point);
 8001c46:	4b9b      	ldr	r3, [pc, #620]	@ (8001eb4 <main+0x2f4>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff fe62 	bl	8001914 <draw_score>
		update_bullets();
 8001c50:	f7ff fe06 	bl	8001860 <update_bullets>
		if (level <= 2) {
 8001c54:	4b98      	ldr	r3, [pc, #608]	@ (8001eb8 <main+0x2f8>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	f300 80b2 	bgt.w	8001dc2 <main+0x202>
			update_enemies(); // ← Thêm dòng này
 8001c5e:	f7ff fab7 	bl	80011d0 <update_enemies>
			for (int i = 0; i < current_enemy_count; i++) {
 8001c62:	2300      	movs	r3, #0
 8001c64:	653b      	str	r3, [r7, #80]	@ 0x50
 8001c66:	e042      	b.n	8001cee <main+0x12e>
				if (enemies[i].active
 8001c68:	4994      	ldr	r1, [pc, #592]	@ (8001ebc <main+0x2fc>)
 8001c6a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	4413      	add	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	440b      	add	r3, r1
 8001c76:	3308      	adds	r3, #8
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d034      	beq.n	8001ce8 <main+0x128>
						&& check_collision(plane_x, plane_y, PLANE_WIDTH,
 8001c7e:	4b8b      	ldr	r3, [pc, #556]	@ (8001eac <main+0x2ec>)
 8001c80:	6818      	ldr	r0, [r3, #0]
 8001c82:	4b8b      	ldr	r3, [pc, #556]	@ (8001eb0 <main+0x2f0>)
 8001c84:	681c      	ldr	r4, [r3, #0]
 8001c86:	498d      	ldr	r1, [pc, #564]	@ (8001ebc <main+0x2fc>)
 8001c88:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	4413      	add	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	440b      	add	r3, r1
 8001c94:	6819      	ldr	r1, [r3, #0]
 8001c96:	4d89      	ldr	r5, [pc, #548]	@ (8001ebc <main+0x2fc>)
 8001c98:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	4413      	add	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	442b      	add	r3, r5
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2214      	movs	r2, #20
 8001caa:	9203      	str	r2, [sp, #12]
 8001cac:	2214      	movs	r2, #20
 8001cae:	9202      	str	r2, [sp, #8]
 8001cb0:	9301      	str	r3, [sp, #4]
 8001cb2:	9100      	str	r1, [sp, #0]
 8001cb4:	2314      	movs	r3, #20
 8001cb6:	2214      	movs	r2, #20
 8001cb8:	4621      	mov	r1, r4
 8001cba:	f7ff ff4d 	bl	8001b58 <check_collision>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d011      	beq.n	8001ce8 <main+0x128>
								PLANE_HEIGHT, enemies[i].x, enemies[i].y,
								PLANE_WIDTH, PLANE_HEIGHT)) {
					// Hiển thị "Game Over"
					ILI9341_FillScreen(WHITE);
 8001cc4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001cc8:	f7ff f84a 	bl	8000d60 <ILI9341_FillScreen>
					ILI9341_DrawText("GAME OVER", FONT3, 50, 120, RED, WHITE);
 8001ccc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001cd0:	9301      	str	r3, [sp, #4]
 8001cd2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	2378      	movs	r3, #120	@ 0x78
 8001cda:	2232      	movs	r2, #50	@ 0x32
 8001cdc:	4978      	ldr	r1, [pc, #480]	@ (8001ec0 <main+0x300>)
 8001cde:	4879      	ldr	r0, [pc, #484]	@ (8001ec4 <main+0x304>)
 8001ce0:	f7fe fce4 	bl	80006ac <ILI9341_DrawText>
					while (1)
 8001ce4:	bf00      	nop
 8001ce6:	e7fd      	b.n	8001ce4 <main+0x124>
			for (int i = 0; i < current_enemy_count; i++) {
 8001ce8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001cea:	3301      	adds	r3, #1
 8001cec:	653b      	str	r3, [r7, #80]	@ 0x50
 8001cee:	4b76      	ldr	r3, [pc, #472]	@ (8001ec8 <main+0x308>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	dbb7      	blt.n	8001c68 <main+0xa8>
						; // Dừng game tại đây
				}
			}

			check_bullet_enemy_collision();
 8001cf8:	f7ff fe34 	bl	8001964 <check_bullet_enemy_collision>
			if (plane_move_flag) {
 8001cfc:	4b73      	ldr	r3, [pc, #460]	@ (8001ecc <main+0x30c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d024      	beq.n	8001d4e <main+0x18e>
				plane_move_flag = 0;
 8001d04:	4b71      	ldr	r3, [pc, #452]	@ (8001ecc <main+0x30c>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
				int old_y = plane_y;
 8001d0a:	4b69      	ldr	r3, [pc, #420]	@ (8001eb0 <main+0x2f0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	647b      	str	r3, [r7, #68]	@ 0x44
				plane_y = (plane_y + 5) % 220;
 8001d10:	4b67      	ldr	r3, [pc, #412]	@ (8001eb0 <main+0x2f0>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	1d5a      	adds	r2, r3, #5
 8001d16:	4b6e      	ldr	r3, [pc, #440]	@ (8001ed0 <main+0x310>)
 8001d18:	fb83 1302 	smull	r1, r3, r3, r2
 8001d1c:	10d9      	asrs	r1, r3, #3
 8001d1e:	17d3      	asrs	r3, r2, #31
 8001d20:	1acb      	subs	r3, r1, r3
 8001d22:	21dc      	movs	r1, #220	@ 0xdc
 8001d24:	fb01 f303 	mul.w	r3, r1, r3
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	4a61      	ldr	r2, [pc, #388]	@ (8001eb0 <main+0x2f0>)
 8001d2c:	6013      	str	r3, [r2, #0]
				erase_plane(plane_x, old_y);
 8001d2e:	4b5f      	ldr	r3, [pc, #380]	@ (8001eac <main+0x2ec>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff f99c 	bl	8001072 <erase_plane>
				draw_plane(plane_x, plane_y);
 8001d3a:	4b5c      	ldr	r3, [pc, #368]	@ (8001eac <main+0x2ec>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a5c      	ldr	r2, [pc, #368]	@ (8001eb0 <main+0x2f0>)
 8001d40:	6812      	ldr	r2, [r2, #0]
 8001d42:	4611      	mov	r1, r2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff f958 	bl	8000ffa <draw_plane>
				shoot_bullet();
 8001d4a:	f7ff fd43 	bl	80017d4 <shoot_bullet>
			}
			if (point >= level * 100) {
 8001d4e:	4b5a      	ldr	r3, [pc, #360]	@ (8001eb8 <main+0x2f8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2264      	movs	r2, #100	@ 0x64
 8001d54:	fb03 f202 	mul.w	r2, r3, r2
 8001d58:	4b56      	ldr	r3, [pc, #344]	@ (8001eb4 <main+0x2f4>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	f73f af72 	bgt.w	8001c46 <main+0x86>
				level++;
 8001d62:	4b55      	ldr	r3, [pc, #340]	@ (8001eb8 <main+0x2f8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	3301      	adds	r3, #1
 8001d68:	4a53      	ldr	r2, [pc, #332]	@ (8001eb8 <main+0x2f8>)
 8001d6a:	6013      	str	r3, [r2, #0]
				current_enemy_count += 2;
 8001d6c:	4b56      	ldr	r3, [pc, #344]	@ (8001ec8 <main+0x308>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	3302      	adds	r3, #2
 8001d72:	4a55      	ldr	r2, [pc, #340]	@ (8001ec8 <main+0x308>)
 8001d74:	6013      	str	r3, [r2, #0]
				init_enemies();
 8001d76:	f7ff f9cf 	bl	8001118 <init_enemies>
				point =0;
 8001d7a:	4b4e      	ldr	r3, [pc, #312]	@ (8001eb4 <main+0x2f4>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]

				// Hiển thị thông báo level up
				ILI9341_FillScreen(WHITE);
 8001d80:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001d84:	f7fe ffec 	bl	8000d60 <ILI9341_FillScreen>
				char msg[30];
				sprintf(msg, "LEVEL %d", level);
 8001d88:	4b4b      	ldr	r3, [pc, #300]	@ (8001eb8 <main+0x2f8>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d90:	4950      	ldr	r1, [pc, #320]	@ (8001ed4 <main+0x314>)
 8001d92:	4618      	mov	r0, r3
 8001d94:	f003 f82a 	bl	8004dec <siprintf>
				ILI9341_DrawText(msg, FONT3, 50, 120, BLUE, WHITE);
 8001d98:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001d9c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001da0:	9301      	str	r3, [sp, #4]
 8001da2:	231f      	movs	r3, #31
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	2378      	movs	r3, #120	@ 0x78
 8001da8:	2232      	movs	r2, #50	@ 0x32
 8001daa:	4945      	ldr	r1, [pc, #276]	@ (8001ec0 <main+0x300>)
 8001dac:	f7fe fc7e 	bl	80006ac <ILI9341_DrawText>
				HAL_Delay(1000);  // Hiển thị 1 giây
 8001db0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001db4:	f000 fcd8 	bl	8002768 <HAL_Delay>
				ILI9341_FillScreen(WHITE);  // Dọn lại màn hình
 8001db8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001dbc:	f7fe ffd0 	bl	8000d60 <ILI9341_FillScreen>
 8001dc0:	e741      	b.n	8001c46 <main+0x86>
			}
		} else if (level == 3) {
 8001dc2:	4b3d      	ldr	r3, [pc, #244]	@ (8001eb8 <main+0x2f8>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2b03      	cmp	r3, #3
 8001dc8:	f47f af3d 	bne.w	8001c46 <main+0x86>
			// Hiển thị thông báo level up

			ILI9341_FillScreen(WHITE);
 8001dcc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001dd0:	f7fe ffc6 	bl	8000d60 <ILI9341_FillScreen>
			char msg[30];
			sprintf(msg, "FINAL BOSS", level);
 8001dd4:	4b38      	ldr	r3, [pc, #224]	@ (8001eb8 <main+0x2f8>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	1d3b      	adds	r3, r7, #4
 8001dda:	493f      	ldr	r1, [pc, #252]	@ (8001ed8 <main+0x318>)
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f003 f805 	bl	8004dec <siprintf>
			ILI9341_DrawText(msg, FONT3, 50, 120, BLUE, WHITE);
 8001de2:	1d38      	adds	r0, r7, #4
 8001de4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001de8:	9301      	str	r3, [sp, #4]
 8001dea:	231f      	movs	r3, #31
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	2378      	movs	r3, #120	@ 0x78
 8001df0:	2232      	movs	r2, #50	@ 0x32
 8001df2:	4933      	ldr	r1, [pc, #204]	@ (8001ec0 <main+0x300>)
 8001df4:	f7fe fc5a 	bl	80006ac <ILI9341_DrawText>
			HAL_Delay(1000);  // Hiển thị 1 giây
 8001df8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001dfc:	f000 fcb4 	bl	8002768 <HAL_Delay>
			ILI9341_FillScreen(WHITE);
 8001e00:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001e04:	f7fe ffac 	bl	8000d60 <ILI9341_FillScreen>
			init_boss();
 8001e08:	f7ff fa86 	bl	8001318 <init_boss>
			draw_boss(boss.x, boss.y);
 8001e0c:	4b33      	ldr	r3, [pc, #204]	@ (8001edc <main+0x31c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a32      	ldr	r2, [pc, #200]	@ (8001edc <main+0x31c>)
 8001e12:	6852      	ldr	r2, [r2, #4]
 8001e14:	4611      	mov	r1, r2
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff fa98 	bl	800134c <draw_boss>
			uint32_t now = HAL_GetTick(); // Lấy thời gian hiện tại (milis)
 8001e1c:	f000 fc98 	bl	8002750 <HAL_GetTick>
 8001e20:	64f8      	str	r0, [r7, #76]	@ 0x4c

			while (1) {
				if (now - last_boss_fire_time >= boss_fire_interval) {
 8001e22:	4b2f      	ldr	r3, [pc, #188]	@ (8001ee0 <main+0x320>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d304      	bcc.n	8001e3c <main+0x27c>
					fire_boss_laser();
 8001e32:	f7ff fab3 	bl	800139c <fire_boss_laser>
					last_boss_fire_time = now;
 8001e36:	4a2a      	ldr	r2, [pc, #168]	@ (8001ee0 <main+0x320>)
 8001e38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e3a:	6013      	str	r3, [r2, #0]
				}
				update_bullets();
 8001e3c:	f7ff fd10 	bl	8001860 <update_bullets>
				HAL_Delay(10);
 8001e40:	200a      	movs	r0, #10
 8001e42:	f000 fc91 	bl	8002768 <HAL_Delay>
				update_boss();
 8001e46:	f7ff fbb9 	bl	80015bc <update_boss>
				update_boss_bullets();
 8001e4a:	f7ff fae9 	bl	8001420 <update_boss_bullets>
				check_bullet_boss_collision();
 8001e4e:	f7ff fbf7 	bl	8001640 <check_bullet_boss_collision>
				if (plane_move_flag) {
 8001e52:	4b1e      	ldr	r3, [pc, #120]	@ (8001ecc <main+0x30c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0e3      	beq.n	8001e22 <main+0x262>
					plane_move_flag = 0;
 8001e5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001ecc <main+0x30c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
					int old_y = plane_y;
 8001e60:	4b13      	ldr	r3, [pc, #76]	@ (8001eb0 <main+0x2f0>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	64bb      	str	r3, [r7, #72]	@ 0x48
					plane_y = (plane_y + 5) % 220;
 8001e66:	4b12      	ldr	r3, [pc, #72]	@ (8001eb0 <main+0x2f0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	1d5a      	adds	r2, r3, #5
 8001e6c:	4b18      	ldr	r3, [pc, #96]	@ (8001ed0 <main+0x310>)
 8001e6e:	fb83 1302 	smull	r1, r3, r3, r2
 8001e72:	10d9      	asrs	r1, r3, #3
 8001e74:	17d3      	asrs	r3, r2, #31
 8001e76:	1acb      	subs	r3, r1, r3
 8001e78:	21dc      	movs	r1, #220	@ 0xdc
 8001e7a:	fb01 f303 	mul.w	r3, r1, r3
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	4a0b      	ldr	r2, [pc, #44]	@ (8001eb0 <main+0x2f0>)
 8001e82:	6013      	str	r3, [r2, #0]
					erase_plane(plane_x, old_y);
 8001e84:	4b09      	ldr	r3, [pc, #36]	@ (8001eac <main+0x2ec>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff f8f1 	bl	8001072 <erase_plane>
					draw_plane(plane_x, plane_y);
 8001e90:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <main+0x2ec>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a06      	ldr	r2, [pc, #24]	@ (8001eb0 <main+0x2f0>)
 8001e96:	6812      	ldr	r2, [r2, #0]
 8001e98:	4611      	mov	r1, r2
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff f8ad 	bl	8000ffa <draw_plane>
					shoot_bullet();
 8001ea0:	f7ff fc98 	bl	80017d4 <shoot_bullet>
				if (now - last_boss_fire_time >= boss_fire_interval) {
 8001ea4:	e7bd      	b.n	8001e22 <main+0x262>
 8001ea6:	bf00      	nop
 8001ea8:	20000228 	.word	0x20000228
 8001eac:	20000004 	.word	0x20000004
 8001eb0:	20000008 	.word	0x20000008
 8001eb4:	200004d4 	.word	0x200004d4
 8001eb8:	20000010 	.word	0x20000010
 8001ebc:	20000174 	.word	0x20000174
 8001ec0:	0800666c 	.word	0x0800666c
 8001ec4:	08005fd8 	.word	0x08005fd8
 8001ec8:	2000000c 	.word	0x2000000c
 8001ecc:	200004d0 	.word	0x200004d0
 8001ed0:	094f2095 	.word	0x094f2095
 8001ed4:	08005ff0 	.word	0x08005ff0
 8001ed8:	08005ffc 	.word	0x08005ffc
 8001edc:	20000264 	.word	0x20000264
 8001ee0:	200004d8 	.word	0x200004d8

08001ee4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b094      	sub	sp, #80	@ 0x50
 8001ee8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001eea:	f107 0320 	add.w	r3, r7, #32
 8001eee:	2230      	movs	r2, #48	@ 0x30
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f002 ffdf 	bl	8004eb6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001ef8:	f107 030c 	add.w	r3, r7, #12
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001f08:	2300      	movs	r3, #0
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	4b2c      	ldr	r3, [pc, #176]	@ (8001fc0 <SystemClock_Config+0xdc>)
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f10:	4a2b      	ldr	r2, [pc, #172]	@ (8001fc0 <SystemClock_Config+0xdc>)
 8001f12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f16:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f18:	4b29      	ldr	r3, [pc, #164]	@ (8001fc0 <SystemClock_Config+0xdc>)
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f24:	2300      	movs	r3, #0
 8001f26:	607b      	str	r3, [r7, #4]
 8001f28:	4b26      	ldr	r3, [pc, #152]	@ (8001fc4 <SystemClock_Config+0xe0>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a25      	ldr	r2, [pc, #148]	@ (8001fc4 <SystemClock_Config+0xe0>)
 8001f2e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	4b23      	ldr	r3, [pc, #140]	@ (8001fc4 <SystemClock_Config+0xe0>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f3c:	607b      	str	r3, [r7, #4]
 8001f3e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8001f40:	2309      	movs	r3, #9
 8001f42:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f44:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f48:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f52:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001f58:	2304      	movs	r3, #4
 8001f5a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 8001f5c:	23b4      	movs	r3, #180	@ 0xb4
 8001f5e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f60:	2302      	movs	r3, #2
 8001f62:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f64:	2304      	movs	r3, #4
 8001f66:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001f68:	f107 0320 	add.w	r3, r7, #32
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f001 faf5 	bl	800355c <HAL_RCC_OscConfig>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <SystemClock_Config+0x98>
		Error_Handler();
 8001f78:	f000 f962 	bl	8002240 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8001f7c:	f001 fa9e 	bl	80034bc <HAL_PWREx_EnableOverDrive>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <SystemClock_Config+0xa6>
		Error_Handler();
 8001f86:	f000 f95b 	bl	8002240 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001f8a:	230f      	movs	r3, #15
 8001f8c:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f92:	2300      	movs	r3, #0
 8001f94:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f96:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f9a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fa0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001fa2:	f107 030c 	add.w	r3, r7, #12
 8001fa6:	2105      	movs	r1, #5
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f001 fd4f 	bl	8003a4c <HAL_RCC_ClockConfig>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <SystemClock_Config+0xd4>
		Error_Handler();
 8001fb4:	f000 f944 	bl	8002240 <Error_Handler>
	}
}
 8001fb8:	bf00      	nop
 8001fba:	3750      	adds	r7, #80	@ 0x50
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40007000 	.word	0x40007000

08001fc8 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8001fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800200c <MX_RTC_Init+0x44>)
 8001fce:	4a10      	ldr	r2, [pc, #64]	@ (8002010 <MX_RTC_Init+0x48>)
 8001fd0:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800200c <MX_RTC_Init+0x44>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800200c <MX_RTC_Init+0x44>)
 8001fda:	227f      	movs	r2, #127	@ 0x7f
 8001fdc:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8001fde:	4b0b      	ldr	r3, [pc, #44]	@ (800200c <MX_RTC_Init+0x44>)
 8001fe0:	22ff      	movs	r2, #255	@ 0xff
 8001fe2:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001fe4:	4b09      	ldr	r3, [pc, #36]	@ (800200c <MX_RTC_Init+0x44>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001fea:	4b08      	ldr	r3, [pc, #32]	@ (800200c <MX_RTC_Init+0x44>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ff0:	4b06      	ldr	r3, [pc, #24]	@ (800200c <MX_RTC_Init+0x44>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8001ff6:	4805      	ldr	r0, [pc, #20]	@ (800200c <MX_RTC_Init+0x44>)
 8001ff8:	f002 f8d4 	bl	80041a4 <HAL_RTC_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_RTC_Init+0x3e>
		Error_Handler();
 8002002:	f000 f91d 	bl	8002240 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	2000009c 	.word	0x2000009c
 8002010:	40002800 	.word	0x40002800

08002014 <MX_SPI5_Init>:
/**
 * @brief SPI5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI5_Init(void) {
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI5_Init 1 */

	/* USER CODE END SPI5_Init 1 */
	/* SPI5 parameter configuration*/
	hspi5.Instance = SPI5;
 8002018:	4b17      	ldr	r3, [pc, #92]	@ (8002078 <MX_SPI5_Init+0x64>)
 800201a:	4a18      	ldr	r2, [pc, #96]	@ (800207c <MX_SPI5_Init+0x68>)
 800201c:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 800201e:	4b16      	ldr	r3, [pc, #88]	@ (8002078 <MX_SPI5_Init+0x64>)
 8002020:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002024:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002026:	4b14      	ldr	r3, [pc, #80]	@ (8002078 <MX_SPI5_Init+0x64>)
 8002028:	2200      	movs	r2, #0
 800202a:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800202c:	4b12      	ldr	r3, [pc, #72]	@ (8002078 <MX_SPI5_Init+0x64>)
 800202e:	2200      	movs	r2, #0
 8002030:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002032:	4b11      	ldr	r3, [pc, #68]	@ (8002078 <MX_SPI5_Init+0x64>)
 8002034:	2200      	movs	r2, #0
 8002036:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002038:	4b0f      	ldr	r3, [pc, #60]	@ (8002078 <MX_SPI5_Init+0x64>)
 800203a:	2200      	movs	r2, #0
 800203c:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 800203e:	4b0e      	ldr	r3, [pc, #56]	@ (8002078 <MX_SPI5_Init+0x64>)
 8002040:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002044:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002046:	4b0c      	ldr	r3, [pc, #48]	@ (8002078 <MX_SPI5_Init+0x64>)
 8002048:	2208      	movs	r2, #8
 800204a:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800204c:	4b0a      	ldr	r3, [pc, #40]	@ (8002078 <MX_SPI5_Init+0x64>)
 800204e:	2200      	movs	r2, #0
 8002050:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002052:	4b09      	ldr	r3, [pc, #36]	@ (8002078 <MX_SPI5_Init+0x64>)
 8002054:	2200      	movs	r2, #0
 8002056:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002058:	4b07      	ldr	r3, [pc, #28]	@ (8002078 <MX_SPI5_Init+0x64>)
 800205a:	2200      	movs	r2, #0
 800205c:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi5.Init.CRCPolynomial = 10;
 800205e:	4b06      	ldr	r3, [pc, #24]	@ (8002078 <MX_SPI5_Init+0x64>)
 8002060:	220a      	movs	r2, #10
 8002062:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi5) != HAL_OK) {
 8002064:	4804      	ldr	r0, [pc, #16]	@ (8002078 <MX_SPI5_Init+0x64>)
 8002066:	f002 f9a1 	bl	80043ac <HAL_SPI_Init>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_SPI5_Init+0x60>
		Error_Handler();
 8002070:	f000 f8e6 	bl	8002240 <Error_Handler>
	}
	/* USER CODE BEGIN SPI5_Init 2 */

	/* USER CODE END SPI5_Init 2 */

}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}
 8002078:	200000bc 	.word	0x200000bc
 800207c:	40015000 	.word	0x40015000

08002080 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	607b      	str	r3, [r7, #4]
 800208a:	4b0c      	ldr	r3, [pc, #48]	@ (80020bc <MX_DMA_Init+0x3c>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208e:	4a0b      	ldr	r2, [pc, #44]	@ (80020bc <MX_DMA_Init+0x3c>)
 8002090:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002094:	6313      	str	r3, [r2, #48]	@ 0x30
 8002096:	4b09      	ldr	r3, [pc, #36]	@ (80020bc <MX_DMA_Init+0x3c>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800209e:	607b      	str	r3, [r7, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80020a2:	2200      	movs	r2, #0
 80020a4:	2100      	movs	r1, #0
 80020a6:	203c      	movs	r0, #60	@ 0x3c
 80020a8:	f000 fc5d 	bl	8002966 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80020ac:	203c      	movs	r0, #60	@ 0x3c
 80020ae:	f000 fc76 	bl	800299e <HAL_NVIC_EnableIRQ>

}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40023800 	.word	0x40023800

080020c0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08c      	sub	sp, #48	@ 0x30
 80020c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80020c6:	f107 031c 	add.w	r3, r7, #28
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	605a      	str	r2, [r3, #4]
 80020d0:	609a      	str	r2, [r3, #8]
 80020d2:	60da      	str	r2, [r3, #12]
 80020d4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	61bb      	str	r3, [r7, #24]
 80020da:	4b54      	ldr	r3, [pc, #336]	@ (800222c <MX_GPIO_Init+0x16c>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020de:	4a53      	ldr	r2, [pc, #332]	@ (800222c <MX_GPIO_Init+0x16c>)
 80020e0:	f043 0304 	orr.w	r3, r3, #4
 80020e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020e6:	4b51      	ldr	r3, [pc, #324]	@ (800222c <MX_GPIO_Init+0x16c>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	61bb      	str	r3, [r7, #24]
 80020f0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	4b4d      	ldr	r3, [pc, #308]	@ (800222c <MX_GPIO_Init+0x16c>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fa:	4a4c      	ldr	r2, [pc, #304]	@ (800222c <MX_GPIO_Init+0x16c>)
 80020fc:	f043 0320 	orr.w	r3, r3, #32
 8002100:	6313      	str	r3, [r2, #48]	@ 0x30
 8002102:	4b4a      	ldr	r3, [pc, #296]	@ (800222c <MX_GPIO_Init+0x16c>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002106:	f003 0320 	and.w	r3, r3, #32
 800210a:	617b      	str	r3, [r7, #20]
 800210c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	4b46      	ldr	r3, [pc, #280]	@ (800222c <MX_GPIO_Init+0x16c>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002116:	4a45      	ldr	r2, [pc, #276]	@ (800222c <MX_GPIO_Init+0x16c>)
 8002118:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800211c:	6313      	str	r3, [r2, #48]	@ 0x30
 800211e:	4b43      	ldr	r3, [pc, #268]	@ (800222c <MX_GPIO_Init+0x16c>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	4b3f      	ldr	r3, [pc, #252]	@ (800222c <MX_GPIO_Init+0x16c>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002132:	4a3e      	ldr	r2, [pc, #248]	@ (800222c <MX_GPIO_Init+0x16c>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	6313      	str	r3, [r2, #48]	@ 0x30
 800213a:	4b3c      	ldr	r3, [pc, #240]	@ (800222c <MX_GPIO_Init+0x16c>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	4b38      	ldr	r3, [pc, #224]	@ (800222c <MX_GPIO_Init+0x16c>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214e:	4a37      	ldr	r2, [pc, #220]	@ (800222c <MX_GPIO_Init+0x16c>)
 8002150:	f043 0308 	orr.w	r3, r3, #8
 8002154:	6313      	str	r3, [r2, #48]	@ 0x30
 8002156:	4b35      	ldr	r3, [pc, #212]	@ (800222c <MX_GPIO_Init+0x16c>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	60bb      	str	r3, [r7, #8]
 8002160:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	607b      	str	r3, [r7, #4]
 8002166:	4b31      	ldr	r3, [pc, #196]	@ (800222c <MX_GPIO_Init+0x16c>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216a:	4a30      	ldr	r2, [pc, #192]	@ (800222c <MX_GPIO_Init+0x16c>)
 800216c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002170:	6313      	str	r3, [r2, #48]	@ 0x30
 8002172:	4b2e      	ldr	r3, [pc, #184]	@ (800222c <MX_GPIO_Init+0x16c>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800217a:	607b      	str	r3, [r7, #4]
 800217c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800217e:	2200      	movs	r2, #0
 8002180:	2104      	movs	r1, #4
 8002182:	482b      	ldr	r0, [pc, #172]	@ (8002230 <MX_GPIO_Init+0x170>)
 8002184:	f001 f942 	bl	800340c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_RESET);
 8002188:	2200      	movs	r2, #0
 800218a:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800218e:	4829      	ldr	r0, [pc, #164]	@ (8002234 <MX_GPIO_Init+0x174>)
 8002190:	f001 f93c 	bl	800340c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8002194:	2200      	movs	r2, #0
 8002196:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800219a:	4827      	ldr	r0, [pc, #156]	@ (8002238 <MX_GPIO_Init+0x178>)
 800219c:	f001 f936 	bl	800340c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021a0:	2304      	movs	r3, #4
 80021a2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a4:	2301      	movs	r3, #1
 80021a6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ac:	2300      	movs	r3, #0
 80021ae:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021b0:	f107 031c 	add.w	r3, r7, #28
 80021b4:	4619      	mov	r1, r3
 80021b6:	481e      	ldr	r0, [pc, #120]	@ (8002230 <MX_GPIO_Init+0x170>)
 80021b8:	f000 ff7c 	bl	80030b4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021bc:	2301      	movs	r3, #1
 80021be:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021c0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80021c4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ca:	f107 031c 	add.w	r3, r7, #28
 80021ce:	4619      	mov	r1, r3
 80021d0:	481a      	ldr	r0, [pc, #104]	@ (800223c <MX_GPIO_Init+0x17c>)
 80021d2:	f000 ff6f 	bl	80030b4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD12 PD13 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 80021d6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80021da:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021dc:	2301      	movs	r3, #1
 80021de:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e4:	2300      	movs	r3, #0
 80021e6:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021e8:	f107 031c 	add.w	r3, r7, #28
 80021ec:	4619      	mov	r1, r3
 80021ee:	4811      	ldr	r0, [pc, #68]	@ (8002234 <MX_GPIO_Init+0x174>)
 80021f0:	f000 ff60 	bl	80030b4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PG13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80021f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021f8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021fa:	2301      	movs	r3, #1
 80021fc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002202:	2300      	movs	r3, #0
 8002204:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002206:	f107 031c 	add.w	r3, r7, #28
 800220a:	4619      	mov	r1, r3
 800220c:	480a      	ldr	r0, [pc, #40]	@ (8002238 <MX_GPIO_Init+0x178>)
 800220e:	f000 ff51 	bl	80030b4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002212:	2200      	movs	r2, #0
 8002214:	2100      	movs	r1, #0
 8002216:	2006      	movs	r0, #6
 8002218:	f000 fba5 	bl	8002966 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800221c:	2006      	movs	r0, #6
 800221e:	f000 fbbe 	bl	800299e <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8002222:	bf00      	nop
 8002224:	3730      	adds	r7, #48	@ 0x30
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40023800 	.word	0x40023800
 8002230:	40020800 	.word	0x40020800
 8002234:	40020c00 	.word	0x40020c00
 8002238:	40021800 	.word	0x40021800
 800223c:	40020000 	.word	0x40020000

08002240 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002244:	b672      	cpsid	i
}
 8002246:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002248:	bf00      	nop
 800224a:	e7fd      	b.n	8002248 <Error_Handler+0x8>

0800224c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	607b      	str	r3, [r7, #4]
 8002256:	4b10      	ldr	r3, [pc, #64]	@ (8002298 <HAL_MspInit+0x4c>)
 8002258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225a:	4a0f      	ldr	r2, [pc, #60]	@ (8002298 <HAL_MspInit+0x4c>)
 800225c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002260:	6453      	str	r3, [r2, #68]	@ 0x44
 8002262:	4b0d      	ldr	r3, [pc, #52]	@ (8002298 <HAL_MspInit+0x4c>)
 8002264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002266:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800226a:	607b      	str	r3, [r7, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	603b      	str	r3, [r7, #0]
 8002272:	4b09      	ldr	r3, [pc, #36]	@ (8002298 <HAL_MspInit+0x4c>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002276:	4a08      	ldr	r2, [pc, #32]	@ (8002298 <HAL_MspInit+0x4c>)
 8002278:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800227c:	6413      	str	r3, [r2, #64]	@ 0x40
 800227e:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <HAL_MspInit+0x4c>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002286:	603b      	str	r3, [r7, #0]
 8002288:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40023800 	.word	0x40023800

0800229c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08e      	sub	sp, #56	@ 0x38
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022a4:	f107 0308 	add.w	r3, r7, #8
 80022a8:	2230      	movs	r2, #48	@ 0x30
 80022aa:	2100      	movs	r1, #0
 80022ac:	4618      	mov	r0, r3
 80022ae:	f002 fe02 	bl	8004eb6 <memset>
  if(hrtc->Instance==RTC)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a0c      	ldr	r2, [pc, #48]	@ (80022e8 <HAL_RTC_MspInit+0x4c>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d111      	bne.n	80022e0 <HAL_RTC_MspInit+0x44>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80022bc:	2320      	movs	r3, #32
 80022be:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80022c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022c4:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022c6:	f107 0308 	add.w	r3, r7, #8
 80022ca:	4618      	mov	r0, r3
 80022cc:	f001 fdaa 	bl	8003e24 <HAL_RCCEx_PeriphCLKConfig>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80022d6:	f7ff ffb3 	bl	8002240 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80022da:	4b04      	ldr	r3, [pc, #16]	@ (80022ec <HAL_RTC_MspInit+0x50>)
 80022dc:	2201      	movs	r2, #1
 80022de:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80022e0:	bf00      	nop
 80022e2:	3738      	adds	r7, #56	@ 0x38
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40002800 	.word	0x40002800
 80022ec:	42470e3c 	.word	0x42470e3c

080022f0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08a      	sub	sp, #40	@ 0x28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a30      	ldr	r2, [pc, #192]	@ (80023d0 <HAL_SPI_MspInit+0xe0>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d15a      	bne.n	80023c8 <HAL_SPI_MspInit+0xd8>
  {
    /* USER CODE BEGIN SPI5_MspInit 0 */

    /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	613b      	str	r3, [r7, #16]
 8002316:	4b2f      	ldr	r3, [pc, #188]	@ (80023d4 <HAL_SPI_MspInit+0xe4>)
 8002318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231a:	4a2e      	ldr	r2, [pc, #184]	@ (80023d4 <HAL_SPI_MspInit+0xe4>)
 800231c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002320:	6453      	str	r3, [r2, #68]	@ 0x44
 8002322:	4b2c      	ldr	r3, [pc, #176]	@ (80023d4 <HAL_SPI_MspInit+0xe4>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002326:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800232a:	613b      	str	r3, [r7, #16]
 800232c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	4b28      	ldr	r3, [pc, #160]	@ (80023d4 <HAL_SPI_MspInit+0xe4>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002336:	4a27      	ldr	r2, [pc, #156]	@ (80023d4 <HAL_SPI_MspInit+0xe4>)
 8002338:	f043 0320 	orr.w	r3, r3, #32
 800233c:	6313      	str	r3, [r2, #48]	@ 0x30
 800233e:	4b25      	ldr	r3, [pc, #148]	@ (80023d4 <HAL_SPI_MspInit+0xe4>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002342:	f003 0320 	and.w	r3, r3, #32
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800234a:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800234e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002350:	2302      	movs	r3, #2
 8002352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002354:	2300      	movs	r3, #0
 8002356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002358:	2303      	movs	r3, #3
 800235a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800235c:	2305      	movs	r3, #5
 800235e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002360:	f107 0314 	add.w	r3, r7, #20
 8002364:	4619      	mov	r1, r3
 8002366:	481c      	ldr	r0, [pc, #112]	@ (80023d8 <HAL_SPI_MspInit+0xe8>)
 8002368:	f000 fea4 	bl	80030b4 <HAL_GPIO_Init>

    /* SPI5 DMA Init */
    /* SPI5_TX Init */
    hdma_spi5_tx.Instance = DMA2_Stream4;
 800236c:	4b1b      	ldr	r3, [pc, #108]	@ (80023dc <HAL_SPI_MspInit+0xec>)
 800236e:	4a1c      	ldr	r2, [pc, #112]	@ (80023e0 <HAL_SPI_MspInit+0xf0>)
 8002370:	601a      	str	r2, [r3, #0]
    hdma_spi5_tx.Init.Channel = DMA_CHANNEL_2;
 8002372:	4b1a      	ldr	r3, [pc, #104]	@ (80023dc <HAL_SPI_MspInit+0xec>)
 8002374:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002378:	605a      	str	r2, [r3, #4]
    hdma_spi5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800237a:	4b18      	ldr	r3, [pc, #96]	@ (80023dc <HAL_SPI_MspInit+0xec>)
 800237c:	2240      	movs	r2, #64	@ 0x40
 800237e:	609a      	str	r2, [r3, #8]
    hdma_spi5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002380:	4b16      	ldr	r3, [pc, #88]	@ (80023dc <HAL_SPI_MspInit+0xec>)
 8002382:	2200      	movs	r2, #0
 8002384:	60da      	str	r2, [r3, #12]
    hdma_spi5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002386:	4b15      	ldr	r3, [pc, #84]	@ (80023dc <HAL_SPI_MspInit+0xec>)
 8002388:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800238c:	611a      	str	r2, [r3, #16]
    hdma_spi5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800238e:	4b13      	ldr	r3, [pc, #76]	@ (80023dc <HAL_SPI_MspInit+0xec>)
 8002390:	2200      	movs	r2, #0
 8002392:	615a      	str	r2, [r3, #20]
    hdma_spi5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002394:	4b11      	ldr	r3, [pc, #68]	@ (80023dc <HAL_SPI_MspInit+0xec>)
 8002396:	2200      	movs	r2, #0
 8002398:	619a      	str	r2, [r3, #24]
    hdma_spi5_tx.Init.Mode = DMA_NORMAL;
 800239a:	4b10      	ldr	r3, [pc, #64]	@ (80023dc <HAL_SPI_MspInit+0xec>)
 800239c:	2200      	movs	r2, #0
 800239e:	61da      	str	r2, [r3, #28]
    hdma_spi5_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023a0:	4b0e      	ldr	r3, [pc, #56]	@ (80023dc <HAL_SPI_MspInit+0xec>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	621a      	str	r2, [r3, #32]
    hdma_spi5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023a6:	4b0d      	ldr	r3, [pc, #52]	@ (80023dc <HAL_SPI_MspInit+0xec>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi5_tx) != HAL_OK)
 80023ac:	480b      	ldr	r0, [pc, #44]	@ (80023dc <HAL_SPI_MspInit+0xec>)
 80023ae:	f000 fb11 	bl	80029d4 <HAL_DMA_Init>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80023b8:	f7ff ff42 	bl	8002240 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi5_tx);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a07      	ldr	r2, [pc, #28]	@ (80023dc <HAL_SPI_MspInit+0xec>)
 80023c0:	649a      	str	r2, [r3, #72]	@ 0x48
 80023c2:	4a06      	ldr	r2, [pc, #24]	@ (80023dc <HAL_SPI_MspInit+0xec>)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI5_MspInit 1 */

  }

}
 80023c8:	bf00      	nop
 80023ca:	3728      	adds	r7, #40	@ 0x28
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40015000 	.word	0x40015000
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40021400 	.word	0x40021400
 80023dc:	20000114 	.word	0x20000114
 80023e0:	40026470 	.word	0x40026470

080023e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023e8:	bf00      	nop
 80023ea:	e7fd      	b.n	80023e8 <NMI_Handler+0x4>

080023ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023f0:	bf00      	nop
 80023f2:	e7fd      	b.n	80023f0 <HardFault_Handler+0x4>

080023f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f8:	bf00      	nop
 80023fa:	e7fd      	b.n	80023f8 <MemManage_Handler+0x4>

080023fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002400:	bf00      	nop
 8002402:	e7fd      	b.n	8002400 <BusFault_Handler+0x4>

08002404 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002408:	bf00      	nop
 800240a:	e7fd      	b.n	8002408 <UsageFault_Handler+0x4>

0800240c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800243a:	f000 f975 	bl	8002728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <EXTI0_IRQHandler>:
extern int plane_x;
extern int plane_y;
extern int plane_move_flag;

void EXTI0_IRQHandler(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8002448:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800244c:	4805      	ldr	r0, [pc, #20]	@ (8002464 <EXTI0_IRQHandler+0x20>)
 800244e:	f000 fff6 	bl	800343e <HAL_GPIO_TogglePin>
    plane_move_flag = 1;
 8002452:	4b05      	ldr	r3, [pc, #20]	@ (8002468 <EXTI0_IRQHandler+0x24>)
 8002454:	2201      	movs	r2, #1
 8002456:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002458:	2001      	movs	r0, #1
 800245a:	f001 f80b 	bl	8003474 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40021800 	.word	0x40021800
 8002468:	200004d0 	.word	0x200004d0

0800246c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_tx);
 8002470:	4802      	ldr	r0, [pc, #8]	@ (800247c <DMA2_Stream4_IRQHandler+0x10>)
 8002472:	f000 fbb5 	bl	8002be0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000114 	.word	0x20000114

08002480 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  return 1;
 8002484:	2301      	movs	r3, #1
}
 8002486:	4618      	mov	r0, r3
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <_kill>:

int _kill(int pid, int sig)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800249a:	f002 fd89 	bl	8004fb0 <__errno>
 800249e:	4603      	mov	r3, r0
 80024a0:	2216      	movs	r2, #22
 80024a2:	601a      	str	r2, [r3, #0]
  return -1;
 80024a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <_exit>:

void _exit (int status)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024b8:	f04f 31ff 	mov.w	r1, #4294967295
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7ff ffe7 	bl	8002490 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024c2:	bf00      	nop
 80024c4:	e7fd      	b.n	80024c2 <_exit+0x12>

080024c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b086      	sub	sp, #24
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	60f8      	str	r0, [r7, #12]
 80024ce:	60b9      	str	r1, [r7, #8]
 80024d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
 80024d6:	e00a      	b.n	80024ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024d8:	f3af 8000 	nop.w
 80024dc:	4601      	mov	r1, r0
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	1c5a      	adds	r2, r3, #1
 80024e2:	60ba      	str	r2, [r7, #8]
 80024e4:	b2ca      	uxtb	r2, r1
 80024e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	3301      	adds	r3, #1
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	dbf0      	blt.n	80024d8 <_read+0x12>
  }

  return len;
 80024f6:	687b      	ldr	r3, [r7, #4]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	e009      	b.n	8002526 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	1c5a      	adds	r2, r3, #1
 8002516:	60ba      	str	r2, [r7, #8]
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	3301      	adds	r3, #1
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	429a      	cmp	r2, r3
 800252c:	dbf1      	blt.n	8002512 <_write+0x12>
  }
  return len;
 800252e:	687b      	ldr	r3, [r7, #4]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <_close>:

int _close(int file)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002540:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002560:	605a      	str	r2, [r3, #4]
  return 0;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <_isatty>:

int _isatty(int file)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002578:	2301      	movs	r3, #1
}
 800257a:	4618      	mov	r0, r3
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002586:	b480      	push	{r7}
 8002588:	b085      	sub	sp, #20
 800258a:	af00      	add	r7, sp, #0
 800258c:	60f8      	str	r0, [r7, #12]
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025a8:	4a14      	ldr	r2, [pc, #80]	@ (80025fc <_sbrk+0x5c>)
 80025aa:	4b15      	ldr	r3, [pc, #84]	@ (8002600 <_sbrk+0x60>)
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025b4:	4b13      	ldr	r3, [pc, #76]	@ (8002604 <_sbrk+0x64>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d102      	bne.n	80025c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025bc:	4b11      	ldr	r3, [pc, #68]	@ (8002604 <_sbrk+0x64>)
 80025be:	4a12      	ldr	r2, [pc, #72]	@ (8002608 <_sbrk+0x68>)
 80025c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025c2:	4b10      	ldr	r3, [pc, #64]	@ (8002604 <_sbrk+0x64>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4413      	add	r3, r2
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d207      	bcs.n	80025e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025d0:	f002 fcee 	bl	8004fb0 <__errno>
 80025d4:	4603      	mov	r3, r0
 80025d6:	220c      	movs	r2, #12
 80025d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025da:	f04f 33ff 	mov.w	r3, #4294967295
 80025de:	e009      	b.n	80025f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025e0:	4b08      	ldr	r3, [pc, #32]	@ (8002604 <_sbrk+0x64>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025e6:	4b07      	ldr	r3, [pc, #28]	@ (8002604 <_sbrk+0x64>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4413      	add	r3, r2
 80025ee:	4a05      	ldr	r2, [pc, #20]	@ (8002604 <_sbrk+0x64>)
 80025f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025f2:	68fb      	ldr	r3, [r7, #12]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	20030000 	.word	0x20030000
 8002600:	00000400 	.word	0x00000400
 8002604:	200004dc 	.word	0x200004dc
 8002608:	20000630 	.word	0x20000630

0800260c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002610:	4b06      	ldr	r3, [pc, #24]	@ (800262c <SystemInit+0x20>)
 8002612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002616:	4a05      	ldr	r2, [pc, #20]	@ (800262c <SystemInit+0x20>)
 8002618:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800261c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002620:	bf00      	nop
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	e000ed00 	.word	0xe000ed00

08002630 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002630:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002668 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002634:	f7ff ffea 	bl	800260c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002638:	480c      	ldr	r0, [pc, #48]	@ (800266c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800263a:	490d      	ldr	r1, [pc, #52]	@ (8002670 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800263c:	4a0d      	ldr	r2, [pc, #52]	@ (8002674 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800263e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002640:	e002      	b.n	8002648 <LoopCopyDataInit>

08002642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002646:	3304      	adds	r3, #4

08002648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800264a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800264c:	d3f9      	bcc.n	8002642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800264e:	4a0a      	ldr	r2, [pc, #40]	@ (8002678 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002650:	4c0a      	ldr	r4, [pc, #40]	@ (800267c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002654:	e001      	b.n	800265a <LoopFillZerobss>

08002656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002658:	3204      	adds	r2, #4

0800265a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800265a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800265c:	d3fb      	bcc.n	8002656 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800265e:	f002 fcad 	bl	8004fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002662:	f7ff faad 	bl	8001bc0 <main>
  bx  lr    
 8002666:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002668:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800266c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002670:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002674:	080070d8 	.word	0x080070d8
  ldr r2, =_sbss
 8002678:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800267c:	20000630 	.word	0x20000630

08002680 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002680:	e7fe      	b.n	8002680 <ADC_IRQHandler>
	...

08002684 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002688:	4b0e      	ldr	r3, [pc, #56]	@ (80026c4 <HAL_Init+0x40>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a0d      	ldr	r2, [pc, #52]	@ (80026c4 <HAL_Init+0x40>)
 800268e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002692:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002694:	4b0b      	ldr	r3, [pc, #44]	@ (80026c4 <HAL_Init+0x40>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a0a      	ldr	r2, [pc, #40]	@ (80026c4 <HAL_Init+0x40>)
 800269a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800269e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026a0:	4b08      	ldr	r3, [pc, #32]	@ (80026c4 <HAL_Init+0x40>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a07      	ldr	r2, [pc, #28]	@ (80026c4 <HAL_Init+0x40>)
 80026a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026ac:	2003      	movs	r0, #3
 80026ae:	f000 f94f 	bl	8002950 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026b2:	200f      	movs	r0, #15
 80026b4:	f000 f808 	bl	80026c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026b8:	f7ff fdc8 	bl	800224c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40023c00 	.word	0x40023c00

080026c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026d0:	4b12      	ldr	r3, [pc, #72]	@ (800271c <HAL_InitTick+0x54>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4b12      	ldr	r3, [pc, #72]	@ (8002720 <HAL_InitTick+0x58>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	4619      	mov	r1, r3
 80026da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026de:	fbb3 f3f1 	udiv	r3, r3, r1
 80026e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 f967 	bl	80029ba <HAL_SYSTICK_Config>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e00e      	b.n	8002714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b0f      	cmp	r3, #15
 80026fa:	d80a      	bhi.n	8002712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026fc:	2200      	movs	r2, #0
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	f04f 30ff 	mov.w	r0, #4294967295
 8002704:	f000 f92f 	bl	8002966 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002708:	4a06      	ldr	r2, [pc, #24]	@ (8002724 <HAL_InitTick+0x5c>)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800270e:	2300      	movs	r3, #0
 8002710:	e000      	b.n	8002714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
}
 8002714:	4618      	mov	r0, r3
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	20000018 	.word	0x20000018
 8002720:	20000020 	.word	0x20000020
 8002724:	2000001c 	.word	0x2000001c

08002728 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800272c:	4b06      	ldr	r3, [pc, #24]	@ (8002748 <HAL_IncTick+0x20>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	461a      	mov	r2, r3
 8002732:	4b06      	ldr	r3, [pc, #24]	@ (800274c <HAL_IncTick+0x24>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4413      	add	r3, r2
 8002738:	4a04      	ldr	r2, [pc, #16]	@ (800274c <HAL_IncTick+0x24>)
 800273a:	6013      	str	r3, [r2, #0]
}
 800273c:	bf00      	nop
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	20000020 	.word	0x20000020
 800274c:	200004e0 	.word	0x200004e0

08002750 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  return uwTick;
 8002754:	4b03      	ldr	r3, [pc, #12]	@ (8002764 <HAL_GetTick+0x14>)
 8002756:	681b      	ldr	r3, [r3, #0]
}
 8002758:	4618      	mov	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	200004e0 	.word	0x200004e0

08002768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002770:	f7ff ffee 	bl	8002750 <HAL_GetTick>
 8002774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002780:	d005      	beq.n	800278e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002782:	4b0a      	ldr	r3, [pc, #40]	@ (80027ac <HAL_Delay+0x44>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4413      	add	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800278e:	bf00      	nop
 8002790:	f7ff ffde 	bl	8002750 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	429a      	cmp	r2, r3
 800279e:	d8f7      	bhi.n	8002790 <HAL_Delay+0x28>
  {
  }
}
 80027a0:	bf00      	nop
 80027a2:	bf00      	nop
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20000020 	.word	0x20000020

080027b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027c0:	4b0c      	ldr	r3, [pc, #48]	@ (80027f4 <__NVIC_SetPriorityGrouping+0x44>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027cc:	4013      	ands	r3, r2
 80027ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027e2:	4a04      	ldr	r2, [pc, #16]	@ (80027f4 <__NVIC_SetPriorityGrouping+0x44>)
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	60d3      	str	r3, [r2, #12]
}
 80027e8:	bf00      	nop
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	e000ed00 	.word	0xe000ed00

080027f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027fc:	4b04      	ldr	r3, [pc, #16]	@ (8002810 <__NVIC_GetPriorityGrouping+0x18>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	0a1b      	lsrs	r3, r3, #8
 8002802:	f003 0307 	and.w	r3, r3, #7
}
 8002806:	4618      	mov	r0, r3
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	e000ed00 	.word	0xe000ed00

08002814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800281e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002822:	2b00      	cmp	r3, #0
 8002824:	db0b      	blt.n	800283e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	f003 021f 	and.w	r2, r3, #31
 800282c:	4907      	ldr	r1, [pc, #28]	@ (800284c <__NVIC_EnableIRQ+0x38>)
 800282e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002832:	095b      	lsrs	r3, r3, #5
 8002834:	2001      	movs	r0, #1
 8002836:	fa00 f202 	lsl.w	r2, r0, r2
 800283a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	e000e100 	.word	0xe000e100

08002850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	6039      	str	r1, [r7, #0]
 800285a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800285c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002860:	2b00      	cmp	r3, #0
 8002862:	db0a      	blt.n	800287a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	b2da      	uxtb	r2, r3
 8002868:	490c      	ldr	r1, [pc, #48]	@ (800289c <__NVIC_SetPriority+0x4c>)
 800286a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286e:	0112      	lsls	r2, r2, #4
 8002870:	b2d2      	uxtb	r2, r2
 8002872:	440b      	add	r3, r1
 8002874:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002878:	e00a      	b.n	8002890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	b2da      	uxtb	r2, r3
 800287e:	4908      	ldr	r1, [pc, #32]	@ (80028a0 <__NVIC_SetPriority+0x50>)
 8002880:	79fb      	ldrb	r3, [r7, #7]
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	3b04      	subs	r3, #4
 8002888:	0112      	lsls	r2, r2, #4
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	440b      	add	r3, r1
 800288e:	761a      	strb	r2, [r3, #24]
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	e000e100 	.word	0xe000e100
 80028a0:	e000ed00 	.word	0xe000ed00

080028a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b089      	sub	sp, #36	@ 0x24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f1c3 0307 	rsb	r3, r3, #7
 80028be:	2b04      	cmp	r3, #4
 80028c0:	bf28      	it	cs
 80028c2:	2304      	movcs	r3, #4
 80028c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	3304      	adds	r3, #4
 80028ca:	2b06      	cmp	r3, #6
 80028cc:	d902      	bls.n	80028d4 <NVIC_EncodePriority+0x30>
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	3b03      	subs	r3, #3
 80028d2:	e000      	b.n	80028d6 <NVIC_EncodePriority+0x32>
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d8:	f04f 32ff 	mov.w	r2, #4294967295
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43da      	mvns	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	401a      	ands	r2, r3
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028ec:	f04f 31ff 	mov.w	r1, #4294967295
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	fa01 f303 	lsl.w	r3, r1, r3
 80028f6:	43d9      	mvns	r1, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028fc:	4313      	orrs	r3, r2
         );
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3724      	adds	r7, #36	@ 0x24
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
	...

0800290c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3b01      	subs	r3, #1
 8002918:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800291c:	d301      	bcc.n	8002922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800291e:	2301      	movs	r3, #1
 8002920:	e00f      	b.n	8002942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002922:	4a0a      	ldr	r2, [pc, #40]	@ (800294c <SysTick_Config+0x40>)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3b01      	subs	r3, #1
 8002928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800292a:	210f      	movs	r1, #15
 800292c:	f04f 30ff 	mov.w	r0, #4294967295
 8002930:	f7ff ff8e 	bl	8002850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002934:	4b05      	ldr	r3, [pc, #20]	@ (800294c <SysTick_Config+0x40>)
 8002936:	2200      	movs	r2, #0
 8002938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800293a:	4b04      	ldr	r3, [pc, #16]	@ (800294c <SysTick_Config+0x40>)
 800293c:	2207      	movs	r2, #7
 800293e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	e000e010 	.word	0xe000e010

08002950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7ff ff29 	bl	80027b0 <__NVIC_SetPriorityGrouping>
}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002966:	b580      	push	{r7, lr}
 8002968:	b086      	sub	sp, #24
 800296a:	af00      	add	r7, sp, #0
 800296c:	4603      	mov	r3, r0
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	607a      	str	r2, [r7, #4]
 8002972:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002974:	2300      	movs	r3, #0
 8002976:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002978:	f7ff ff3e 	bl	80027f8 <__NVIC_GetPriorityGrouping>
 800297c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	68b9      	ldr	r1, [r7, #8]
 8002982:	6978      	ldr	r0, [r7, #20]
 8002984:	f7ff ff8e 	bl	80028a4 <NVIC_EncodePriority>
 8002988:	4602      	mov	r2, r0
 800298a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800298e:	4611      	mov	r1, r2
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff ff5d 	bl	8002850 <__NVIC_SetPriority>
}
 8002996:	bf00      	nop
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b082      	sub	sp, #8
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	4603      	mov	r3, r0
 80029a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff ff31 	bl	8002814 <__NVIC_EnableIRQ>
}
 80029b2:	bf00      	nop
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b082      	sub	sp, #8
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7ff ffa2 	bl	800290c <SysTick_Config>
 80029c8:	4603      	mov	r3, r0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
	...

080029d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029e0:	f7ff feb6 	bl	8002750 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e099      	b.n	8002b24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 0201 	bic.w	r2, r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a10:	e00f      	b.n	8002a32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a12:	f7ff fe9d 	bl	8002750 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b05      	cmp	r3, #5
 8002a1e:	d908      	bls.n	8002a32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2220      	movs	r2, #32
 8002a24:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2203      	movs	r2, #3
 8002a2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e078      	b.n	8002b24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1e8      	bne.n	8002a12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	4b38      	ldr	r3, [pc, #224]	@ (8002b2c <HAL_DMA_Init+0x158>)
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a88:	2b04      	cmp	r3, #4
 8002a8a:	d107      	bne.n	8002a9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a94:	4313      	orrs	r3, r2
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f023 0307 	bic.w	r3, r3, #7
 8002ab2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d117      	bne.n	8002af6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00e      	beq.n	8002af6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 fa6f 	bl	8002fbc <DMA_CheckFifoParam>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d008      	beq.n	8002af6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2240      	movs	r2, #64	@ 0x40
 8002ae8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002af2:	2301      	movs	r3, #1
 8002af4:	e016      	b.n	8002b24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 fa26 	bl	8002f50 <DMA_CalcBaseAndBitshift>
 8002b04:	4603      	mov	r3, r0
 8002b06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b0c:	223f      	movs	r2, #63	@ 0x3f
 8002b0e:	409a      	lsls	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3718      	adds	r7, #24
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	f010803f 	.word	0xf010803f

08002b30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
 8002b3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b46:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <HAL_DMA_Start_IT+0x26>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e040      	b.n	8002bd8 <HAL_DMA_Start_IT+0xa8>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d12f      	bne.n	8002bca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	68b9      	ldr	r1, [r7, #8]
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 f9b8 	bl	8002ef4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b88:	223f      	movs	r2, #63	@ 0x3f
 8002b8a:	409a      	lsls	r2, r3
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0216 	orr.w	r2, r2, #22
 8002b9e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d007      	beq.n	8002bb8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0208 	orr.w	r2, r2, #8
 8002bb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0201 	orr.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	e005      	b.n	8002bd6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002bec:	4b8e      	ldr	r3, [pc, #568]	@ (8002e28 <HAL_DMA_IRQHandler+0x248>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a8e      	ldr	r2, [pc, #568]	@ (8002e2c <HAL_DMA_IRQHandler+0x24c>)
 8002bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf6:	0a9b      	lsrs	r3, r3, #10
 8002bf8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bfe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c0a:	2208      	movs	r2, #8
 8002c0c:	409a      	lsls	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4013      	ands	r3, r2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d01a      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d013      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0204 	bic.w	r2, r2, #4
 8002c32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c38:	2208      	movs	r2, #8
 8002c3a:	409a      	lsls	r2, r3
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c44:	f043 0201 	orr.w	r2, r3, #1
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c50:	2201      	movs	r2, #1
 8002c52:	409a      	lsls	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d012      	beq.n	8002c82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00b      	beq.n	8002c82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c6e:	2201      	movs	r2, #1
 8002c70:	409a      	lsls	r2, r3
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c7a:	f043 0202 	orr.w	r2, r3, #2
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c86:	2204      	movs	r2, #4
 8002c88:	409a      	lsls	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d012      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00b      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca4:	2204      	movs	r2, #4
 8002ca6:	409a      	lsls	r2, r3
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb0:	f043 0204 	orr.w	r2, r3, #4
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cbc:	2210      	movs	r2, #16
 8002cbe:	409a      	lsls	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d043      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d03c      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cda:	2210      	movs	r2, #16
 8002cdc:	409a      	lsls	r2, r3
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d018      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d108      	bne.n	8002d10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d024      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	4798      	blx	r3
 8002d0e:	e01f      	b.n	8002d50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d01b      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	4798      	blx	r3
 8002d20:	e016      	b.n	8002d50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d107      	bne.n	8002d40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0208 	bic.w	r2, r2, #8
 8002d3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d54:	2220      	movs	r2, #32
 8002d56:	409a      	lsls	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 808f 	beq.w	8002e80 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0310 	and.w	r3, r3, #16
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 8087 	beq.w	8002e80 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d76:	2220      	movs	r2, #32
 8002d78:	409a      	lsls	r2, r3
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b05      	cmp	r3, #5
 8002d88:	d136      	bne.n	8002df8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0216 	bic.w	r2, r2, #22
 8002d98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	695a      	ldr	r2, [r3, #20]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002da8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d103      	bne.n	8002dba <HAL_DMA_IRQHandler+0x1da>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d007      	beq.n	8002dca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0208 	bic.w	r2, r2, #8
 8002dc8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dce:	223f      	movs	r2, #63	@ 0x3f
 8002dd0:	409a      	lsls	r2, r3
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d07e      	beq.n	8002eec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	4798      	blx	r3
        }
        return;
 8002df6:	e079      	b.n	8002eec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d01d      	beq.n	8002e42 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10d      	bne.n	8002e30 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d031      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	4798      	blx	r3
 8002e24:	e02c      	b.n	8002e80 <HAL_DMA_IRQHandler+0x2a0>
 8002e26:	bf00      	nop
 8002e28:	20000018 	.word	0x20000018
 8002e2c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d023      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	4798      	blx	r3
 8002e40:	e01e      	b.n	8002e80 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10f      	bne.n	8002e70 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0210 	bic.w	r2, r2, #16
 8002e5e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d032      	beq.n	8002eee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d022      	beq.n	8002eda <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2205      	movs	r2, #5
 8002e98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0201 	bic.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	60bb      	str	r3, [r7, #8]
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d307      	bcc.n	8002ec8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f2      	bne.n	8002eac <HAL_DMA_IRQHandler+0x2cc>
 8002ec6:	e000      	b.n	8002eca <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ec8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d005      	beq.n	8002eee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	4798      	blx	r3
 8002eea:	e000      	b.n	8002eee <HAL_DMA_IRQHandler+0x30e>
        return;
 8002eec:	bf00      	nop
    }
  }
}
 8002eee:	3718      	adds	r7, #24
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
 8002f00:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002f10:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	2b40      	cmp	r3, #64	@ 0x40
 8002f20:	d108      	bne.n	8002f34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f32:	e007      	b.n	8002f44 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	60da      	str	r2, [r3, #12]
}
 8002f44:	bf00      	nop
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	3b10      	subs	r3, #16
 8002f60:	4a14      	ldr	r2, [pc, #80]	@ (8002fb4 <DMA_CalcBaseAndBitshift+0x64>)
 8002f62:	fba2 2303 	umull	r2, r3, r2, r3
 8002f66:	091b      	lsrs	r3, r3, #4
 8002f68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f6a:	4a13      	ldr	r2, [pc, #76]	@ (8002fb8 <DMA_CalcBaseAndBitshift+0x68>)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	4413      	add	r3, r2
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	461a      	mov	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2b03      	cmp	r3, #3
 8002f7c:	d909      	bls.n	8002f92 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002f86:	f023 0303 	bic.w	r3, r3, #3
 8002f8a:	1d1a      	adds	r2, r3, #4
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002f90:	e007      	b.n	8002fa2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002f9a:	f023 0303 	bic.w	r3, r3, #3
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	aaaaaaab 	.word	0xaaaaaaab
 8002fb8:	08006fe0 	.word	0x08006fe0

08002fbc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fcc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d11f      	bne.n	8003016 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d856      	bhi.n	800308a <DMA_CheckFifoParam+0xce>
 8002fdc:	a201      	add	r2, pc, #4	@ (adr r2, 8002fe4 <DMA_CheckFifoParam+0x28>)
 8002fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe2:	bf00      	nop
 8002fe4:	08002ff5 	.word	0x08002ff5
 8002fe8:	08003007 	.word	0x08003007
 8002fec:	08002ff5 	.word	0x08002ff5
 8002ff0:	0800308b 	.word	0x0800308b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d046      	beq.n	800308e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003004:	e043      	b.n	800308e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800300a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800300e:	d140      	bne.n	8003092 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003014:	e03d      	b.n	8003092 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800301e:	d121      	bne.n	8003064 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	2b03      	cmp	r3, #3
 8003024:	d837      	bhi.n	8003096 <DMA_CheckFifoParam+0xda>
 8003026:	a201      	add	r2, pc, #4	@ (adr r2, 800302c <DMA_CheckFifoParam+0x70>)
 8003028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800302c:	0800303d 	.word	0x0800303d
 8003030:	08003043 	.word	0x08003043
 8003034:	0800303d 	.word	0x0800303d
 8003038:	08003055 	.word	0x08003055
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	73fb      	strb	r3, [r7, #15]
      break;
 8003040:	e030      	b.n	80030a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003046:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d025      	beq.n	800309a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003052:	e022      	b.n	800309a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003058:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800305c:	d11f      	bne.n	800309e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003062:	e01c      	b.n	800309e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	2b02      	cmp	r3, #2
 8003068:	d903      	bls.n	8003072 <DMA_CheckFifoParam+0xb6>
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2b03      	cmp	r3, #3
 800306e:	d003      	beq.n	8003078 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003070:	e018      	b.n	80030a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	73fb      	strb	r3, [r7, #15]
      break;
 8003076:	e015      	b.n	80030a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800307c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00e      	beq.n	80030a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	73fb      	strb	r3, [r7, #15]
      break;
 8003088:	e00b      	b.n	80030a2 <DMA_CheckFifoParam+0xe6>
      break;
 800308a:	bf00      	nop
 800308c:	e00a      	b.n	80030a4 <DMA_CheckFifoParam+0xe8>
      break;
 800308e:	bf00      	nop
 8003090:	e008      	b.n	80030a4 <DMA_CheckFifoParam+0xe8>
      break;
 8003092:	bf00      	nop
 8003094:	e006      	b.n	80030a4 <DMA_CheckFifoParam+0xe8>
      break;
 8003096:	bf00      	nop
 8003098:	e004      	b.n	80030a4 <DMA_CheckFifoParam+0xe8>
      break;
 800309a:	bf00      	nop
 800309c:	e002      	b.n	80030a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800309e:	bf00      	nop
 80030a0:	e000      	b.n	80030a4 <DMA_CheckFifoParam+0xe8>
      break;
 80030a2:	bf00      	nop
    }
  } 
  
  return status; 
 80030a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop

080030b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b089      	sub	sp, #36	@ 0x24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030be:	2300      	movs	r3, #0
 80030c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ca:	2300      	movs	r3, #0
 80030cc:	61fb      	str	r3, [r7, #28]
 80030ce:	e177      	b.n	80033c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030d0:	2201      	movs	r2, #1
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	4013      	ands	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	f040 8166 	bne.w	80033ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d005      	beq.n	8003106 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003102:	2b02      	cmp	r3, #2
 8003104:	d130      	bne.n	8003168 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	2203      	movs	r2, #3
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43db      	mvns	r3, r3
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4013      	ands	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	4313      	orrs	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800313c:	2201      	movs	r2, #1
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	43db      	mvns	r3, r3
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4013      	ands	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	091b      	lsrs	r3, r3, #4
 8003152:	f003 0201 	and.w	r2, r3, #1
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4313      	orrs	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 0303 	and.w	r3, r3, #3
 8003170:	2b03      	cmp	r3, #3
 8003172:	d017      	beq.n	80031a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	2203      	movs	r2, #3
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	43db      	mvns	r3, r3
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	4013      	ands	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4313      	orrs	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f003 0303 	and.w	r3, r3, #3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d123      	bne.n	80031f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	08da      	lsrs	r2, r3, #3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3208      	adds	r2, #8
 80031b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	220f      	movs	r2, #15
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	43db      	mvns	r3, r3
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4013      	ands	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	08da      	lsrs	r2, r3, #3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	3208      	adds	r2, #8
 80031f2:	69b9      	ldr	r1, [r7, #24]
 80031f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	2203      	movs	r2, #3
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	43db      	mvns	r3, r3
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	4013      	ands	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f003 0203 	and.w	r2, r3, #3
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4313      	orrs	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 80c0 	beq.w	80033ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	4b66      	ldr	r3, [pc, #408]	@ (80033d8 <HAL_GPIO_Init+0x324>)
 8003240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003242:	4a65      	ldr	r2, [pc, #404]	@ (80033d8 <HAL_GPIO_Init+0x324>)
 8003244:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003248:	6453      	str	r3, [r2, #68]	@ 0x44
 800324a:	4b63      	ldr	r3, [pc, #396]	@ (80033d8 <HAL_GPIO_Init+0x324>)
 800324c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800324e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003256:	4a61      	ldr	r2, [pc, #388]	@ (80033dc <HAL_GPIO_Init+0x328>)
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	089b      	lsrs	r3, r3, #2
 800325c:	3302      	adds	r3, #2
 800325e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003262:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	220f      	movs	r2, #15
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	43db      	mvns	r3, r3
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	4013      	ands	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a58      	ldr	r2, [pc, #352]	@ (80033e0 <HAL_GPIO_Init+0x32c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d037      	beq.n	80032f2 <HAL_GPIO_Init+0x23e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a57      	ldr	r2, [pc, #348]	@ (80033e4 <HAL_GPIO_Init+0x330>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d031      	beq.n	80032ee <HAL_GPIO_Init+0x23a>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a56      	ldr	r2, [pc, #344]	@ (80033e8 <HAL_GPIO_Init+0x334>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d02b      	beq.n	80032ea <HAL_GPIO_Init+0x236>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a55      	ldr	r2, [pc, #340]	@ (80033ec <HAL_GPIO_Init+0x338>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d025      	beq.n	80032e6 <HAL_GPIO_Init+0x232>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a54      	ldr	r2, [pc, #336]	@ (80033f0 <HAL_GPIO_Init+0x33c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d01f      	beq.n	80032e2 <HAL_GPIO_Init+0x22e>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a53      	ldr	r2, [pc, #332]	@ (80033f4 <HAL_GPIO_Init+0x340>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d019      	beq.n	80032de <HAL_GPIO_Init+0x22a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a52      	ldr	r2, [pc, #328]	@ (80033f8 <HAL_GPIO_Init+0x344>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d013      	beq.n	80032da <HAL_GPIO_Init+0x226>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a51      	ldr	r2, [pc, #324]	@ (80033fc <HAL_GPIO_Init+0x348>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d00d      	beq.n	80032d6 <HAL_GPIO_Init+0x222>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a50      	ldr	r2, [pc, #320]	@ (8003400 <HAL_GPIO_Init+0x34c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d007      	beq.n	80032d2 <HAL_GPIO_Init+0x21e>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a4f      	ldr	r2, [pc, #316]	@ (8003404 <HAL_GPIO_Init+0x350>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d101      	bne.n	80032ce <HAL_GPIO_Init+0x21a>
 80032ca:	2309      	movs	r3, #9
 80032cc:	e012      	b.n	80032f4 <HAL_GPIO_Init+0x240>
 80032ce:	230a      	movs	r3, #10
 80032d0:	e010      	b.n	80032f4 <HAL_GPIO_Init+0x240>
 80032d2:	2308      	movs	r3, #8
 80032d4:	e00e      	b.n	80032f4 <HAL_GPIO_Init+0x240>
 80032d6:	2307      	movs	r3, #7
 80032d8:	e00c      	b.n	80032f4 <HAL_GPIO_Init+0x240>
 80032da:	2306      	movs	r3, #6
 80032dc:	e00a      	b.n	80032f4 <HAL_GPIO_Init+0x240>
 80032de:	2305      	movs	r3, #5
 80032e0:	e008      	b.n	80032f4 <HAL_GPIO_Init+0x240>
 80032e2:	2304      	movs	r3, #4
 80032e4:	e006      	b.n	80032f4 <HAL_GPIO_Init+0x240>
 80032e6:	2303      	movs	r3, #3
 80032e8:	e004      	b.n	80032f4 <HAL_GPIO_Init+0x240>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e002      	b.n	80032f4 <HAL_GPIO_Init+0x240>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <HAL_GPIO_Init+0x240>
 80032f2:	2300      	movs	r3, #0
 80032f4:	69fa      	ldr	r2, [r7, #28]
 80032f6:	f002 0203 	and.w	r2, r2, #3
 80032fa:	0092      	lsls	r2, r2, #2
 80032fc:	4093      	lsls	r3, r2
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	4313      	orrs	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003304:	4935      	ldr	r1, [pc, #212]	@ (80033dc <HAL_GPIO_Init+0x328>)
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	089b      	lsrs	r3, r3, #2
 800330a:	3302      	adds	r3, #2
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003312:	4b3d      	ldr	r3, [pc, #244]	@ (8003408 <HAL_GPIO_Init+0x354>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	43db      	mvns	r3, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4013      	ands	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	4313      	orrs	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003336:	4a34      	ldr	r2, [pc, #208]	@ (8003408 <HAL_GPIO_Init+0x354>)
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800333c:	4b32      	ldr	r3, [pc, #200]	@ (8003408 <HAL_GPIO_Init+0x354>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	43db      	mvns	r3, r3
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4013      	ands	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	4313      	orrs	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003360:	4a29      	ldr	r2, [pc, #164]	@ (8003408 <HAL_GPIO_Init+0x354>)
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003366:	4b28      	ldr	r3, [pc, #160]	@ (8003408 <HAL_GPIO_Init+0x354>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	43db      	mvns	r3, r3
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4013      	ands	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800338a:	4a1f      	ldr	r2, [pc, #124]	@ (8003408 <HAL_GPIO_Init+0x354>)
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003390:	4b1d      	ldr	r3, [pc, #116]	@ (8003408 <HAL_GPIO_Init+0x354>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	43db      	mvns	r3, r3
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	4013      	ands	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d003      	beq.n	80033b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033b4:	4a14      	ldr	r2, [pc, #80]	@ (8003408 <HAL_GPIO_Init+0x354>)
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	3301      	adds	r3, #1
 80033be:	61fb      	str	r3, [r7, #28]
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	2b0f      	cmp	r3, #15
 80033c4:	f67f ae84 	bls.w	80030d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033c8:	bf00      	nop
 80033ca:	bf00      	nop
 80033cc:	3724      	adds	r7, #36	@ 0x24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	40023800 	.word	0x40023800
 80033dc:	40013800 	.word	0x40013800
 80033e0:	40020000 	.word	0x40020000
 80033e4:	40020400 	.word	0x40020400
 80033e8:	40020800 	.word	0x40020800
 80033ec:	40020c00 	.word	0x40020c00
 80033f0:	40021000 	.word	0x40021000
 80033f4:	40021400 	.word	0x40021400
 80033f8:	40021800 	.word	0x40021800
 80033fc:	40021c00 	.word	0x40021c00
 8003400:	40022000 	.word	0x40022000
 8003404:	40022400 	.word	0x40022400
 8003408:	40013c00 	.word	0x40013c00

0800340c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	460b      	mov	r3, r1
 8003416:	807b      	strh	r3, [r7, #2]
 8003418:	4613      	mov	r3, r2
 800341a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800341c:	787b      	ldrb	r3, [r7, #1]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003422:	887a      	ldrh	r2, [r7, #2]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003428:	e003      	b.n	8003432 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800342a:	887b      	ldrh	r3, [r7, #2]
 800342c:	041a      	lsls	r2, r3, #16
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	619a      	str	r2, [r3, #24]
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800343e:	b480      	push	{r7}
 8003440:	b085      	sub	sp, #20
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
 8003446:	460b      	mov	r3, r1
 8003448:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003450:	887a      	ldrh	r2, [r7, #2]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	4013      	ands	r3, r2
 8003456:	041a      	lsls	r2, r3, #16
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	43d9      	mvns	r1, r3
 800345c:	887b      	ldrh	r3, [r7, #2]
 800345e:	400b      	ands	r3, r1
 8003460:	431a      	orrs	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	619a      	str	r2, [r3, #24]
}
 8003466:	bf00      	nop
 8003468:	3714      	adds	r7, #20
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
	...

08003474 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800347e:	4b08      	ldr	r3, [pc, #32]	@ (80034a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003480:	695a      	ldr	r2, [r3, #20]
 8003482:	88fb      	ldrh	r3, [r7, #6]
 8003484:	4013      	ands	r3, r2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d006      	beq.n	8003498 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800348a:	4a05      	ldr	r2, [pc, #20]	@ (80034a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800348c:	88fb      	ldrh	r3, [r7, #6]
 800348e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003490:	88fb      	ldrh	r3, [r7, #6]
 8003492:	4618      	mov	r0, r3
 8003494:	f000 f806 	bl	80034a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003498:	bf00      	nop
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40013c00 	.word	0x40013c00

080034a4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4603      	mov	r3, r0
 80034ac:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
	...

080034bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80034c6:	2300      	movs	r3, #0
 80034c8:	603b      	str	r3, [r7, #0]
 80034ca:	4b20      	ldr	r3, [pc, #128]	@ (800354c <HAL_PWREx_EnableOverDrive+0x90>)
 80034cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ce:	4a1f      	ldr	r2, [pc, #124]	@ (800354c <HAL_PWREx_EnableOverDrive+0x90>)
 80034d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80034d6:	4b1d      	ldr	r3, [pc, #116]	@ (800354c <HAL_PWREx_EnableOverDrive+0x90>)
 80034d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034de:	603b      	str	r3, [r7, #0]
 80034e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80034e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003550 <HAL_PWREx_EnableOverDrive+0x94>)
 80034e4:	2201      	movs	r2, #1
 80034e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034e8:	f7ff f932 	bl	8002750 <HAL_GetTick>
 80034ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80034ee:	e009      	b.n	8003504 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80034f0:	f7ff f92e 	bl	8002750 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80034fe:	d901      	bls.n	8003504 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e01f      	b.n	8003544 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003504:	4b13      	ldr	r3, [pc, #76]	@ (8003554 <HAL_PWREx_EnableOverDrive+0x98>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800350c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003510:	d1ee      	bne.n	80034f0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003512:	4b11      	ldr	r3, [pc, #68]	@ (8003558 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003514:	2201      	movs	r2, #1
 8003516:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003518:	f7ff f91a 	bl	8002750 <HAL_GetTick>
 800351c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800351e:	e009      	b.n	8003534 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003520:	f7ff f916 	bl	8002750 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800352e:	d901      	bls.n	8003534 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e007      	b.n	8003544 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003534:	4b07      	ldr	r3, [pc, #28]	@ (8003554 <HAL_PWREx_EnableOverDrive+0x98>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800353c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003540:	d1ee      	bne.n	8003520 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3708      	adds	r7, #8
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40023800 	.word	0x40023800
 8003550:	420e0040 	.word	0x420e0040
 8003554:	40007000 	.word	0x40007000
 8003558:	420e0044 	.word	0x420e0044

0800355c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e267      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d075      	beq.n	8003666 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800357a:	4b88      	ldr	r3, [pc, #544]	@ (800379c <HAL_RCC_OscConfig+0x240>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 030c 	and.w	r3, r3, #12
 8003582:	2b04      	cmp	r3, #4
 8003584:	d00c      	beq.n	80035a0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003586:	4b85      	ldr	r3, [pc, #532]	@ (800379c <HAL_RCC_OscConfig+0x240>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800358e:	2b08      	cmp	r3, #8
 8003590:	d112      	bne.n	80035b8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003592:	4b82      	ldr	r3, [pc, #520]	@ (800379c <HAL_RCC_OscConfig+0x240>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800359a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800359e:	d10b      	bne.n	80035b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a0:	4b7e      	ldr	r3, [pc, #504]	@ (800379c <HAL_RCC_OscConfig+0x240>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d05b      	beq.n	8003664 <HAL_RCC_OscConfig+0x108>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d157      	bne.n	8003664 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e242      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035c0:	d106      	bne.n	80035d0 <HAL_RCC_OscConfig+0x74>
 80035c2:	4b76      	ldr	r3, [pc, #472]	@ (800379c <HAL_RCC_OscConfig+0x240>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a75      	ldr	r2, [pc, #468]	@ (800379c <HAL_RCC_OscConfig+0x240>)
 80035c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	e01d      	b.n	800360c <HAL_RCC_OscConfig+0xb0>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035d8:	d10c      	bne.n	80035f4 <HAL_RCC_OscConfig+0x98>
 80035da:	4b70      	ldr	r3, [pc, #448]	@ (800379c <HAL_RCC_OscConfig+0x240>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a6f      	ldr	r2, [pc, #444]	@ (800379c <HAL_RCC_OscConfig+0x240>)
 80035e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035e4:	6013      	str	r3, [r2, #0]
 80035e6:	4b6d      	ldr	r3, [pc, #436]	@ (800379c <HAL_RCC_OscConfig+0x240>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a6c      	ldr	r2, [pc, #432]	@ (800379c <HAL_RCC_OscConfig+0x240>)
 80035ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	e00b      	b.n	800360c <HAL_RCC_OscConfig+0xb0>
 80035f4:	4b69      	ldr	r3, [pc, #420]	@ (800379c <HAL_RCC_OscConfig+0x240>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a68      	ldr	r2, [pc, #416]	@ (800379c <HAL_RCC_OscConfig+0x240>)
 80035fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035fe:	6013      	str	r3, [r2, #0]
 8003600:	4b66      	ldr	r3, [pc, #408]	@ (800379c <HAL_RCC_OscConfig+0x240>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a65      	ldr	r2, [pc, #404]	@ (800379c <HAL_RCC_OscConfig+0x240>)
 8003606:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800360a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d013      	beq.n	800363c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003614:	f7ff f89c 	bl	8002750 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800361c:	f7ff f898 	bl	8002750 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b64      	cmp	r3, #100	@ 0x64
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e207      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362e:	4b5b      	ldr	r3, [pc, #364]	@ (800379c <HAL_RCC_OscConfig+0x240>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0f0      	beq.n	800361c <HAL_RCC_OscConfig+0xc0>
 800363a:	e014      	b.n	8003666 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363c:	f7ff f888 	bl	8002750 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003644:	f7ff f884 	bl	8002750 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b64      	cmp	r3, #100	@ 0x64
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e1f3      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003656:	4b51      	ldr	r3, [pc, #324]	@ (800379c <HAL_RCC_OscConfig+0x240>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f0      	bne.n	8003644 <HAL_RCC_OscConfig+0xe8>
 8003662:	e000      	b.n	8003666 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d063      	beq.n	800373a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003672:	4b4a      	ldr	r3, [pc, #296]	@ (800379c <HAL_RCC_OscConfig+0x240>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 030c 	and.w	r3, r3, #12
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00b      	beq.n	8003696 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800367e:	4b47      	ldr	r3, [pc, #284]	@ (800379c <HAL_RCC_OscConfig+0x240>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003686:	2b08      	cmp	r3, #8
 8003688:	d11c      	bne.n	80036c4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800368a:	4b44      	ldr	r3, [pc, #272]	@ (800379c <HAL_RCC_OscConfig+0x240>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d116      	bne.n	80036c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003696:	4b41      	ldr	r3, [pc, #260]	@ (800379c <HAL_RCC_OscConfig+0x240>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d005      	beq.n	80036ae <HAL_RCC_OscConfig+0x152>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d001      	beq.n	80036ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e1c7      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ae:	4b3b      	ldr	r3, [pc, #236]	@ (800379c <HAL_RCC_OscConfig+0x240>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	4937      	ldr	r1, [pc, #220]	@ (800379c <HAL_RCC_OscConfig+0x240>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036c2:	e03a      	b.n	800373a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d020      	beq.n	800370e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036cc:	4b34      	ldr	r3, [pc, #208]	@ (80037a0 <HAL_RCC_OscConfig+0x244>)
 80036ce:	2201      	movs	r2, #1
 80036d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d2:	f7ff f83d 	bl	8002750 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036da:	f7ff f839 	bl	8002750 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e1a8      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ec:	4b2b      	ldr	r3, [pc, #172]	@ (800379c <HAL_RCC_OscConfig+0x240>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0f0      	beq.n	80036da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f8:	4b28      	ldr	r3, [pc, #160]	@ (800379c <HAL_RCC_OscConfig+0x240>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	4925      	ldr	r1, [pc, #148]	@ (800379c <HAL_RCC_OscConfig+0x240>)
 8003708:	4313      	orrs	r3, r2
 800370a:	600b      	str	r3, [r1, #0]
 800370c:	e015      	b.n	800373a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800370e:	4b24      	ldr	r3, [pc, #144]	@ (80037a0 <HAL_RCC_OscConfig+0x244>)
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003714:	f7ff f81c 	bl	8002750 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800371c:	f7ff f818 	bl	8002750 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e187      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800372e:	4b1b      	ldr	r3, [pc, #108]	@ (800379c <HAL_RCC_OscConfig+0x240>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f0      	bne.n	800371c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	2b00      	cmp	r3, #0
 8003744:	d036      	beq.n	80037b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d016      	beq.n	800377c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800374e:	4b15      	ldr	r3, [pc, #84]	@ (80037a4 <HAL_RCC_OscConfig+0x248>)
 8003750:	2201      	movs	r2, #1
 8003752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003754:	f7fe fffc 	bl	8002750 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800375c:	f7fe fff8 	bl	8002750 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e167      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800376e:	4b0b      	ldr	r3, [pc, #44]	@ (800379c <HAL_RCC_OscConfig+0x240>)
 8003770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0f0      	beq.n	800375c <HAL_RCC_OscConfig+0x200>
 800377a:	e01b      	b.n	80037b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800377c:	4b09      	ldr	r3, [pc, #36]	@ (80037a4 <HAL_RCC_OscConfig+0x248>)
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003782:	f7fe ffe5 	bl	8002750 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003788:	e00e      	b.n	80037a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800378a:	f7fe ffe1 	bl	8002750 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d907      	bls.n	80037a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e150      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
 800379c:	40023800 	.word	0x40023800
 80037a0:	42470000 	.word	0x42470000
 80037a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a8:	4b88      	ldr	r3, [pc, #544]	@ (80039cc <HAL_RCC_OscConfig+0x470>)
 80037aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1ea      	bne.n	800378a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 8097 	beq.w	80038f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037c2:	2300      	movs	r3, #0
 80037c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037c6:	4b81      	ldr	r3, [pc, #516]	@ (80039cc <HAL_RCC_OscConfig+0x470>)
 80037c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10f      	bne.n	80037f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037d2:	2300      	movs	r3, #0
 80037d4:	60bb      	str	r3, [r7, #8]
 80037d6:	4b7d      	ldr	r3, [pc, #500]	@ (80039cc <HAL_RCC_OscConfig+0x470>)
 80037d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037da:	4a7c      	ldr	r2, [pc, #496]	@ (80039cc <HAL_RCC_OscConfig+0x470>)
 80037dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80037e2:	4b7a      	ldr	r3, [pc, #488]	@ (80039cc <HAL_RCC_OscConfig+0x470>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ee:	2301      	movs	r3, #1
 80037f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f2:	4b77      	ldr	r3, [pc, #476]	@ (80039d0 <HAL_RCC_OscConfig+0x474>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d118      	bne.n	8003830 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037fe:	4b74      	ldr	r3, [pc, #464]	@ (80039d0 <HAL_RCC_OscConfig+0x474>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a73      	ldr	r2, [pc, #460]	@ (80039d0 <HAL_RCC_OscConfig+0x474>)
 8003804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800380a:	f7fe ffa1 	bl	8002750 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003812:	f7fe ff9d 	bl	8002750 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e10c      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003824:	4b6a      	ldr	r3, [pc, #424]	@ (80039d0 <HAL_RCC_OscConfig+0x474>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0f0      	beq.n	8003812 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d106      	bne.n	8003846 <HAL_RCC_OscConfig+0x2ea>
 8003838:	4b64      	ldr	r3, [pc, #400]	@ (80039cc <HAL_RCC_OscConfig+0x470>)
 800383a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800383c:	4a63      	ldr	r2, [pc, #396]	@ (80039cc <HAL_RCC_OscConfig+0x470>)
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	6713      	str	r3, [r2, #112]	@ 0x70
 8003844:	e01c      	b.n	8003880 <HAL_RCC_OscConfig+0x324>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	2b05      	cmp	r3, #5
 800384c:	d10c      	bne.n	8003868 <HAL_RCC_OscConfig+0x30c>
 800384e:	4b5f      	ldr	r3, [pc, #380]	@ (80039cc <HAL_RCC_OscConfig+0x470>)
 8003850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003852:	4a5e      	ldr	r2, [pc, #376]	@ (80039cc <HAL_RCC_OscConfig+0x470>)
 8003854:	f043 0304 	orr.w	r3, r3, #4
 8003858:	6713      	str	r3, [r2, #112]	@ 0x70
 800385a:	4b5c      	ldr	r3, [pc, #368]	@ (80039cc <HAL_RCC_OscConfig+0x470>)
 800385c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800385e:	4a5b      	ldr	r2, [pc, #364]	@ (80039cc <HAL_RCC_OscConfig+0x470>)
 8003860:	f043 0301 	orr.w	r3, r3, #1
 8003864:	6713      	str	r3, [r2, #112]	@ 0x70
 8003866:	e00b      	b.n	8003880 <HAL_RCC_OscConfig+0x324>
 8003868:	4b58      	ldr	r3, [pc, #352]	@ (80039cc <HAL_RCC_OscConfig+0x470>)
 800386a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800386c:	4a57      	ldr	r2, [pc, #348]	@ (80039cc <HAL_RCC_OscConfig+0x470>)
 800386e:	f023 0301 	bic.w	r3, r3, #1
 8003872:	6713      	str	r3, [r2, #112]	@ 0x70
 8003874:	4b55      	ldr	r3, [pc, #340]	@ (80039cc <HAL_RCC_OscConfig+0x470>)
 8003876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003878:	4a54      	ldr	r2, [pc, #336]	@ (80039cc <HAL_RCC_OscConfig+0x470>)
 800387a:	f023 0304 	bic.w	r3, r3, #4
 800387e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d015      	beq.n	80038b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003888:	f7fe ff62 	bl	8002750 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800388e:	e00a      	b.n	80038a6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003890:	f7fe ff5e 	bl	8002750 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800389e:	4293      	cmp	r3, r2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e0cb      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a6:	4b49      	ldr	r3, [pc, #292]	@ (80039cc <HAL_RCC_OscConfig+0x470>)
 80038a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0ee      	beq.n	8003890 <HAL_RCC_OscConfig+0x334>
 80038b2:	e014      	b.n	80038de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038b4:	f7fe ff4c 	bl	8002750 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ba:	e00a      	b.n	80038d2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038bc:	f7fe ff48 	bl	8002750 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e0b5      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d2:	4b3e      	ldr	r3, [pc, #248]	@ (80039cc <HAL_RCC_OscConfig+0x470>)
 80038d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1ee      	bne.n	80038bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038de:	7dfb      	ldrb	r3, [r7, #23]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d105      	bne.n	80038f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e4:	4b39      	ldr	r3, [pc, #228]	@ (80039cc <HAL_RCC_OscConfig+0x470>)
 80038e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e8:	4a38      	ldr	r2, [pc, #224]	@ (80039cc <HAL_RCC_OscConfig+0x470>)
 80038ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 80a1 	beq.w	8003a3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038fa:	4b34      	ldr	r3, [pc, #208]	@ (80039cc <HAL_RCC_OscConfig+0x470>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 030c 	and.w	r3, r3, #12
 8003902:	2b08      	cmp	r3, #8
 8003904:	d05c      	beq.n	80039c0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	2b02      	cmp	r3, #2
 800390c:	d141      	bne.n	8003992 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800390e:	4b31      	ldr	r3, [pc, #196]	@ (80039d4 <HAL_RCC_OscConfig+0x478>)
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003914:	f7fe ff1c 	bl	8002750 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800391c:	f7fe ff18 	bl	8002750 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e087      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392e:	4b27      	ldr	r3, [pc, #156]	@ (80039cc <HAL_RCC_OscConfig+0x470>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1f0      	bne.n	800391c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69da      	ldr	r2, [r3, #28]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003948:	019b      	lsls	r3, r3, #6
 800394a:	431a      	orrs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003950:	085b      	lsrs	r3, r3, #1
 8003952:	3b01      	subs	r3, #1
 8003954:	041b      	lsls	r3, r3, #16
 8003956:	431a      	orrs	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800395c:	061b      	lsls	r3, r3, #24
 800395e:	491b      	ldr	r1, [pc, #108]	@ (80039cc <HAL_RCC_OscConfig+0x470>)
 8003960:	4313      	orrs	r3, r2
 8003962:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003964:	4b1b      	ldr	r3, [pc, #108]	@ (80039d4 <HAL_RCC_OscConfig+0x478>)
 8003966:	2201      	movs	r2, #1
 8003968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396a:	f7fe fef1 	bl	8002750 <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003972:	f7fe feed 	bl	8002750 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e05c      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003984:	4b11      	ldr	r3, [pc, #68]	@ (80039cc <HAL_RCC_OscConfig+0x470>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0f0      	beq.n	8003972 <HAL_RCC_OscConfig+0x416>
 8003990:	e054      	b.n	8003a3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003992:	4b10      	ldr	r3, [pc, #64]	@ (80039d4 <HAL_RCC_OscConfig+0x478>)
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003998:	f7fe feda 	bl	8002750 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039a0:	f7fe fed6 	bl	8002750 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e045      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b2:	4b06      	ldr	r3, [pc, #24]	@ (80039cc <HAL_RCC_OscConfig+0x470>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1f0      	bne.n	80039a0 <HAL_RCC_OscConfig+0x444>
 80039be:	e03d      	b.n	8003a3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d107      	bne.n	80039d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e038      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
 80039cc:	40023800 	.word	0x40023800
 80039d0:	40007000 	.word	0x40007000
 80039d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a48 <HAL_RCC_OscConfig+0x4ec>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d028      	beq.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d121      	bne.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d11a      	bne.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a08:	4013      	ands	r3, r2
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d111      	bne.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a1e:	085b      	lsrs	r3, r3, #1
 8003a20:	3b01      	subs	r3, #1
 8003a22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d107      	bne.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d001      	beq.n	8003a3c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e000      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3718      	adds	r7, #24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40023800 	.word	0x40023800

08003a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e0cc      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a60:	4b68      	ldr	r3, [pc, #416]	@ (8003c04 <HAL_RCC_ClockConfig+0x1b8>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 030f 	and.w	r3, r3, #15
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d90c      	bls.n	8003a88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a6e:	4b65      	ldr	r3, [pc, #404]	@ (8003c04 <HAL_RCC_ClockConfig+0x1b8>)
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	b2d2      	uxtb	r2, r2
 8003a74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a76:	4b63      	ldr	r3, [pc, #396]	@ (8003c04 <HAL_RCC_ClockConfig+0x1b8>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d001      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e0b8      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d020      	beq.n	8003ad6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003aa0:	4b59      	ldr	r3, [pc, #356]	@ (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	4a58      	ldr	r2, [pc, #352]	@ (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003aaa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0308 	and.w	r3, r3, #8
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d005      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ab8:	4b53      	ldr	r3, [pc, #332]	@ (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	4a52      	ldr	r2, [pc, #328]	@ (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003abe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ac2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac4:	4b50      	ldr	r3, [pc, #320]	@ (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	494d      	ldr	r1, [pc, #308]	@ (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d044      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d107      	bne.n	8003afa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aea:	4b47      	ldr	r3, [pc, #284]	@ (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d119      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e07f      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d003      	beq.n	8003b0a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b06:	2b03      	cmp	r3, #3
 8003b08:	d107      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b0a:	4b3f      	ldr	r3, [pc, #252]	@ (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d109      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e06f      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b1a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e067      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b2a:	4b37      	ldr	r3, [pc, #220]	@ (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f023 0203 	bic.w	r2, r3, #3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	4934      	ldr	r1, [pc, #208]	@ (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b3c:	f7fe fe08 	bl	8002750 <HAL_GetTick>
 8003b40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b42:	e00a      	b.n	8003b5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b44:	f7fe fe04 	bl	8002750 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e04f      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b5a:	4b2b      	ldr	r3, [pc, #172]	@ (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 020c 	and.w	r2, r3, #12
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d1eb      	bne.n	8003b44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b6c:	4b25      	ldr	r3, [pc, #148]	@ (8003c04 <HAL_RCC_ClockConfig+0x1b8>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 030f 	and.w	r3, r3, #15
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d20c      	bcs.n	8003b94 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b7a:	4b22      	ldr	r3, [pc, #136]	@ (8003c04 <HAL_RCC_ClockConfig+0x1b8>)
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b82:	4b20      	ldr	r3, [pc, #128]	@ (8003c04 <HAL_RCC_ClockConfig+0x1b8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d001      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e032      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d008      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ba0:	4b19      	ldr	r3, [pc, #100]	@ (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	4916      	ldr	r1, [pc, #88]	@ (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0308 	and.w	r3, r3, #8
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d009      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bbe:	4b12      	ldr	r3, [pc, #72]	@ (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	490e      	ldr	r1, [pc, #56]	@ (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bd2:	f000 f821 	bl	8003c18 <HAL_RCC_GetSysClockFreq>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	091b      	lsrs	r3, r3, #4
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	490a      	ldr	r1, [pc, #40]	@ (8003c0c <HAL_RCC_ClockConfig+0x1c0>)
 8003be4:	5ccb      	ldrb	r3, [r1, r3]
 8003be6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bea:	4a09      	ldr	r2, [pc, #36]	@ (8003c10 <HAL_RCC_ClockConfig+0x1c4>)
 8003bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003bee:	4b09      	ldr	r3, [pc, #36]	@ (8003c14 <HAL_RCC_ClockConfig+0x1c8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fe fd68 	bl	80026c8 <HAL_InitTick>

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40023c00 	.word	0x40023c00
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	08006fd0 	.word	0x08006fd0
 8003c10:	20000018 	.word	0x20000018
 8003c14:	2000001c 	.word	0x2000001c

08003c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c1c:	b094      	sub	sp, #80	@ 0x50
 8003c1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c30:	4b79      	ldr	r3, [pc, #484]	@ (8003e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f003 030c 	and.w	r3, r3, #12
 8003c38:	2b08      	cmp	r3, #8
 8003c3a:	d00d      	beq.n	8003c58 <HAL_RCC_GetSysClockFreq+0x40>
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	f200 80e1 	bhi.w	8003e04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <HAL_RCC_GetSysClockFreq+0x34>
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d003      	beq.n	8003c52 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c4a:	e0db      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c4c:	4b73      	ldr	r3, [pc, #460]	@ (8003e1c <HAL_RCC_GetSysClockFreq+0x204>)
 8003c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c50:	e0db      	b.n	8003e0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c52:	4b73      	ldr	r3, [pc, #460]	@ (8003e20 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c56:	e0d8      	b.n	8003e0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c58:	4b6f      	ldr	r3, [pc, #444]	@ (8003e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c60:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c62:	4b6d      	ldr	r3, [pc, #436]	@ (8003e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d063      	beq.n	8003d36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c6e:	4b6a      	ldr	r3, [pc, #424]	@ (8003e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	099b      	lsrs	r3, r3, #6
 8003c74:	2200      	movs	r2, #0
 8003c76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c78:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c80:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c82:	2300      	movs	r3, #0
 8003c84:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c8a:	4622      	mov	r2, r4
 8003c8c:	462b      	mov	r3, r5
 8003c8e:	f04f 0000 	mov.w	r0, #0
 8003c92:	f04f 0100 	mov.w	r1, #0
 8003c96:	0159      	lsls	r1, r3, #5
 8003c98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c9c:	0150      	lsls	r0, r2, #5
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	4621      	mov	r1, r4
 8003ca4:	1a51      	subs	r1, r2, r1
 8003ca6:	6139      	str	r1, [r7, #16]
 8003ca8:	4629      	mov	r1, r5
 8003caa:	eb63 0301 	sbc.w	r3, r3, r1
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	f04f 0200 	mov.w	r2, #0
 8003cb4:	f04f 0300 	mov.w	r3, #0
 8003cb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cbc:	4659      	mov	r1, fp
 8003cbe:	018b      	lsls	r3, r1, #6
 8003cc0:	4651      	mov	r1, sl
 8003cc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cc6:	4651      	mov	r1, sl
 8003cc8:	018a      	lsls	r2, r1, #6
 8003cca:	4651      	mov	r1, sl
 8003ccc:	ebb2 0801 	subs.w	r8, r2, r1
 8003cd0:	4659      	mov	r1, fp
 8003cd2:	eb63 0901 	sbc.w	r9, r3, r1
 8003cd6:	f04f 0200 	mov.w	r2, #0
 8003cda:	f04f 0300 	mov.w	r3, #0
 8003cde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ce2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ce6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cea:	4690      	mov	r8, r2
 8003cec:	4699      	mov	r9, r3
 8003cee:	4623      	mov	r3, r4
 8003cf0:	eb18 0303 	adds.w	r3, r8, r3
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	462b      	mov	r3, r5
 8003cf8:	eb49 0303 	adc.w	r3, r9, r3
 8003cfc:	60fb      	str	r3, [r7, #12]
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	f04f 0300 	mov.w	r3, #0
 8003d06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d0a:	4629      	mov	r1, r5
 8003d0c:	024b      	lsls	r3, r1, #9
 8003d0e:	4621      	mov	r1, r4
 8003d10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d14:	4621      	mov	r1, r4
 8003d16:	024a      	lsls	r2, r1, #9
 8003d18:	4610      	mov	r0, r2
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d1e:	2200      	movs	r2, #0
 8003d20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d28:	f7fc fab2 	bl	8000290 <__aeabi_uldivmod>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	460b      	mov	r3, r1
 8003d30:	4613      	mov	r3, r2
 8003d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d34:	e058      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d36:	4b38      	ldr	r3, [pc, #224]	@ (8003e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	099b      	lsrs	r3, r3, #6
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	4618      	mov	r0, r3
 8003d40:	4611      	mov	r1, r2
 8003d42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d46:	623b      	str	r3, [r7, #32]
 8003d48:	2300      	movs	r3, #0
 8003d4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d50:	4642      	mov	r2, r8
 8003d52:	464b      	mov	r3, r9
 8003d54:	f04f 0000 	mov.w	r0, #0
 8003d58:	f04f 0100 	mov.w	r1, #0
 8003d5c:	0159      	lsls	r1, r3, #5
 8003d5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d62:	0150      	lsls	r0, r2, #5
 8003d64:	4602      	mov	r2, r0
 8003d66:	460b      	mov	r3, r1
 8003d68:	4641      	mov	r1, r8
 8003d6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d6e:	4649      	mov	r1, r9
 8003d70:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d74:	f04f 0200 	mov.w	r2, #0
 8003d78:	f04f 0300 	mov.w	r3, #0
 8003d7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d88:	ebb2 040a 	subs.w	r4, r2, sl
 8003d8c:	eb63 050b 	sbc.w	r5, r3, fp
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	f04f 0300 	mov.w	r3, #0
 8003d98:	00eb      	lsls	r3, r5, #3
 8003d9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d9e:	00e2      	lsls	r2, r4, #3
 8003da0:	4614      	mov	r4, r2
 8003da2:	461d      	mov	r5, r3
 8003da4:	4643      	mov	r3, r8
 8003da6:	18e3      	adds	r3, r4, r3
 8003da8:	603b      	str	r3, [r7, #0]
 8003daa:	464b      	mov	r3, r9
 8003dac:	eb45 0303 	adc.w	r3, r5, r3
 8003db0:	607b      	str	r3, [r7, #4]
 8003db2:	f04f 0200 	mov.w	r2, #0
 8003db6:	f04f 0300 	mov.w	r3, #0
 8003dba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dbe:	4629      	mov	r1, r5
 8003dc0:	028b      	lsls	r3, r1, #10
 8003dc2:	4621      	mov	r1, r4
 8003dc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dc8:	4621      	mov	r1, r4
 8003dca:	028a      	lsls	r2, r1, #10
 8003dcc:	4610      	mov	r0, r2
 8003dce:	4619      	mov	r1, r3
 8003dd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	61bb      	str	r3, [r7, #24]
 8003dd6:	61fa      	str	r2, [r7, #28]
 8003dd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ddc:	f7fc fa58 	bl	8000290 <__aeabi_uldivmod>
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	4613      	mov	r3, r2
 8003de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003de8:	4b0b      	ldr	r3, [pc, #44]	@ (8003e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	0c1b      	lsrs	r3, r3, #16
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	3301      	adds	r3, #1
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003df8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003dfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e02:	e002      	b.n	8003e0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e04:	4b05      	ldr	r3, [pc, #20]	@ (8003e1c <HAL_RCC_GetSysClockFreq+0x204>)
 8003e06:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3750      	adds	r7, #80	@ 0x50
 8003e10:	46bd      	mov	sp, r7
 8003e12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e16:	bf00      	nop
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	00f42400 	.word	0x00f42400
 8003e20:	007a1200 	.word	0x007a1200

08003e24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10b      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d105      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d075      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e58:	4b91      	ldr	r3, [pc, #580]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e5e:	f7fe fc77 	bl	8002750 <HAL_GetTick>
 8003e62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e64:	e008      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e66:	f7fe fc73 	bl	8002750 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e189      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e78:	4b8a      	ldr	r3, [pc, #552]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1f0      	bne.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d009      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	019a      	lsls	r2, r3, #6
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	071b      	lsls	r3, r3, #28
 8003e9c:	4981      	ldr	r1, [pc, #516]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d01f      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003eb0:	4b7c      	ldr	r3, [pc, #496]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003eb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003eb6:	0f1b      	lsrs	r3, r3, #28
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	019a      	lsls	r2, r3, #6
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	061b      	lsls	r3, r3, #24
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	071b      	lsls	r3, r3, #28
 8003ed0:	4974      	ldr	r1, [pc, #464]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003ed8:	4b72      	ldr	r3, [pc, #456]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003eda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ede:	f023 021f 	bic.w	r2, r3, #31
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	496e      	ldr	r1, [pc, #440]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00d      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	019a      	lsls	r2, r3, #6
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	061b      	lsls	r3, r3, #24
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	071b      	lsls	r3, r3, #28
 8003f10:	4964      	ldr	r1, [pc, #400]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f18:	4b61      	ldr	r3, [pc, #388]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f1e:	f7fe fc17 	bl	8002750 <HAL_GetTick>
 8003f22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f24:	e008      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f26:	f7fe fc13 	bl	8002750 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e129      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f38:	4b5a      	ldr	r3, [pc, #360]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d0f0      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d105      	bne.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d079      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f5c:	4b52      	ldr	r3, [pc, #328]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f62:	f7fe fbf5 	bl	8002750 <HAL_GetTick>
 8003f66:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f68:	e008      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f6a:	f7fe fbf1 	bl	8002750 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e107      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f7c:	4b49      	ldr	r3, [pc, #292]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f88:	d0ef      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0304 	and.w	r3, r3, #4
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d020      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f96:	4b43      	ldr	r3, [pc, #268]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f9c:	0f1b      	lsrs	r3, r3, #28
 8003f9e:	f003 0307 	and.w	r3, r3, #7
 8003fa2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	019a      	lsls	r2, r3, #6
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	061b      	lsls	r3, r3, #24
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	071b      	lsls	r3, r3, #28
 8003fb6:	493b      	ldr	r1, [pc, #236]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003fbe:	4b39      	ldr	r3, [pc, #228]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fc4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	021b      	lsls	r3, r3, #8
 8003fd0:	4934      	ldr	r1, [pc, #208]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0308 	and.w	r3, r3, #8
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d01e      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fe4:	4b2f      	ldr	r3, [pc, #188]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fea:	0e1b      	lsrs	r3, r3, #24
 8003fec:	f003 030f 	and.w	r3, r3, #15
 8003ff0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	019a      	lsls	r2, r3, #6
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	061b      	lsls	r3, r3, #24
 8003ffc:	431a      	orrs	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	071b      	lsls	r3, r3, #28
 8004004:	4927      	ldr	r1, [pc, #156]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004006:	4313      	orrs	r3, r2
 8004008:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800400c:	4b25      	ldr	r3, [pc, #148]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800400e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004012:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401a:	4922      	ldr	r1, [pc, #136]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004022:	4b21      	ldr	r3, [pc, #132]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004024:	2201      	movs	r2, #1
 8004026:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004028:	f7fe fb92 	bl	8002750 <HAL_GetTick>
 800402c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800402e:	e008      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004030:	f7fe fb8e 	bl	8002750 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e0a4      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004042:	4b18      	ldr	r3, [pc, #96]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800404a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800404e:	d1ef      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0320 	and.w	r3, r3, #32
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 808b 	beq.w	8004174 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800405e:	2300      	movs	r3, #0
 8004060:	60fb      	str	r3, [r7, #12]
 8004062:	4b10      	ldr	r3, [pc, #64]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004066:	4a0f      	ldr	r2, [pc, #60]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004068:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800406c:	6413      	str	r3, [r2, #64]	@ 0x40
 800406e:	4b0d      	ldr	r3, [pc, #52]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004076:	60fb      	str	r3, [r7, #12]
 8004078:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800407a:	4b0c      	ldr	r3, [pc, #48]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a0b      	ldr	r2, [pc, #44]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004080:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004084:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004086:	f7fe fb63 	bl	8002750 <HAL_GetTick>
 800408a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800408c:	e010      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800408e:	f7fe fb5f 	bl	8002750 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d909      	bls.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e075      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x368>
 80040a0:	42470068 	.word	0x42470068
 80040a4:	40023800 	.word	0x40023800
 80040a8:	42470070 	.word	0x42470070
 80040ac:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80040b0:	4b38      	ldr	r3, [pc, #224]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0e8      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040bc:	4b36      	ldr	r3, [pc, #216]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80040be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040c4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d02f      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d028      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040da:	4b2f      	ldr	r3, [pc, #188]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80040dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040e2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040e4:	4b2d      	ldr	r3, [pc, #180]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80040e6:	2201      	movs	r2, #1
 80040e8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040ea:	4b2c      	ldr	r3, [pc, #176]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80040f0:	4a29      	ldr	r2, [pc, #164]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80040f6:	4b28      	ldr	r3, [pc, #160]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80040f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d114      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004102:	f7fe fb25 	bl	8002750 <HAL_GetTick>
 8004106:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004108:	e00a      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800410a:	f7fe fb21 	bl	8002750 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004118:	4293      	cmp	r3, r2
 800411a:	d901      	bls.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e035      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004120:	4b1d      	ldr	r3, [pc, #116]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0ee      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004130:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004134:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004138:	d10d      	bne.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800413a:	4b17      	ldr	r3, [pc, #92]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004146:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800414a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800414e:	4912      	ldr	r1, [pc, #72]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004150:	4313      	orrs	r3, r2
 8004152:	608b      	str	r3, [r1, #8]
 8004154:	e005      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004156:	4b10      	ldr	r3, [pc, #64]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	4a0f      	ldr	r2, [pc, #60]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800415c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004160:	6093      	str	r3, [r2, #8]
 8004162:	4b0d      	ldr	r3, [pc, #52]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004164:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800416a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800416e:	490a      	ldr	r1, [pc, #40]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004170:	4313      	orrs	r3, r2
 8004172:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0310 	and.w	r3, r3, #16
 800417c:	2b00      	cmp	r3, #0
 800417e:	d004      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8004186:	4b06      	ldr	r3, [pc, #24]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004188:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40007000 	.word	0x40007000
 8004198:	40023800 	.word	0x40023800
 800419c:	42470e40 	.word	0x42470e40
 80041a0:	424711e0 	.word	0x424711e0

080041a4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e073      	b.n	800429e <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	7f5b      	ldrb	r3, [r3, #29]
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d105      	bne.n	80041cc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7fe f868 	bl	800229c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	f003 0310 	and.w	r3, r3, #16
 80041dc:	2b10      	cmp	r3, #16
 80041de:	d055      	beq.n	800428c <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	22ca      	movs	r2, #202	@ 0xca
 80041e6:	625a      	str	r2, [r3, #36]	@ 0x24
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2253      	movs	r2, #83	@ 0x53
 80041ee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 f87f 	bl	80042f4 <RTC_EnterInitMode>
 80041f6:	4603      	mov	r3, r0
 80041f8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80041fa:	7bfb      	ldrb	r3, [r7, #15]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d12c      	bne.n	800425a <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6812      	ldr	r2, [r2, #0]
 800420a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800420e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004212:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6899      	ldr	r1, [r3, #8]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	431a      	orrs	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	68d2      	ldr	r2, [r2, #12]
 800423a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6919      	ldr	r1, [r3, #16]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	041a      	lsls	r2, r3, #16
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	430a      	orrs	r2, r1
 800424e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 f886 	bl	8004362 <RTC_ExitInitMode>
 8004256:	4603      	mov	r3, r0
 8004258:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800425a:	7bfb      	ldrb	r3, [r7, #15]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d110      	bne.n	8004282 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800426e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	699a      	ldr	r2, [r3, #24]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	22ff      	movs	r2, #255	@ 0xff
 8004288:	625a      	str	r2, [r3, #36]	@ 0x24
 800428a:	e001      	b.n	8004290 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800428c:	2300      	movs	r3, #0
 800428e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004290:	7bfb      	ldrb	r3, [r7, #15]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d102      	bne.n	800429c <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800429c:	7bfb      	ldrb	r3, [r7, #15]
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
	...

080042a8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a0d      	ldr	r2, [pc, #52]	@ (80042f0 <HAL_RTC_WaitForSynchro+0x48>)
 80042ba:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042bc:	f7fe fa48 	bl	8002750 <HAL_GetTick>
 80042c0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80042c2:	e009      	b.n	80042d8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80042c4:	f7fe fa44 	bl	8002750 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80042d2:	d901      	bls.n	80042d8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e007      	b.n	80042e8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	f003 0320 	and.w	r3, r3, #32
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0ee      	beq.n	80042c4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	00017f5f 	.word	0x00017f5f

080042f4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004300:	2300      	movs	r3, #0
 8004302:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800430e:	2b00      	cmp	r3, #0
 8004310:	d122      	bne.n	8004358 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68da      	ldr	r2, [r3, #12]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004320:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004322:	f7fe fa15 	bl	8002750 <HAL_GetTick>
 8004326:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004328:	e00c      	b.n	8004344 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800432a:	f7fe fa11 	bl	8002750 <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004338:	d904      	bls.n	8004344 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2204      	movs	r2, #4
 800433e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800434e:	2b00      	cmp	r3, #0
 8004350:	d102      	bne.n	8004358 <RTC_EnterInitMode+0x64>
 8004352:	7bfb      	ldrb	r3, [r7, #15]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d1e8      	bne.n	800432a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004358:	7bfb      	ldrb	r3, [r7, #15]
}
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b084      	sub	sp, #16
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800436a:	2300      	movs	r3, #0
 800436c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800437c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f003 0320 	and.w	r3, r3, #32
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10a      	bne.n	80043a2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7ff ff8b 	bl	80042a8 <HAL_RTC_WaitForSynchro>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d004      	beq.n	80043a2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2204      	movs	r2, #4
 800439c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80043a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e07b      	b.n	80044b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d108      	bne.n	80043d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043ce:	d009      	beq.n	80043e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	61da      	str	r2, [r3, #28]
 80043d6:	e005      	b.n	80043e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d106      	bne.n	8004404 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7fd ff76 	bl	80022f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2202      	movs	r2, #2
 8004408:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800441a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800442c:	431a      	orrs	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004436:	431a      	orrs	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	431a      	orrs	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004454:	431a      	orrs	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800445e:	431a      	orrs	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004468:	ea42 0103 	orr.w	r1, r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004470:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	0c1b      	lsrs	r3, r3, #16
 8004482:	f003 0104 	and.w	r1, r3, #4
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448a:	f003 0210 	and.w	r2, r3, #16
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	69da      	ldr	r2, [r3, #28]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b088      	sub	sp, #32
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	60f8      	str	r0, [r7, #12]
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	603b      	str	r3, [r7, #0]
 80044ca:	4613      	mov	r3, r2
 80044cc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044ce:	f7fe f93f 	bl	8002750 <HAL_GetTick>
 80044d2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80044d4:	88fb      	ldrh	r3, [r7, #6]
 80044d6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d001      	beq.n	80044e8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80044e4:	2302      	movs	r3, #2
 80044e6:	e12a      	b.n	800473e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d002      	beq.n	80044f4 <HAL_SPI_Transmit+0x36>
 80044ee:	88fb      	ldrh	r3, [r7, #6]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e122      	b.n	800473e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d101      	bne.n	8004506 <HAL_SPI_Transmit+0x48>
 8004502:	2302      	movs	r3, #2
 8004504:	e11b      	b.n	800473e <HAL_SPI_Transmit+0x280>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2203      	movs	r2, #3
 8004512:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	88fa      	ldrh	r2, [r7, #6]
 8004526:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	88fa      	ldrh	r2, [r7, #6]
 800452c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004554:	d10f      	bne.n	8004576 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004564:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004574:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004580:	2b40      	cmp	r3, #64	@ 0x40
 8004582:	d007      	beq.n	8004594 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004592:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800459c:	d152      	bne.n	8004644 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d002      	beq.n	80045ac <HAL_SPI_Transmit+0xee>
 80045a6:	8b7b      	ldrh	r3, [r7, #26]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d145      	bne.n	8004638 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b0:	881a      	ldrh	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045bc:	1c9a      	adds	r2, r3, #2
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	3b01      	subs	r3, #1
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045d0:	e032      	b.n	8004638 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d112      	bne.n	8004606 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e4:	881a      	ldrh	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f0:	1c9a      	adds	r2, r3, #2
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	3b01      	subs	r3, #1
 80045fe:	b29a      	uxth	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004604:	e018      	b.n	8004638 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004606:	f7fe f8a3 	bl	8002750 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d803      	bhi.n	800461e <HAL_SPI_Transmit+0x160>
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461c:	d102      	bne.n	8004624 <HAL_SPI_Transmit+0x166>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d109      	bne.n	8004638 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e082      	b.n	800473e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800463c:	b29b      	uxth	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1c7      	bne.n	80045d2 <HAL_SPI_Transmit+0x114>
 8004642:	e053      	b.n	80046ec <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <HAL_SPI_Transmit+0x194>
 800464c:	8b7b      	ldrh	r3, [r7, #26]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d147      	bne.n	80046e2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	330c      	adds	r3, #12
 800465c:	7812      	ldrb	r2, [r2, #0]
 800465e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004664:	1c5a      	adds	r2, r3, #1
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800466e:	b29b      	uxth	r3, r3
 8004670:	3b01      	subs	r3, #1
 8004672:	b29a      	uxth	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004678:	e033      	b.n	80046e2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b02      	cmp	r3, #2
 8004686:	d113      	bne.n	80046b0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	330c      	adds	r3, #12
 8004692:	7812      	ldrb	r2, [r2, #0]
 8004694:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800469a:	1c5a      	adds	r2, r3, #1
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	3b01      	subs	r3, #1
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	86da      	strh	r2, [r3, #54]	@ 0x36
 80046ae:	e018      	b.n	80046e2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046b0:	f7fe f84e 	bl	8002750 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d803      	bhi.n	80046c8 <HAL_SPI_Transmit+0x20a>
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c6:	d102      	bne.n	80046ce <HAL_SPI_Transmit+0x210>
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d109      	bne.n	80046e2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e02d      	b.n	800473e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1c6      	bne.n	800467a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046ec:	69fa      	ldr	r2, [r7, #28]
 80046ee:	6839      	ldr	r1, [r7, #0]
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 f9f9 	bl	8004ae8 <SPI_EndRxTxTransaction>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d002      	beq.n	8004702 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2220      	movs	r2, #32
 8004700:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10a      	bne.n	8004720 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800470a:	2300      	movs	r3, #0
 800470c:	617b      	str	r3, [r7, #20]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	617b      	str	r3, [r7, #20]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	617b      	str	r3, [r7, #20]
 800471e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e000      	b.n	800473e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800473c:	2300      	movs	r3, #0
  }
}
 800473e:	4618      	mov	r0, r3
 8004740:	3720      	adds	r7, #32
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
	...

08004748 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	4613      	mov	r3, r2
 8004754:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b01      	cmp	r3, #1
 8004760:	d001      	beq.n	8004766 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8004762:	2302      	movs	r3, #2
 8004764:	e097      	b.n	8004896 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <HAL_SPI_Transmit_DMA+0x2a>
 800476c:	88fb      	ldrh	r3, [r7, #6]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e08f      	b.n	8004896 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800477c:	2b01      	cmp	r3, #1
 800477e:	d101      	bne.n	8004784 <HAL_SPI_Transmit_DMA+0x3c>
 8004780:	2302      	movs	r3, #2
 8004782:	e088      	b.n	8004896 <HAL_SPI_Transmit_DMA+0x14e>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2203      	movs	r2, #3
 8004790:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	88fa      	ldrh	r2, [r7, #6]
 80047a4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	88fa      	ldrh	r2, [r7, #6]
 80047aa:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047d2:	d10f      	bne.n	80047f4 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047f8:	4a29      	ldr	r2, [pc, #164]	@ (80048a0 <HAL_SPI_Transmit_DMA+0x158>)
 80047fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004800:	4a28      	ldr	r2, [pc, #160]	@ (80048a4 <HAL_SPI_Transmit_DMA+0x15c>)
 8004802:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004808:	4a27      	ldr	r2, [pc, #156]	@ (80048a8 <HAL_SPI_Transmit_DMA+0x160>)
 800480a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004810:	2200      	movs	r2, #0
 8004812:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800481c:	4619      	mov	r1, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	330c      	adds	r3, #12
 8004824:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800482a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800482c:	f7fe f980 	bl	8002b30 <HAL_DMA_Start_IT>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00b      	beq.n	800484e <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800483a:	f043 0210 	orr.w	r2, r3, #16
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e023      	b.n	8004896 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004858:	2b40      	cmp	r3, #64	@ 0x40
 800485a:	d007      	beq.n	800486c <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800486a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685a      	ldr	r2, [r3, #4]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 0220 	orr.w	r2, r2, #32
 8004882:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685a      	ldr	r2, [r3, #4]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f042 0202 	orr.w	r2, r2, #2
 8004892:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	0800497d 	.word	0x0800497d
 80048a4:	080048d5 	.word	0x080048d5
 80048a8:	08004999 	.word	0x08004999

080048ac <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048e2:	f7fd ff35 	bl	8002750 <HAL_GetTick>
 80048e6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048f6:	d03b      	beq.n	8004970 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0220 	bic.w	r2, r2, #32
 8004906:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0202 	bic.w	r2, r2, #2
 8004916:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	2164      	movs	r1, #100	@ 0x64
 800491c:	6978      	ldr	r0, [r7, #20]
 800491e:	f000 f8e3 	bl	8004ae8 <SPI_EndRxTxTransaction>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d005      	beq.n	8004934 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800492c:	f043 0220 	orr.w	r2, r3, #32
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10a      	bne.n	8004952 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800493c:	2300      	movs	r3, #0
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	2200      	movs	r2, #0
 8004956:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004964:	2b00      	cmp	r3, #0
 8004966:	d003      	beq.n	8004970 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004968:	6978      	ldr	r0, [r7, #20]
 800496a:	f7ff ffa9 	bl	80048c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800496e:	e002      	b.n	8004976 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004970:	6978      	ldr	r0, [r7, #20]
 8004972:	f7fb fee5 	bl	8000740 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004976:	3718      	adds	r7, #24
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004988:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f7ff ff8e 	bl	80048ac <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004990:	bf00      	nop
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049a4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f022 0203 	bic.w	r2, r2, #3
 80049b4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ba:	f043 0210 	orr.w	r2, r3, #16
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f7ff ff78 	bl	80048c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80049d0:	bf00      	nop
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b088      	sub	sp, #32
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	603b      	str	r3, [r7, #0]
 80049e4:	4613      	mov	r3, r2
 80049e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80049e8:	f7fd feb2 	bl	8002750 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f0:	1a9b      	subs	r3, r3, r2
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	4413      	add	r3, r2
 80049f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049f8:	f7fd feaa 	bl	8002750 <HAL_GetTick>
 80049fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049fe:	4b39      	ldr	r3, [pc, #228]	@ (8004ae4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	015b      	lsls	r3, r3, #5
 8004a04:	0d1b      	lsrs	r3, r3, #20
 8004a06:	69fa      	ldr	r2, [r7, #28]
 8004a08:	fb02 f303 	mul.w	r3, r2, r3
 8004a0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a0e:	e055      	b.n	8004abc <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a16:	d051      	beq.n	8004abc <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a18:	f7fd fe9a 	bl	8002750 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	69fa      	ldr	r2, [r7, #28]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d902      	bls.n	8004a2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d13d      	bne.n	8004aaa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004a3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a46:	d111      	bne.n	8004a6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a50:	d004      	beq.n	8004a5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a5a:	d107      	bne.n	8004a6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a74:	d10f      	bne.n	8004a96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e018      	b.n	8004adc <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d102      	bne.n	8004ab6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	61fb      	str	r3, [r7, #28]
 8004ab4:	e002      	b.n	8004abc <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689a      	ldr	r2, [r3, #8]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	bf0c      	ite	eq
 8004acc:	2301      	moveq	r3, #1
 8004ace:	2300      	movne	r3, #0
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	79fb      	ldrb	r3, [r7, #7]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d19a      	bne.n	8004a10 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3720      	adds	r7, #32
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	20000018 	.word	0x20000018

08004ae8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b088      	sub	sp, #32
 8004aec:	af02      	add	r7, sp, #8
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	9300      	str	r3, [sp, #0]
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	2201      	movs	r2, #1
 8004afc:	2102      	movs	r1, #2
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f7ff ff6a 	bl	80049d8 <SPI_WaitFlagStateUntilTimeout>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d007      	beq.n	8004b1a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b0e:	f043 0220 	orr.w	r2, r3, #32
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e032      	b.n	8004b80 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8004b88 <SPI_EndRxTxTransaction+0xa0>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a1b      	ldr	r2, [pc, #108]	@ (8004b8c <SPI_EndRxTxTransaction+0xa4>)
 8004b20:	fba2 2303 	umull	r2, r3, r2, r3
 8004b24:	0d5b      	lsrs	r3, r3, #21
 8004b26:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004b2a:	fb02 f303 	mul.w	r3, r2, r3
 8004b2e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b38:	d112      	bne.n	8004b60 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2200      	movs	r2, #0
 8004b42:	2180      	movs	r1, #128	@ 0x80
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f7ff ff47 	bl	80049d8 <SPI_WaitFlagStateUntilTimeout>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d016      	beq.n	8004b7e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b54:	f043 0220 	orr.w	r2, r3, #32
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e00f      	b.n	8004b80 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00a      	beq.n	8004b7c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b76:	2b80      	cmp	r3, #128	@ 0x80
 8004b78:	d0f2      	beq.n	8004b60 <SPI_EndRxTxTransaction+0x78>
 8004b7a:	e000      	b.n	8004b7e <SPI_EndRxTxTransaction+0x96>
        break;
 8004b7c:	bf00      	nop
  }

  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3718      	adds	r7, #24
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	20000018 	.word	0x20000018
 8004b8c:	165e9f81 	.word	0x165e9f81

08004b90 <srand>:
 8004b90:	b538      	push	{r3, r4, r5, lr}
 8004b92:	4b10      	ldr	r3, [pc, #64]	@ (8004bd4 <srand+0x44>)
 8004b94:	681d      	ldr	r5, [r3, #0]
 8004b96:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004b98:	4604      	mov	r4, r0
 8004b9a:	b9b3      	cbnz	r3, 8004bca <srand+0x3a>
 8004b9c:	2018      	movs	r0, #24
 8004b9e:	f000 fa9d 	bl	80050dc <malloc>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	6328      	str	r0, [r5, #48]	@ 0x30
 8004ba6:	b920      	cbnz	r0, 8004bb2 <srand+0x22>
 8004ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8004bd8 <srand+0x48>)
 8004baa:	480c      	ldr	r0, [pc, #48]	@ (8004bdc <srand+0x4c>)
 8004bac:	2146      	movs	r1, #70	@ 0x46
 8004bae:	f000 fa2d 	bl	800500c <__assert_func>
 8004bb2:	490b      	ldr	r1, [pc, #44]	@ (8004be0 <srand+0x50>)
 8004bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8004be4 <srand+0x54>)
 8004bb6:	e9c0 1300 	strd	r1, r3, [r0]
 8004bba:	4b0b      	ldr	r3, [pc, #44]	@ (8004be8 <srand+0x58>)
 8004bbc:	6083      	str	r3, [r0, #8]
 8004bbe:	230b      	movs	r3, #11
 8004bc0:	8183      	strh	r3, [r0, #12]
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	2001      	movs	r0, #1
 8004bc6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004bca:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004bcc:	2200      	movs	r2, #0
 8004bce:	611c      	str	r4, [r3, #16]
 8004bd0:	615a      	str	r2, [r3, #20]
 8004bd2:	bd38      	pop	{r3, r4, r5, pc}
 8004bd4:	20000030 	.word	0x20000030
 8004bd8:	08006fe8 	.word	0x08006fe8
 8004bdc:	08006fff 	.word	0x08006fff
 8004be0:	abcd330e 	.word	0xabcd330e
 8004be4:	e66d1234 	.word	0xe66d1234
 8004be8:	0005deec 	.word	0x0005deec

08004bec <rand>:
 8004bec:	4b16      	ldr	r3, [pc, #88]	@ (8004c48 <rand+0x5c>)
 8004bee:	b510      	push	{r4, lr}
 8004bf0:	681c      	ldr	r4, [r3, #0]
 8004bf2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004bf4:	b9b3      	cbnz	r3, 8004c24 <rand+0x38>
 8004bf6:	2018      	movs	r0, #24
 8004bf8:	f000 fa70 	bl	80050dc <malloc>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	6320      	str	r0, [r4, #48]	@ 0x30
 8004c00:	b920      	cbnz	r0, 8004c0c <rand+0x20>
 8004c02:	4b12      	ldr	r3, [pc, #72]	@ (8004c4c <rand+0x60>)
 8004c04:	4812      	ldr	r0, [pc, #72]	@ (8004c50 <rand+0x64>)
 8004c06:	2152      	movs	r1, #82	@ 0x52
 8004c08:	f000 fa00 	bl	800500c <__assert_func>
 8004c0c:	4911      	ldr	r1, [pc, #68]	@ (8004c54 <rand+0x68>)
 8004c0e:	4b12      	ldr	r3, [pc, #72]	@ (8004c58 <rand+0x6c>)
 8004c10:	e9c0 1300 	strd	r1, r3, [r0]
 8004c14:	4b11      	ldr	r3, [pc, #68]	@ (8004c5c <rand+0x70>)
 8004c16:	6083      	str	r3, [r0, #8]
 8004c18:	230b      	movs	r3, #11
 8004c1a:	8183      	strh	r3, [r0, #12]
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	2001      	movs	r0, #1
 8004c20:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004c24:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004c26:	480e      	ldr	r0, [pc, #56]	@ (8004c60 <rand+0x74>)
 8004c28:	690b      	ldr	r3, [r1, #16]
 8004c2a:	694c      	ldr	r4, [r1, #20]
 8004c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8004c64 <rand+0x78>)
 8004c2e:	4358      	muls	r0, r3
 8004c30:	fb02 0004 	mla	r0, r2, r4, r0
 8004c34:	fba3 3202 	umull	r3, r2, r3, r2
 8004c38:	3301      	adds	r3, #1
 8004c3a:	eb40 0002 	adc.w	r0, r0, r2
 8004c3e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004c42:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004c46:	bd10      	pop	{r4, pc}
 8004c48:	20000030 	.word	0x20000030
 8004c4c:	08006fe8 	.word	0x08006fe8
 8004c50:	08006fff 	.word	0x08006fff
 8004c54:	abcd330e 	.word	0xabcd330e
 8004c58:	e66d1234 	.word	0xe66d1234
 8004c5c:	0005deec 	.word	0x0005deec
 8004c60:	5851f42d 	.word	0x5851f42d
 8004c64:	4c957f2d 	.word	0x4c957f2d

08004c68 <std>:
 8004c68:	2300      	movs	r3, #0
 8004c6a:	b510      	push	{r4, lr}
 8004c6c:	4604      	mov	r4, r0
 8004c6e:	e9c0 3300 	strd	r3, r3, [r0]
 8004c72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c76:	6083      	str	r3, [r0, #8]
 8004c78:	8181      	strh	r1, [r0, #12]
 8004c7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8004c7c:	81c2      	strh	r2, [r0, #14]
 8004c7e:	6183      	str	r3, [r0, #24]
 8004c80:	4619      	mov	r1, r3
 8004c82:	2208      	movs	r2, #8
 8004c84:	305c      	adds	r0, #92	@ 0x5c
 8004c86:	f000 f916 	bl	8004eb6 <memset>
 8004c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004cc0 <std+0x58>)
 8004c8c:	6263      	str	r3, [r4, #36]	@ 0x24
 8004c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004cc4 <std+0x5c>)
 8004c90:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004c92:	4b0d      	ldr	r3, [pc, #52]	@ (8004cc8 <std+0x60>)
 8004c94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004c96:	4b0d      	ldr	r3, [pc, #52]	@ (8004ccc <std+0x64>)
 8004c98:	6323      	str	r3, [r4, #48]	@ 0x30
 8004c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004cd0 <std+0x68>)
 8004c9c:	6224      	str	r4, [r4, #32]
 8004c9e:	429c      	cmp	r4, r3
 8004ca0:	d006      	beq.n	8004cb0 <std+0x48>
 8004ca2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004ca6:	4294      	cmp	r4, r2
 8004ca8:	d002      	beq.n	8004cb0 <std+0x48>
 8004caa:	33d0      	adds	r3, #208	@ 0xd0
 8004cac:	429c      	cmp	r4, r3
 8004cae:	d105      	bne.n	8004cbc <std+0x54>
 8004cb0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cb8:	f000 b9a4 	b.w	8005004 <__retarget_lock_init_recursive>
 8004cbc:	bd10      	pop	{r4, pc}
 8004cbe:	bf00      	nop
 8004cc0:	08004e31 	.word	0x08004e31
 8004cc4:	08004e53 	.word	0x08004e53
 8004cc8:	08004e8b 	.word	0x08004e8b
 8004ccc:	08004eaf 	.word	0x08004eaf
 8004cd0:	200004e4 	.word	0x200004e4

08004cd4 <stdio_exit_handler>:
 8004cd4:	4a02      	ldr	r2, [pc, #8]	@ (8004ce0 <stdio_exit_handler+0xc>)
 8004cd6:	4903      	ldr	r1, [pc, #12]	@ (8004ce4 <stdio_exit_handler+0x10>)
 8004cd8:	4803      	ldr	r0, [pc, #12]	@ (8004ce8 <stdio_exit_handler+0x14>)
 8004cda:	f000 b869 	b.w	8004db0 <_fwalk_sglue>
 8004cde:	bf00      	nop
 8004ce0:	20000024 	.word	0x20000024
 8004ce4:	08005919 	.word	0x08005919
 8004ce8:	20000034 	.word	0x20000034

08004cec <cleanup_stdio>:
 8004cec:	6841      	ldr	r1, [r0, #4]
 8004cee:	4b0c      	ldr	r3, [pc, #48]	@ (8004d20 <cleanup_stdio+0x34>)
 8004cf0:	4299      	cmp	r1, r3
 8004cf2:	b510      	push	{r4, lr}
 8004cf4:	4604      	mov	r4, r0
 8004cf6:	d001      	beq.n	8004cfc <cleanup_stdio+0x10>
 8004cf8:	f000 fe0e 	bl	8005918 <_fflush_r>
 8004cfc:	68a1      	ldr	r1, [r4, #8]
 8004cfe:	4b09      	ldr	r3, [pc, #36]	@ (8004d24 <cleanup_stdio+0x38>)
 8004d00:	4299      	cmp	r1, r3
 8004d02:	d002      	beq.n	8004d0a <cleanup_stdio+0x1e>
 8004d04:	4620      	mov	r0, r4
 8004d06:	f000 fe07 	bl	8005918 <_fflush_r>
 8004d0a:	68e1      	ldr	r1, [r4, #12]
 8004d0c:	4b06      	ldr	r3, [pc, #24]	@ (8004d28 <cleanup_stdio+0x3c>)
 8004d0e:	4299      	cmp	r1, r3
 8004d10:	d004      	beq.n	8004d1c <cleanup_stdio+0x30>
 8004d12:	4620      	mov	r0, r4
 8004d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d18:	f000 bdfe 	b.w	8005918 <_fflush_r>
 8004d1c:	bd10      	pop	{r4, pc}
 8004d1e:	bf00      	nop
 8004d20:	200004e4 	.word	0x200004e4
 8004d24:	2000054c 	.word	0x2000054c
 8004d28:	200005b4 	.word	0x200005b4

08004d2c <global_stdio_init.part.0>:
 8004d2c:	b510      	push	{r4, lr}
 8004d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d5c <global_stdio_init.part.0+0x30>)
 8004d30:	4c0b      	ldr	r4, [pc, #44]	@ (8004d60 <global_stdio_init.part.0+0x34>)
 8004d32:	4a0c      	ldr	r2, [pc, #48]	@ (8004d64 <global_stdio_init.part.0+0x38>)
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	4620      	mov	r0, r4
 8004d38:	2200      	movs	r2, #0
 8004d3a:	2104      	movs	r1, #4
 8004d3c:	f7ff ff94 	bl	8004c68 <std>
 8004d40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004d44:	2201      	movs	r2, #1
 8004d46:	2109      	movs	r1, #9
 8004d48:	f7ff ff8e 	bl	8004c68 <std>
 8004d4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004d50:	2202      	movs	r2, #2
 8004d52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d56:	2112      	movs	r1, #18
 8004d58:	f7ff bf86 	b.w	8004c68 <std>
 8004d5c:	2000061c 	.word	0x2000061c
 8004d60:	200004e4 	.word	0x200004e4
 8004d64:	08004cd5 	.word	0x08004cd5

08004d68 <__sfp_lock_acquire>:
 8004d68:	4801      	ldr	r0, [pc, #4]	@ (8004d70 <__sfp_lock_acquire+0x8>)
 8004d6a:	f000 b94c 	b.w	8005006 <__retarget_lock_acquire_recursive>
 8004d6e:	bf00      	nop
 8004d70:	20000625 	.word	0x20000625

08004d74 <__sfp_lock_release>:
 8004d74:	4801      	ldr	r0, [pc, #4]	@ (8004d7c <__sfp_lock_release+0x8>)
 8004d76:	f000 b947 	b.w	8005008 <__retarget_lock_release_recursive>
 8004d7a:	bf00      	nop
 8004d7c:	20000625 	.word	0x20000625

08004d80 <__sinit>:
 8004d80:	b510      	push	{r4, lr}
 8004d82:	4604      	mov	r4, r0
 8004d84:	f7ff fff0 	bl	8004d68 <__sfp_lock_acquire>
 8004d88:	6a23      	ldr	r3, [r4, #32]
 8004d8a:	b11b      	cbz	r3, 8004d94 <__sinit+0x14>
 8004d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d90:	f7ff bff0 	b.w	8004d74 <__sfp_lock_release>
 8004d94:	4b04      	ldr	r3, [pc, #16]	@ (8004da8 <__sinit+0x28>)
 8004d96:	6223      	str	r3, [r4, #32]
 8004d98:	4b04      	ldr	r3, [pc, #16]	@ (8004dac <__sinit+0x2c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1f5      	bne.n	8004d8c <__sinit+0xc>
 8004da0:	f7ff ffc4 	bl	8004d2c <global_stdio_init.part.0>
 8004da4:	e7f2      	b.n	8004d8c <__sinit+0xc>
 8004da6:	bf00      	nop
 8004da8:	08004ced 	.word	0x08004ced
 8004dac:	2000061c 	.word	0x2000061c

08004db0 <_fwalk_sglue>:
 8004db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004db4:	4607      	mov	r7, r0
 8004db6:	4688      	mov	r8, r1
 8004db8:	4614      	mov	r4, r2
 8004dba:	2600      	movs	r6, #0
 8004dbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004dc0:	f1b9 0901 	subs.w	r9, r9, #1
 8004dc4:	d505      	bpl.n	8004dd2 <_fwalk_sglue+0x22>
 8004dc6:	6824      	ldr	r4, [r4, #0]
 8004dc8:	2c00      	cmp	r4, #0
 8004dca:	d1f7      	bne.n	8004dbc <_fwalk_sglue+0xc>
 8004dcc:	4630      	mov	r0, r6
 8004dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dd2:	89ab      	ldrh	r3, [r5, #12]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d907      	bls.n	8004de8 <_fwalk_sglue+0x38>
 8004dd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ddc:	3301      	adds	r3, #1
 8004dde:	d003      	beq.n	8004de8 <_fwalk_sglue+0x38>
 8004de0:	4629      	mov	r1, r5
 8004de2:	4638      	mov	r0, r7
 8004de4:	47c0      	blx	r8
 8004de6:	4306      	orrs	r6, r0
 8004de8:	3568      	adds	r5, #104	@ 0x68
 8004dea:	e7e9      	b.n	8004dc0 <_fwalk_sglue+0x10>

08004dec <siprintf>:
 8004dec:	b40e      	push	{r1, r2, r3}
 8004dee:	b510      	push	{r4, lr}
 8004df0:	b09d      	sub	sp, #116	@ 0x74
 8004df2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004df4:	9002      	str	r0, [sp, #8]
 8004df6:	9006      	str	r0, [sp, #24]
 8004df8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004dfc:	480a      	ldr	r0, [pc, #40]	@ (8004e28 <siprintf+0x3c>)
 8004dfe:	9107      	str	r1, [sp, #28]
 8004e00:	9104      	str	r1, [sp, #16]
 8004e02:	490a      	ldr	r1, [pc, #40]	@ (8004e2c <siprintf+0x40>)
 8004e04:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e08:	9105      	str	r1, [sp, #20]
 8004e0a:	2400      	movs	r4, #0
 8004e0c:	a902      	add	r1, sp, #8
 8004e0e:	6800      	ldr	r0, [r0, #0]
 8004e10:	9301      	str	r3, [sp, #4]
 8004e12:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004e14:	f000 fa74 	bl	8005300 <_svfiprintf_r>
 8004e18:	9b02      	ldr	r3, [sp, #8]
 8004e1a:	701c      	strb	r4, [r3, #0]
 8004e1c:	b01d      	add	sp, #116	@ 0x74
 8004e1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e22:	b003      	add	sp, #12
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	20000030 	.word	0x20000030
 8004e2c:	ffff0208 	.word	0xffff0208

08004e30 <__sread>:
 8004e30:	b510      	push	{r4, lr}
 8004e32:	460c      	mov	r4, r1
 8004e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e38:	f000 f896 	bl	8004f68 <_read_r>
 8004e3c:	2800      	cmp	r0, #0
 8004e3e:	bfab      	itete	ge
 8004e40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004e42:	89a3      	ldrhlt	r3, [r4, #12]
 8004e44:	181b      	addge	r3, r3, r0
 8004e46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004e4a:	bfac      	ite	ge
 8004e4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004e4e:	81a3      	strhlt	r3, [r4, #12]
 8004e50:	bd10      	pop	{r4, pc}

08004e52 <__swrite>:
 8004e52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e56:	461f      	mov	r7, r3
 8004e58:	898b      	ldrh	r3, [r1, #12]
 8004e5a:	05db      	lsls	r3, r3, #23
 8004e5c:	4605      	mov	r5, r0
 8004e5e:	460c      	mov	r4, r1
 8004e60:	4616      	mov	r6, r2
 8004e62:	d505      	bpl.n	8004e70 <__swrite+0x1e>
 8004e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e68:	2302      	movs	r3, #2
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f000 f86a 	bl	8004f44 <_lseek_r>
 8004e70:	89a3      	ldrh	r3, [r4, #12]
 8004e72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e7a:	81a3      	strh	r3, [r4, #12]
 8004e7c:	4632      	mov	r2, r6
 8004e7e:	463b      	mov	r3, r7
 8004e80:	4628      	mov	r0, r5
 8004e82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e86:	f000 b881 	b.w	8004f8c <_write_r>

08004e8a <__sseek>:
 8004e8a:	b510      	push	{r4, lr}
 8004e8c:	460c      	mov	r4, r1
 8004e8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e92:	f000 f857 	bl	8004f44 <_lseek_r>
 8004e96:	1c43      	adds	r3, r0, #1
 8004e98:	89a3      	ldrh	r3, [r4, #12]
 8004e9a:	bf15      	itete	ne
 8004e9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004e9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004ea2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004ea6:	81a3      	strheq	r3, [r4, #12]
 8004ea8:	bf18      	it	ne
 8004eaa:	81a3      	strhne	r3, [r4, #12]
 8004eac:	bd10      	pop	{r4, pc}

08004eae <__sclose>:
 8004eae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eb2:	f000 b825 	b.w	8004f00 <_close_r>

08004eb6 <memset>:
 8004eb6:	4402      	add	r2, r0
 8004eb8:	4603      	mov	r3, r0
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d100      	bne.n	8004ec0 <memset+0xa>
 8004ebe:	4770      	bx	lr
 8004ec0:	f803 1b01 	strb.w	r1, [r3], #1
 8004ec4:	e7f9      	b.n	8004eba <memset+0x4>
	...

08004ec8 <time>:
 8004ec8:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 8004eca:	4b0c      	ldr	r3, [pc, #48]	@ (8004efc <time+0x34>)
 8004ecc:	f04f 36ff 	mov.w	r6, #4294967295
 8004ed0:	f04f 37ff 	mov.w	r7, #4294967295
 8004ed4:	4669      	mov	r1, sp
 8004ed6:	4604      	mov	r4, r0
 8004ed8:	2200      	movs	r2, #0
 8004eda:	6818      	ldr	r0, [r3, #0]
 8004edc:	e9cd 6700 	strd	r6, r7, [sp]
 8004ee0:	f000 f81e 	bl	8004f20 <_gettimeofday_r>
 8004ee4:	2800      	cmp	r0, #0
 8004ee6:	bfb8      	it	lt
 8004ee8:	e9cd 6700 	strdlt	r6, r7, [sp]
 8004eec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ef0:	b10c      	cbz	r4, 8004ef6 <time+0x2e>
 8004ef2:	e9c4 0100 	strd	r0, r1, [r4]
 8004ef6:	b004      	add	sp, #16
 8004ef8:	bdd0      	pop	{r4, r6, r7, pc}
 8004efa:	bf00      	nop
 8004efc:	20000030 	.word	0x20000030

08004f00 <_close_r>:
 8004f00:	b538      	push	{r3, r4, r5, lr}
 8004f02:	4d06      	ldr	r5, [pc, #24]	@ (8004f1c <_close_r+0x1c>)
 8004f04:	2300      	movs	r3, #0
 8004f06:	4604      	mov	r4, r0
 8004f08:	4608      	mov	r0, r1
 8004f0a:	602b      	str	r3, [r5, #0]
 8004f0c:	f7fd fb14 	bl	8002538 <_close>
 8004f10:	1c43      	adds	r3, r0, #1
 8004f12:	d102      	bne.n	8004f1a <_close_r+0x1a>
 8004f14:	682b      	ldr	r3, [r5, #0]
 8004f16:	b103      	cbz	r3, 8004f1a <_close_r+0x1a>
 8004f18:	6023      	str	r3, [r4, #0]
 8004f1a:	bd38      	pop	{r3, r4, r5, pc}
 8004f1c:	20000620 	.word	0x20000620

08004f20 <_gettimeofday_r>:
 8004f20:	b538      	push	{r3, r4, r5, lr}
 8004f22:	4d07      	ldr	r5, [pc, #28]	@ (8004f40 <_gettimeofday_r+0x20>)
 8004f24:	2300      	movs	r3, #0
 8004f26:	4604      	mov	r4, r0
 8004f28:	4608      	mov	r0, r1
 8004f2a:	4611      	mov	r1, r2
 8004f2c:	602b      	str	r3, [r5, #0]
 8004f2e:	f001 f83f 	bl	8005fb0 <_gettimeofday>
 8004f32:	1c43      	adds	r3, r0, #1
 8004f34:	d102      	bne.n	8004f3c <_gettimeofday_r+0x1c>
 8004f36:	682b      	ldr	r3, [r5, #0]
 8004f38:	b103      	cbz	r3, 8004f3c <_gettimeofday_r+0x1c>
 8004f3a:	6023      	str	r3, [r4, #0]
 8004f3c:	bd38      	pop	{r3, r4, r5, pc}
 8004f3e:	bf00      	nop
 8004f40:	20000620 	.word	0x20000620

08004f44 <_lseek_r>:
 8004f44:	b538      	push	{r3, r4, r5, lr}
 8004f46:	4d07      	ldr	r5, [pc, #28]	@ (8004f64 <_lseek_r+0x20>)
 8004f48:	4604      	mov	r4, r0
 8004f4a:	4608      	mov	r0, r1
 8004f4c:	4611      	mov	r1, r2
 8004f4e:	2200      	movs	r2, #0
 8004f50:	602a      	str	r2, [r5, #0]
 8004f52:	461a      	mov	r2, r3
 8004f54:	f7fd fb17 	bl	8002586 <_lseek>
 8004f58:	1c43      	adds	r3, r0, #1
 8004f5a:	d102      	bne.n	8004f62 <_lseek_r+0x1e>
 8004f5c:	682b      	ldr	r3, [r5, #0]
 8004f5e:	b103      	cbz	r3, 8004f62 <_lseek_r+0x1e>
 8004f60:	6023      	str	r3, [r4, #0]
 8004f62:	bd38      	pop	{r3, r4, r5, pc}
 8004f64:	20000620 	.word	0x20000620

08004f68 <_read_r>:
 8004f68:	b538      	push	{r3, r4, r5, lr}
 8004f6a:	4d07      	ldr	r5, [pc, #28]	@ (8004f88 <_read_r+0x20>)
 8004f6c:	4604      	mov	r4, r0
 8004f6e:	4608      	mov	r0, r1
 8004f70:	4611      	mov	r1, r2
 8004f72:	2200      	movs	r2, #0
 8004f74:	602a      	str	r2, [r5, #0]
 8004f76:	461a      	mov	r2, r3
 8004f78:	f7fd faa5 	bl	80024c6 <_read>
 8004f7c:	1c43      	adds	r3, r0, #1
 8004f7e:	d102      	bne.n	8004f86 <_read_r+0x1e>
 8004f80:	682b      	ldr	r3, [r5, #0]
 8004f82:	b103      	cbz	r3, 8004f86 <_read_r+0x1e>
 8004f84:	6023      	str	r3, [r4, #0]
 8004f86:	bd38      	pop	{r3, r4, r5, pc}
 8004f88:	20000620 	.word	0x20000620

08004f8c <_write_r>:
 8004f8c:	b538      	push	{r3, r4, r5, lr}
 8004f8e:	4d07      	ldr	r5, [pc, #28]	@ (8004fac <_write_r+0x20>)
 8004f90:	4604      	mov	r4, r0
 8004f92:	4608      	mov	r0, r1
 8004f94:	4611      	mov	r1, r2
 8004f96:	2200      	movs	r2, #0
 8004f98:	602a      	str	r2, [r5, #0]
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	f7fd fab0 	bl	8002500 <_write>
 8004fa0:	1c43      	adds	r3, r0, #1
 8004fa2:	d102      	bne.n	8004faa <_write_r+0x1e>
 8004fa4:	682b      	ldr	r3, [r5, #0]
 8004fa6:	b103      	cbz	r3, 8004faa <_write_r+0x1e>
 8004fa8:	6023      	str	r3, [r4, #0]
 8004faa:	bd38      	pop	{r3, r4, r5, pc}
 8004fac:	20000620 	.word	0x20000620

08004fb0 <__errno>:
 8004fb0:	4b01      	ldr	r3, [pc, #4]	@ (8004fb8 <__errno+0x8>)
 8004fb2:	6818      	ldr	r0, [r3, #0]
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	20000030 	.word	0x20000030

08004fbc <__libc_init_array>:
 8004fbc:	b570      	push	{r4, r5, r6, lr}
 8004fbe:	4d0d      	ldr	r5, [pc, #52]	@ (8004ff4 <__libc_init_array+0x38>)
 8004fc0:	4c0d      	ldr	r4, [pc, #52]	@ (8004ff8 <__libc_init_array+0x3c>)
 8004fc2:	1b64      	subs	r4, r4, r5
 8004fc4:	10a4      	asrs	r4, r4, #2
 8004fc6:	2600      	movs	r6, #0
 8004fc8:	42a6      	cmp	r6, r4
 8004fca:	d109      	bne.n	8004fe0 <__libc_init_array+0x24>
 8004fcc:	4d0b      	ldr	r5, [pc, #44]	@ (8004ffc <__libc_init_array+0x40>)
 8004fce:	4c0c      	ldr	r4, [pc, #48]	@ (8005000 <__libc_init_array+0x44>)
 8004fd0:	f000 fff6 	bl	8005fc0 <_init>
 8004fd4:	1b64      	subs	r4, r4, r5
 8004fd6:	10a4      	asrs	r4, r4, #2
 8004fd8:	2600      	movs	r6, #0
 8004fda:	42a6      	cmp	r6, r4
 8004fdc:	d105      	bne.n	8004fea <__libc_init_array+0x2e>
 8004fde:	bd70      	pop	{r4, r5, r6, pc}
 8004fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fe4:	4798      	blx	r3
 8004fe6:	3601      	adds	r6, #1
 8004fe8:	e7ee      	b.n	8004fc8 <__libc_init_array+0xc>
 8004fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fee:	4798      	blx	r3
 8004ff0:	3601      	adds	r6, #1
 8004ff2:	e7f2      	b.n	8004fda <__libc_init_array+0x1e>
 8004ff4:	080070d0 	.word	0x080070d0
 8004ff8:	080070d0 	.word	0x080070d0
 8004ffc:	080070d0 	.word	0x080070d0
 8005000:	080070d4 	.word	0x080070d4

08005004 <__retarget_lock_init_recursive>:
 8005004:	4770      	bx	lr

08005006 <__retarget_lock_acquire_recursive>:
 8005006:	4770      	bx	lr

08005008 <__retarget_lock_release_recursive>:
 8005008:	4770      	bx	lr
	...

0800500c <__assert_func>:
 800500c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800500e:	4614      	mov	r4, r2
 8005010:	461a      	mov	r2, r3
 8005012:	4b09      	ldr	r3, [pc, #36]	@ (8005038 <__assert_func+0x2c>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4605      	mov	r5, r0
 8005018:	68d8      	ldr	r0, [r3, #12]
 800501a:	b14c      	cbz	r4, 8005030 <__assert_func+0x24>
 800501c:	4b07      	ldr	r3, [pc, #28]	@ (800503c <__assert_func+0x30>)
 800501e:	9100      	str	r1, [sp, #0]
 8005020:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005024:	4906      	ldr	r1, [pc, #24]	@ (8005040 <__assert_func+0x34>)
 8005026:	462b      	mov	r3, r5
 8005028:	f000 fc9e 	bl	8005968 <fiprintf>
 800502c:	f000 fce6 	bl	80059fc <abort>
 8005030:	4b04      	ldr	r3, [pc, #16]	@ (8005044 <__assert_func+0x38>)
 8005032:	461c      	mov	r4, r3
 8005034:	e7f3      	b.n	800501e <__assert_func+0x12>
 8005036:	bf00      	nop
 8005038:	20000030 	.word	0x20000030
 800503c:	08007057 	.word	0x08007057
 8005040:	08007064 	.word	0x08007064
 8005044:	08007092 	.word	0x08007092

08005048 <_free_r>:
 8005048:	b538      	push	{r3, r4, r5, lr}
 800504a:	4605      	mov	r5, r0
 800504c:	2900      	cmp	r1, #0
 800504e:	d041      	beq.n	80050d4 <_free_r+0x8c>
 8005050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005054:	1f0c      	subs	r4, r1, #4
 8005056:	2b00      	cmp	r3, #0
 8005058:	bfb8      	it	lt
 800505a:	18e4      	addlt	r4, r4, r3
 800505c:	f000 f8e8 	bl	8005230 <__malloc_lock>
 8005060:	4a1d      	ldr	r2, [pc, #116]	@ (80050d8 <_free_r+0x90>)
 8005062:	6813      	ldr	r3, [r2, #0]
 8005064:	b933      	cbnz	r3, 8005074 <_free_r+0x2c>
 8005066:	6063      	str	r3, [r4, #4]
 8005068:	6014      	str	r4, [r2, #0]
 800506a:	4628      	mov	r0, r5
 800506c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005070:	f000 b8e4 	b.w	800523c <__malloc_unlock>
 8005074:	42a3      	cmp	r3, r4
 8005076:	d908      	bls.n	800508a <_free_r+0x42>
 8005078:	6820      	ldr	r0, [r4, #0]
 800507a:	1821      	adds	r1, r4, r0
 800507c:	428b      	cmp	r3, r1
 800507e:	bf01      	itttt	eq
 8005080:	6819      	ldreq	r1, [r3, #0]
 8005082:	685b      	ldreq	r3, [r3, #4]
 8005084:	1809      	addeq	r1, r1, r0
 8005086:	6021      	streq	r1, [r4, #0]
 8005088:	e7ed      	b.n	8005066 <_free_r+0x1e>
 800508a:	461a      	mov	r2, r3
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	b10b      	cbz	r3, 8005094 <_free_r+0x4c>
 8005090:	42a3      	cmp	r3, r4
 8005092:	d9fa      	bls.n	800508a <_free_r+0x42>
 8005094:	6811      	ldr	r1, [r2, #0]
 8005096:	1850      	adds	r0, r2, r1
 8005098:	42a0      	cmp	r0, r4
 800509a:	d10b      	bne.n	80050b4 <_free_r+0x6c>
 800509c:	6820      	ldr	r0, [r4, #0]
 800509e:	4401      	add	r1, r0
 80050a0:	1850      	adds	r0, r2, r1
 80050a2:	4283      	cmp	r3, r0
 80050a4:	6011      	str	r1, [r2, #0]
 80050a6:	d1e0      	bne.n	800506a <_free_r+0x22>
 80050a8:	6818      	ldr	r0, [r3, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	6053      	str	r3, [r2, #4]
 80050ae:	4408      	add	r0, r1
 80050b0:	6010      	str	r0, [r2, #0]
 80050b2:	e7da      	b.n	800506a <_free_r+0x22>
 80050b4:	d902      	bls.n	80050bc <_free_r+0x74>
 80050b6:	230c      	movs	r3, #12
 80050b8:	602b      	str	r3, [r5, #0]
 80050ba:	e7d6      	b.n	800506a <_free_r+0x22>
 80050bc:	6820      	ldr	r0, [r4, #0]
 80050be:	1821      	adds	r1, r4, r0
 80050c0:	428b      	cmp	r3, r1
 80050c2:	bf04      	itt	eq
 80050c4:	6819      	ldreq	r1, [r3, #0]
 80050c6:	685b      	ldreq	r3, [r3, #4]
 80050c8:	6063      	str	r3, [r4, #4]
 80050ca:	bf04      	itt	eq
 80050cc:	1809      	addeq	r1, r1, r0
 80050ce:	6021      	streq	r1, [r4, #0]
 80050d0:	6054      	str	r4, [r2, #4]
 80050d2:	e7ca      	b.n	800506a <_free_r+0x22>
 80050d4:	bd38      	pop	{r3, r4, r5, pc}
 80050d6:	bf00      	nop
 80050d8:	2000062c 	.word	0x2000062c

080050dc <malloc>:
 80050dc:	4b02      	ldr	r3, [pc, #8]	@ (80050e8 <malloc+0xc>)
 80050de:	4601      	mov	r1, r0
 80050e0:	6818      	ldr	r0, [r3, #0]
 80050e2:	f000 b825 	b.w	8005130 <_malloc_r>
 80050e6:	bf00      	nop
 80050e8:	20000030 	.word	0x20000030

080050ec <sbrk_aligned>:
 80050ec:	b570      	push	{r4, r5, r6, lr}
 80050ee:	4e0f      	ldr	r6, [pc, #60]	@ (800512c <sbrk_aligned+0x40>)
 80050f0:	460c      	mov	r4, r1
 80050f2:	6831      	ldr	r1, [r6, #0]
 80050f4:	4605      	mov	r5, r0
 80050f6:	b911      	cbnz	r1, 80050fe <sbrk_aligned+0x12>
 80050f8:	f000 fc62 	bl	80059c0 <_sbrk_r>
 80050fc:	6030      	str	r0, [r6, #0]
 80050fe:	4621      	mov	r1, r4
 8005100:	4628      	mov	r0, r5
 8005102:	f000 fc5d 	bl	80059c0 <_sbrk_r>
 8005106:	1c43      	adds	r3, r0, #1
 8005108:	d103      	bne.n	8005112 <sbrk_aligned+0x26>
 800510a:	f04f 34ff 	mov.w	r4, #4294967295
 800510e:	4620      	mov	r0, r4
 8005110:	bd70      	pop	{r4, r5, r6, pc}
 8005112:	1cc4      	adds	r4, r0, #3
 8005114:	f024 0403 	bic.w	r4, r4, #3
 8005118:	42a0      	cmp	r0, r4
 800511a:	d0f8      	beq.n	800510e <sbrk_aligned+0x22>
 800511c:	1a21      	subs	r1, r4, r0
 800511e:	4628      	mov	r0, r5
 8005120:	f000 fc4e 	bl	80059c0 <_sbrk_r>
 8005124:	3001      	adds	r0, #1
 8005126:	d1f2      	bne.n	800510e <sbrk_aligned+0x22>
 8005128:	e7ef      	b.n	800510a <sbrk_aligned+0x1e>
 800512a:	bf00      	nop
 800512c:	20000628 	.word	0x20000628

08005130 <_malloc_r>:
 8005130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005134:	1ccd      	adds	r5, r1, #3
 8005136:	f025 0503 	bic.w	r5, r5, #3
 800513a:	3508      	adds	r5, #8
 800513c:	2d0c      	cmp	r5, #12
 800513e:	bf38      	it	cc
 8005140:	250c      	movcc	r5, #12
 8005142:	2d00      	cmp	r5, #0
 8005144:	4606      	mov	r6, r0
 8005146:	db01      	blt.n	800514c <_malloc_r+0x1c>
 8005148:	42a9      	cmp	r1, r5
 800514a:	d904      	bls.n	8005156 <_malloc_r+0x26>
 800514c:	230c      	movs	r3, #12
 800514e:	6033      	str	r3, [r6, #0]
 8005150:	2000      	movs	r0, #0
 8005152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005156:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800522c <_malloc_r+0xfc>
 800515a:	f000 f869 	bl	8005230 <__malloc_lock>
 800515e:	f8d8 3000 	ldr.w	r3, [r8]
 8005162:	461c      	mov	r4, r3
 8005164:	bb44      	cbnz	r4, 80051b8 <_malloc_r+0x88>
 8005166:	4629      	mov	r1, r5
 8005168:	4630      	mov	r0, r6
 800516a:	f7ff ffbf 	bl	80050ec <sbrk_aligned>
 800516e:	1c43      	adds	r3, r0, #1
 8005170:	4604      	mov	r4, r0
 8005172:	d158      	bne.n	8005226 <_malloc_r+0xf6>
 8005174:	f8d8 4000 	ldr.w	r4, [r8]
 8005178:	4627      	mov	r7, r4
 800517a:	2f00      	cmp	r7, #0
 800517c:	d143      	bne.n	8005206 <_malloc_r+0xd6>
 800517e:	2c00      	cmp	r4, #0
 8005180:	d04b      	beq.n	800521a <_malloc_r+0xea>
 8005182:	6823      	ldr	r3, [r4, #0]
 8005184:	4639      	mov	r1, r7
 8005186:	4630      	mov	r0, r6
 8005188:	eb04 0903 	add.w	r9, r4, r3
 800518c:	f000 fc18 	bl	80059c0 <_sbrk_r>
 8005190:	4581      	cmp	r9, r0
 8005192:	d142      	bne.n	800521a <_malloc_r+0xea>
 8005194:	6821      	ldr	r1, [r4, #0]
 8005196:	1a6d      	subs	r5, r5, r1
 8005198:	4629      	mov	r1, r5
 800519a:	4630      	mov	r0, r6
 800519c:	f7ff ffa6 	bl	80050ec <sbrk_aligned>
 80051a0:	3001      	adds	r0, #1
 80051a2:	d03a      	beq.n	800521a <_malloc_r+0xea>
 80051a4:	6823      	ldr	r3, [r4, #0]
 80051a6:	442b      	add	r3, r5
 80051a8:	6023      	str	r3, [r4, #0]
 80051aa:	f8d8 3000 	ldr.w	r3, [r8]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	bb62      	cbnz	r2, 800520c <_malloc_r+0xdc>
 80051b2:	f8c8 7000 	str.w	r7, [r8]
 80051b6:	e00f      	b.n	80051d8 <_malloc_r+0xa8>
 80051b8:	6822      	ldr	r2, [r4, #0]
 80051ba:	1b52      	subs	r2, r2, r5
 80051bc:	d420      	bmi.n	8005200 <_malloc_r+0xd0>
 80051be:	2a0b      	cmp	r2, #11
 80051c0:	d917      	bls.n	80051f2 <_malloc_r+0xc2>
 80051c2:	1961      	adds	r1, r4, r5
 80051c4:	42a3      	cmp	r3, r4
 80051c6:	6025      	str	r5, [r4, #0]
 80051c8:	bf18      	it	ne
 80051ca:	6059      	strne	r1, [r3, #4]
 80051cc:	6863      	ldr	r3, [r4, #4]
 80051ce:	bf08      	it	eq
 80051d0:	f8c8 1000 	streq.w	r1, [r8]
 80051d4:	5162      	str	r2, [r4, r5]
 80051d6:	604b      	str	r3, [r1, #4]
 80051d8:	4630      	mov	r0, r6
 80051da:	f000 f82f 	bl	800523c <__malloc_unlock>
 80051de:	f104 000b 	add.w	r0, r4, #11
 80051e2:	1d23      	adds	r3, r4, #4
 80051e4:	f020 0007 	bic.w	r0, r0, #7
 80051e8:	1ac2      	subs	r2, r0, r3
 80051ea:	bf1c      	itt	ne
 80051ec:	1a1b      	subne	r3, r3, r0
 80051ee:	50a3      	strne	r3, [r4, r2]
 80051f0:	e7af      	b.n	8005152 <_malloc_r+0x22>
 80051f2:	6862      	ldr	r2, [r4, #4]
 80051f4:	42a3      	cmp	r3, r4
 80051f6:	bf0c      	ite	eq
 80051f8:	f8c8 2000 	streq.w	r2, [r8]
 80051fc:	605a      	strne	r2, [r3, #4]
 80051fe:	e7eb      	b.n	80051d8 <_malloc_r+0xa8>
 8005200:	4623      	mov	r3, r4
 8005202:	6864      	ldr	r4, [r4, #4]
 8005204:	e7ae      	b.n	8005164 <_malloc_r+0x34>
 8005206:	463c      	mov	r4, r7
 8005208:	687f      	ldr	r7, [r7, #4]
 800520a:	e7b6      	b.n	800517a <_malloc_r+0x4a>
 800520c:	461a      	mov	r2, r3
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	42a3      	cmp	r3, r4
 8005212:	d1fb      	bne.n	800520c <_malloc_r+0xdc>
 8005214:	2300      	movs	r3, #0
 8005216:	6053      	str	r3, [r2, #4]
 8005218:	e7de      	b.n	80051d8 <_malloc_r+0xa8>
 800521a:	230c      	movs	r3, #12
 800521c:	6033      	str	r3, [r6, #0]
 800521e:	4630      	mov	r0, r6
 8005220:	f000 f80c 	bl	800523c <__malloc_unlock>
 8005224:	e794      	b.n	8005150 <_malloc_r+0x20>
 8005226:	6005      	str	r5, [r0, #0]
 8005228:	e7d6      	b.n	80051d8 <_malloc_r+0xa8>
 800522a:	bf00      	nop
 800522c:	2000062c 	.word	0x2000062c

08005230 <__malloc_lock>:
 8005230:	4801      	ldr	r0, [pc, #4]	@ (8005238 <__malloc_lock+0x8>)
 8005232:	f7ff bee8 	b.w	8005006 <__retarget_lock_acquire_recursive>
 8005236:	bf00      	nop
 8005238:	20000624 	.word	0x20000624

0800523c <__malloc_unlock>:
 800523c:	4801      	ldr	r0, [pc, #4]	@ (8005244 <__malloc_unlock+0x8>)
 800523e:	f7ff bee3 	b.w	8005008 <__retarget_lock_release_recursive>
 8005242:	bf00      	nop
 8005244:	20000624 	.word	0x20000624

08005248 <__ssputs_r>:
 8005248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800524c:	688e      	ldr	r6, [r1, #8]
 800524e:	461f      	mov	r7, r3
 8005250:	42be      	cmp	r6, r7
 8005252:	680b      	ldr	r3, [r1, #0]
 8005254:	4682      	mov	sl, r0
 8005256:	460c      	mov	r4, r1
 8005258:	4690      	mov	r8, r2
 800525a:	d82d      	bhi.n	80052b8 <__ssputs_r+0x70>
 800525c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005260:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005264:	d026      	beq.n	80052b4 <__ssputs_r+0x6c>
 8005266:	6965      	ldr	r5, [r4, #20]
 8005268:	6909      	ldr	r1, [r1, #16]
 800526a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800526e:	eba3 0901 	sub.w	r9, r3, r1
 8005272:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005276:	1c7b      	adds	r3, r7, #1
 8005278:	444b      	add	r3, r9
 800527a:	106d      	asrs	r5, r5, #1
 800527c:	429d      	cmp	r5, r3
 800527e:	bf38      	it	cc
 8005280:	461d      	movcc	r5, r3
 8005282:	0553      	lsls	r3, r2, #21
 8005284:	d527      	bpl.n	80052d6 <__ssputs_r+0x8e>
 8005286:	4629      	mov	r1, r5
 8005288:	f7ff ff52 	bl	8005130 <_malloc_r>
 800528c:	4606      	mov	r6, r0
 800528e:	b360      	cbz	r0, 80052ea <__ssputs_r+0xa2>
 8005290:	6921      	ldr	r1, [r4, #16]
 8005292:	464a      	mov	r2, r9
 8005294:	f000 fba4 	bl	80059e0 <memcpy>
 8005298:	89a3      	ldrh	r3, [r4, #12]
 800529a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800529e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052a2:	81a3      	strh	r3, [r4, #12]
 80052a4:	6126      	str	r6, [r4, #16]
 80052a6:	6165      	str	r5, [r4, #20]
 80052a8:	444e      	add	r6, r9
 80052aa:	eba5 0509 	sub.w	r5, r5, r9
 80052ae:	6026      	str	r6, [r4, #0]
 80052b0:	60a5      	str	r5, [r4, #8]
 80052b2:	463e      	mov	r6, r7
 80052b4:	42be      	cmp	r6, r7
 80052b6:	d900      	bls.n	80052ba <__ssputs_r+0x72>
 80052b8:	463e      	mov	r6, r7
 80052ba:	6820      	ldr	r0, [r4, #0]
 80052bc:	4632      	mov	r2, r6
 80052be:	4641      	mov	r1, r8
 80052c0:	f000 fb64 	bl	800598c <memmove>
 80052c4:	68a3      	ldr	r3, [r4, #8]
 80052c6:	1b9b      	subs	r3, r3, r6
 80052c8:	60a3      	str	r3, [r4, #8]
 80052ca:	6823      	ldr	r3, [r4, #0]
 80052cc:	4433      	add	r3, r6
 80052ce:	6023      	str	r3, [r4, #0]
 80052d0:	2000      	movs	r0, #0
 80052d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052d6:	462a      	mov	r2, r5
 80052d8:	f000 fb97 	bl	8005a0a <_realloc_r>
 80052dc:	4606      	mov	r6, r0
 80052de:	2800      	cmp	r0, #0
 80052e0:	d1e0      	bne.n	80052a4 <__ssputs_r+0x5c>
 80052e2:	6921      	ldr	r1, [r4, #16]
 80052e4:	4650      	mov	r0, sl
 80052e6:	f7ff feaf 	bl	8005048 <_free_r>
 80052ea:	230c      	movs	r3, #12
 80052ec:	f8ca 3000 	str.w	r3, [sl]
 80052f0:	89a3      	ldrh	r3, [r4, #12]
 80052f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052f6:	81a3      	strh	r3, [r4, #12]
 80052f8:	f04f 30ff 	mov.w	r0, #4294967295
 80052fc:	e7e9      	b.n	80052d2 <__ssputs_r+0x8a>
	...

08005300 <_svfiprintf_r>:
 8005300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005304:	4698      	mov	r8, r3
 8005306:	898b      	ldrh	r3, [r1, #12]
 8005308:	061b      	lsls	r3, r3, #24
 800530a:	b09d      	sub	sp, #116	@ 0x74
 800530c:	4607      	mov	r7, r0
 800530e:	460d      	mov	r5, r1
 8005310:	4614      	mov	r4, r2
 8005312:	d510      	bpl.n	8005336 <_svfiprintf_r+0x36>
 8005314:	690b      	ldr	r3, [r1, #16]
 8005316:	b973      	cbnz	r3, 8005336 <_svfiprintf_r+0x36>
 8005318:	2140      	movs	r1, #64	@ 0x40
 800531a:	f7ff ff09 	bl	8005130 <_malloc_r>
 800531e:	6028      	str	r0, [r5, #0]
 8005320:	6128      	str	r0, [r5, #16]
 8005322:	b930      	cbnz	r0, 8005332 <_svfiprintf_r+0x32>
 8005324:	230c      	movs	r3, #12
 8005326:	603b      	str	r3, [r7, #0]
 8005328:	f04f 30ff 	mov.w	r0, #4294967295
 800532c:	b01d      	add	sp, #116	@ 0x74
 800532e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005332:	2340      	movs	r3, #64	@ 0x40
 8005334:	616b      	str	r3, [r5, #20]
 8005336:	2300      	movs	r3, #0
 8005338:	9309      	str	r3, [sp, #36]	@ 0x24
 800533a:	2320      	movs	r3, #32
 800533c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005340:	f8cd 800c 	str.w	r8, [sp, #12]
 8005344:	2330      	movs	r3, #48	@ 0x30
 8005346:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80054e4 <_svfiprintf_r+0x1e4>
 800534a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800534e:	f04f 0901 	mov.w	r9, #1
 8005352:	4623      	mov	r3, r4
 8005354:	469a      	mov	sl, r3
 8005356:	f813 2b01 	ldrb.w	r2, [r3], #1
 800535a:	b10a      	cbz	r2, 8005360 <_svfiprintf_r+0x60>
 800535c:	2a25      	cmp	r2, #37	@ 0x25
 800535e:	d1f9      	bne.n	8005354 <_svfiprintf_r+0x54>
 8005360:	ebba 0b04 	subs.w	fp, sl, r4
 8005364:	d00b      	beq.n	800537e <_svfiprintf_r+0x7e>
 8005366:	465b      	mov	r3, fp
 8005368:	4622      	mov	r2, r4
 800536a:	4629      	mov	r1, r5
 800536c:	4638      	mov	r0, r7
 800536e:	f7ff ff6b 	bl	8005248 <__ssputs_r>
 8005372:	3001      	adds	r0, #1
 8005374:	f000 80a7 	beq.w	80054c6 <_svfiprintf_r+0x1c6>
 8005378:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800537a:	445a      	add	r2, fp
 800537c:	9209      	str	r2, [sp, #36]	@ 0x24
 800537e:	f89a 3000 	ldrb.w	r3, [sl]
 8005382:	2b00      	cmp	r3, #0
 8005384:	f000 809f 	beq.w	80054c6 <_svfiprintf_r+0x1c6>
 8005388:	2300      	movs	r3, #0
 800538a:	f04f 32ff 	mov.w	r2, #4294967295
 800538e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005392:	f10a 0a01 	add.w	sl, sl, #1
 8005396:	9304      	str	r3, [sp, #16]
 8005398:	9307      	str	r3, [sp, #28]
 800539a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800539e:	931a      	str	r3, [sp, #104]	@ 0x68
 80053a0:	4654      	mov	r4, sl
 80053a2:	2205      	movs	r2, #5
 80053a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053a8:	484e      	ldr	r0, [pc, #312]	@ (80054e4 <_svfiprintf_r+0x1e4>)
 80053aa:	f7fa ff21 	bl	80001f0 <memchr>
 80053ae:	9a04      	ldr	r2, [sp, #16]
 80053b0:	b9d8      	cbnz	r0, 80053ea <_svfiprintf_r+0xea>
 80053b2:	06d0      	lsls	r0, r2, #27
 80053b4:	bf44      	itt	mi
 80053b6:	2320      	movmi	r3, #32
 80053b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053bc:	0711      	lsls	r1, r2, #28
 80053be:	bf44      	itt	mi
 80053c0:	232b      	movmi	r3, #43	@ 0x2b
 80053c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053c6:	f89a 3000 	ldrb.w	r3, [sl]
 80053ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80053cc:	d015      	beq.n	80053fa <_svfiprintf_r+0xfa>
 80053ce:	9a07      	ldr	r2, [sp, #28]
 80053d0:	4654      	mov	r4, sl
 80053d2:	2000      	movs	r0, #0
 80053d4:	f04f 0c0a 	mov.w	ip, #10
 80053d8:	4621      	mov	r1, r4
 80053da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053de:	3b30      	subs	r3, #48	@ 0x30
 80053e0:	2b09      	cmp	r3, #9
 80053e2:	d94b      	bls.n	800547c <_svfiprintf_r+0x17c>
 80053e4:	b1b0      	cbz	r0, 8005414 <_svfiprintf_r+0x114>
 80053e6:	9207      	str	r2, [sp, #28]
 80053e8:	e014      	b.n	8005414 <_svfiprintf_r+0x114>
 80053ea:	eba0 0308 	sub.w	r3, r0, r8
 80053ee:	fa09 f303 	lsl.w	r3, r9, r3
 80053f2:	4313      	orrs	r3, r2
 80053f4:	9304      	str	r3, [sp, #16]
 80053f6:	46a2      	mov	sl, r4
 80053f8:	e7d2      	b.n	80053a0 <_svfiprintf_r+0xa0>
 80053fa:	9b03      	ldr	r3, [sp, #12]
 80053fc:	1d19      	adds	r1, r3, #4
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	9103      	str	r1, [sp, #12]
 8005402:	2b00      	cmp	r3, #0
 8005404:	bfbb      	ittet	lt
 8005406:	425b      	neglt	r3, r3
 8005408:	f042 0202 	orrlt.w	r2, r2, #2
 800540c:	9307      	strge	r3, [sp, #28]
 800540e:	9307      	strlt	r3, [sp, #28]
 8005410:	bfb8      	it	lt
 8005412:	9204      	strlt	r2, [sp, #16]
 8005414:	7823      	ldrb	r3, [r4, #0]
 8005416:	2b2e      	cmp	r3, #46	@ 0x2e
 8005418:	d10a      	bne.n	8005430 <_svfiprintf_r+0x130>
 800541a:	7863      	ldrb	r3, [r4, #1]
 800541c:	2b2a      	cmp	r3, #42	@ 0x2a
 800541e:	d132      	bne.n	8005486 <_svfiprintf_r+0x186>
 8005420:	9b03      	ldr	r3, [sp, #12]
 8005422:	1d1a      	adds	r2, r3, #4
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	9203      	str	r2, [sp, #12]
 8005428:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800542c:	3402      	adds	r4, #2
 800542e:	9305      	str	r3, [sp, #20]
 8005430:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80054f4 <_svfiprintf_r+0x1f4>
 8005434:	7821      	ldrb	r1, [r4, #0]
 8005436:	2203      	movs	r2, #3
 8005438:	4650      	mov	r0, sl
 800543a:	f7fa fed9 	bl	80001f0 <memchr>
 800543e:	b138      	cbz	r0, 8005450 <_svfiprintf_r+0x150>
 8005440:	9b04      	ldr	r3, [sp, #16]
 8005442:	eba0 000a 	sub.w	r0, r0, sl
 8005446:	2240      	movs	r2, #64	@ 0x40
 8005448:	4082      	lsls	r2, r0
 800544a:	4313      	orrs	r3, r2
 800544c:	3401      	adds	r4, #1
 800544e:	9304      	str	r3, [sp, #16]
 8005450:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005454:	4824      	ldr	r0, [pc, #144]	@ (80054e8 <_svfiprintf_r+0x1e8>)
 8005456:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800545a:	2206      	movs	r2, #6
 800545c:	f7fa fec8 	bl	80001f0 <memchr>
 8005460:	2800      	cmp	r0, #0
 8005462:	d036      	beq.n	80054d2 <_svfiprintf_r+0x1d2>
 8005464:	4b21      	ldr	r3, [pc, #132]	@ (80054ec <_svfiprintf_r+0x1ec>)
 8005466:	bb1b      	cbnz	r3, 80054b0 <_svfiprintf_r+0x1b0>
 8005468:	9b03      	ldr	r3, [sp, #12]
 800546a:	3307      	adds	r3, #7
 800546c:	f023 0307 	bic.w	r3, r3, #7
 8005470:	3308      	adds	r3, #8
 8005472:	9303      	str	r3, [sp, #12]
 8005474:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005476:	4433      	add	r3, r6
 8005478:	9309      	str	r3, [sp, #36]	@ 0x24
 800547a:	e76a      	b.n	8005352 <_svfiprintf_r+0x52>
 800547c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005480:	460c      	mov	r4, r1
 8005482:	2001      	movs	r0, #1
 8005484:	e7a8      	b.n	80053d8 <_svfiprintf_r+0xd8>
 8005486:	2300      	movs	r3, #0
 8005488:	3401      	adds	r4, #1
 800548a:	9305      	str	r3, [sp, #20]
 800548c:	4619      	mov	r1, r3
 800548e:	f04f 0c0a 	mov.w	ip, #10
 8005492:	4620      	mov	r0, r4
 8005494:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005498:	3a30      	subs	r2, #48	@ 0x30
 800549a:	2a09      	cmp	r2, #9
 800549c:	d903      	bls.n	80054a6 <_svfiprintf_r+0x1a6>
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d0c6      	beq.n	8005430 <_svfiprintf_r+0x130>
 80054a2:	9105      	str	r1, [sp, #20]
 80054a4:	e7c4      	b.n	8005430 <_svfiprintf_r+0x130>
 80054a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80054aa:	4604      	mov	r4, r0
 80054ac:	2301      	movs	r3, #1
 80054ae:	e7f0      	b.n	8005492 <_svfiprintf_r+0x192>
 80054b0:	ab03      	add	r3, sp, #12
 80054b2:	9300      	str	r3, [sp, #0]
 80054b4:	462a      	mov	r2, r5
 80054b6:	4b0e      	ldr	r3, [pc, #56]	@ (80054f0 <_svfiprintf_r+0x1f0>)
 80054b8:	a904      	add	r1, sp, #16
 80054ba:	4638      	mov	r0, r7
 80054bc:	f3af 8000 	nop.w
 80054c0:	1c42      	adds	r2, r0, #1
 80054c2:	4606      	mov	r6, r0
 80054c4:	d1d6      	bne.n	8005474 <_svfiprintf_r+0x174>
 80054c6:	89ab      	ldrh	r3, [r5, #12]
 80054c8:	065b      	lsls	r3, r3, #25
 80054ca:	f53f af2d 	bmi.w	8005328 <_svfiprintf_r+0x28>
 80054ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80054d0:	e72c      	b.n	800532c <_svfiprintf_r+0x2c>
 80054d2:	ab03      	add	r3, sp, #12
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	462a      	mov	r2, r5
 80054d8:	4b05      	ldr	r3, [pc, #20]	@ (80054f0 <_svfiprintf_r+0x1f0>)
 80054da:	a904      	add	r1, sp, #16
 80054dc:	4638      	mov	r0, r7
 80054de:	f000 f879 	bl	80055d4 <_printf_i>
 80054e2:	e7ed      	b.n	80054c0 <_svfiprintf_r+0x1c0>
 80054e4:	08007093 	.word	0x08007093
 80054e8:	0800709d 	.word	0x0800709d
 80054ec:	00000000 	.word	0x00000000
 80054f0:	08005249 	.word	0x08005249
 80054f4:	08007099 	.word	0x08007099

080054f8 <_printf_common>:
 80054f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054fc:	4616      	mov	r6, r2
 80054fe:	4698      	mov	r8, r3
 8005500:	688a      	ldr	r2, [r1, #8]
 8005502:	690b      	ldr	r3, [r1, #16]
 8005504:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005508:	4293      	cmp	r3, r2
 800550a:	bfb8      	it	lt
 800550c:	4613      	movlt	r3, r2
 800550e:	6033      	str	r3, [r6, #0]
 8005510:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005514:	4607      	mov	r7, r0
 8005516:	460c      	mov	r4, r1
 8005518:	b10a      	cbz	r2, 800551e <_printf_common+0x26>
 800551a:	3301      	adds	r3, #1
 800551c:	6033      	str	r3, [r6, #0]
 800551e:	6823      	ldr	r3, [r4, #0]
 8005520:	0699      	lsls	r1, r3, #26
 8005522:	bf42      	ittt	mi
 8005524:	6833      	ldrmi	r3, [r6, #0]
 8005526:	3302      	addmi	r3, #2
 8005528:	6033      	strmi	r3, [r6, #0]
 800552a:	6825      	ldr	r5, [r4, #0]
 800552c:	f015 0506 	ands.w	r5, r5, #6
 8005530:	d106      	bne.n	8005540 <_printf_common+0x48>
 8005532:	f104 0a19 	add.w	sl, r4, #25
 8005536:	68e3      	ldr	r3, [r4, #12]
 8005538:	6832      	ldr	r2, [r6, #0]
 800553a:	1a9b      	subs	r3, r3, r2
 800553c:	42ab      	cmp	r3, r5
 800553e:	dc26      	bgt.n	800558e <_printf_common+0x96>
 8005540:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005544:	6822      	ldr	r2, [r4, #0]
 8005546:	3b00      	subs	r3, #0
 8005548:	bf18      	it	ne
 800554a:	2301      	movne	r3, #1
 800554c:	0692      	lsls	r2, r2, #26
 800554e:	d42b      	bmi.n	80055a8 <_printf_common+0xb0>
 8005550:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005554:	4641      	mov	r1, r8
 8005556:	4638      	mov	r0, r7
 8005558:	47c8      	blx	r9
 800555a:	3001      	adds	r0, #1
 800555c:	d01e      	beq.n	800559c <_printf_common+0xa4>
 800555e:	6823      	ldr	r3, [r4, #0]
 8005560:	6922      	ldr	r2, [r4, #16]
 8005562:	f003 0306 	and.w	r3, r3, #6
 8005566:	2b04      	cmp	r3, #4
 8005568:	bf02      	ittt	eq
 800556a:	68e5      	ldreq	r5, [r4, #12]
 800556c:	6833      	ldreq	r3, [r6, #0]
 800556e:	1aed      	subeq	r5, r5, r3
 8005570:	68a3      	ldr	r3, [r4, #8]
 8005572:	bf0c      	ite	eq
 8005574:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005578:	2500      	movne	r5, #0
 800557a:	4293      	cmp	r3, r2
 800557c:	bfc4      	itt	gt
 800557e:	1a9b      	subgt	r3, r3, r2
 8005580:	18ed      	addgt	r5, r5, r3
 8005582:	2600      	movs	r6, #0
 8005584:	341a      	adds	r4, #26
 8005586:	42b5      	cmp	r5, r6
 8005588:	d11a      	bne.n	80055c0 <_printf_common+0xc8>
 800558a:	2000      	movs	r0, #0
 800558c:	e008      	b.n	80055a0 <_printf_common+0xa8>
 800558e:	2301      	movs	r3, #1
 8005590:	4652      	mov	r2, sl
 8005592:	4641      	mov	r1, r8
 8005594:	4638      	mov	r0, r7
 8005596:	47c8      	blx	r9
 8005598:	3001      	adds	r0, #1
 800559a:	d103      	bne.n	80055a4 <_printf_common+0xac>
 800559c:	f04f 30ff 	mov.w	r0, #4294967295
 80055a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055a4:	3501      	adds	r5, #1
 80055a6:	e7c6      	b.n	8005536 <_printf_common+0x3e>
 80055a8:	18e1      	adds	r1, r4, r3
 80055aa:	1c5a      	adds	r2, r3, #1
 80055ac:	2030      	movs	r0, #48	@ 0x30
 80055ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80055b2:	4422      	add	r2, r4
 80055b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80055b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80055bc:	3302      	adds	r3, #2
 80055be:	e7c7      	b.n	8005550 <_printf_common+0x58>
 80055c0:	2301      	movs	r3, #1
 80055c2:	4622      	mov	r2, r4
 80055c4:	4641      	mov	r1, r8
 80055c6:	4638      	mov	r0, r7
 80055c8:	47c8      	blx	r9
 80055ca:	3001      	adds	r0, #1
 80055cc:	d0e6      	beq.n	800559c <_printf_common+0xa4>
 80055ce:	3601      	adds	r6, #1
 80055d0:	e7d9      	b.n	8005586 <_printf_common+0x8e>
	...

080055d4 <_printf_i>:
 80055d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055d8:	7e0f      	ldrb	r7, [r1, #24]
 80055da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80055dc:	2f78      	cmp	r7, #120	@ 0x78
 80055de:	4691      	mov	r9, r2
 80055e0:	4680      	mov	r8, r0
 80055e2:	460c      	mov	r4, r1
 80055e4:	469a      	mov	sl, r3
 80055e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80055ea:	d807      	bhi.n	80055fc <_printf_i+0x28>
 80055ec:	2f62      	cmp	r7, #98	@ 0x62
 80055ee:	d80a      	bhi.n	8005606 <_printf_i+0x32>
 80055f0:	2f00      	cmp	r7, #0
 80055f2:	f000 80d1 	beq.w	8005798 <_printf_i+0x1c4>
 80055f6:	2f58      	cmp	r7, #88	@ 0x58
 80055f8:	f000 80b8 	beq.w	800576c <_printf_i+0x198>
 80055fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005600:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005604:	e03a      	b.n	800567c <_printf_i+0xa8>
 8005606:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800560a:	2b15      	cmp	r3, #21
 800560c:	d8f6      	bhi.n	80055fc <_printf_i+0x28>
 800560e:	a101      	add	r1, pc, #4	@ (adr r1, 8005614 <_printf_i+0x40>)
 8005610:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005614:	0800566d 	.word	0x0800566d
 8005618:	08005681 	.word	0x08005681
 800561c:	080055fd 	.word	0x080055fd
 8005620:	080055fd 	.word	0x080055fd
 8005624:	080055fd 	.word	0x080055fd
 8005628:	080055fd 	.word	0x080055fd
 800562c:	08005681 	.word	0x08005681
 8005630:	080055fd 	.word	0x080055fd
 8005634:	080055fd 	.word	0x080055fd
 8005638:	080055fd 	.word	0x080055fd
 800563c:	080055fd 	.word	0x080055fd
 8005640:	0800577f 	.word	0x0800577f
 8005644:	080056ab 	.word	0x080056ab
 8005648:	08005739 	.word	0x08005739
 800564c:	080055fd 	.word	0x080055fd
 8005650:	080055fd 	.word	0x080055fd
 8005654:	080057a1 	.word	0x080057a1
 8005658:	080055fd 	.word	0x080055fd
 800565c:	080056ab 	.word	0x080056ab
 8005660:	080055fd 	.word	0x080055fd
 8005664:	080055fd 	.word	0x080055fd
 8005668:	08005741 	.word	0x08005741
 800566c:	6833      	ldr	r3, [r6, #0]
 800566e:	1d1a      	adds	r2, r3, #4
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	6032      	str	r2, [r6, #0]
 8005674:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005678:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800567c:	2301      	movs	r3, #1
 800567e:	e09c      	b.n	80057ba <_printf_i+0x1e6>
 8005680:	6833      	ldr	r3, [r6, #0]
 8005682:	6820      	ldr	r0, [r4, #0]
 8005684:	1d19      	adds	r1, r3, #4
 8005686:	6031      	str	r1, [r6, #0]
 8005688:	0606      	lsls	r6, r0, #24
 800568a:	d501      	bpl.n	8005690 <_printf_i+0xbc>
 800568c:	681d      	ldr	r5, [r3, #0]
 800568e:	e003      	b.n	8005698 <_printf_i+0xc4>
 8005690:	0645      	lsls	r5, r0, #25
 8005692:	d5fb      	bpl.n	800568c <_printf_i+0xb8>
 8005694:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005698:	2d00      	cmp	r5, #0
 800569a:	da03      	bge.n	80056a4 <_printf_i+0xd0>
 800569c:	232d      	movs	r3, #45	@ 0x2d
 800569e:	426d      	negs	r5, r5
 80056a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056a4:	4858      	ldr	r0, [pc, #352]	@ (8005808 <_printf_i+0x234>)
 80056a6:	230a      	movs	r3, #10
 80056a8:	e011      	b.n	80056ce <_printf_i+0xfa>
 80056aa:	6821      	ldr	r1, [r4, #0]
 80056ac:	6833      	ldr	r3, [r6, #0]
 80056ae:	0608      	lsls	r0, r1, #24
 80056b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80056b4:	d402      	bmi.n	80056bc <_printf_i+0xe8>
 80056b6:	0649      	lsls	r1, r1, #25
 80056b8:	bf48      	it	mi
 80056ba:	b2ad      	uxthmi	r5, r5
 80056bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80056be:	4852      	ldr	r0, [pc, #328]	@ (8005808 <_printf_i+0x234>)
 80056c0:	6033      	str	r3, [r6, #0]
 80056c2:	bf14      	ite	ne
 80056c4:	230a      	movne	r3, #10
 80056c6:	2308      	moveq	r3, #8
 80056c8:	2100      	movs	r1, #0
 80056ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80056ce:	6866      	ldr	r6, [r4, #4]
 80056d0:	60a6      	str	r6, [r4, #8]
 80056d2:	2e00      	cmp	r6, #0
 80056d4:	db05      	blt.n	80056e2 <_printf_i+0x10e>
 80056d6:	6821      	ldr	r1, [r4, #0]
 80056d8:	432e      	orrs	r6, r5
 80056da:	f021 0104 	bic.w	r1, r1, #4
 80056de:	6021      	str	r1, [r4, #0]
 80056e0:	d04b      	beq.n	800577a <_printf_i+0x1a6>
 80056e2:	4616      	mov	r6, r2
 80056e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80056e8:	fb03 5711 	mls	r7, r3, r1, r5
 80056ec:	5dc7      	ldrb	r7, [r0, r7]
 80056ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80056f2:	462f      	mov	r7, r5
 80056f4:	42bb      	cmp	r3, r7
 80056f6:	460d      	mov	r5, r1
 80056f8:	d9f4      	bls.n	80056e4 <_printf_i+0x110>
 80056fa:	2b08      	cmp	r3, #8
 80056fc:	d10b      	bne.n	8005716 <_printf_i+0x142>
 80056fe:	6823      	ldr	r3, [r4, #0]
 8005700:	07df      	lsls	r7, r3, #31
 8005702:	d508      	bpl.n	8005716 <_printf_i+0x142>
 8005704:	6923      	ldr	r3, [r4, #16]
 8005706:	6861      	ldr	r1, [r4, #4]
 8005708:	4299      	cmp	r1, r3
 800570a:	bfde      	ittt	le
 800570c:	2330      	movle	r3, #48	@ 0x30
 800570e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005712:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005716:	1b92      	subs	r2, r2, r6
 8005718:	6122      	str	r2, [r4, #16]
 800571a:	f8cd a000 	str.w	sl, [sp]
 800571e:	464b      	mov	r3, r9
 8005720:	aa03      	add	r2, sp, #12
 8005722:	4621      	mov	r1, r4
 8005724:	4640      	mov	r0, r8
 8005726:	f7ff fee7 	bl	80054f8 <_printf_common>
 800572a:	3001      	adds	r0, #1
 800572c:	d14a      	bne.n	80057c4 <_printf_i+0x1f0>
 800572e:	f04f 30ff 	mov.w	r0, #4294967295
 8005732:	b004      	add	sp, #16
 8005734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005738:	6823      	ldr	r3, [r4, #0]
 800573a:	f043 0320 	orr.w	r3, r3, #32
 800573e:	6023      	str	r3, [r4, #0]
 8005740:	4832      	ldr	r0, [pc, #200]	@ (800580c <_printf_i+0x238>)
 8005742:	2778      	movs	r7, #120	@ 0x78
 8005744:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005748:	6823      	ldr	r3, [r4, #0]
 800574a:	6831      	ldr	r1, [r6, #0]
 800574c:	061f      	lsls	r7, r3, #24
 800574e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005752:	d402      	bmi.n	800575a <_printf_i+0x186>
 8005754:	065f      	lsls	r7, r3, #25
 8005756:	bf48      	it	mi
 8005758:	b2ad      	uxthmi	r5, r5
 800575a:	6031      	str	r1, [r6, #0]
 800575c:	07d9      	lsls	r1, r3, #31
 800575e:	bf44      	itt	mi
 8005760:	f043 0320 	orrmi.w	r3, r3, #32
 8005764:	6023      	strmi	r3, [r4, #0]
 8005766:	b11d      	cbz	r5, 8005770 <_printf_i+0x19c>
 8005768:	2310      	movs	r3, #16
 800576a:	e7ad      	b.n	80056c8 <_printf_i+0xf4>
 800576c:	4826      	ldr	r0, [pc, #152]	@ (8005808 <_printf_i+0x234>)
 800576e:	e7e9      	b.n	8005744 <_printf_i+0x170>
 8005770:	6823      	ldr	r3, [r4, #0]
 8005772:	f023 0320 	bic.w	r3, r3, #32
 8005776:	6023      	str	r3, [r4, #0]
 8005778:	e7f6      	b.n	8005768 <_printf_i+0x194>
 800577a:	4616      	mov	r6, r2
 800577c:	e7bd      	b.n	80056fa <_printf_i+0x126>
 800577e:	6833      	ldr	r3, [r6, #0]
 8005780:	6825      	ldr	r5, [r4, #0]
 8005782:	6961      	ldr	r1, [r4, #20]
 8005784:	1d18      	adds	r0, r3, #4
 8005786:	6030      	str	r0, [r6, #0]
 8005788:	062e      	lsls	r6, r5, #24
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	d501      	bpl.n	8005792 <_printf_i+0x1be>
 800578e:	6019      	str	r1, [r3, #0]
 8005790:	e002      	b.n	8005798 <_printf_i+0x1c4>
 8005792:	0668      	lsls	r0, r5, #25
 8005794:	d5fb      	bpl.n	800578e <_printf_i+0x1ba>
 8005796:	8019      	strh	r1, [r3, #0]
 8005798:	2300      	movs	r3, #0
 800579a:	6123      	str	r3, [r4, #16]
 800579c:	4616      	mov	r6, r2
 800579e:	e7bc      	b.n	800571a <_printf_i+0x146>
 80057a0:	6833      	ldr	r3, [r6, #0]
 80057a2:	1d1a      	adds	r2, r3, #4
 80057a4:	6032      	str	r2, [r6, #0]
 80057a6:	681e      	ldr	r6, [r3, #0]
 80057a8:	6862      	ldr	r2, [r4, #4]
 80057aa:	2100      	movs	r1, #0
 80057ac:	4630      	mov	r0, r6
 80057ae:	f7fa fd1f 	bl	80001f0 <memchr>
 80057b2:	b108      	cbz	r0, 80057b8 <_printf_i+0x1e4>
 80057b4:	1b80      	subs	r0, r0, r6
 80057b6:	6060      	str	r0, [r4, #4]
 80057b8:	6863      	ldr	r3, [r4, #4]
 80057ba:	6123      	str	r3, [r4, #16]
 80057bc:	2300      	movs	r3, #0
 80057be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057c2:	e7aa      	b.n	800571a <_printf_i+0x146>
 80057c4:	6923      	ldr	r3, [r4, #16]
 80057c6:	4632      	mov	r2, r6
 80057c8:	4649      	mov	r1, r9
 80057ca:	4640      	mov	r0, r8
 80057cc:	47d0      	blx	sl
 80057ce:	3001      	adds	r0, #1
 80057d0:	d0ad      	beq.n	800572e <_printf_i+0x15a>
 80057d2:	6823      	ldr	r3, [r4, #0]
 80057d4:	079b      	lsls	r3, r3, #30
 80057d6:	d413      	bmi.n	8005800 <_printf_i+0x22c>
 80057d8:	68e0      	ldr	r0, [r4, #12]
 80057da:	9b03      	ldr	r3, [sp, #12]
 80057dc:	4298      	cmp	r0, r3
 80057de:	bfb8      	it	lt
 80057e0:	4618      	movlt	r0, r3
 80057e2:	e7a6      	b.n	8005732 <_printf_i+0x15e>
 80057e4:	2301      	movs	r3, #1
 80057e6:	4632      	mov	r2, r6
 80057e8:	4649      	mov	r1, r9
 80057ea:	4640      	mov	r0, r8
 80057ec:	47d0      	blx	sl
 80057ee:	3001      	adds	r0, #1
 80057f0:	d09d      	beq.n	800572e <_printf_i+0x15a>
 80057f2:	3501      	adds	r5, #1
 80057f4:	68e3      	ldr	r3, [r4, #12]
 80057f6:	9903      	ldr	r1, [sp, #12]
 80057f8:	1a5b      	subs	r3, r3, r1
 80057fa:	42ab      	cmp	r3, r5
 80057fc:	dcf2      	bgt.n	80057e4 <_printf_i+0x210>
 80057fe:	e7eb      	b.n	80057d8 <_printf_i+0x204>
 8005800:	2500      	movs	r5, #0
 8005802:	f104 0619 	add.w	r6, r4, #25
 8005806:	e7f5      	b.n	80057f4 <_printf_i+0x220>
 8005808:	080070a4 	.word	0x080070a4
 800580c:	080070b5 	.word	0x080070b5

08005810 <__sflush_r>:
 8005810:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005818:	0716      	lsls	r6, r2, #28
 800581a:	4605      	mov	r5, r0
 800581c:	460c      	mov	r4, r1
 800581e:	d454      	bmi.n	80058ca <__sflush_r+0xba>
 8005820:	684b      	ldr	r3, [r1, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	dc02      	bgt.n	800582c <__sflush_r+0x1c>
 8005826:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005828:	2b00      	cmp	r3, #0
 800582a:	dd48      	ble.n	80058be <__sflush_r+0xae>
 800582c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800582e:	2e00      	cmp	r6, #0
 8005830:	d045      	beq.n	80058be <__sflush_r+0xae>
 8005832:	2300      	movs	r3, #0
 8005834:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005838:	682f      	ldr	r7, [r5, #0]
 800583a:	6a21      	ldr	r1, [r4, #32]
 800583c:	602b      	str	r3, [r5, #0]
 800583e:	d030      	beq.n	80058a2 <__sflush_r+0x92>
 8005840:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005842:	89a3      	ldrh	r3, [r4, #12]
 8005844:	0759      	lsls	r1, r3, #29
 8005846:	d505      	bpl.n	8005854 <__sflush_r+0x44>
 8005848:	6863      	ldr	r3, [r4, #4]
 800584a:	1ad2      	subs	r2, r2, r3
 800584c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800584e:	b10b      	cbz	r3, 8005854 <__sflush_r+0x44>
 8005850:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005852:	1ad2      	subs	r2, r2, r3
 8005854:	2300      	movs	r3, #0
 8005856:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005858:	6a21      	ldr	r1, [r4, #32]
 800585a:	4628      	mov	r0, r5
 800585c:	47b0      	blx	r6
 800585e:	1c43      	adds	r3, r0, #1
 8005860:	89a3      	ldrh	r3, [r4, #12]
 8005862:	d106      	bne.n	8005872 <__sflush_r+0x62>
 8005864:	6829      	ldr	r1, [r5, #0]
 8005866:	291d      	cmp	r1, #29
 8005868:	d82b      	bhi.n	80058c2 <__sflush_r+0xb2>
 800586a:	4a2a      	ldr	r2, [pc, #168]	@ (8005914 <__sflush_r+0x104>)
 800586c:	40ca      	lsrs	r2, r1
 800586e:	07d6      	lsls	r6, r2, #31
 8005870:	d527      	bpl.n	80058c2 <__sflush_r+0xb2>
 8005872:	2200      	movs	r2, #0
 8005874:	6062      	str	r2, [r4, #4]
 8005876:	04d9      	lsls	r1, r3, #19
 8005878:	6922      	ldr	r2, [r4, #16]
 800587a:	6022      	str	r2, [r4, #0]
 800587c:	d504      	bpl.n	8005888 <__sflush_r+0x78>
 800587e:	1c42      	adds	r2, r0, #1
 8005880:	d101      	bne.n	8005886 <__sflush_r+0x76>
 8005882:	682b      	ldr	r3, [r5, #0]
 8005884:	b903      	cbnz	r3, 8005888 <__sflush_r+0x78>
 8005886:	6560      	str	r0, [r4, #84]	@ 0x54
 8005888:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800588a:	602f      	str	r7, [r5, #0]
 800588c:	b1b9      	cbz	r1, 80058be <__sflush_r+0xae>
 800588e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005892:	4299      	cmp	r1, r3
 8005894:	d002      	beq.n	800589c <__sflush_r+0x8c>
 8005896:	4628      	mov	r0, r5
 8005898:	f7ff fbd6 	bl	8005048 <_free_r>
 800589c:	2300      	movs	r3, #0
 800589e:	6363      	str	r3, [r4, #52]	@ 0x34
 80058a0:	e00d      	b.n	80058be <__sflush_r+0xae>
 80058a2:	2301      	movs	r3, #1
 80058a4:	4628      	mov	r0, r5
 80058a6:	47b0      	blx	r6
 80058a8:	4602      	mov	r2, r0
 80058aa:	1c50      	adds	r0, r2, #1
 80058ac:	d1c9      	bne.n	8005842 <__sflush_r+0x32>
 80058ae:	682b      	ldr	r3, [r5, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0c6      	beq.n	8005842 <__sflush_r+0x32>
 80058b4:	2b1d      	cmp	r3, #29
 80058b6:	d001      	beq.n	80058bc <__sflush_r+0xac>
 80058b8:	2b16      	cmp	r3, #22
 80058ba:	d11e      	bne.n	80058fa <__sflush_r+0xea>
 80058bc:	602f      	str	r7, [r5, #0]
 80058be:	2000      	movs	r0, #0
 80058c0:	e022      	b.n	8005908 <__sflush_r+0xf8>
 80058c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058c6:	b21b      	sxth	r3, r3
 80058c8:	e01b      	b.n	8005902 <__sflush_r+0xf2>
 80058ca:	690f      	ldr	r7, [r1, #16]
 80058cc:	2f00      	cmp	r7, #0
 80058ce:	d0f6      	beq.n	80058be <__sflush_r+0xae>
 80058d0:	0793      	lsls	r3, r2, #30
 80058d2:	680e      	ldr	r6, [r1, #0]
 80058d4:	bf08      	it	eq
 80058d6:	694b      	ldreq	r3, [r1, #20]
 80058d8:	600f      	str	r7, [r1, #0]
 80058da:	bf18      	it	ne
 80058dc:	2300      	movne	r3, #0
 80058de:	eba6 0807 	sub.w	r8, r6, r7
 80058e2:	608b      	str	r3, [r1, #8]
 80058e4:	f1b8 0f00 	cmp.w	r8, #0
 80058e8:	dde9      	ble.n	80058be <__sflush_r+0xae>
 80058ea:	6a21      	ldr	r1, [r4, #32]
 80058ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80058ee:	4643      	mov	r3, r8
 80058f0:	463a      	mov	r2, r7
 80058f2:	4628      	mov	r0, r5
 80058f4:	47b0      	blx	r6
 80058f6:	2800      	cmp	r0, #0
 80058f8:	dc08      	bgt.n	800590c <__sflush_r+0xfc>
 80058fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005902:	81a3      	strh	r3, [r4, #12]
 8005904:	f04f 30ff 	mov.w	r0, #4294967295
 8005908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800590c:	4407      	add	r7, r0
 800590e:	eba8 0800 	sub.w	r8, r8, r0
 8005912:	e7e7      	b.n	80058e4 <__sflush_r+0xd4>
 8005914:	20400001 	.word	0x20400001

08005918 <_fflush_r>:
 8005918:	b538      	push	{r3, r4, r5, lr}
 800591a:	690b      	ldr	r3, [r1, #16]
 800591c:	4605      	mov	r5, r0
 800591e:	460c      	mov	r4, r1
 8005920:	b913      	cbnz	r3, 8005928 <_fflush_r+0x10>
 8005922:	2500      	movs	r5, #0
 8005924:	4628      	mov	r0, r5
 8005926:	bd38      	pop	{r3, r4, r5, pc}
 8005928:	b118      	cbz	r0, 8005932 <_fflush_r+0x1a>
 800592a:	6a03      	ldr	r3, [r0, #32]
 800592c:	b90b      	cbnz	r3, 8005932 <_fflush_r+0x1a>
 800592e:	f7ff fa27 	bl	8004d80 <__sinit>
 8005932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d0f3      	beq.n	8005922 <_fflush_r+0xa>
 800593a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800593c:	07d0      	lsls	r0, r2, #31
 800593e:	d404      	bmi.n	800594a <_fflush_r+0x32>
 8005940:	0599      	lsls	r1, r3, #22
 8005942:	d402      	bmi.n	800594a <_fflush_r+0x32>
 8005944:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005946:	f7ff fb5e 	bl	8005006 <__retarget_lock_acquire_recursive>
 800594a:	4628      	mov	r0, r5
 800594c:	4621      	mov	r1, r4
 800594e:	f7ff ff5f 	bl	8005810 <__sflush_r>
 8005952:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005954:	07da      	lsls	r2, r3, #31
 8005956:	4605      	mov	r5, r0
 8005958:	d4e4      	bmi.n	8005924 <_fflush_r+0xc>
 800595a:	89a3      	ldrh	r3, [r4, #12]
 800595c:	059b      	lsls	r3, r3, #22
 800595e:	d4e1      	bmi.n	8005924 <_fflush_r+0xc>
 8005960:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005962:	f7ff fb51 	bl	8005008 <__retarget_lock_release_recursive>
 8005966:	e7dd      	b.n	8005924 <_fflush_r+0xc>

08005968 <fiprintf>:
 8005968:	b40e      	push	{r1, r2, r3}
 800596a:	b503      	push	{r0, r1, lr}
 800596c:	4601      	mov	r1, r0
 800596e:	ab03      	add	r3, sp, #12
 8005970:	4805      	ldr	r0, [pc, #20]	@ (8005988 <fiprintf+0x20>)
 8005972:	f853 2b04 	ldr.w	r2, [r3], #4
 8005976:	6800      	ldr	r0, [r0, #0]
 8005978:	9301      	str	r3, [sp, #4]
 800597a:	f000 f89d 	bl	8005ab8 <_vfiprintf_r>
 800597e:	b002      	add	sp, #8
 8005980:	f85d eb04 	ldr.w	lr, [sp], #4
 8005984:	b003      	add	sp, #12
 8005986:	4770      	bx	lr
 8005988:	20000030 	.word	0x20000030

0800598c <memmove>:
 800598c:	4288      	cmp	r0, r1
 800598e:	b510      	push	{r4, lr}
 8005990:	eb01 0402 	add.w	r4, r1, r2
 8005994:	d902      	bls.n	800599c <memmove+0x10>
 8005996:	4284      	cmp	r4, r0
 8005998:	4623      	mov	r3, r4
 800599a:	d807      	bhi.n	80059ac <memmove+0x20>
 800599c:	1e43      	subs	r3, r0, #1
 800599e:	42a1      	cmp	r1, r4
 80059a0:	d008      	beq.n	80059b4 <memmove+0x28>
 80059a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059aa:	e7f8      	b.n	800599e <memmove+0x12>
 80059ac:	4402      	add	r2, r0
 80059ae:	4601      	mov	r1, r0
 80059b0:	428a      	cmp	r2, r1
 80059b2:	d100      	bne.n	80059b6 <memmove+0x2a>
 80059b4:	bd10      	pop	{r4, pc}
 80059b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80059be:	e7f7      	b.n	80059b0 <memmove+0x24>

080059c0 <_sbrk_r>:
 80059c0:	b538      	push	{r3, r4, r5, lr}
 80059c2:	4d06      	ldr	r5, [pc, #24]	@ (80059dc <_sbrk_r+0x1c>)
 80059c4:	2300      	movs	r3, #0
 80059c6:	4604      	mov	r4, r0
 80059c8:	4608      	mov	r0, r1
 80059ca:	602b      	str	r3, [r5, #0]
 80059cc:	f7fc fde8 	bl	80025a0 <_sbrk>
 80059d0:	1c43      	adds	r3, r0, #1
 80059d2:	d102      	bne.n	80059da <_sbrk_r+0x1a>
 80059d4:	682b      	ldr	r3, [r5, #0]
 80059d6:	b103      	cbz	r3, 80059da <_sbrk_r+0x1a>
 80059d8:	6023      	str	r3, [r4, #0]
 80059da:	bd38      	pop	{r3, r4, r5, pc}
 80059dc:	20000620 	.word	0x20000620

080059e0 <memcpy>:
 80059e0:	440a      	add	r2, r1
 80059e2:	4291      	cmp	r1, r2
 80059e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80059e8:	d100      	bne.n	80059ec <memcpy+0xc>
 80059ea:	4770      	bx	lr
 80059ec:	b510      	push	{r4, lr}
 80059ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059f6:	4291      	cmp	r1, r2
 80059f8:	d1f9      	bne.n	80059ee <memcpy+0xe>
 80059fa:	bd10      	pop	{r4, pc}

080059fc <abort>:
 80059fc:	b508      	push	{r3, lr}
 80059fe:	2006      	movs	r0, #6
 8005a00:	f000 fa2e 	bl	8005e60 <raise>
 8005a04:	2001      	movs	r0, #1
 8005a06:	f7fc fd53 	bl	80024b0 <_exit>

08005a0a <_realloc_r>:
 8005a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a0e:	4607      	mov	r7, r0
 8005a10:	4614      	mov	r4, r2
 8005a12:	460d      	mov	r5, r1
 8005a14:	b921      	cbnz	r1, 8005a20 <_realloc_r+0x16>
 8005a16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a1a:	4611      	mov	r1, r2
 8005a1c:	f7ff bb88 	b.w	8005130 <_malloc_r>
 8005a20:	b92a      	cbnz	r2, 8005a2e <_realloc_r+0x24>
 8005a22:	f7ff fb11 	bl	8005048 <_free_r>
 8005a26:	4625      	mov	r5, r4
 8005a28:	4628      	mov	r0, r5
 8005a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a2e:	f000 fa33 	bl	8005e98 <_malloc_usable_size_r>
 8005a32:	4284      	cmp	r4, r0
 8005a34:	4606      	mov	r6, r0
 8005a36:	d802      	bhi.n	8005a3e <_realloc_r+0x34>
 8005a38:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a3c:	d8f4      	bhi.n	8005a28 <_realloc_r+0x1e>
 8005a3e:	4621      	mov	r1, r4
 8005a40:	4638      	mov	r0, r7
 8005a42:	f7ff fb75 	bl	8005130 <_malloc_r>
 8005a46:	4680      	mov	r8, r0
 8005a48:	b908      	cbnz	r0, 8005a4e <_realloc_r+0x44>
 8005a4a:	4645      	mov	r5, r8
 8005a4c:	e7ec      	b.n	8005a28 <_realloc_r+0x1e>
 8005a4e:	42b4      	cmp	r4, r6
 8005a50:	4622      	mov	r2, r4
 8005a52:	4629      	mov	r1, r5
 8005a54:	bf28      	it	cs
 8005a56:	4632      	movcs	r2, r6
 8005a58:	f7ff ffc2 	bl	80059e0 <memcpy>
 8005a5c:	4629      	mov	r1, r5
 8005a5e:	4638      	mov	r0, r7
 8005a60:	f7ff faf2 	bl	8005048 <_free_r>
 8005a64:	e7f1      	b.n	8005a4a <_realloc_r+0x40>

08005a66 <__sfputc_r>:
 8005a66:	6893      	ldr	r3, [r2, #8]
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	b410      	push	{r4}
 8005a6e:	6093      	str	r3, [r2, #8]
 8005a70:	da08      	bge.n	8005a84 <__sfputc_r+0x1e>
 8005a72:	6994      	ldr	r4, [r2, #24]
 8005a74:	42a3      	cmp	r3, r4
 8005a76:	db01      	blt.n	8005a7c <__sfputc_r+0x16>
 8005a78:	290a      	cmp	r1, #10
 8005a7a:	d103      	bne.n	8005a84 <__sfputc_r+0x1e>
 8005a7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a80:	f000 b932 	b.w	8005ce8 <__swbuf_r>
 8005a84:	6813      	ldr	r3, [r2, #0]
 8005a86:	1c58      	adds	r0, r3, #1
 8005a88:	6010      	str	r0, [r2, #0]
 8005a8a:	7019      	strb	r1, [r3, #0]
 8005a8c:	4608      	mov	r0, r1
 8005a8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <__sfputs_r>:
 8005a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a96:	4606      	mov	r6, r0
 8005a98:	460f      	mov	r7, r1
 8005a9a:	4614      	mov	r4, r2
 8005a9c:	18d5      	adds	r5, r2, r3
 8005a9e:	42ac      	cmp	r4, r5
 8005aa0:	d101      	bne.n	8005aa6 <__sfputs_r+0x12>
 8005aa2:	2000      	movs	r0, #0
 8005aa4:	e007      	b.n	8005ab6 <__sfputs_r+0x22>
 8005aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aaa:	463a      	mov	r2, r7
 8005aac:	4630      	mov	r0, r6
 8005aae:	f7ff ffda 	bl	8005a66 <__sfputc_r>
 8005ab2:	1c43      	adds	r3, r0, #1
 8005ab4:	d1f3      	bne.n	8005a9e <__sfputs_r+0xa>
 8005ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005ab8 <_vfiprintf_r>:
 8005ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005abc:	460d      	mov	r5, r1
 8005abe:	b09d      	sub	sp, #116	@ 0x74
 8005ac0:	4614      	mov	r4, r2
 8005ac2:	4698      	mov	r8, r3
 8005ac4:	4606      	mov	r6, r0
 8005ac6:	b118      	cbz	r0, 8005ad0 <_vfiprintf_r+0x18>
 8005ac8:	6a03      	ldr	r3, [r0, #32]
 8005aca:	b90b      	cbnz	r3, 8005ad0 <_vfiprintf_r+0x18>
 8005acc:	f7ff f958 	bl	8004d80 <__sinit>
 8005ad0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ad2:	07d9      	lsls	r1, r3, #31
 8005ad4:	d405      	bmi.n	8005ae2 <_vfiprintf_r+0x2a>
 8005ad6:	89ab      	ldrh	r3, [r5, #12]
 8005ad8:	059a      	lsls	r2, r3, #22
 8005ada:	d402      	bmi.n	8005ae2 <_vfiprintf_r+0x2a>
 8005adc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ade:	f7ff fa92 	bl	8005006 <__retarget_lock_acquire_recursive>
 8005ae2:	89ab      	ldrh	r3, [r5, #12]
 8005ae4:	071b      	lsls	r3, r3, #28
 8005ae6:	d501      	bpl.n	8005aec <_vfiprintf_r+0x34>
 8005ae8:	692b      	ldr	r3, [r5, #16]
 8005aea:	b99b      	cbnz	r3, 8005b14 <_vfiprintf_r+0x5c>
 8005aec:	4629      	mov	r1, r5
 8005aee:	4630      	mov	r0, r6
 8005af0:	f000 f938 	bl	8005d64 <__swsetup_r>
 8005af4:	b170      	cbz	r0, 8005b14 <_vfiprintf_r+0x5c>
 8005af6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005af8:	07dc      	lsls	r4, r3, #31
 8005afa:	d504      	bpl.n	8005b06 <_vfiprintf_r+0x4e>
 8005afc:	f04f 30ff 	mov.w	r0, #4294967295
 8005b00:	b01d      	add	sp, #116	@ 0x74
 8005b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b06:	89ab      	ldrh	r3, [r5, #12]
 8005b08:	0598      	lsls	r0, r3, #22
 8005b0a:	d4f7      	bmi.n	8005afc <_vfiprintf_r+0x44>
 8005b0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b0e:	f7ff fa7b 	bl	8005008 <__retarget_lock_release_recursive>
 8005b12:	e7f3      	b.n	8005afc <_vfiprintf_r+0x44>
 8005b14:	2300      	movs	r3, #0
 8005b16:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b18:	2320      	movs	r3, #32
 8005b1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b22:	2330      	movs	r3, #48	@ 0x30
 8005b24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005cd4 <_vfiprintf_r+0x21c>
 8005b28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b2c:	f04f 0901 	mov.w	r9, #1
 8005b30:	4623      	mov	r3, r4
 8005b32:	469a      	mov	sl, r3
 8005b34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b38:	b10a      	cbz	r2, 8005b3e <_vfiprintf_r+0x86>
 8005b3a:	2a25      	cmp	r2, #37	@ 0x25
 8005b3c:	d1f9      	bne.n	8005b32 <_vfiprintf_r+0x7a>
 8005b3e:	ebba 0b04 	subs.w	fp, sl, r4
 8005b42:	d00b      	beq.n	8005b5c <_vfiprintf_r+0xa4>
 8005b44:	465b      	mov	r3, fp
 8005b46:	4622      	mov	r2, r4
 8005b48:	4629      	mov	r1, r5
 8005b4a:	4630      	mov	r0, r6
 8005b4c:	f7ff ffa2 	bl	8005a94 <__sfputs_r>
 8005b50:	3001      	adds	r0, #1
 8005b52:	f000 80a7 	beq.w	8005ca4 <_vfiprintf_r+0x1ec>
 8005b56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b58:	445a      	add	r2, fp
 8005b5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b5c:	f89a 3000 	ldrb.w	r3, [sl]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f000 809f 	beq.w	8005ca4 <_vfiprintf_r+0x1ec>
 8005b66:	2300      	movs	r3, #0
 8005b68:	f04f 32ff 	mov.w	r2, #4294967295
 8005b6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b70:	f10a 0a01 	add.w	sl, sl, #1
 8005b74:	9304      	str	r3, [sp, #16]
 8005b76:	9307      	str	r3, [sp, #28]
 8005b78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b7c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b7e:	4654      	mov	r4, sl
 8005b80:	2205      	movs	r2, #5
 8005b82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b86:	4853      	ldr	r0, [pc, #332]	@ (8005cd4 <_vfiprintf_r+0x21c>)
 8005b88:	f7fa fb32 	bl	80001f0 <memchr>
 8005b8c:	9a04      	ldr	r2, [sp, #16]
 8005b8e:	b9d8      	cbnz	r0, 8005bc8 <_vfiprintf_r+0x110>
 8005b90:	06d1      	lsls	r1, r2, #27
 8005b92:	bf44      	itt	mi
 8005b94:	2320      	movmi	r3, #32
 8005b96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b9a:	0713      	lsls	r3, r2, #28
 8005b9c:	bf44      	itt	mi
 8005b9e:	232b      	movmi	r3, #43	@ 0x2b
 8005ba0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ba4:	f89a 3000 	ldrb.w	r3, [sl]
 8005ba8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005baa:	d015      	beq.n	8005bd8 <_vfiprintf_r+0x120>
 8005bac:	9a07      	ldr	r2, [sp, #28]
 8005bae:	4654      	mov	r4, sl
 8005bb0:	2000      	movs	r0, #0
 8005bb2:	f04f 0c0a 	mov.w	ip, #10
 8005bb6:	4621      	mov	r1, r4
 8005bb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bbc:	3b30      	subs	r3, #48	@ 0x30
 8005bbe:	2b09      	cmp	r3, #9
 8005bc0:	d94b      	bls.n	8005c5a <_vfiprintf_r+0x1a2>
 8005bc2:	b1b0      	cbz	r0, 8005bf2 <_vfiprintf_r+0x13a>
 8005bc4:	9207      	str	r2, [sp, #28]
 8005bc6:	e014      	b.n	8005bf2 <_vfiprintf_r+0x13a>
 8005bc8:	eba0 0308 	sub.w	r3, r0, r8
 8005bcc:	fa09 f303 	lsl.w	r3, r9, r3
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	9304      	str	r3, [sp, #16]
 8005bd4:	46a2      	mov	sl, r4
 8005bd6:	e7d2      	b.n	8005b7e <_vfiprintf_r+0xc6>
 8005bd8:	9b03      	ldr	r3, [sp, #12]
 8005bda:	1d19      	adds	r1, r3, #4
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	9103      	str	r1, [sp, #12]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	bfbb      	ittet	lt
 8005be4:	425b      	neglt	r3, r3
 8005be6:	f042 0202 	orrlt.w	r2, r2, #2
 8005bea:	9307      	strge	r3, [sp, #28]
 8005bec:	9307      	strlt	r3, [sp, #28]
 8005bee:	bfb8      	it	lt
 8005bf0:	9204      	strlt	r2, [sp, #16]
 8005bf2:	7823      	ldrb	r3, [r4, #0]
 8005bf4:	2b2e      	cmp	r3, #46	@ 0x2e
 8005bf6:	d10a      	bne.n	8005c0e <_vfiprintf_r+0x156>
 8005bf8:	7863      	ldrb	r3, [r4, #1]
 8005bfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bfc:	d132      	bne.n	8005c64 <_vfiprintf_r+0x1ac>
 8005bfe:	9b03      	ldr	r3, [sp, #12]
 8005c00:	1d1a      	adds	r2, r3, #4
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	9203      	str	r2, [sp, #12]
 8005c06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c0a:	3402      	adds	r4, #2
 8005c0c:	9305      	str	r3, [sp, #20]
 8005c0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005ce4 <_vfiprintf_r+0x22c>
 8005c12:	7821      	ldrb	r1, [r4, #0]
 8005c14:	2203      	movs	r2, #3
 8005c16:	4650      	mov	r0, sl
 8005c18:	f7fa faea 	bl	80001f0 <memchr>
 8005c1c:	b138      	cbz	r0, 8005c2e <_vfiprintf_r+0x176>
 8005c1e:	9b04      	ldr	r3, [sp, #16]
 8005c20:	eba0 000a 	sub.w	r0, r0, sl
 8005c24:	2240      	movs	r2, #64	@ 0x40
 8005c26:	4082      	lsls	r2, r0
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	3401      	adds	r4, #1
 8005c2c:	9304      	str	r3, [sp, #16]
 8005c2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c32:	4829      	ldr	r0, [pc, #164]	@ (8005cd8 <_vfiprintf_r+0x220>)
 8005c34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c38:	2206      	movs	r2, #6
 8005c3a:	f7fa fad9 	bl	80001f0 <memchr>
 8005c3e:	2800      	cmp	r0, #0
 8005c40:	d03f      	beq.n	8005cc2 <_vfiprintf_r+0x20a>
 8005c42:	4b26      	ldr	r3, [pc, #152]	@ (8005cdc <_vfiprintf_r+0x224>)
 8005c44:	bb1b      	cbnz	r3, 8005c8e <_vfiprintf_r+0x1d6>
 8005c46:	9b03      	ldr	r3, [sp, #12]
 8005c48:	3307      	adds	r3, #7
 8005c4a:	f023 0307 	bic.w	r3, r3, #7
 8005c4e:	3308      	adds	r3, #8
 8005c50:	9303      	str	r3, [sp, #12]
 8005c52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c54:	443b      	add	r3, r7
 8005c56:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c58:	e76a      	b.n	8005b30 <_vfiprintf_r+0x78>
 8005c5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c5e:	460c      	mov	r4, r1
 8005c60:	2001      	movs	r0, #1
 8005c62:	e7a8      	b.n	8005bb6 <_vfiprintf_r+0xfe>
 8005c64:	2300      	movs	r3, #0
 8005c66:	3401      	adds	r4, #1
 8005c68:	9305      	str	r3, [sp, #20]
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	f04f 0c0a 	mov.w	ip, #10
 8005c70:	4620      	mov	r0, r4
 8005c72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c76:	3a30      	subs	r2, #48	@ 0x30
 8005c78:	2a09      	cmp	r2, #9
 8005c7a:	d903      	bls.n	8005c84 <_vfiprintf_r+0x1cc>
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d0c6      	beq.n	8005c0e <_vfiprintf_r+0x156>
 8005c80:	9105      	str	r1, [sp, #20]
 8005c82:	e7c4      	b.n	8005c0e <_vfiprintf_r+0x156>
 8005c84:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c88:	4604      	mov	r4, r0
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e7f0      	b.n	8005c70 <_vfiprintf_r+0x1b8>
 8005c8e:	ab03      	add	r3, sp, #12
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	462a      	mov	r2, r5
 8005c94:	4b12      	ldr	r3, [pc, #72]	@ (8005ce0 <_vfiprintf_r+0x228>)
 8005c96:	a904      	add	r1, sp, #16
 8005c98:	4630      	mov	r0, r6
 8005c9a:	f3af 8000 	nop.w
 8005c9e:	4607      	mov	r7, r0
 8005ca0:	1c78      	adds	r0, r7, #1
 8005ca2:	d1d6      	bne.n	8005c52 <_vfiprintf_r+0x19a>
 8005ca4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ca6:	07d9      	lsls	r1, r3, #31
 8005ca8:	d405      	bmi.n	8005cb6 <_vfiprintf_r+0x1fe>
 8005caa:	89ab      	ldrh	r3, [r5, #12]
 8005cac:	059a      	lsls	r2, r3, #22
 8005cae:	d402      	bmi.n	8005cb6 <_vfiprintf_r+0x1fe>
 8005cb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005cb2:	f7ff f9a9 	bl	8005008 <__retarget_lock_release_recursive>
 8005cb6:	89ab      	ldrh	r3, [r5, #12]
 8005cb8:	065b      	lsls	r3, r3, #25
 8005cba:	f53f af1f 	bmi.w	8005afc <_vfiprintf_r+0x44>
 8005cbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005cc0:	e71e      	b.n	8005b00 <_vfiprintf_r+0x48>
 8005cc2:	ab03      	add	r3, sp, #12
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	462a      	mov	r2, r5
 8005cc8:	4b05      	ldr	r3, [pc, #20]	@ (8005ce0 <_vfiprintf_r+0x228>)
 8005cca:	a904      	add	r1, sp, #16
 8005ccc:	4630      	mov	r0, r6
 8005cce:	f7ff fc81 	bl	80055d4 <_printf_i>
 8005cd2:	e7e4      	b.n	8005c9e <_vfiprintf_r+0x1e6>
 8005cd4:	08007093 	.word	0x08007093
 8005cd8:	0800709d 	.word	0x0800709d
 8005cdc:	00000000 	.word	0x00000000
 8005ce0:	08005a95 	.word	0x08005a95
 8005ce4:	08007099 	.word	0x08007099

08005ce8 <__swbuf_r>:
 8005ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cea:	460e      	mov	r6, r1
 8005cec:	4614      	mov	r4, r2
 8005cee:	4605      	mov	r5, r0
 8005cf0:	b118      	cbz	r0, 8005cfa <__swbuf_r+0x12>
 8005cf2:	6a03      	ldr	r3, [r0, #32]
 8005cf4:	b90b      	cbnz	r3, 8005cfa <__swbuf_r+0x12>
 8005cf6:	f7ff f843 	bl	8004d80 <__sinit>
 8005cfa:	69a3      	ldr	r3, [r4, #24]
 8005cfc:	60a3      	str	r3, [r4, #8]
 8005cfe:	89a3      	ldrh	r3, [r4, #12]
 8005d00:	071a      	lsls	r2, r3, #28
 8005d02:	d501      	bpl.n	8005d08 <__swbuf_r+0x20>
 8005d04:	6923      	ldr	r3, [r4, #16]
 8005d06:	b943      	cbnz	r3, 8005d1a <__swbuf_r+0x32>
 8005d08:	4621      	mov	r1, r4
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	f000 f82a 	bl	8005d64 <__swsetup_r>
 8005d10:	b118      	cbz	r0, 8005d1a <__swbuf_r+0x32>
 8005d12:	f04f 37ff 	mov.w	r7, #4294967295
 8005d16:	4638      	mov	r0, r7
 8005d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d1a:	6823      	ldr	r3, [r4, #0]
 8005d1c:	6922      	ldr	r2, [r4, #16]
 8005d1e:	1a98      	subs	r0, r3, r2
 8005d20:	6963      	ldr	r3, [r4, #20]
 8005d22:	b2f6      	uxtb	r6, r6
 8005d24:	4283      	cmp	r3, r0
 8005d26:	4637      	mov	r7, r6
 8005d28:	dc05      	bgt.n	8005d36 <__swbuf_r+0x4e>
 8005d2a:	4621      	mov	r1, r4
 8005d2c:	4628      	mov	r0, r5
 8005d2e:	f7ff fdf3 	bl	8005918 <_fflush_r>
 8005d32:	2800      	cmp	r0, #0
 8005d34:	d1ed      	bne.n	8005d12 <__swbuf_r+0x2a>
 8005d36:	68a3      	ldr	r3, [r4, #8]
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	60a3      	str	r3, [r4, #8]
 8005d3c:	6823      	ldr	r3, [r4, #0]
 8005d3e:	1c5a      	adds	r2, r3, #1
 8005d40:	6022      	str	r2, [r4, #0]
 8005d42:	701e      	strb	r6, [r3, #0]
 8005d44:	6962      	ldr	r2, [r4, #20]
 8005d46:	1c43      	adds	r3, r0, #1
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d004      	beq.n	8005d56 <__swbuf_r+0x6e>
 8005d4c:	89a3      	ldrh	r3, [r4, #12]
 8005d4e:	07db      	lsls	r3, r3, #31
 8005d50:	d5e1      	bpl.n	8005d16 <__swbuf_r+0x2e>
 8005d52:	2e0a      	cmp	r6, #10
 8005d54:	d1df      	bne.n	8005d16 <__swbuf_r+0x2e>
 8005d56:	4621      	mov	r1, r4
 8005d58:	4628      	mov	r0, r5
 8005d5a:	f7ff fddd 	bl	8005918 <_fflush_r>
 8005d5e:	2800      	cmp	r0, #0
 8005d60:	d0d9      	beq.n	8005d16 <__swbuf_r+0x2e>
 8005d62:	e7d6      	b.n	8005d12 <__swbuf_r+0x2a>

08005d64 <__swsetup_r>:
 8005d64:	b538      	push	{r3, r4, r5, lr}
 8005d66:	4b29      	ldr	r3, [pc, #164]	@ (8005e0c <__swsetup_r+0xa8>)
 8005d68:	4605      	mov	r5, r0
 8005d6a:	6818      	ldr	r0, [r3, #0]
 8005d6c:	460c      	mov	r4, r1
 8005d6e:	b118      	cbz	r0, 8005d78 <__swsetup_r+0x14>
 8005d70:	6a03      	ldr	r3, [r0, #32]
 8005d72:	b90b      	cbnz	r3, 8005d78 <__swsetup_r+0x14>
 8005d74:	f7ff f804 	bl	8004d80 <__sinit>
 8005d78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d7c:	0719      	lsls	r1, r3, #28
 8005d7e:	d422      	bmi.n	8005dc6 <__swsetup_r+0x62>
 8005d80:	06da      	lsls	r2, r3, #27
 8005d82:	d407      	bmi.n	8005d94 <__swsetup_r+0x30>
 8005d84:	2209      	movs	r2, #9
 8005d86:	602a      	str	r2, [r5, #0]
 8005d88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d8c:	81a3      	strh	r3, [r4, #12]
 8005d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d92:	e033      	b.n	8005dfc <__swsetup_r+0x98>
 8005d94:	0758      	lsls	r0, r3, #29
 8005d96:	d512      	bpl.n	8005dbe <__swsetup_r+0x5a>
 8005d98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d9a:	b141      	cbz	r1, 8005dae <__swsetup_r+0x4a>
 8005d9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005da0:	4299      	cmp	r1, r3
 8005da2:	d002      	beq.n	8005daa <__swsetup_r+0x46>
 8005da4:	4628      	mov	r0, r5
 8005da6:	f7ff f94f 	bl	8005048 <_free_r>
 8005daa:	2300      	movs	r3, #0
 8005dac:	6363      	str	r3, [r4, #52]	@ 0x34
 8005dae:	89a3      	ldrh	r3, [r4, #12]
 8005db0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005db4:	81a3      	strh	r3, [r4, #12]
 8005db6:	2300      	movs	r3, #0
 8005db8:	6063      	str	r3, [r4, #4]
 8005dba:	6923      	ldr	r3, [r4, #16]
 8005dbc:	6023      	str	r3, [r4, #0]
 8005dbe:	89a3      	ldrh	r3, [r4, #12]
 8005dc0:	f043 0308 	orr.w	r3, r3, #8
 8005dc4:	81a3      	strh	r3, [r4, #12]
 8005dc6:	6923      	ldr	r3, [r4, #16]
 8005dc8:	b94b      	cbnz	r3, 8005dde <__swsetup_r+0x7a>
 8005dca:	89a3      	ldrh	r3, [r4, #12]
 8005dcc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005dd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dd4:	d003      	beq.n	8005dde <__swsetup_r+0x7a>
 8005dd6:	4621      	mov	r1, r4
 8005dd8:	4628      	mov	r0, r5
 8005dda:	f000 f88b 	bl	8005ef4 <__smakebuf_r>
 8005dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005de2:	f013 0201 	ands.w	r2, r3, #1
 8005de6:	d00a      	beq.n	8005dfe <__swsetup_r+0x9a>
 8005de8:	2200      	movs	r2, #0
 8005dea:	60a2      	str	r2, [r4, #8]
 8005dec:	6962      	ldr	r2, [r4, #20]
 8005dee:	4252      	negs	r2, r2
 8005df0:	61a2      	str	r2, [r4, #24]
 8005df2:	6922      	ldr	r2, [r4, #16]
 8005df4:	b942      	cbnz	r2, 8005e08 <__swsetup_r+0xa4>
 8005df6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005dfa:	d1c5      	bne.n	8005d88 <__swsetup_r+0x24>
 8005dfc:	bd38      	pop	{r3, r4, r5, pc}
 8005dfe:	0799      	lsls	r1, r3, #30
 8005e00:	bf58      	it	pl
 8005e02:	6962      	ldrpl	r2, [r4, #20]
 8005e04:	60a2      	str	r2, [r4, #8]
 8005e06:	e7f4      	b.n	8005df2 <__swsetup_r+0x8e>
 8005e08:	2000      	movs	r0, #0
 8005e0a:	e7f7      	b.n	8005dfc <__swsetup_r+0x98>
 8005e0c:	20000030 	.word	0x20000030

08005e10 <_raise_r>:
 8005e10:	291f      	cmp	r1, #31
 8005e12:	b538      	push	{r3, r4, r5, lr}
 8005e14:	4605      	mov	r5, r0
 8005e16:	460c      	mov	r4, r1
 8005e18:	d904      	bls.n	8005e24 <_raise_r+0x14>
 8005e1a:	2316      	movs	r3, #22
 8005e1c:	6003      	str	r3, [r0, #0]
 8005e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e22:	bd38      	pop	{r3, r4, r5, pc}
 8005e24:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005e26:	b112      	cbz	r2, 8005e2e <_raise_r+0x1e>
 8005e28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005e2c:	b94b      	cbnz	r3, 8005e42 <_raise_r+0x32>
 8005e2e:	4628      	mov	r0, r5
 8005e30:	f000 f830 	bl	8005e94 <_getpid_r>
 8005e34:	4622      	mov	r2, r4
 8005e36:	4601      	mov	r1, r0
 8005e38:	4628      	mov	r0, r5
 8005e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e3e:	f000 b817 	b.w	8005e70 <_kill_r>
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d00a      	beq.n	8005e5c <_raise_r+0x4c>
 8005e46:	1c59      	adds	r1, r3, #1
 8005e48:	d103      	bne.n	8005e52 <_raise_r+0x42>
 8005e4a:	2316      	movs	r3, #22
 8005e4c:	6003      	str	r3, [r0, #0]
 8005e4e:	2001      	movs	r0, #1
 8005e50:	e7e7      	b.n	8005e22 <_raise_r+0x12>
 8005e52:	2100      	movs	r1, #0
 8005e54:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005e58:	4620      	mov	r0, r4
 8005e5a:	4798      	blx	r3
 8005e5c:	2000      	movs	r0, #0
 8005e5e:	e7e0      	b.n	8005e22 <_raise_r+0x12>

08005e60 <raise>:
 8005e60:	4b02      	ldr	r3, [pc, #8]	@ (8005e6c <raise+0xc>)
 8005e62:	4601      	mov	r1, r0
 8005e64:	6818      	ldr	r0, [r3, #0]
 8005e66:	f7ff bfd3 	b.w	8005e10 <_raise_r>
 8005e6a:	bf00      	nop
 8005e6c:	20000030 	.word	0x20000030

08005e70 <_kill_r>:
 8005e70:	b538      	push	{r3, r4, r5, lr}
 8005e72:	4d07      	ldr	r5, [pc, #28]	@ (8005e90 <_kill_r+0x20>)
 8005e74:	2300      	movs	r3, #0
 8005e76:	4604      	mov	r4, r0
 8005e78:	4608      	mov	r0, r1
 8005e7a:	4611      	mov	r1, r2
 8005e7c:	602b      	str	r3, [r5, #0]
 8005e7e:	f7fc fb07 	bl	8002490 <_kill>
 8005e82:	1c43      	adds	r3, r0, #1
 8005e84:	d102      	bne.n	8005e8c <_kill_r+0x1c>
 8005e86:	682b      	ldr	r3, [r5, #0]
 8005e88:	b103      	cbz	r3, 8005e8c <_kill_r+0x1c>
 8005e8a:	6023      	str	r3, [r4, #0]
 8005e8c:	bd38      	pop	{r3, r4, r5, pc}
 8005e8e:	bf00      	nop
 8005e90:	20000620 	.word	0x20000620

08005e94 <_getpid_r>:
 8005e94:	f7fc baf4 	b.w	8002480 <_getpid>

08005e98 <_malloc_usable_size_r>:
 8005e98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e9c:	1f18      	subs	r0, r3, #4
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	bfbc      	itt	lt
 8005ea2:	580b      	ldrlt	r3, [r1, r0]
 8005ea4:	18c0      	addlt	r0, r0, r3
 8005ea6:	4770      	bx	lr

08005ea8 <__swhatbuf_r>:
 8005ea8:	b570      	push	{r4, r5, r6, lr}
 8005eaa:	460c      	mov	r4, r1
 8005eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eb0:	2900      	cmp	r1, #0
 8005eb2:	b096      	sub	sp, #88	@ 0x58
 8005eb4:	4615      	mov	r5, r2
 8005eb6:	461e      	mov	r6, r3
 8005eb8:	da0d      	bge.n	8005ed6 <__swhatbuf_r+0x2e>
 8005eba:	89a3      	ldrh	r3, [r4, #12]
 8005ebc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005ec0:	f04f 0100 	mov.w	r1, #0
 8005ec4:	bf14      	ite	ne
 8005ec6:	2340      	movne	r3, #64	@ 0x40
 8005ec8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005ecc:	2000      	movs	r0, #0
 8005ece:	6031      	str	r1, [r6, #0]
 8005ed0:	602b      	str	r3, [r5, #0]
 8005ed2:	b016      	add	sp, #88	@ 0x58
 8005ed4:	bd70      	pop	{r4, r5, r6, pc}
 8005ed6:	466a      	mov	r2, sp
 8005ed8:	f000 f848 	bl	8005f6c <_fstat_r>
 8005edc:	2800      	cmp	r0, #0
 8005ede:	dbec      	blt.n	8005eba <__swhatbuf_r+0x12>
 8005ee0:	9901      	ldr	r1, [sp, #4]
 8005ee2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005ee6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005eea:	4259      	negs	r1, r3
 8005eec:	4159      	adcs	r1, r3
 8005eee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005ef2:	e7eb      	b.n	8005ecc <__swhatbuf_r+0x24>

08005ef4 <__smakebuf_r>:
 8005ef4:	898b      	ldrh	r3, [r1, #12]
 8005ef6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ef8:	079d      	lsls	r5, r3, #30
 8005efa:	4606      	mov	r6, r0
 8005efc:	460c      	mov	r4, r1
 8005efe:	d507      	bpl.n	8005f10 <__smakebuf_r+0x1c>
 8005f00:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005f04:	6023      	str	r3, [r4, #0]
 8005f06:	6123      	str	r3, [r4, #16]
 8005f08:	2301      	movs	r3, #1
 8005f0a:	6163      	str	r3, [r4, #20]
 8005f0c:	b003      	add	sp, #12
 8005f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f10:	ab01      	add	r3, sp, #4
 8005f12:	466a      	mov	r2, sp
 8005f14:	f7ff ffc8 	bl	8005ea8 <__swhatbuf_r>
 8005f18:	9f00      	ldr	r7, [sp, #0]
 8005f1a:	4605      	mov	r5, r0
 8005f1c:	4639      	mov	r1, r7
 8005f1e:	4630      	mov	r0, r6
 8005f20:	f7ff f906 	bl	8005130 <_malloc_r>
 8005f24:	b948      	cbnz	r0, 8005f3a <__smakebuf_r+0x46>
 8005f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f2a:	059a      	lsls	r2, r3, #22
 8005f2c:	d4ee      	bmi.n	8005f0c <__smakebuf_r+0x18>
 8005f2e:	f023 0303 	bic.w	r3, r3, #3
 8005f32:	f043 0302 	orr.w	r3, r3, #2
 8005f36:	81a3      	strh	r3, [r4, #12]
 8005f38:	e7e2      	b.n	8005f00 <__smakebuf_r+0xc>
 8005f3a:	89a3      	ldrh	r3, [r4, #12]
 8005f3c:	6020      	str	r0, [r4, #0]
 8005f3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f42:	81a3      	strh	r3, [r4, #12]
 8005f44:	9b01      	ldr	r3, [sp, #4]
 8005f46:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005f4a:	b15b      	cbz	r3, 8005f64 <__smakebuf_r+0x70>
 8005f4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f50:	4630      	mov	r0, r6
 8005f52:	f000 f81d 	bl	8005f90 <_isatty_r>
 8005f56:	b128      	cbz	r0, 8005f64 <__smakebuf_r+0x70>
 8005f58:	89a3      	ldrh	r3, [r4, #12]
 8005f5a:	f023 0303 	bic.w	r3, r3, #3
 8005f5e:	f043 0301 	orr.w	r3, r3, #1
 8005f62:	81a3      	strh	r3, [r4, #12]
 8005f64:	89a3      	ldrh	r3, [r4, #12]
 8005f66:	431d      	orrs	r5, r3
 8005f68:	81a5      	strh	r5, [r4, #12]
 8005f6a:	e7cf      	b.n	8005f0c <__smakebuf_r+0x18>

08005f6c <_fstat_r>:
 8005f6c:	b538      	push	{r3, r4, r5, lr}
 8005f6e:	4d07      	ldr	r5, [pc, #28]	@ (8005f8c <_fstat_r+0x20>)
 8005f70:	2300      	movs	r3, #0
 8005f72:	4604      	mov	r4, r0
 8005f74:	4608      	mov	r0, r1
 8005f76:	4611      	mov	r1, r2
 8005f78:	602b      	str	r3, [r5, #0]
 8005f7a:	f7fc fae9 	bl	8002550 <_fstat>
 8005f7e:	1c43      	adds	r3, r0, #1
 8005f80:	d102      	bne.n	8005f88 <_fstat_r+0x1c>
 8005f82:	682b      	ldr	r3, [r5, #0]
 8005f84:	b103      	cbz	r3, 8005f88 <_fstat_r+0x1c>
 8005f86:	6023      	str	r3, [r4, #0]
 8005f88:	bd38      	pop	{r3, r4, r5, pc}
 8005f8a:	bf00      	nop
 8005f8c:	20000620 	.word	0x20000620

08005f90 <_isatty_r>:
 8005f90:	b538      	push	{r3, r4, r5, lr}
 8005f92:	4d06      	ldr	r5, [pc, #24]	@ (8005fac <_isatty_r+0x1c>)
 8005f94:	2300      	movs	r3, #0
 8005f96:	4604      	mov	r4, r0
 8005f98:	4608      	mov	r0, r1
 8005f9a:	602b      	str	r3, [r5, #0]
 8005f9c:	f7fc fae8 	bl	8002570 <_isatty>
 8005fa0:	1c43      	adds	r3, r0, #1
 8005fa2:	d102      	bne.n	8005faa <_isatty_r+0x1a>
 8005fa4:	682b      	ldr	r3, [r5, #0]
 8005fa6:	b103      	cbz	r3, 8005faa <_isatty_r+0x1a>
 8005fa8:	6023      	str	r3, [r4, #0]
 8005faa:	bd38      	pop	{r3, r4, r5, pc}
 8005fac:	20000620 	.word	0x20000620

08005fb0 <_gettimeofday>:
 8005fb0:	4b02      	ldr	r3, [pc, #8]	@ (8005fbc <_gettimeofday+0xc>)
 8005fb2:	2258      	movs	r2, #88	@ 0x58
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8005fba:	4770      	bx	lr
 8005fbc:	20000620 	.word	0x20000620

08005fc0 <_init>:
 8005fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fc2:	bf00      	nop
 8005fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fc6:	bc08      	pop	{r3}
 8005fc8:	469e      	mov	lr, r3
 8005fca:	4770      	bx	lr

08005fcc <_fini>:
 8005fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fce:	bf00      	nop
 8005fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fd2:	bc08      	pop	{r3}
 8005fd4:	469e      	mov	lr, r3
 8005fd6:	4770      	bx	lr
