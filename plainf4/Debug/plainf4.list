
plainf4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ef8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ad0  080080a8  080080a8  000090a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab78  0800ab78  0000c084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ab78  0800ab78  0000bb78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab80  0800ab80  0000c084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab80  0800ab80  0000bb80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ab84  0800ab84  0000bb84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  0800ab88  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c084  2**0
                  CONTENTS
 10 .bss          000005c8  20000084  20000084  0000c084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000064c  2000064c  0000c084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b19f  00000000  00000000  0000c0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002450  00000000  00000000  00017253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b30  00000000  00000000  000196a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000085f  00000000  00000000  0001a1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e94  00000000  00000000  0001aa37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dd9a  00000000  00000000  0003f8cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da469  00000000  00000000  0004d665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00127ace  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000037ac  00000000  00000000  00127b14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  0012b2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008090 	.word	0x08008090

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	08008090 	.word	0x08008090

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <ILI9341_DrawHollowCircle>:
	us *= (SystemCoreClock / 1000000);
	while (us--);
}

void ILI9341_DrawHollowCircle(uint16_t X, uint16_t Y, uint16_t radius, uint16_t color)
{
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b089      	sub	sp, #36	@ 0x24
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4604      	mov	r4, r0
 80005c4:	4608      	mov	r0, r1
 80005c6:	4611      	mov	r1, r2
 80005c8:	461a      	mov	r2, r3
 80005ca:	4623      	mov	r3, r4
 80005cc:	80fb      	strh	r3, [r7, #6]
 80005ce:	4603      	mov	r3, r0
 80005d0:	80bb      	strh	r3, [r7, #4]
 80005d2:	460b      	mov	r3, r1
 80005d4:	807b      	strh	r3, [r7, #2]
 80005d6:	4613      	mov	r3, r2
 80005d8:	803b      	strh	r3, [r7, #0]
	int x = radius-1;
 80005da:	887b      	ldrh	r3, [r7, #2]
 80005dc:	3b01      	subs	r3, #1
 80005de:	61fb      	str	r3, [r7, #28]
	int y = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61bb      	str	r3, [r7, #24]
	int dx = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	617b      	str	r3, [r7, #20]
	int dy = 1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	613b      	str	r3, [r7, #16]
	int err = dx - (radius << 1);
 80005ec:	887b      	ldrh	r3, [r7, #2]
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	697a      	ldr	r2, [r7, #20]
 80005f2:	1ad3      	subs	r3, r2, r3
 80005f4:	60fb      	str	r3, [r7, #12]

	while (x >= y)
 80005f6:	e08d      	b.n	8000714 <ILI9341_DrawHollowCircle+0x158>
	{
		ILI9341_DrawPixel(X + x, Y + y, color);
 80005f8:	69fb      	ldr	r3, [r7, #28]
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	88fb      	ldrh	r3, [r7, #6]
 80005fe:	4413      	add	r3, r2
 8000600:	b298      	uxth	r0, r3
 8000602:	69bb      	ldr	r3, [r7, #24]
 8000604:	b29a      	uxth	r2, r3
 8000606:	88bb      	ldrh	r3, [r7, #4]
 8000608:	4413      	add	r3, r2
 800060a:	b29b      	uxth	r3, r3
 800060c:	883a      	ldrh	r2, [r7, #0]
 800060e:	4619      	mov	r1, r3
 8000610:	f000 fd0a 	bl	8001028 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + y, Y + x, color);
 8000614:	69bb      	ldr	r3, [r7, #24]
 8000616:	b29a      	uxth	r2, r3
 8000618:	88fb      	ldrh	r3, [r7, #6]
 800061a:	4413      	add	r3, r2
 800061c:	b298      	uxth	r0, r3
 800061e:	69fb      	ldr	r3, [r7, #28]
 8000620:	b29a      	uxth	r2, r3
 8000622:	88bb      	ldrh	r3, [r7, #4]
 8000624:	4413      	add	r3, r2
 8000626:	b29b      	uxth	r3, r3
 8000628:	883a      	ldrh	r2, [r7, #0]
 800062a:	4619      	mov	r1, r3
 800062c:	f000 fcfc 	bl	8001028 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - y, Y + x, color);
 8000630:	69bb      	ldr	r3, [r7, #24]
 8000632:	b29b      	uxth	r3, r3
 8000634:	88fa      	ldrh	r2, [r7, #6]
 8000636:	1ad3      	subs	r3, r2, r3
 8000638:	b298      	uxth	r0, r3
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	b29a      	uxth	r2, r3
 800063e:	88bb      	ldrh	r3, [r7, #4]
 8000640:	4413      	add	r3, r2
 8000642:	b29b      	uxth	r3, r3
 8000644:	883a      	ldrh	r2, [r7, #0]
 8000646:	4619      	mov	r1, r3
 8000648:	f000 fcee 	bl	8001028 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - x, Y + y, color);
 800064c:	69fb      	ldr	r3, [r7, #28]
 800064e:	b29b      	uxth	r3, r3
 8000650:	88fa      	ldrh	r2, [r7, #6]
 8000652:	1ad3      	subs	r3, r2, r3
 8000654:	b298      	uxth	r0, r3
 8000656:	69bb      	ldr	r3, [r7, #24]
 8000658:	b29a      	uxth	r2, r3
 800065a:	88bb      	ldrh	r3, [r7, #4]
 800065c:	4413      	add	r3, r2
 800065e:	b29b      	uxth	r3, r3
 8000660:	883a      	ldrh	r2, [r7, #0]
 8000662:	4619      	mov	r1, r3
 8000664:	f000 fce0 	bl	8001028 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - x, Y - y, color);
 8000668:	69fb      	ldr	r3, [r7, #28]
 800066a:	b29b      	uxth	r3, r3
 800066c:	88fa      	ldrh	r2, [r7, #6]
 800066e:	1ad3      	subs	r3, r2, r3
 8000670:	b298      	uxth	r0, r3
 8000672:	69bb      	ldr	r3, [r7, #24]
 8000674:	b29b      	uxth	r3, r3
 8000676:	88ba      	ldrh	r2, [r7, #4]
 8000678:	1ad3      	subs	r3, r2, r3
 800067a:	b29b      	uxth	r3, r3
 800067c:	883a      	ldrh	r2, [r7, #0]
 800067e:	4619      	mov	r1, r3
 8000680:	f000 fcd2 	bl	8001028 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - y, Y - x, color);
 8000684:	69bb      	ldr	r3, [r7, #24]
 8000686:	b29b      	uxth	r3, r3
 8000688:	88fa      	ldrh	r2, [r7, #6]
 800068a:	1ad3      	subs	r3, r2, r3
 800068c:	b298      	uxth	r0, r3
 800068e:	69fb      	ldr	r3, [r7, #28]
 8000690:	b29b      	uxth	r3, r3
 8000692:	88ba      	ldrh	r2, [r7, #4]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	b29b      	uxth	r3, r3
 8000698:	883a      	ldrh	r2, [r7, #0]
 800069a:	4619      	mov	r1, r3
 800069c:	f000 fcc4 	bl	8001028 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + y, Y - x, color);
 80006a0:	69bb      	ldr	r3, [r7, #24]
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	88fb      	ldrh	r3, [r7, #6]
 80006a6:	4413      	add	r3, r2
 80006a8:	b298      	uxth	r0, r3
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	88ba      	ldrh	r2, [r7, #4]
 80006b0:	1ad3      	subs	r3, r2, r3
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	883a      	ldrh	r2, [r7, #0]
 80006b6:	4619      	mov	r1, r3
 80006b8:	f000 fcb6 	bl	8001028 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + x, Y - y, color);
 80006bc:	69fb      	ldr	r3, [r7, #28]
 80006be:	b29a      	uxth	r2, r3
 80006c0:	88fb      	ldrh	r3, [r7, #6]
 80006c2:	4413      	add	r3, r2
 80006c4:	b298      	uxth	r0, r3
 80006c6:	69bb      	ldr	r3, [r7, #24]
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	88ba      	ldrh	r2, [r7, #4]
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	883a      	ldrh	r2, [r7, #0]
 80006d2:	4619      	mov	r1, r3
 80006d4:	f000 fca8 	bl	8001028 <ILI9341_DrawPixel>

		if (err <= 0)
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	dc09      	bgt.n	80006f2 <ILI9341_DrawHollowCircle+0x136>
		{
			y++;
 80006de:	69bb      	ldr	r3, [r7, #24]
 80006e0:	3301      	adds	r3, #1
 80006e2:	61bb      	str	r3, [r7, #24]
			err += dy;
 80006e4:	68fa      	ldr	r2, [r7, #12]
 80006e6:	693b      	ldr	r3, [r7, #16]
 80006e8:	4413      	add	r3, r2
 80006ea:	60fb      	str	r3, [r7, #12]
			dy += 2;
 80006ec:	693b      	ldr	r3, [r7, #16]
 80006ee:	3302      	adds	r3, #2
 80006f0:	613b      	str	r3, [r7, #16]
		}

		if (err > 0)
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	dd0d      	ble.n	8000714 <ILI9341_DrawHollowCircle+0x158>
		{
			x--;
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	3b01      	subs	r3, #1
 80006fc:	61fb      	str	r3, [r7, #28]
			dx += 2;
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	3302      	adds	r3, #2
 8000702:	617b      	str	r3, [r7, #20]
			err += (-radius << 1) + dx;
 8000704:	887b      	ldrh	r3, [r7, #2]
 8000706:	425b      	negs	r3, r3
 8000708:	005a      	lsls	r2, r3, #1
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	4413      	add	r3, r2
 800070e:	68fa      	ldr	r2, [r7, #12]
 8000710:	4413      	add	r3, r2
 8000712:	60fb      	str	r3, [r7, #12]
	while (x >= y)
 8000714:	69fa      	ldr	r2, [r7, #28]
 8000716:	69bb      	ldr	r3, [r7, #24]
 8000718:	429a      	cmp	r2, r3
 800071a:	f6bf af6d 	bge.w	80005f8 <ILI9341_DrawHollowCircle+0x3c>
		}
	}
}
 800071e:	bf00      	nop
 8000720:	bf00      	nop
 8000722:	3724      	adds	r7, #36	@ 0x24
 8000724:	46bd      	mov	sp, r7
 8000726:	bd90      	pop	{r4, r7, pc}

08000728 <ILI9341_DrawFilledCircle>:

void ILI9341_DrawFilledCircle(uint16_t X, uint16_t Y, uint16_t radius, uint16_t color)
{
 8000728:	b590      	push	{r4, r7, lr}
 800072a:	b08b      	sub	sp, #44	@ 0x2c
 800072c:	af00      	add	r7, sp, #0
 800072e:	4604      	mov	r4, r0
 8000730:	4608      	mov	r0, r1
 8000732:	4611      	mov	r1, r2
 8000734:	461a      	mov	r2, r3
 8000736:	4623      	mov	r3, r4
 8000738:	80fb      	strh	r3, [r7, #6]
 800073a:	4603      	mov	r3, r0
 800073c:	80bb      	strh	r3, [r7, #4]
 800073e:	460b      	mov	r3, r1
 8000740:	807b      	strh	r3, [r7, #2]
 8000742:	4613      	mov	r3, r2
 8000744:	803b      	strh	r3, [r7, #0]

	int x = radius;
 8000746:	887b      	ldrh	r3, [r7, #2]
 8000748:	627b      	str	r3, [r7, #36]	@ 0x24
	int y = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	623b      	str	r3, [r7, #32]
	int xChange = 1 - (radius << 1);
 800074e:	887b      	ldrh	r3, [r7, #2]
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	f1c3 0301 	rsb	r3, r3, #1
 8000756:	61fb      	str	r3, [r7, #28]
	int yChange = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	61bb      	str	r3, [r7, #24]
	int radiusError = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]

	while (x >= y)
 8000760:	e061      	b.n	8000826 <ILI9341_DrawFilledCircle+0xfe>
	{
		for (int i = X - x; i <= X + x; i++)
 8000762:	88fa      	ldrh	r2, [r7, #6]
 8000764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000766:	1ad3      	subs	r3, r2, r3
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	e018      	b.n	800079e <ILI9341_DrawFilledCircle+0x76>
		{
			ILI9341_DrawPixel(i, Y + y,color);
 800076c:	693b      	ldr	r3, [r7, #16]
 800076e:	b298      	uxth	r0, r3
 8000770:	6a3b      	ldr	r3, [r7, #32]
 8000772:	b29a      	uxth	r2, r3
 8000774:	88bb      	ldrh	r3, [r7, #4]
 8000776:	4413      	add	r3, r2
 8000778:	b29b      	uxth	r3, r3
 800077a:	883a      	ldrh	r2, [r7, #0]
 800077c:	4619      	mov	r1, r3
 800077e:	f000 fc53 	bl	8001028 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(i, Y - y,color);
 8000782:	693b      	ldr	r3, [r7, #16]
 8000784:	b298      	uxth	r0, r3
 8000786:	6a3b      	ldr	r3, [r7, #32]
 8000788:	b29b      	uxth	r3, r3
 800078a:	88ba      	ldrh	r2, [r7, #4]
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	b29b      	uxth	r3, r3
 8000790:	883a      	ldrh	r2, [r7, #0]
 8000792:	4619      	mov	r1, r3
 8000794:	f000 fc48 	bl	8001028 <ILI9341_DrawPixel>
		for (int i = X - x; i <= X + x; i++)
 8000798:	693b      	ldr	r3, [r7, #16]
 800079a:	3301      	adds	r3, #1
 800079c:	613b      	str	r3, [r7, #16]
 800079e:	88fa      	ldrh	r2, [r7, #6]
 80007a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007a2:	4413      	add	r3, r2
 80007a4:	693a      	ldr	r2, [r7, #16]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	dde0      	ble.n	800076c <ILI9341_DrawFilledCircle+0x44>
		}

		for (int i = X - y; i <= X + y; i++)
 80007aa:	88fa      	ldrh	r2, [r7, #6]
 80007ac:	6a3b      	ldr	r3, [r7, #32]
 80007ae:	1ad3      	subs	r3, r2, r3
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	e018      	b.n	80007e6 <ILI9341_DrawFilledCircle+0xbe>
		{
			ILI9341_DrawPixel(i, Y + x,color);
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	b298      	uxth	r0, r3
 80007b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ba:	b29a      	uxth	r2, r3
 80007bc:	88bb      	ldrh	r3, [r7, #4]
 80007be:	4413      	add	r3, r2
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	883a      	ldrh	r2, [r7, #0]
 80007c4:	4619      	mov	r1, r3
 80007c6:	f000 fc2f 	bl	8001028 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(i, Y - x,color);
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	b298      	uxth	r0, r3
 80007ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	88ba      	ldrh	r2, [r7, #4]
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	883a      	ldrh	r2, [r7, #0]
 80007da:	4619      	mov	r1, r3
 80007dc:	f000 fc24 	bl	8001028 <ILI9341_DrawPixel>
		for (int i = X - y; i <= X + y; i++)
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	3301      	adds	r3, #1
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	88fa      	ldrh	r2, [r7, #6]
 80007e8:	6a3b      	ldr	r3, [r7, #32]
 80007ea:	4413      	add	r3, r2
 80007ec:	68fa      	ldr	r2, [r7, #12]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	dde0      	ble.n	80007b4 <ILI9341_DrawFilledCircle+0x8c>
		}

		y++;
 80007f2:	6a3b      	ldr	r3, [r7, #32]
 80007f4:	3301      	adds	r3, #1
 80007f6:	623b      	str	r3, [r7, #32]
		radiusError += yChange;
 80007f8:	697a      	ldr	r2, [r7, #20]
 80007fa:	69bb      	ldr	r3, [r7, #24]
 80007fc:	4413      	add	r3, r2
 80007fe:	617b      	str	r3, [r7, #20]
		yChange += 2;
 8000800:	69bb      	ldr	r3, [r7, #24]
 8000802:	3302      	adds	r3, #2
 8000804:	61bb      	str	r3, [r7, #24]

		if (((radiusError << 1) + xChange) > 0)
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	005a      	lsls	r2, r3, #1
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	4413      	add	r3, r2
 800080e:	2b00      	cmp	r3, #0
 8000810:	dd09      	ble.n	8000826 <ILI9341_DrawFilledCircle+0xfe>
		{
			x--;
 8000812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000814:	3b01      	subs	r3, #1
 8000816:	627b      	str	r3, [r7, #36]	@ 0x24
			radiusError += xChange;
 8000818:	697a      	ldr	r2, [r7, #20]
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	4413      	add	r3, r2
 800081e:	617b      	str	r3, [r7, #20]
			xChange += 2;
 8000820:	69fb      	ldr	r3, [r7, #28]
 8000822:	3302      	adds	r3, #2
 8000824:	61fb      	str	r3, [r7, #28]
	while (x >= y)
 8000826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000828:	6a3b      	ldr	r3, [r7, #32]
 800082a:	429a      	cmp	r2, r3
 800082c:	da99      	bge.n	8000762 <ILI9341_DrawFilledCircle+0x3a>
		}
	}
}
 800082e:	bf00      	nop
 8000830:	bf00      	nop
 8000832:	372c      	adds	r7, #44	@ 0x2c
 8000834:	46bd      	mov	sp, r7
 8000836:	bd90      	pop	{r4, r7, pc}

08000838 <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b08d      	sub	sp, #52	@ 0x34
 800083c:	af02      	add	r7, sp, #8
 800083e:	60b9      	str	r1, [r7, #8]
 8000840:	4611      	mov	r1, r2
 8000842:	461a      	mov	r2, r3
 8000844:	4603      	mov	r3, r0
 8000846:	73fb      	strb	r3, [r7, #15]
 8000848:	460b      	mov	r3, r1
 800084a:	81bb      	strh	r3, [r7, #12]
 800084c:	4613      	mov	r3, r2
 800084e:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	2b1e      	cmp	r3, #30
 8000854:	d964      	bls.n	8000920 <ILI9341_DrawChar+0xe8>
 8000856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800085a:	2b00      	cmp	r3, #0
 800085c:	db60      	blt.n	8000920 <ILI9341_DrawChar+0xe8>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	3301      	adds	r3, #1
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	3302      	adds	r3, #2
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	3303      	adds	r3, #3
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 800087c:	7bfb      	ldrb	r3, [r7, #15]
 800087e:	3b20      	subs	r3, #32
 8000880:	7ffa      	ldrb	r2, [r7, #31]
 8000882:	fb02 f303 	mul.w	r3, r2, r3
 8000886:	3304      	adds	r3, #4
 8000888:	68ba      	ldr	r2, [r7, #8]
 800088a:	4413      	add	r3, r2
 800088c:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 800088e:	7fbb      	ldrb	r3, [r7, #30]
 8000890:	b29a      	uxth	r2, r3
 8000892:	7f7b      	ldrb	r3, [r7, #29]
 8000894:	b29c      	uxth	r4, r3
 8000896:	88f9      	ldrh	r1, [r7, #6]
 8000898:	89b8      	ldrh	r0, [r7, #12]
 800089a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800089c:	9300      	str	r3, [sp, #0]
 800089e:	4623      	mov	r3, r4
 80008a0:	f000 fc28 	bl	80010f4 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80008a8:	e035      	b.n	8000916 <ILI9341_DrawChar+0xde>
	{
		for (int i=0; i < fWidth; i++)
 80008aa:	2300      	movs	r3, #0
 80008ac:	623b      	str	r3, [r7, #32]
 80008ae:	e02b      	b.n	8000908 <ILI9341_DrawChar+0xd0>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 80008b0:	7f3b      	ldrb	r3, [r7, #28]
 80008b2:	6a3a      	ldr	r2, [r7, #32]
 80008b4:	fb03 f202 	mul.w	r2, r3, r2
 80008b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008ba:	10db      	asrs	r3, r3, #3
 80008bc:	f003 031f 	and.w	r3, r3, #31
 80008c0:	4413      	add	r3, r2
 80008c2:	3301      	adds	r3, #1
 80008c4:	69ba      	ldr	r2, [r7, #24]
 80008c6:	4413      	add	r3, r2
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 80008cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008ce:	f003 0307 	and.w	r3, r3, #7
 80008d2:	2201      	movs	r2, #1
 80008d4:	fa02 f303 	lsl.w	r3, r2, r3
 80008d8:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 80008da:	7dfa      	ldrb	r2, [r7, #23]
 80008dc:	7dbb      	ldrb	r3, [r7, #22]
 80008de:	4013      	ands	r3, r2
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d00d      	beq.n	8000902 <ILI9341_DrawChar+0xca>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 80008e6:	6a3b      	ldr	r3, [r7, #32]
 80008e8:	b29a      	uxth	r2, r3
 80008ea:	89bb      	ldrh	r3, [r7, #12]
 80008ec:	4413      	add	r3, r2
 80008ee:	b298      	uxth	r0, r3
 80008f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008f2:	b29a      	uxth	r2, r3
 80008f4:	88fb      	ldrh	r3, [r7, #6]
 80008f6:	4413      	add	r3, r2
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80008fc:	4619      	mov	r1, r3
 80008fe:	f000 fb93 	bl	8001028 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 8000902:	6a3b      	ldr	r3, [r7, #32]
 8000904:	3301      	adds	r3, #1
 8000906:	623b      	str	r3, [r7, #32]
 8000908:	7fbb      	ldrb	r3, [r7, #30]
 800090a:	6a3a      	ldr	r2, [r7, #32]
 800090c:	429a      	cmp	r2, r3
 800090e:	dbcf      	blt.n	80008b0 <ILI9341_DrawChar+0x78>
	for (int j=0; j < fHeight; j++)
 8000910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000912:	3301      	adds	r3, #1
 8000914:	627b      	str	r3, [r7, #36]	@ 0x24
 8000916:	7f7b      	ldrb	r3, [r7, #29]
 8000918:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800091a:	429a      	cmp	r2, r3
 800091c:	dbc5      	blt.n	80008aa <ILI9341_DrawChar+0x72>
 800091e:	e000      	b.n	8000922 <ILI9341_DrawChar+0xea>
	if ((ch < 31) || (ch > 127)) return;
 8000920:	bf00      	nop
			}
		}
	}
}
 8000922:	372c      	adds	r7, #44	@ 0x2c
 8000924:	46bd      	mov	sp, r7
 8000926:	bd90      	pop	{r4, r7, pc}

08000928 <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	@ 0x28
 800092c:	af02      	add	r7, sp, #8
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	4611      	mov	r1, r2
 8000934:	461a      	mov	r2, r3
 8000936:	460b      	mov	r3, r1
 8000938:	80fb      	strh	r3, [r7, #6]
 800093a:	4613      	mov	r3, r2
 800093c:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	3301      	adds	r3, #1
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	77bb      	strb	r3, [r7, #30]

	while (*str)
 800094c:	e02d      	b.n	80009aa <ILI9341_DrawText+0x82>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	7818      	ldrb	r0, [r3, #0]
 8000952:	88b9      	ldrh	r1, [r7, #4]
 8000954:	88fa      	ldrh	r2, [r7, #6]
 8000956:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000958:	9301      	str	r3, [sp, #4]
 800095a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800095c:	9300      	str	r3, [sp, #0]
 800095e:	460b      	mov	r3, r1
 8000960:	68b9      	ldr	r1, [r7, #8]
 8000962:	f7ff ff69 	bl	8000838 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	3b20      	subs	r3, #32
 800096c:	7ffa      	ldrb	r2, [r7, #31]
 800096e:	fb02 f303 	mul.w	r3, r2, r3
 8000972:	3304      	adds	r3, #4
 8000974:	68ba      	ldr	r2, [r7, #8]
 8000976:	4413      	add	r3, r2
 8000978:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 800097a:	69bb      	ldr	r3, [r7, #24]
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 8000980:	7dfb      	ldrb	r3, [r7, #23]
 8000982:	1c9a      	adds	r2, r3, #2
 8000984:	7fbb      	ldrb	r3, [r7, #30]
 8000986:	429a      	cmp	r2, r3
 8000988:	da07      	bge.n	800099a <ILI9341_DrawText+0x72>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 800098a:	7dfb      	ldrb	r3, [r7, #23]
 800098c:	b29a      	uxth	r2, r3
 800098e:	88fb      	ldrh	r3, [r7, #6]
 8000990:	4413      	add	r3, r2
 8000992:	b29b      	uxth	r3, r3
 8000994:	3302      	adds	r3, #2
 8000996:	80fb      	strh	r3, [r7, #6]
 8000998:	e004      	b.n	80009a4 <ILI9341_DrawText+0x7c>
		}
		else
		{
			X += fWidth;
 800099a:	7fbb      	ldrb	r3, [r7, #30]
 800099c:	b29a      	uxth	r2, r3
 800099e:	88fb      	ldrh	r3, [r7, #6]
 80009a0:	4413      	add	r3, r2
 80009a2:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	3301      	adds	r3, #1
 80009a8:	60fb      	str	r3, [r7, #12]
	while (*str)
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d1cd      	bne.n	800094e <ILI9341_DrawText+0x26>
	}
}
 80009b2:	bf00      	nop
 80009b4:	bf00      	nop
 80009b6:	3720      	adds	r7, #32
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4a06      	ldr	r2, [pc, #24]	@ (80009e0 <HAL_SPI_TxCpltCallback+0x24>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d104      	bne.n	80009d6 <HAL_SPI_TxCpltCallback+0x1a>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	2104      	movs	r1, #4
 80009d0:	4804      	ldr	r0, [pc, #16]	@ (80009e4 <HAL_SPI_TxCpltCallback+0x28>)
 80009d2:	f004 fd9d 	bl	8005510 <HAL_GPIO_WritePin>
  }
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200000c0 	.word	0x200000c0
 80009e4:	40020800 	.word	0x40020800

080009e8 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80009f2:	bf00      	nop
 80009f4:	4b08      	ldr	r3, [pc, #32]	@ (8000a18 <ILI9341_SPI_Tx+0x30>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	2b02      	cmp	r3, #2
 8000a00:	d1f8      	bne.n	80009f4 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 8000a02:	1dfb      	adds	r3, r7, #7
 8000a04:	2201      	movs	r2, #1
 8000a06:	4619      	mov	r1, r3
 8000a08:	4803      	ldr	r0, [pc, #12]	@ (8000a18 <ILI9341_SPI_Tx+0x30>)
 8000a0a:	f005 ff05 	bl	8006818 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200000c0 	.word	0x200000c0

08000a1c <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	460b      	mov	r3, r1
 8000a26:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000a28:	bf00      	nop
 8000a2a:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <ILI9341_SPI_TxBuffer+0x30>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	f003 0302 	and.w	r3, r3, #2
 8000a34:	2b02      	cmp	r3, #2
 8000a36:	d1f8      	bne.n	8000a2a <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 8000a38:	887b      	ldrh	r3, [r7, #2]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	6879      	ldr	r1, [r7, #4]
 8000a3e:	4803      	ldr	r0, [pc, #12]	@ (8000a4c <ILI9341_SPI_TxBuffer+0x30>)
 8000a40:	f005 feea 	bl	8006818 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	200000c0 	.word	0x200000c0

08000a50 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a60:	4807      	ldr	r0, [pc, #28]	@ (8000a80 <ILI9341_WriteCommand+0x30>)
 8000a62:	f004 fd55 	bl	8005510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000a66:	2200      	movs	r2, #0
 8000a68:	2104      	movs	r1, #4
 8000a6a:	4806      	ldr	r0, [pc, #24]	@ (8000a84 <ILI9341_WriteCommand+0x34>)
 8000a6c:	f004 fd50 	bl	8005510 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff ffb8 	bl	80009e8 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40020c00 	.word	0x40020c00
 8000a84:	40020800 	.word	0x40020800

08000a88 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000a92:	2201      	movs	r2, #1
 8000a94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a98:	4807      	ldr	r0, [pc, #28]	@ (8000ab8 <ILI9341_WriteData+0x30>)
 8000a9a:	f004 fd39 	bl	8005510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2104      	movs	r1, #4
 8000aa2:	4806      	ldr	r0, [pc, #24]	@ (8000abc <ILI9341_WriteData+0x34>)
 8000aa4:	f004 fd34 	bl	8005510 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff ff9c 	bl	80009e8 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40020c00 	.word	0x40020c00
 8000abc:	40020800 	.word	0x40020800

08000ac0 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	460b      	mov	r3, r1
 8000aca:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000acc:	2201      	movs	r2, #1
 8000ace:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ad2:	4808      	ldr	r0, [pc, #32]	@ (8000af4 <ILI9341_WriteBuffer+0x34>)
 8000ad4:	f004 fd1c 	bl	8005510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2104      	movs	r1, #4
 8000adc:	4806      	ldr	r0, [pc, #24]	@ (8000af8 <ILI9341_WriteBuffer+0x38>)
 8000ade:	f004 fd17 	bl	8005510 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8000ae2:	887b      	ldrh	r3, [r7, #2]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f7ff ff98 	bl	8000a1c <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40020c00 	.word	0x40020c00
 8000af8:	40020800 	.word	0x40020800

08000afc <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4604      	mov	r4, r0
 8000b04:	4608      	mov	r0, r1
 8000b06:	4611      	mov	r1, r2
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4623      	mov	r3, r4
 8000b0c:	80fb      	strh	r3, [r7, #6]
 8000b0e:	4603      	mov	r3, r0
 8000b10:	80bb      	strh	r3, [r7, #4]
 8000b12:	460b      	mov	r3, r1
 8000b14:	807b      	strh	r3, [r7, #2]
 8000b16:	4613      	mov	r3, r2
 8000b18:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 8000b1a:	88fb      	ldrh	r3, [r7, #6]
 8000b1c:	0a1b      	lsrs	r3, r3, #8
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 8000b24:	88fb      	ldrh	r3, [r7, #6]
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 8000b2a:	887b      	ldrh	r3, [r7, #2]
 8000b2c:	0a1b      	lsrs	r3, r3, #8
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 8000b34:	887b      	ldrh	r3, [r7, #2]
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 8000b3a:	202a      	movs	r0, #42	@ 0x2a
 8000b3c:	f7ff ff88 	bl	8000a50 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000b40:	f107 030c 	add.w	r3, r7, #12
 8000b44:	2104      	movs	r1, #4
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff ffba 	bl	8000ac0 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 8000b4c:	88bb      	ldrh	r3, [r7, #4]
 8000b4e:	0a1b      	lsrs	r3, r3, #8
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 8000b56:	88bb      	ldrh	r3, [r7, #4]
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 8000b5c:	883b      	ldrh	r3, [r7, #0]
 8000b5e:	0a1b      	lsrs	r3, r3, #8
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 8000b66:	883b      	ldrh	r3, [r7, #0]
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 8000b6c:	202b      	movs	r0, #43	@ 0x2b
 8000b6e:	f7ff ff6f 	bl	8000a50 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000b72:	f107 030c 	add.w	r3, r7, #12
 8000b76:	2104      	movs	r1, #4
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff ffa1 	bl	8000ac0 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 8000b7e:	202c      	movs	r0, #44	@ 0x2c
 8000b80:	f7ff ff66 	bl	8000a50 <ILI9341_WriteCommand>
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd90      	pop	{r4, r7, pc}

08000b8c <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8000b90:	2200      	movs	r2, #0
 8000b92:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b96:	480d      	ldr	r0, [pc, #52]	@ (8000bcc <ILI9341_Reset+0x40>)
 8000b98:	f004 fcba 	bl	8005510 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000b9c:	200a      	movs	r0, #10
 8000b9e:	f003 fe65 	bl	800486c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2104      	movs	r1, #4
 8000ba6:	480a      	ldr	r0, [pc, #40]	@ (8000bd0 <ILI9341_Reset+0x44>)
 8000ba8:	f004 fcb2 	bl	8005510 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000bac:	200a      	movs	r0, #10
 8000bae:	f003 fe5d 	bl	800486c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bb8:	4804      	ldr	r0, [pc, #16]	@ (8000bcc <ILI9341_Reset+0x40>)
 8000bba:	f004 fca9 	bl	8005510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	2104      	movs	r1, #4
 8000bc2:	4803      	ldr	r0, [pc, #12]	@ (8000bd0 <ILI9341_Reset+0x44>)
 8000bc4:	f004 fca4 	bl	8005510 <HAL_GPIO_WritePin>
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40020c00 	.word	0x40020c00
 8000bd0:	40020800 	.word	0x40020800

08000bd4 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000bd8:	2201      	movs	r2, #1
 8000bda:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bde:	4802      	ldr	r0, [pc, #8]	@ (8000be8 <ILI9341_Enable+0x14>)
 8000be0:	f004 fc96 	bl	8005510 <HAL_GPIO_WritePin>
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40020c00 	.word	0x40020c00

08000bec <ILI9341_Init>:

void ILI9341_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8000bf0:	f7ff fff0 	bl	8000bd4 <ILI9341_Enable>
	ILI9341_Reset();
 8000bf4:	f7ff ffca 	bl	8000b8c <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f7ff ff29 	bl	8000a50 <ILI9341_WriteCommand>
	HAL_Delay(10);
 8000bfe:	200a      	movs	r0, #10
 8000c00:	f003 fe34 	bl	800486c <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8000c04:	20cb      	movs	r0, #203	@ 0xcb
 8000c06:	f7ff ff23 	bl	8000a50 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 8000c0a:	2039      	movs	r0, #57	@ 0x39
 8000c0c:	f7ff ff3c 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8000c10:	202c      	movs	r0, #44	@ 0x2c
 8000c12:	f7ff ff39 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000c16:	2000      	movs	r0, #0
 8000c18:	f7ff ff36 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8000c1c:	2034      	movs	r0, #52	@ 0x34
 8000c1e:	f7ff ff33 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 8000c22:	2002      	movs	r0, #2
 8000c24:	f7ff ff30 	bl	8000a88 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8000c28:	20cf      	movs	r0, #207	@ 0xcf
 8000c2a:	f7ff ff11 	bl	8000a50 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f7ff ff2a 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000c34:	20c1      	movs	r0, #193	@ 0xc1
 8000c36:	f7ff ff27 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 8000c3a:	2030      	movs	r0, #48	@ 0x30
 8000c3c:	f7ff ff24 	bl	8000a88 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 8000c40:	20e8      	movs	r0, #232	@ 0xe8
 8000c42:	f7ff ff05 	bl	8000a50 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 8000c46:	2085      	movs	r0, #133	@ 0x85
 8000c48:	f7ff ff1e 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f7ff ff1b 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 8000c52:	2078      	movs	r0, #120	@ 0x78
 8000c54:	f7ff ff18 	bl	8000a88 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8000c58:	20ea      	movs	r0, #234	@ 0xea
 8000c5a:	f7ff fef9 	bl	8000a50 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f7ff ff12 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000c64:	2000      	movs	r0, #0
 8000c66:	f7ff ff0f 	bl	8000a88 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8000c6a:	20ed      	movs	r0, #237	@ 0xed
 8000c6c:	f7ff fef0 	bl	8000a50 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8000c70:	2064      	movs	r0, #100	@ 0x64
 8000c72:	f7ff ff09 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000c76:	2003      	movs	r0, #3
 8000c78:	f7ff ff06 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8000c7c:	2012      	movs	r0, #18
 8000c7e:	f7ff ff03 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8000c82:	2081      	movs	r0, #129	@ 0x81
 8000c84:	f7ff ff00 	bl	8000a88 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8000c88:	20f7      	movs	r0, #247	@ 0xf7
 8000c8a:	f7ff fee1 	bl	8000a50 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8000c8e:	2020      	movs	r0, #32
 8000c90:	f7ff fefa 	bl	8000a88 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8000c94:	20c0      	movs	r0, #192	@ 0xc0
 8000c96:	f7ff fedb 	bl	8000a50 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8000c9a:	2023      	movs	r0, #35	@ 0x23
 8000c9c:	f7ff fef4 	bl	8000a88 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8000ca0:	20c1      	movs	r0, #193	@ 0xc1
 8000ca2:	f7ff fed5 	bl	8000a50 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8000ca6:	2010      	movs	r0, #16
 8000ca8:	f7ff feee 	bl	8000a88 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8000cac:	20c5      	movs	r0, #197	@ 0xc5
 8000cae:	f7ff fecf 	bl	8000a50 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8000cb2:	203e      	movs	r0, #62	@ 0x3e
 8000cb4:	f7ff fee8 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8000cb8:	2028      	movs	r0, #40	@ 0x28
 8000cba:	f7ff fee5 	bl	8000a88 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8000cbe:	20c7      	movs	r0, #199	@ 0xc7
 8000cc0:	f7ff fec6 	bl	8000a50 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8000cc4:	2086      	movs	r0, #134	@ 0x86
 8000cc6:	f7ff fedf 	bl	8000a88 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8000cca:	2036      	movs	r0, #54	@ 0x36
 8000ccc:	f7ff fec0 	bl	8000a50 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8000cd0:	2048      	movs	r0, #72	@ 0x48
 8000cd2:	f7ff fed9 	bl	8000a88 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8000cd6:	203a      	movs	r0, #58	@ 0x3a
 8000cd8:	f7ff feba 	bl	8000a50 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8000cdc:	2055      	movs	r0, #85	@ 0x55
 8000cde:	f7ff fed3 	bl	8000a88 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8000ce2:	20b1      	movs	r0, #177	@ 0xb1
 8000ce4:	f7ff feb4 	bl	8000a50 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f7ff fecd 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8000cee:	2018      	movs	r0, #24
 8000cf0:	f7ff feca 	bl	8000a88 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8000cf4:	20b6      	movs	r0, #182	@ 0xb6
 8000cf6:	f7ff feab 	bl	8000a50 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8000cfa:	2008      	movs	r0, #8
 8000cfc:	f7ff fec4 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8000d00:	2082      	movs	r0, #130	@ 0x82
 8000d02:	f7ff fec1 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8000d06:	2027      	movs	r0, #39	@ 0x27
 8000d08:	f7ff febe 	bl	8000a88 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8000d0c:	20f2      	movs	r0, #242	@ 0xf2
 8000d0e:	f7ff fe9f 	bl	8000a50 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000d12:	2000      	movs	r0, #0
 8000d14:	f7ff feb8 	bl	8000a88 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8000d18:	2026      	movs	r0, #38	@ 0x26
 8000d1a:	f7ff fe99 	bl	8000a50 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8000d1e:	2001      	movs	r0, #1
 8000d20:	f7ff feb2 	bl	8000a88 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8000d24:	20e0      	movs	r0, #224	@ 0xe0
 8000d26:	f7ff fe93 	bl	8000a50 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8000d2a:	200f      	movs	r0, #15
 8000d2c:	f7ff feac 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000d30:	2031      	movs	r0, #49	@ 0x31
 8000d32:	f7ff fea9 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8000d36:	202b      	movs	r0, #43	@ 0x2b
 8000d38:	f7ff fea6 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000d3c:	200c      	movs	r0, #12
 8000d3e:	f7ff fea3 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000d42:	200e      	movs	r0, #14
 8000d44:	f7ff fea0 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000d48:	2008      	movs	r0, #8
 8000d4a:	f7ff fe9d 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 8000d4e:	204e      	movs	r0, #78	@ 0x4e
 8000d50:	f7ff fe9a 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8000d54:	20f1      	movs	r0, #241	@ 0xf1
 8000d56:	f7ff fe97 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8000d5a:	2037      	movs	r0, #55	@ 0x37
 8000d5c:	f7ff fe94 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000d60:	2007      	movs	r0, #7
 8000d62:	f7ff fe91 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8000d66:	2010      	movs	r0, #16
 8000d68:	f7ff fe8e 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000d6c:	2003      	movs	r0, #3
 8000d6e:	f7ff fe8b 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000d72:	200e      	movs	r0, #14
 8000d74:	f7ff fe88 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8000d78:	2009      	movs	r0, #9
 8000d7a:	f7ff fe85 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000d7e:	2000      	movs	r0, #0
 8000d80:	f7ff fe82 	bl	8000a88 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8000d84:	20e1      	movs	r0, #225	@ 0xe1
 8000d86:	f7ff fe63 	bl	8000a50 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f7ff fe7c 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000d90:	200e      	movs	r0, #14
 8000d92:	f7ff fe79 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8000d96:	2014      	movs	r0, #20
 8000d98:	f7ff fe76 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	f7ff fe73 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8000da2:	2011      	movs	r0, #17
 8000da4:	f7ff fe70 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000da8:	2007      	movs	r0, #7
 8000daa:	f7ff fe6d 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000dae:	2031      	movs	r0, #49	@ 0x31
 8000db0:	f7ff fe6a 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000db4:	20c1      	movs	r0, #193	@ 0xc1
 8000db6:	f7ff fe67 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8000dba:	2048      	movs	r0, #72	@ 0x48
 8000dbc:	f7ff fe64 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000dc0:	2008      	movs	r0, #8
 8000dc2:	f7ff fe61 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000dc6:	200f      	movs	r0, #15
 8000dc8:	f7ff fe5e 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000dcc:	200c      	movs	r0, #12
 8000dce:	f7ff fe5b 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000dd2:	2031      	movs	r0, #49	@ 0x31
 8000dd4:	f7ff fe58 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8000dd8:	2036      	movs	r0, #54	@ 0x36
 8000dda:	f7ff fe55 	bl	8000a88 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000dde:	200f      	movs	r0, #15
 8000de0:	f7ff fe52 	bl	8000a88 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8000de4:	2011      	movs	r0, #17
 8000de6:	f7ff fe33 	bl	8000a50 <ILI9341_WriteCommand>
	HAL_Delay(100);
 8000dea:	2064      	movs	r0, #100	@ 0x64
 8000dec:	f003 fd3e 	bl	800486c <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8000df0:	2029      	movs	r0, #41	@ 0x29
 8000df2:	f7ff fe2d 	bl	8000a50 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8000df6:	2000      	movs	r0, #0
 8000df8:	f000 f802 	bl	8000e00 <ILI9341_SetRotation>
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 8000e0a:	2036      	movs	r0, #54	@ 0x36
 8000e0c:	f7ff fe20 	bl	8000a50 <ILI9341_WriteCommand>
	HAL_Delay(1);
 8000e10:	2001      	movs	r0, #1
 8000e12:	f003 fd2b 	bl	800486c <HAL_Delay>

	switch(rotation)
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	2b03      	cmp	r3, #3
 8000e1a:	d837      	bhi.n	8000e8c <ILI9341_SetRotation+0x8c>
 8000e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8000e24 <ILI9341_SetRotation+0x24>)
 8000e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e22:	bf00      	nop
 8000e24:	08000e35 	.word	0x08000e35
 8000e28:	08000e4b 	.word	0x08000e4b
 8000e2c:	08000e61 	.word	0x08000e61
 8000e30:	08000e77 	.word	0x08000e77
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8000e34:	2048      	movs	r0, #72	@ 0x48
 8000e36:	f7ff fe27 	bl	8000a88 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 8000e3a:	4b17      	ldr	r3, [pc, #92]	@ (8000e98 <ILI9341_SetRotation+0x98>)
 8000e3c:	22f0      	movs	r2, #240	@ 0xf0
 8000e3e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000e40:	4b16      	ldr	r3, [pc, #88]	@ (8000e9c <ILI9341_SetRotation+0x9c>)
 8000e42:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000e46:	801a      	strh	r2, [r3, #0]
		break;
 8000e48:	e021      	b.n	8000e8e <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 8000e4a:	2028      	movs	r0, #40	@ 0x28
 8000e4c:	f7ff fe1c 	bl	8000a88 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000e50:	4b11      	ldr	r3, [pc, #68]	@ (8000e98 <ILI9341_SetRotation+0x98>)
 8000e52:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000e56:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000e58:	4b10      	ldr	r3, [pc, #64]	@ (8000e9c <ILI9341_SetRotation+0x9c>)
 8000e5a:	22f0      	movs	r2, #240	@ 0xf0
 8000e5c:	801a      	strh	r2, [r3, #0]
		break;
 8000e5e:	e016      	b.n	8000e8e <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8000e60:	2088      	movs	r0, #136	@ 0x88
 8000e62:	f7ff fe11 	bl	8000a88 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8000e66:	4b0c      	ldr	r3, [pc, #48]	@ (8000e98 <ILI9341_SetRotation+0x98>)
 8000e68:	22f0      	movs	r2, #240	@ 0xf0
 8000e6a:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e9c <ILI9341_SetRotation+0x9c>)
 8000e6e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000e72:	801a      	strh	r2, [r3, #0]
		break;
 8000e74:	e00b      	b.n	8000e8e <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8000e76:	20e8      	movs	r0, #232	@ 0xe8
 8000e78:	f7ff fe06 	bl	8000a88 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <ILI9341_SetRotation+0x98>)
 8000e7e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000e82:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000e84:	4b05      	ldr	r3, [pc, #20]	@ (8000e9c <ILI9341_SetRotation+0x9c>)
 8000e86:	22f0      	movs	r2, #240	@ 0xf0
 8000e88:	801a      	strh	r2, [r3, #0]
		break;
 8000e8a:	e000      	b.n	8000e8e <ILI9341_SetRotation+0x8e>
	default:
		break;
 8000e8c:	bf00      	nop
	}
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000002 	.word	0x20000002
 8000e9c:	20000000 	.word	0x20000000

08000ea0 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8000ea0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ea4:	b08d      	sub	sp, #52	@ 0x34
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	6039      	str	r1, [r7, #0]
 8000eac:	80fb      	strh	r3, [r7, #6]
 8000eae:	466b      	mov	r3, sp
 8000eb0:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if((size*2) < BURST_MAX_SIZE)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000ebe:	d202      	bcs.n	8000ec6 <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ec4:	e002      	b.n	8000ecc <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8000ec6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ed2:	483f      	ldr	r0, [pc, #252]	@ (8000fd0 <ILI9341_DrawColorBurst+0x130>)
 8000ed4:	f004 fb1c 	bl	8005510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2104      	movs	r1, #4
 8000edc:	483d      	ldr	r0, [pc, #244]	@ (8000fd4 <ILI9341_DrawColorBurst+0x134>)
 8000ede:	f004 fb17 	bl	8005510 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	0a1b      	lsrs	r3, r3, #8
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t BurstBuffer[BufferSize];
 8000eec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000eee:	460b      	mov	r3, r1
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	61fb      	str	r3, [r7, #28]
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	4688      	mov	r8, r1
 8000ef8:	4699      	mov	r9, r3
 8000efa:	f04f 0200 	mov.w	r2, #0
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000f06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000f0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000f0e:	2300      	movs	r3, #0
 8000f10:	460c      	mov	r4, r1
 8000f12:	461d      	mov	r5, r3
 8000f14:	f04f 0200 	mov.w	r2, #0
 8000f18:	f04f 0300 	mov.w	r3, #0
 8000f1c:	00eb      	lsls	r3, r5, #3
 8000f1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000f22:	00e2      	lsls	r2, r4, #3
 8000f24:	1dcb      	adds	r3, r1, #7
 8000f26:	08db      	lsrs	r3, r3, #3
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	ebad 0d03 	sub.w	sp, sp, r3
 8000f2e:	466b      	mov	r3, sp
 8000f30:	3300      	adds	r3, #0
 8000f32:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000f34:	2300      	movs	r3, #0
 8000f36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f38:	e00e      	b.n	8000f58 <ILI9341_DrawColorBurst+0xb8>
	{
		BurstBuffer[j] = chifted;
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f3e:	4413      	add	r3, r2
 8000f40:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000f44:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8000f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f48:	3301      	adds	r3, #1
 8000f4a:	88fa      	ldrh	r2, [r7, #6]
 8000f4c:	b2d1      	uxtb	r1, r2
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f54:	3302      	adds	r3, #2
 8000f56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d3ec      	bcc.n	8000f3a <ILI9341_DrawColorBurst+0x9a>
	}

	uint32_t SendingSize = size * 2;
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6e:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f74:	fbb3 f2f2 	udiv	r2, r3, r2
 8000f78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000f7a:	fb01 f202 	mul.w	r2, r1, r2
 8000f7e:	1a9b      	subs	r3, r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d010      	beq.n	8000faa <ILI9341_DrawColorBurst+0x10a>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f8c:	e009      	b.n	8000fa2 <ILI9341_DrawColorBurst+0x102>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8000f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	230a      	movs	r3, #10
 8000f94:	69b9      	ldr	r1, [r7, #24]
 8000f96:	4810      	ldr	r0, [pc, #64]	@ (8000fd8 <ILI9341_DrawColorBurst+0x138>)
 8000f98:	f005 faf9 	bl	800658e <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d3f1      	bcc.n	8000f8e <ILI9341_DrawColorBurst+0xee>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	230a      	movs	r3, #10
 8000fb0:	69b9      	ldr	r1, [r7, #24]
 8000fb2:	4809      	ldr	r0, [pc, #36]	@ (8000fd8 <ILI9341_DrawColorBurst+0x138>)
 8000fb4:	f005 faeb 	bl	800658e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2104      	movs	r1, #4
 8000fbc:	4805      	ldr	r0, [pc, #20]	@ (8000fd4 <ILI9341_DrawColorBurst+0x134>)
 8000fbe:	f004 faa7 	bl	8005510 <HAL_GPIO_WritePin>
 8000fc2:	46b5      	mov	sp, r6
}
 8000fc4:	bf00      	nop
 8000fc6:	3734      	adds	r7, #52	@ 0x34
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000fce:	bf00      	nop
 8000fd0:	40020c00 	.word	0x40020c00
 8000fd4:	40020800 	.word	0x40020800
 8000fd8:	200000c0 	.word	0x200000c0

08000fdc <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8001020 <ILI9341_FillScreen+0x44>)
 8000fe8:	881b      	ldrh	r3, [r3, #0]
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	4b0d      	ldr	r3, [pc, #52]	@ (8001024 <ILI9341_FillScreen+0x48>)
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f7ff fd81 	bl	8000afc <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8000ffa:	4b09      	ldr	r3, [pc, #36]	@ (8001020 <ILI9341_FillScreen+0x44>)
 8000ffc:	881b      	ldrh	r3, [r3, #0]
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	461a      	mov	r2, r3
 8001002:	4b08      	ldr	r3, [pc, #32]	@ (8001024 <ILI9341_FillScreen+0x48>)
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	b29b      	uxth	r3, r3
 8001008:	fb02 f303 	mul.w	r3, r2, r3
 800100c:	461a      	mov	r2, r3
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	4611      	mov	r1, r2
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff ff44 	bl	8000ea0 <ILI9341_DrawColorBurst>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000002 	.word	0x20000002
 8001024:	20000000 	.word	0x20000000

08001028 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	80fb      	strh	r3, [r7, #6]
 8001032:	460b      	mov	r3, r1
 8001034:	80bb      	strh	r3, [r7, #4]
 8001036:	4613      	mov	r3, r2
 8001038:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800103a:	4b2c      	ldr	r3, [pc, #176]	@ (80010ec <ILI9341_DrawPixel+0xc4>)
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	b29b      	uxth	r3, r3
 8001040:	88fa      	ldrh	r2, [r7, #6]
 8001042:	429a      	cmp	r2, r3
 8001044:	d24d      	bcs.n	80010e2 <ILI9341_DrawPixel+0xba>
 8001046:	4b2a      	ldr	r3, [pc, #168]	@ (80010f0 <ILI9341_DrawPixel+0xc8>)
 8001048:	881b      	ldrh	r3, [r3, #0]
 800104a:	b29b      	uxth	r3, r3
 800104c:	88ba      	ldrh	r2, [r7, #4]
 800104e:	429a      	cmp	r2, r3
 8001050:	d247      	bcs.n	80010e2 <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8001052:	88fb      	ldrh	r3, [r7, #6]
 8001054:	0a1b      	lsrs	r3, r3, #8
 8001056:	b29b      	uxth	r3, r3
 8001058:	b2db      	uxtb	r3, r3
 800105a:	753b      	strb	r3, [r7, #20]
 800105c:	88fb      	ldrh	r3, [r7, #6]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	757b      	strb	r3, [r7, #21]
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	3301      	adds	r3, #1
 8001066:	121b      	asrs	r3, r3, #8
 8001068:	b2db      	uxtb	r3, r3
 800106a:	75bb      	strb	r3, [r7, #22]
 800106c:	88fb      	ldrh	r3, [r7, #6]
 800106e:	b2db      	uxtb	r3, r3
 8001070:	3301      	adds	r3, #1
 8001072:	b2db      	uxtb	r3, r3
 8001074:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8001076:	88bb      	ldrh	r3, [r7, #4]
 8001078:	0a1b      	lsrs	r3, r3, #8
 800107a:	b29b      	uxth	r3, r3
 800107c:	b2db      	uxtb	r3, r3
 800107e:	743b      	strb	r3, [r7, #16]
 8001080:	88bb      	ldrh	r3, [r7, #4]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	747b      	strb	r3, [r7, #17]
 8001086:	88bb      	ldrh	r3, [r7, #4]
 8001088:	3301      	adds	r3, #1
 800108a:	121b      	asrs	r3, r3, #8
 800108c:	b2db      	uxtb	r3, r3
 800108e:	74bb      	strb	r3, [r7, #18]
 8001090:	88bb      	ldrh	r3, [r7, #4]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	3301      	adds	r3, #1
 8001096:	b2db      	uxtb	r3, r3
 8001098:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 800109a:	887b      	ldrh	r3, [r7, #2]
 800109c:	0a1b      	lsrs	r3, r3, #8
 800109e:	b29b      	uxth	r3, r3
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	733b      	strb	r3, [r7, #12]
 80010a4:	887b      	ldrh	r3, [r7, #2]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 80010aa:	202a      	movs	r0, #42	@ 0x2a
 80010ac:	f7ff fcd0 	bl	8000a50 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	2104      	movs	r1, #4
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fd02 	bl	8000ac0 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 80010bc:	202b      	movs	r0, #43	@ 0x2b
 80010be:	f7ff fcc7 	bl	8000a50 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 80010c2:	f107 0310 	add.w	r3, r7, #16
 80010c6:	2104      	movs	r1, #4
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fcf9 	bl	8000ac0 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 80010ce:	202c      	movs	r0, #44	@ 0x2c
 80010d0:	f7ff fcbe 	bl	8000a50 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	2102      	movs	r1, #2
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fcf0 	bl	8000ac0 <ILI9341_WriteBuffer>
 80010e0:	e000      	b.n	80010e4 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80010e2:	bf00      	nop
}
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000002 	.word	0x20000002
 80010f0:	20000000 	.word	0x20000000

080010f4 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4604      	mov	r4, r0
 80010fc:	4608      	mov	r0, r1
 80010fe:	4611      	mov	r1, r2
 8001100:	461a      	mov	r2, r3
 8001102:	4623      	mov	r3, r4
 8001104:	80fb      	strh	r3, [r7, #6]
 8001106:	4603      	mov	r3, r0
 8001108:	80bb      	strh	r3, [r7, #4]
 800110a:	460b      	mov	r3, r1
 800110c:	807b      	strh	r3, [r7, #2]
 800110e:	4613      	mov	r3, r2
 8001110:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001112:	4b24      	ldr	r3, [pc, #144]	@ (80011a4 <ILI9341_DrawRectangle+0xb0>)
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	b29b      	uxth	r3, r3
 8001118:	88fa      	ldrh	r2, [r7, #6]
 800111a:	429a      	cmp	r2, r3
 800111c:	d23d      	bcs.n	800119a <ILI9341_DrawRectangle+0xa6>
 800111e:	4b22      	ldr	r3, [pc, #136]	@ (80011a8 <ILI9341_DrawRectangle+0xb4>)
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	b29b      	uxth	r3, r3
 8001124:	88ba      	ldrh	r2, [r7, #4]
 8001126:	429a      	cmp	r2, r3
 8001128:	d237      	bcs.n	800119a <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 800112a:	88fa      	ldrh	r2, [r7, #6]
 800112c:	887b      	ldrh	r3, [r7, #2]
 800112e:	4413      	add	r3, r2
 8001130:	4a1c      	ldr	r2, [pc, #112]	@ (80011a4 <ILI9341_DrawRectangle+0xb0>)
 8001132:	8812      	ldrh	r2, [r2, #0]
 8001134:	b292      	uxth	r2, r2
 8001136:	4293      	cmp	r3, r2
 8001138:	dd05      	ble.n	8001146 <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 800113a:	4b1a      	ldr	r3, [pc, #104]	@ (80011a4 <ILI9341_DrawRectangle+0xb0>)
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	b29a      	uxth	r2, r3
 8001140:	88fb      	ldrh	r3, [r7, #6]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 8001146:	88ba      	ldrh	r2, [r7, #4]
 8001148:	883b      	ldrh	r3, [r7, #0]
 800114a:	4413      	add	r3, r2
 800114c:	4a16      	ldr	r2, [pc, #88]	@ (80011a8 <ILI9341_DrawRectangle+0xb4>)
 800114e:	8812      	ldrh	r2, [r2, #0]
 8001150:	b292      	uxth	r2, r2
 8001152:	4293      	cmp	r3, r2
 8001154:	dd05      	ble.n	8001162 <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 8001156:	4b14      	ldr	r3, [pc, #80]	@ (80011a8 <ILI9341_DrawRectangle+0xb4>)
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	b29a      	uxth	r2, r3
 800115c:	88bb      	ldrh	r3, [r7, #4]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8001162:	88fa      	ldrh	r2, [r7, #6]
 8001164:	887b      	ldrh	r3, [r7, #2]
 8001166:	4413      	add	r3, r2
 8001168:	b29b      	uxth	r3, r3
 800116a:	3b01      	subs	r3, #1
 800116c:	b29c      	uxth	r4, r3
 800116e:	88ba      	ldrh	r2, [r7, #4]
 8001170:	883b      	ldrh	r3, [r7, #0]
 8001172:	4413      	add	r3, r2
 8001174:	b29b      	uxth	r3, r3
 8001176:	3b01      	subs	r3, #1
 8001178:	b29b      	uxth	r3, r3
 800117a:	88b9      	ldrh	r1, [r7, #4]
 800117c:	88f8      	ldrh	r0, [r7, #6]
 800117e:	4622      	mov	r2, r4
 8001180:	f7ff fcbc 	bl	8000afc <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8001184:	883b      	ldrh	r3, [r7, #0]
 8001186:	887a      	ldrh	r2, [r7, #2]
 8001188:	fb02 f303 	mul.w	r3, r2, r3
 800118c:	461a      	mov	r2, r3
 800118e:	8b3b      	ldrh	r3, [r7, #24]
 8001190:	4611      	mov	r1, r2
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fe84 	bl	8000ea0 <ILI9341_DrawColorBurst>
 8001198:	e000      	b.n	800119c <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800119a:	bf00      	nop
}
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd90      	pop	{r4, r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000002 	.word	0x20000002
 80011a8:	20000000 	.word	0x20000000

080011ac <ILI9341_DrawLine>:

	ILI9341_SetAddress(x, y, x, y+height-1);
	ILI9341_DrawColorBurst(color, height);
}

void ILI9341_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 80011ac:	b590      	push	{r4, r7, lr}
 80011ae:	b089      	sub	sp, #36	@ 0x24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4604      	mov	r4, r0
 80011b4:	4608      	mov	r0, r1
 80011b6:	4611      	mov	r1, r2
 80011b8:	461a      	mov	r2, r3
 80011ba:	4623      	mov	r3, r4
 80011bc:	80fb      	strh	r3, [r7, #6]
 80011be:	4603      	mov	r3, r0
 80011c0:	80bb      	strh	r3, [r7, #4]
 80011c2:	460b      	mov	r3, r1
 80011c4:	807b      	strh	r3, [r7, #2]
 80011c6:	4613      	mov	r3, r2
 80011c8:	803b      	strh	r3, [r7, #0]
    int dx = abs(x1 - x0);
 80011ca:	887a      	ldrh	r2, [r7, #2]
 80011cc:	88fb      	ldrh	r3, [r7, #6]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	bfb8      	it	lt
 80011d4:	425b      	neglt	r3, r3
 80011d6:	61bb      	str	r3, [r7, #24]
    int sx = x0 < x1 ? 1 : -1;
 80011d8:	88fa      	ldrh	r2, [r7, #6]
 80011da:	887b      	ldrh	r3, [r7, #2]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d201      	bcs.n	80011e4 <ILI9341_DrawLine+0x38>
 80011e0:	2301      	movs	r3, #1
 80011e2:	e001      	b.n	80011e8 <ILI9341_DrawLine+0x3c>
 80011e4:	f04f 33ff 	mov.w	r3, #4294967295
 80011e8:	617b      	str	r3, [r7, #20]
    int dy = -abs(y1 - y0);
 80011ea:	883a      	ldrh	r2, [r7, #0]
 80011ec:	88bb      	ldrh	r3, [r7, #4]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	bfb8      	it	lt
 80011f4:	425b      	neglt	r3, r3
 80011f6:	425b      	negs	r3, r3
 80011f8:	613b      	str	r3, [r7, #16]
    int sy = y0 < y1 ? 1 : -1;
 80011fa:	88ba      	ldrh	r2, [r7, #4]
 80011fc:	883b      	ldrh	r3, [r7, #0]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d201      	bcs.n	8001206 <ILI9341_DrawLine+0x5a>
 8001202:	2301      	movs	r3, #1
 8001204:	e001      	b.n	800120a <ILI9341_DrawLine+0x5e>
 8001206:	f04f 33ff 	mov.w	r3, #4294967295
 800120a:	60fb      	str	r3, [r7, #12]
    int err = dx + dy;
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	4413      	add	r3, r2
 8001212:	61fb      	str	r3, [r7, #28]
    int e2;

    while (1) {
        ILI9341_DrawPixel(x0, y0, color);
 8001214:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001216:	88b9      	ldrh	r1, [r7, #4]
 8001218:	88fb      	ldrh	r3, [r7, #6]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff ff04 	bl	8001028 <ILI9341_DrawPixel>
        if (x0 == x1 && y0 == y1) break;
 8001220:	88fa      	ldrh	r2, [r7, #6]
 8001222:	887b      	ldrh	r3, [r7, #2]
 8001224:	429a      	cmp	r2, r3
 8001226:	d103      	bne.n	8001230 <ILI9341_DrawLine+0x84>
 8001228:	88ba      	ldrh	r2, [r7, #4]
 800122a:	883b      	ldrh	r3, [r7, #0]
 800122c:	429a      	cmp	r2, r3
 800122e:	d01d      	beq.n	800126c <ILI9341_DrawLine+0xc0>
        e2 = 2 * err;
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	60bb      	str	r3, [r7, #8]
        if (e2 >= dy) { err += dy; x0 += sx; }
 8001236:	68ba      	ldr	r2, [r7, #8]
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	429a      	cmp	r2, r3
 800123c:	db08      	blt.n	8001250 <ILI9341_DrawLine+0xa4>
 800123e:	69fa      	ldr	r2, [r7, #28]
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	4413      	add	r3, r2
 8001244:	61fb      	str	r3, [r7, #28]
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	b29a      	uxth	r2, r3
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	4413      	add	r3, r2
 800124e:	80fb      	strh	r3, [r7, #6]
        if (e2 <= dx) { err += dx; y0 += sy; }
 8001250:	68ba      	ldr	r2, [r7, #8]
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	429a      	cmp	r2, r3
 8001256:	dcdd      	bgt.n	8001214 <ILI9341_DrawLine+0x68>
 8001258:	69fa      	ldr	r2, [r7, #28]
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	4413      	add	r3, r2
 800125e:	61fb      	str	r3, [r7, #28]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	b29a      	uxth	r2, r3
 8001264:	88bb      	ldrh	r3, [r7, #4]
 8001266:	4413      	add	r3, r2
 8001268:	80bb      	strh	r3, [r7, #4]
        ILI9341_DrawPixel(x0, y0, color);
 800126a:	e7d3      	b.n	8001214 <ILI9341_DrawLine+0x68>
        if (x0 == x1 && y0 == y1) break;
 800126c:	bf00      	nop
    }
}
 800126e:	bf00      	nop
 8001270:	3724      	adds	r7, #36	@ 0x24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd90      	pop	{r4, r7, pc}

08001276 <draw_plane>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Game logic ----------------------------------------------------------------*/


void draw_plane(int x, int y) {
 8001276:	b590      	push	{r4, r7, lr}
 8001278:	b089      	sub	sp, #36	@ 0x24
 800127a:	af02      	add	r7, sp, #8
 800127c:	6078      	str	r0, [r7, #4]
 800127e:	6039      	str	r1, [r7, #0]
	// Định nghĩa màu sắc
	uint16_t fuselage_color = 0x4208;   // Xám đậm (thân máy bay)
 8001280:	f244 2308 	movw	r3, #16904	@ 0x4208
 8001284:	82fb      	strh	r3, [r7, #22]
	    uint16_t wing_color = 0x2104;       // Xám rất đậm (cánh)
 8001286:	f242 1304 	movw	r3, #8452	@ 0x2104
 800128a:	82bb      	strh	r3, [r7, #20]
	    uint16_t nose_color = 0xF800;       // Đỏ (mũi)
 800128c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001290:	827b      	strh	r3, [r7, #18]
	    uint16_t window_color = 0x001F;     // Xanh dương (cửa sổ)
 8001292:	231f      	movs	r3, #31
 8001294:	823b      	strh	r3, [r7, #16]
	    uint16_t engine_color = 0x0000;     // Đen (động cơ)
 8001296:	2300      	movs	r3, #0
 8001298:	81fb      	strh	r3, [r7, #14]
	    uint16_t detail_color = 0x0000;     // Đen (chi tiết)
 800129a:	2300      	movs	r3, #0
 800129c:	81bb      	strh	r3, [r7, #12]

	    // Thân máy bay chính - hình oval mượt mà
	    // Phần giữa thân (dày nhất)
	    ILI9341_DrawLine(x-14, y, x+16, y, fuselage_color);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	3b0e      	subs	r3, #14
 80012a4:	b298      	uxth	r0, r3
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	b299      	uxth	r1, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	3310      	adds	r3, #16
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	b29c      	uxth	r4, r3
 80012b6:	8afb      	ldrh	r3, [r7, #22]
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	4623      	mov	r3, r4
 80012bc:	f7ff ff76 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x-13, y-1, x+15, y-1, fuselage_color);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	3b0d      	subs	r3, #13
 80012c6:	b298      	uxth	r0, r3
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	3b01      	subs	r3, #1
 80012ce:	b299      	uxth	r1, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	330f      	adds	r3, #15
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	b29b      	uxth	r3, r3
 80012dc:	3b01      	subs	r3, #1
 80012de:	b29c      	uxth	r4, r3
 80012e0:	8afb      	ldrh	r3, [r7, #22]
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	4623      	mov	r3, r4
 80012e6:	f7ff ff61 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x-13, y+1, x+15, y+1, fuselage_color);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	3b0d      	subs	r3, #13
 80012f0:	b298      	uxth	r0, r3
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	3301      	adds	r3, #1
 80012f8:	b299      	uxth	r1, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	330f      	adds	r3, #15
 8001300:	b29a      	uxth	r2, r3
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	b29b      	uxth	r3, r3
 8001306:	3301      	adds	r3, #1
 8001308:	b29c      	uxth	r4, r3
 800130a:	8afb      	ldrh	r3, [r7, #22]
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	4623      	mov	r3, r4
 8001310:	f7ff ff4c 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x-12, y-2, x+14, y-2, fuselage_color);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	b29b      	uxth	r3, r3
 8001318:	3b0c      	subs	r3, #12
 800131a:	b298      	uxth	r0, r3
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	b29b      	uxth	r3, r3
 8001320:	3b02      	subs	r3, #2
 8001322:	b299      	uxth	r1, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	b29b      	uxth	r3, r3
 8001328:	330e      	adds	r3, #14
 800132a:	b29a      	uxth	r2, r3
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	b29b      	uxth	r3, r3
 8001330:	3b02      	subs	r3, #2
 8001332:	b29c      	uxth	r4, r3
 8001334:	8afb      	ldrh	r3, [r7, #22]
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	4623      	mov	r3, r4
 800133a:	f7ff ff37 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x-12, y+2, x+14, y+2, fuselage_color);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	b29b      	uxth	r3, r3
 8001342:	3b0c      	subs	r3, #12
 8001344:	b298      	uxth	r0, r3
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	b29b      	uxth	r3, r3
 800134a:	3302      	adds	r3, #2
 800134c:	b299      	uxth	r1, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	b29b      	uxth	r3, r3
 8001352:	330e      	adds	r3, #14
 8001354:	b29a      	uxth	r2, r3
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	b29b      	uxth	r3, r3
 800135a:	3302      	adds	r3, #2
 800135c:	b29c      	uxth	r4, r3
 800135e:	8afb      	ldrh	r3, [r7, #22]
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	4623      	mov	r3, r4
 8001364:	f7ff ff22 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x-10, y-3, x+12, y-3, fuselage_color);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	b29b      	uxth	r3, r3
 800136c:	3b0a      	subs	r3, #10
 800136e:	b298      	uxth	r0, r3
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	b29b      	uxth	r3, r3
 8001374:	3b03      	subs	r3, #3
 8001376:	b299      	uxth	r1, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	b29b      	uxth	r3, r3
 800137c:	330c      	adds	r3, #12
 800137e:	b29a      	uxth	r2, r3
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	b29b      	uxth	r3, r3
 8001384:	3b03      	subs	r3, #3
 8001386:	b29c      	uxth	r4, r3
 8001388:	8afb      	ldrh	r3, [r7, #22]
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	4623      	mov	r3, r4
 800138e:	f7ff ff0d 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x-10, y+3, x+12, y+3, fuselage_color);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	b29b      	uxth	r3, r3
 8001396:	3b0a      	subs	r3, #10
 8001398:	b298      	uxth	r0, r3
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	b29b      	uxth	r3, r3
 800139e:	3303      	adds	r3, #3
 80013a0:	b299      	uxth	r1, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	330c      	adds	r3, #12
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	3303      	adds	r3, #3
 80013b0:	b29c      	uxth	r4, r3
 80013b2:	8afb      	ldrh	r3, [r7, #22]
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	4623      	mov	r3, r4
 80013b8:	f7ff fef8 	bl	80011ac <ILI9341_DrawLine>

	    // Mũi máy bay - hình côn đẹp
	    ILI9341_DrawPixel(x-18, y, nose_color);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	b29b      	uxth	r3, r3
 80013c0:	3b12      	subs	r3, #18
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	b291      	uxth	r1, r2
 80013c8:	8a7a      	ldrh	r2, [r7, #18]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fe2c 	bl	8001028 <ILI9341_DrawPixel>
	    ILI9341_DrawLine(x-17, y-1, x-17, y+1, nose_color);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	3b11      	subs	r3, #17
 80013d6:	b298      	uxth	r0, r3
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	b29b      	uxth	r3, r3
 80013dc:	3b01      	subs	r3, #1
 80013de:	b299      	uxth	r1, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	3b11      	subs	r3, #17
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	3301      	adds	r3, #1
 80013ee:	b29c      	uxth	r4, r3
 80013f0:	8a7b      	ldrh	r3, [r7, #18]
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	4623      	mov	r3, r4
 80013f6:	f7ff fed9 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x-16, y-2, x-16, y+2, nose_color);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	3b10      	subs	r3, #16
 8001400:	b298      	uxth	r0, r3
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	b29b      	uxth	r3, r3
 8001406:	3b02      	subs	r3, #2
 8001408:	b299      	uxth	r1, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	b29b      	uxth	r3, r3
 800140e:	3b10      	subs	r3, #16
 8001410:	b29a      	uxth	r2, r3
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	b29b      	uxth	r3, r3
 8001416:	3302      	adds	r3, #2
 8001418:	b29c      	uxth	r4, r3
 800141a:	8a7b      	ldrh	r3, [r7, #18]
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	4623      	mov	r3, r4
 8001420:	f7ff fec4 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x-15, y-2, x-15, y+2, nose_color);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	b29b      	uxth	r3, r3
 8001428:	3b0f      	subs	r3, #15
 800142a:	b298      	uxth	r0, r3
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	b29b      	uxth	r3, r3
 8001430:	3b02      	subs	r3, #2
 8001432:	b299      	uxth	r1, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	b29b      	uxth	r3, r3
 8001438:	3b0f      	subs	r3, #15
 800143a:	b29a      	uxth	r2, r3
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	b29b      	uxth	r3, r3
 8001440:	3302      	adds	r3, #2
 8001442:	b29c      	uxth	r4, r3
 8001444:	8a7b      	ldrh	r3, [r7, #18]
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	4623      	mov	r3, r4
 800144a:	f7ff feaf 	bl	80011ac <ILI9341_DrawLine>
	    // Viền mũi
	    ILI9341_DrawPixel(x-16, y-3, detail_color);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	b29b      	uxth	r3, r3
 8001452:	3b10      	subs	r3, #16
 8001454:	b298      	uxth	r0, r3
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	b29b      	uxth	r3, r3
 800145a:	3b03      	subs	r3, #3
 800145c:	b29b      	uxth	r3, r3
 800145e:	89ba      	ldrh	r2, [r7, #12]
 8001460:	4619      	mov	r1, r3
 8001462:	f7ff fde1 	bl	8001028 <ILI9341_DrawPixel>
	    ILI9341_DrawPixel(x-16, y+3, detail_color);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	b29b      	uxth	r3, r3
 800146a:	3b10      	subs	r3, #16
 800146c:	b298      	uxth	r0, r3
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	b29b      	uxth	r3, r3
 8001472:	3303      	adds	r3, #3
 8001474:	b29b      	uxth	r3, r3
 8001476:	89ba      	ldrh	r2, [r7, #12]
 8001478:	4619      	mov	r1, r3
 800147a:	f7ff fdd5 	bl	8001028 <ILI9341_DrawPixel>

	    // Đuôi máy bay - thiết kế phức tạp
	    ILI9341_DrawLine(x+13, y-4, x+13, y+4, fuselage_color);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	b29b      	uxth	r3, r3
 8001482:	330d      	adds	r3, #13
 8001484:	b298      	uxth	r0, r3
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	b29b      	uxth	r3, r3
 800148a:	3b04      	subs	r3, #4
 800148c:	b299      	uxth	r1, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	b29b      	uxth	r3, r3
 8001492:	330d      	adds	r3, #13
 8001494:	b29a      	uxth	r2, r3
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	b29b      	uxth	r3, r3
 800149a:	3304      	adds	r3, #4
 800149c:	b29c      	uxth	r4, r3
 800149e:	8afb      	ldrh	r3, [r7, #22]
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	4623      	mov	r3, r4
 80014a4:	f7ff fe82 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x+14, y-3, x+14, y+3, fuselage_color);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	330e      	adds	r3, #14
 80014ae:	b298      	uxth	r0, r3
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	3b03      	subs	r3, #3
 80014b6:	b299      	uxth	r1, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	330e      	adds	r3, #14
 80014be:	b29a      	uxth	r2, r3
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	3303      	adds	r3, #3
 80014c6:	b29c      	uxth	r4, r3
 80014c8:	8afb      	ldrh	r3, [r7, #22]
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	4623      	mov	r3, r4
 80014ce:	f7ff fe6d 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x+15, y-2, x+15, y+2, fuselage_color);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	330f      	adds	r3, #15
 80014d8:	b298      	uxth	r0, r3
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	3b02      	subs	r3, #2
 80014e0:	b299      	uxth	r1, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	330f      	adds	r3, #15
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	3302      	adds	r3, #2
 80014f0:	b29c      	uxth	r4, r3
 80014f2:	8afb      	ldrh	r3, [r7, #22]
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	4623      	mov	r3, r4
 80014f8:	f7ff fe58 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x+16, y-1, x+16, y+1, fuselage_color);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	b29b      	uxth	r3, r3
 8001500:	3310      	adds	r3, #16
 8001502:	b298      	uxth	r0, r3
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	b29b      	uxth	r3, r3
 8001508:	3b01      	subs	r3, #1
 800150a:	b299      	uxth	r1, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	b29b      	uxth	r3, r3
 8001510:	3310      	adds	r3, #16
 8001512:	b29a      	uxth	r2, r3
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	b29b      	uxth	r3, r3
 8001518:	3301      	adds	r3, #1
 800151a:	b29c      	uxth	r4, r3
 800151c:	8afb      	ldrh	r3, [r7, #22]
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	4623      	mov	r3, r4
 8001522:	f7ff fe43 	bl	80011ac <ILI9341_DrawLine>
//	    ILI9341_DrawLine(x+15, y-5, x+15, y-3, wing_color);
//	    ILI9341_DrawLine(x+16, y-4, x+16, y-2, wing_color);

	    // Cánh chính - thiết kế cong đẹp
	    // Cánh trên
	    ILI9341_DrawLine(x-2, y-16, x+8, y-8, wing_color);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	b29b      	uxth	r3, r3
 800152a:	3b02      	subs	r3, #2
 800152c:	b298      	uxth	r0, r3
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	b29b      	uxth	r3, r3
 8001532:	3b10      	subs	r3, #16
 8001534:	b299      	uxth	r1, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	b29b      	uxth	r3, r3
 800153a:	3308      	adds	r3, #8
 800153c:	b29a      	uxth	r2, r3
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	b29b      	uxth	r3, r3
 8001542:	3b08      	subs	r3, #8
 8001544:	b29c      	uxth	r4, r3
 8001546:	8abb      	ldrh	r3, [r7, #20]
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	4623      	mov	r3, r4
 800154c:	f7ff fe2e 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x-1, y-15, x+7, y-7, wing_color);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	b29b      	uxth	r3, r3
 8001554:	3b01      	subs	r3, #1
 8001556:	b298      	uxth	r0, r3
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	b29b      	uxth	r3, r3
 800155c:	3b0f      	subs	r3, #15
 800155e:	b299      	uxth	r1, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	b29b      	uxth	r3, r3
 8001564:	3307      	adds	r3, #7
 8001566:	b29a      	uxth	r2, r3
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	b29b      	uxth	r3, r3
 800156c:	3b07      	subs	r3, #7
 800156e:	b29c      	uxth	r4, r3
 8001570:	8abb      	ldrh	r3, [r7, #20]
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	4623      	mov	r3, r4
 8001576:	f7ff fe19 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x, y-14, x+6, y-6, wing_color);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	b298      	uxth	r0, r3
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	b29b      	uxth	r3, r3
 8001582:	3b0e      	subs	r3, #14
 8001584:	b299      	uxth	r1, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	b29b      	uxth	r3, r3
 800158a:	3306      	adds	r3, #6
 800158c:	b29a      	uxth	r2, r3
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	b29b      	uxth	r3, r3
 8001592:	3b06      	subs	r3, #6
 8001594:	b29c      	uxth	r4, r3
 8001596:	8abb      	ldrh	r3, [r7, #20]
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	4623      	mov	r3, r4
 800159c:	f7ff fe06 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x+1, y-13, x+5, y-5, wing_color);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	3301      	adds	r3, #1
 80015a6:	b298      	uxth	r0, r3
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	3b0d      	subs	r3, #13
 80015ae:	b299      	uxth	r1, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	3305      	adds	r3, #5
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	3b05      	subs	r3, #5
 80015be:	b29c      	uxth	r4, r3
 80015c0:	8abb      	ldrh	r3, [r7, #20]
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	4623      	mov	r3, r4
 80015c6:	f7ff fdf1 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x+2, y-12, x+4, y-4, wing_color);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	3302      	adds	r3, #2
 80015d0:	b298      	uxth	r0, r3
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	3b0c      	subs	r3, #12
 80015d8:	b299      	uxth	r1, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	b29b      	uxth	r3, r3
 80015de:	3304      	adds	r3, #4
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	3b04      	subs	r3, #4
 80015e8:	b29c      	uxth	r4, r3
 80015ea:	8abb      	ldrh	r3, [r7, #20]
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	4623      	mov	r3, r4
 80015f0:	f7ff fddc 	bl	80011ac <ILI9341_DrawLine>

	    // Cánh dưới
	    ILI9341_DrawLine(x-2, y+16, x+8, y+8, wing_color);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	3b02      	subs	r3, #2
 80015fa:	b298      	uxth	r0, r3
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	3310      	adds	r3, #16
 8001602:	b299      	uxth	r1, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	b29b      	uxth	r3, r3
 8001608:	3308      	adds	r3, #8
 800160a:	b29a      	uxth	r2, r3
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	b29b      	uxth	r3, r3
 8001610:	3308      	adds	r3, #8
 8001612:	b29c      	uxth	r4, r3
 8001614:	8abb      	ldrh	r3, [r7, #20]
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	4623      	mov	r3, r4
 800161a:	f7ff fdc7 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x-1, y+15, x+7, y+7, wing_color);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	b29b      	uxth	r3, r3
 8001622:	3b01      	subs	r3, #1
 8001624:	b298      	uxth	r0, r3
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	b29b      	uxth	r3, r3
 800162a:	330f      	adds	r3, #15
 800162c:	b299      	uxth	r1, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	b29b      	uxth	r3, r3
 8001632:	3307      	adds	r3, #7
 8001634:	b29a      	uxth	r2, r3
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	b29b      	uxth	r3, r3
 800163a:	3307      	adds	r3, #7
 800163c:	b29c      	uxth	r4, r3
 800163e:	8abb      	ldrh	r3, [r7, #20]
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	4623      	mov	r3, r4
 8001644:	f7ff fdb2 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x, y+14, x+6, y+6, wing_color);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	b298      	uxth	r0, r3
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	b29b      	uxth	r3, r3
 8001650:	330e      	adds	r3, #14
 8001652:	b299      	uxth	r1, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	b29b      	uxth	r3, r3
 8001658:	3306      	adds	r3, #6
 800165a:	b29a      	uxth	r2, r3
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	b29b      	uxth	r3, r3
 8001660:	3306      	adds	r3, #6
 8001662:	b29c      	uxth	r4, r3
 8001664:	8abb      	ldrh	r3, [r7, #20]
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	4623      	mov	r3, r4
 800166a:	f7ff fd9f 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x+1, y+13, x+5, y+5, wing_color);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	b29b      	uxth	r3, r3
 8001672:	3301      	adds	r3, #1
 8001674:	b298      	uxth	r0, r3
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	b29b      	uxth	r3, r3
 800167a:	330d      	adds	r3, #13
 800167c:	b299      	uxth	r1, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	b29b      	uxth	r3, r3
 8001682:	3305      	adds	r3, #5
 8001684:	b29a      	uxth	r2, r3
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	b29b      	uxth	r3, r3
 800168a:	3305      	adds	r3, #5
 800168c:	b29c      	uxth	r4, r3
 800168e:	8abb      	ldrh	r3, [r7, #20]
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	4623      	mov	r3, r4
 8001694:	f7ff fd8a 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x+2, y+12, x+4, y+4, wing_color);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	b29b      	uxth	r3, r3
 800169c:	3302      	adds	r3, #2
 800169e:	b298      	uxth	r0, r3
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	330c      	adds	r3, #12
 80016a6:	b299      	uxth	r1, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	3304      	adds	r3, #4
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	3304      	adds	r3, #4
 80016b6:	b29c      	uxth	r4, r3
 80016b8:	8abb      	ldrh	r3, [r7, #20]
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	4623      	mov	r3, r4
 80016be:	f7ff fd75 	bl	80011ac <ILI9341_DrawLine>

	    // Viền cánh
	    ILI9341_DrawLine(x-2, y-16, x-1, y-15, detail_color);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	3b02      	subs	r3, #2
 80016c8:	b298      	uxth	r0, r3
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	3b10      	subs	r3, #16
 80016d0:	b299      	uxth	r1, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	3b01      	subs	r3, #1
 80016d8:	b29a      	uxth	r2, r3
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	b29b      	uxth	r3, r3
 80016de:	3b0f      	subs	r3, #15
 80016e0:	b29c      	uxth	r4, r3
 80016e2:	89bb      	ldrh	r3, [r7, #12]
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	4623      	mov	r3, r4
 80016e8:	f7ff fd60 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x-2, y+16, x-1, y+15, detail_color);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	3b02      	subs	r3, #2
 80016f2:	b298      	uxth	r0, r3
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	3310      	adds	r3, #16
 80016fa:	b299      	uxth	r1, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	3b01      	subs	r3, #1
 8001702:	b29a      	uxth	r2, r3
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	b29b      	uxth	r3, r3
 8001708:	330f      	adds	r3, #15
 800170a:	b29c      	uxth	r4, r3
 800170c:	89bb      	ldrh	r3, [r7, #12]
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	4623      	mov	r3, r4
 8001712:	f7ff fd4b 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x+7, y-8, x+8, y-7, detail_color);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	b29b      	uxth	r3, r3
 800171a:	3307      	adds	r3, #7
 800171c:	b298      	uxth	r0, r3
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	b29b      	uxth	r3, r3
 8001722:	3b08      	subs	r3, #8
 8001724:	b299      	uxth	r1, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	b29b      	uxth	r3, r3
 800172a:	3308      	adds	r3, #8
 800172c:	b29a      	uxth	r2, r3
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	b29b      	uxth	r3, r3
 8001732:	3b07      	subs	r3, #7
 8001734:	b29c      	uxth	r4, r3
 8001736:	89bb      	ldrh	r3, [r7, #12]
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	4623      	mov	r3, r4
 800173c:	f7ff fd36 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x+7, y+8, x+8, y+7, detail_color);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	b29b      	uxth	r3, r3
 8001744:	3307      	adds	r3, #7
 8001746:	b298      	uxth	r0, r3
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	b29b      	uxth	r3, r3
 800174c:	3308      	adds	r3, #8
 800174e:	b299      	uxth	r1, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	b29b      	uxth	r3, r3
 8001754:	3308      	adds	r3, #8
 8001756:	b29a      	uxth	r2, r3
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	b29b      	uxth	r3, r3
 800175c:	3307      	adds	r3, #7
 800175e:	b29c      	uxth	r4, r3
 8001760:	89bb      	ldrh	r3, [r7, #12]
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	4623      	mov	r3, r4
 8001766:	f7ff fd21 	bl	80011ac <ILI9341_DrawLine>

	    // Cánh đuôi ngang - nhỏ và thanh lịch
	    ILI9341_DrawLine(x-8, y-6, x-4, y-4, wing_color);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	b29b      	uxth	r3, r3
 800176e:	3b08      	subs	r3, #8
 8001770:	b298      	uxth	r0, r3
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	b29b      	uxth	r3, r3
 8001776:	3b06      	subs	r3, #6
 8001778:	b299      	uxth	r1, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	b29b      	uxth	r3, r3
 800177e:	3b04      	subs	r3, #4
 8001780:	b29a      	uxth	r2, r3
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	b29b      	uxth	r3, r3
 8001786:	3b04      	subs	r3, #4
 8001788:	b29c      	uxth	r4, r3
 800178a:	8abb      	ldrh	r3, [r7, #20]
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	4623      	mov	r3, r4
 8001790:	f7ff fd0c 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x-8, y+6, x-4, y+4, wing_color);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	b29b      	uxth	r3, r3
 8001798:	3b08      	subs	r3, #8
 800179a:	b298      	uxth	r0, r3
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	3306      	adds	r3, #6
 80017a2:	b299      	uxth	r1, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	3b04      	subs	r3, #4
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	3304      	adds	r3, #4
 80017b2:	b29c      	uxth	r4, r3
 80017b4:	8abb      	ldrh	r3, [r7, #20]
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	4623      	mov	r3, r4
 80017ba:	f7ff fcf7 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x-7, y-5, x-5, y-3, wing_color);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	3b07      	subs	r3, #7
 80017c4:	b298      	uxth	r0, r3
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	3b05      	subs	r3, #5
 80017cc:	b299      	uxth	r1, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	3b05      	subs	r3, #5
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	3b03      	subs	r3, #3
 80017dc:	b29c      	uxth	r4, r3
 80017de:	8abb      	ldrh	r3, [r7, #20]
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	4623      	mov	r3, r4
 80017e4:	f7ff fce2 	bl	80011ac <ILI9341_DrawLine>
ILI9341_DrawLine(x-7, y+5, x-5, y+3, wing_color);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	3b07      	subs	r3, #7
 80017ee:	b298      	uxth	r0, r3
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	3305      	adds	r3, #5
 80017f6:	b299      	uxth	r1, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	3b05      	subs	r3, #5
 80017fe:	b29a      	uxth	r2, r3
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	b29b      	uxth	r3, r3
 8001804:	3303      	adds	r3, #3
 8001806:	b29c      	uxth	r4, r3
 8001808:	8abb      	ldrh	r3, [r7, #20]
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	4623      	mov	r3, r4
 800180e:	f7ff fccd 	bl	80011ac <ILI9341_DrawLine>

	    // Động cơ - hình trụ thực tế
	    // Động cơ trên
	    ILI9341_DrawLine(x-1, y-11, x+3, y-9, engine_color);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	b29b      	uxth	r3, r3
 8001816:	3b01      	subs	r3, #1
 8001818:	b298      	uxth	r0, r3
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	b29b      	uxth	r3, r3
 800181e:	3b0b      	subs	r3, #11
 8001820:	b299      	uxth	r1, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	b29b      	uxth	r3, r3
 8001826:	3303      	adds	r3, #3
 8001828:	b29a      	uxth	r2, r3
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	b29b      	uxth	r3, r3
 800182e:	3b09      	subs	r3, #9
 8001830:	b29c      	uxth	r4, r3
 8001832:	89fb      	ldrh	r3, [r7, #14]
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	4623      	mov	r3, r4
 8001838:	f7ff fcb8 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x-1, y-10, x+3, y-8, engine_color);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	b29b      	uxth	r3, r3
 8001840:	3b01      	subs	r3, #1
 8001842:	b298      	uxth	r0, r3
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	b29b      	uxth	r3, r3
 8001848:	3b0a      	subs	r3, #10
 800184a:	b299      	uxth	r1, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	b29b      	uxth	r3, r3
 8001850:	3303      	adds	r3, #3
 8001852:	b29a      	uxth	r2, r3
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	b29b      	uxth	r3, r3
 8001858:	3b08      	subs	r3, #8
 800185a:	b29c      	uxth	r4, r3
 800185c:	89fb      	ldrh	r3, [r7, #14]
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	4623      	mov	r3, r4
 8001862:	f7ff fca3 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x, y-12, x+2, y-10, engine_color);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	b298      	uxth	r0, r3
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	b29b      	uxth	r3, r3
 800186e:	3b0c      	subs	r3, #12
 8001870:	b299      	uxth	r1, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	b29b      	uxth	r3, r3
 8001876:	3302      	adds	r3, #2
 8001878:	b29a      	uxth	r2, r3
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	b29b      	uxth	r3, r3
 800187e:	3b0a      	subs	r3, #10
 8001880:	b29c      	uxth	r4, r3
 8001882:	89fb      	ldrh	r3, [r7, #14]
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	4623      	mov	r3, r4
 8001888:	f7ff fc90 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawPixel(x-1, y-12, detail_color);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	b29b      	uxth	r3, r3
 8001890:	3b01      	subs	r3, #1
 8001892:	b298      	uxth	r0, r3
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	b29b      	uxth	r3, r3
 8001898:	3b0c      	subs	r3, #12
 800189a:	b29b      	uxth	r3, r3
 800189c:	89ba      	ldrh	r2, [r7, #12]
 800189e:	4619      	mov	r1, r3
 80018a0:	f7ff fbc2 	bl	8001028 <ILI9341_DrawPixel>
	    ILI9341_DrawPixel(x+3, y-8, detail_color);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	3303      	adds	r3, #3
 80018aa:	b298      	uxth	r0, r3
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	3b08      	subs	r3, #8
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	89ba      	ldrh	r2, [r7, #12]
 80018b6:	4619      	mov	r1, r3
 80018b8:	f7ff fbb6 	bl	8001028 <ILI9341_DrawPixel>

	    // Động cơ dưới
	    ILI9341_DrawLine(x-1, y+11, x+3, y+9, engine_color);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	3b01      	subs	r3, #1
 80018c2:	b298      	uxth	r0, r3
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	330b      	adds	r3, #11
 80018ca:	b299      	uxth	r1, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	3303      	adds	r3, #3
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	3309      	adds	r3, #9
 80018da:	b29c      	uxth	r4, r3
 80018dc:	89fb      	ldrh	r3, [r7, #14]
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	4623      	mov	r3, r4
 80018e2:	f7ff fc63 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x-1, y+10, x+3, y+8, engine_color);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	3b01      	subs	r3, #1
 80018ec:	b298      	uxth	r0, r3
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	330a      	adds	r3, #10
 80018f4:	b299      	uxth	r1, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	3303      	adds	r3, #3
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	b29b      	uxth	r3, r3
 8001902:	3308      	adds	r3, #8
 8001904:	b29c      	uxth	r4, r3
 8001906:	89fb      	ldrh	r3, [r7, #14]
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	4623      	mov	r3, r4
 800190c:	f7ff fc4e 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x, y+12, x+2, y+10, engine_color);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	b298      	uxth	r0, r3
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	b29b      	uxth	r3, r3
 8001918:	330c      	adds	r3, #12
 800191a:	b299      	uxth	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	b29b      	uxth	r3, r3
 8001920:	3302      	adds	r3, #2
 8001922:	b29a      	uxth	r2, r3
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	b29b      	uxth	r3, r3
 8001928:	330a      	adds	r3, #10
 800192a:	b29c      	uxth	r4, r3
 800192c:	89fb      	ldrh	r3, [r7, #14]
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	4623      	mov	r3, r4
 8001932:	f7ff fc3b 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawPixel(x-1, y+12, detail_color);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	b29b      	uxth	r3, r3
 800193a:	3b01      	subs	r3, #1
 800193c:	b298      	uxth	r0, r3
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	b29b      	uxth	r3, r3
 8001942:	330c      	adds	r3, #12
 8001944:	b29b      	uxth	r3, r3
 8001946:	89ba      	ldrh	r2, [r7, #12]
 8001948:	4619      	mov	r1, r3
 800194a:	f7ff fb6d 	bl	8001028 <ILI9341_DrawPixel>
	    ILI9341_DrawPixel(x+3, y+8, detail_color);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	b29b      	uxth	r3, r3
 8001952:	3303      	adds	r3, #3
 8001954:	b298      	uxth	r0, r3
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	b29b      	uxth	r3, r3
 800195a:	3308      	adds	r3, #8
 800195c:	b29b      	uxth	r3, r3
 800195e:	89ba      	ldrh	r2, [r7, #12]
 8001960:	4619      	mov	r1, r3
 8001962:	f7ff fb61 	bl	8001028 <ILI9341_DrawPixel>

	    // Cửa sổ máy bay - hàng cửa sổ đẹp
	    ILI9341_DrawPixel(x-10, y-1, window_color);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	b29b      	uxth	r3, r3
 800196a:	3b0a      	subs	r3, #10
 800196c:	b298      	uxth	r0, r3
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	b29b      	uxth	r3, r3
 8001972:	3b01      	subs	r3, #1
 8001974:	b29b      	uxth	r3, r3
 8001976:	8a3a      	ldrh	r2, [r7, #16]
 8001978:	4619      	mov	r1, r3
 800197a:	f7ff fb55 	bl	8001028 <ILI9341_DrawPixel>
	    ILI9341_DrawPixel(x-8, y-1, window_color);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	b29b      	uxth	r3, r3
 8001982:	3b08      	subs	r3, #8
 8001984:	b298      	uxth	r0, r3
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	b29b      	uxth	r3, r3
 800198a:	3b01      	subs	r3, #1
 800198c:	b29b      	uxth	r3, r3
 800198e:	8a3a      	ldrh	r2, [r7, #16]
 8001990:	4619      	mov	r1, r3
 8001992:	f7ff fb49 	bl	8001028 <ILI9341_DrawPixel>
	    ILI9341_DrawPixel(x-6, y-1, window_color);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	b29b      	uxth	r3, r3
 800199a:	3b06      	subs	r3, #6
 800199c:	b298      	uxth	r0, r3
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	3b01      	subs	r3, #1
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	8a3a      	ldrh	r2, [r7, #16]
 80019a8:	4619      	mov	r1, r3
 80019aa:	f7ff fb3d 	bl	8001028 <ILI9341_DrawPixel>
	    ILI9341_DrawPixel(x-4, y-1, window_color);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	3b04      	subs	r3, #4
 80019b4:	b298      	uxth	r0, r3
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	3b01      	subs	r3, #1
 80019bc:	b29b      	uxth	r3, r3
 80019be:	8a3a      	ldrh	r2, [r7, #16]
 80019c0:	4619      	mov	r1, r3
 80019c2:	f7ff fb31 	bl	8001028 <ILI9341_DrawPixel>
	    ILI9341_DrawPixel(x-10, y+1, window_color);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	3b0a      	subs	r3, #10
 80019cc:	b298      	uxth	r0, r3
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	3301      	adds	r3, #1
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	8a3a      	ldrh	r2, [r7, #16]
 80019d8:	4619      	mov	r1, r3
 80019da:	f7ff fb25 	bl	8001028 <ILI9341_DrawPixel>
	    ILI9341_DrawPixel(x-8, y+1, window_color);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	3b08      	subs	r3, #8
 80019e4:	b298      	uxth	r0, r3
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	3301      	adds	r3, #1
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	8a3a      	ldrh	r2, [r7, #16]
 80019f0:	4619      	mov	r1, r3
 80019f2:	f7ff fb19 	bl	8001028 <ILI9341_DrawPixel>
	    ILI9341_DrawPixel(x-6, y+1, window_color);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	3b06      	subs	r3, #6
 80019fc:	b298      	uxth	r0, r3
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	3301      	adds	r3, #1
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	8a3a      	ldrh	r2, [r7, #16]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f7ff fb0d 	bl	8001028 <ILI9341_DrawPixel>
	    ILI9341_DrawPixel(x-4, y+1, window_color);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	3b04      	subs	r3, #4
 8001a14:	b298      	uxth	r0, r3
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	8a3a      	ldrh	r2, [r7, #16]
 8001a20:	4619      	mov	r1, r3
 8001a22:	f7ff fb01 	bl	8001028 <ILI9341_DrawPixel>

	    // Cửa sổ cabin lái
	    ILI9341_DrawPixel(x-12, y, window_color);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	3b0c      	subs	r3, #12
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	b291      	uxth	r1, r2
 8001a32:	8a3a      	ldrh	r2, [r7, #16]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff faf7 	bl	8001028 <ILI9341_DrawPixel>
	    ILI9341_DrawPixel(x-11, y-1, window_color);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	3b0b      	subs	r3, #11
 8001a40:	b298      	uxth	r0, r3
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	3b01      	subs	r3, #1
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	8a3a      	ldrh	r2, [r7, #16]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f7ff faeb 	bl	8001028 <ILI9341_DrawPixel>
	    ILI9341_DrawPixel(x-11, y+1, window_color);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	3b0b      	subs	r3, #11
 8001a58:	b298      	uxth	r0, r3
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	3301      	adds	r3, #1
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	8a3a      	ldrh	r2, [r7, #16]
 8001a64:	4619      	mov	r1, r3
 8001a66:	f7ff fadf 	bl	8001028 <ILI9341_DrawPixel>

	    // Chi tiết trang trí
	    ILI9341_DrawLine(x-5, y, x+5, y, detail_color);  // Đường viền thân
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	3b05      	subs	r3, #5
 8001a70:	b298      	uxth	r0, r3
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	b299      	uxth	r1, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	3305      	adds	r3, #5
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	b29c      	uxth	r4, r3
 8001a82:	89bb      	ldrh	r3, [r7, #12]
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	4623      	mov	r3, r4
 8001a88:	f7ff fb90 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawPixel(x+10, y-1, detail_color);      // Logo/chi tiết
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	330a      	adds	r3, #10
 8001a92:	b298      	uxth	r0, r3
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	89ba      	ldrh	r2, [r7, #12]
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	f7ff fac2 	bl	8001028 <ILI9341_DrawPixel>
	    ILI9341_DrawPixel(x+10, y+1, detail_color);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	330a      	adds	r3, #10
 8001aaa:	b298      	uxth	r0, r3
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	89ba      	ldrh	r2, [r7, #12]
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f7ff fab6 	bl	8001028 <ILI9341_DrawPixel>
}
 8001abc:	bf00      	nop
 8001abe:	371c      	adds	r7, #28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd90      	pop	{r4, r7, pc}

08001ac4 <erase_plane>:

void erase_plane(int x, int y) {
 8001ac4:	b590      	push	{r4, r7, lr}
 8001ac6:	b089      	sub	sp, #36	@ 0x24
 8001ac8:	af02      	add	r7, sp, #8
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]


	// Định nghĩa màu sắc
	    uint16_t fuselage_color = 0xFFFFF;   // trắng
 8001ace:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ad2:	82fb      	strh	r3, [r7, #22]
	    uint16_t wing_color = 0xFFFFF;   // trắng
 8001ad4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ad8:	82bb      	strh	r3, [r7, #20]
	    uint16_t nose_color = 0xFFFFF;   // trắng
 8001ada:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ade:	827b      	strh	r3, [r7, #18]
	    uint16_t window_color = 0xFFFFF;   // trắng
 8001ae0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ae4:	823b      	strh	r3, [r7, #16]
	    uint16_t engine_color = 0xFFFFF;   // trắng
 8001ae6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001aea:	81fb      	strh	r3, [r7, #14]
	    uint16_t detail_color = 0xFFFFF;   // trắng
 8001aec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001af0:	81bb      	strh	r3, [r7, #12]

	    // Thân máy bay chính - hình oval mượt mà
	    // Phần giữa thân (dày nhất)
	    ILI9341_DrawLine(x-14, y, x+16, y, fuselage_color);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	3b0e      	subs	r3, #14
 8001af8:	b298      	uxth	r0, r3
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	b299      	uxth	r1, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	3310      	adds	r3, #16
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	b29c      	uxth	r4, r3
 8001b0a:	8afb      	ldrh	r3, [r7, #22]
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	4623      	mov	r3, r4
 8001b10:	f7ff fb4c 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x-13, y-1, x+15, y-1, fuselage_color);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	3b0d      	subs	r3, #13
 8001b1a:	b298      	uxth	r0, r3
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	3b01      	subs	r3, #1
 8001b22:	b299      	uxth	r1, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	330f      	adds	r3, #15
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	3b01      	subs	r3, #1
 8001b32:	b29c      	uxth	r4, r3
 8001b34:	8afb      	ldrh	r3, [r7, #22]
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	4623      	mov	r3, r4
 8001b3a:	f7ff fb37 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x-13, y+1, x+15, y+1, fuselage_color);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	3b0d      	subs	r3, #13
 8001b44:	b298      	uxth	r0, r3
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	b299      	uxth	r1, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	330f      	adds	r3, #15
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	b29c      	uxth	r4, r3
 8001b5e:	8afb      	ldrh	r3, [r7, #22]
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	4623      	mov	r3, r4
 8001b64:	f7ff fb22 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x-12, y-2, x+14, y-2, fuselage_color);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	3b0c      	subs	r3, #12
 8001b6e:	b298      	uxth	r0, r3
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	3b02      	subs	r3, #2
 8001b76:	b299      	uxth	r1, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	330e      	adds	r3, #14
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	3b02      	subs	r3, #2
 8001b86:	b29c      	uxth	r4, r3
 8001b88:	8afb      	ldrh	r3, [r7, #22]
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	4623      	mov	r3, r4
 8001b8e:	f7ff fb0d 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x-12, y+2, x+14, y+2, fuselage_color);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	3b0c      	subs	r3, #12
 8001b98:	b298      	uxth	r0, r3
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	3302      	adds	r3, #2
 8001ba0:	b299      	uxth	r1, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	330e      	adds	r3, #14
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	3302      	adds	r3, #2
 8001bb0:	b29c      	uxth	r4, r3
 8001bb2:	8afb      	ldrh	r3, [r7, #22]
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	4623      	mov	r3, r4
 8001bb8:	f7ff faf8 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x-10, y-3, x+12, y-3, fuselage_color);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	3b0a      	subs	r3, #10
 8001bc2:	b298      	uxth	r0, r3
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	3b03      	subs	r3, #3
 8001bca:	b299      	uxth	r1, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	330c      	adds	r3, #12
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	3b03      	subs	r3, #3
 8001bda:	b29c      	uxth	r4, r3
 8001bdc:	8afb      	ldrh	r3, [r7, #22]
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	4623      	mov	r3, r4
 8001be2:	f7ff fae3 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x-10, y+3, x+12, y+3, fuselage_color);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	3b0a      	subs	r3, #10
 8001bec:	b298      	uxth	r0, r3
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	3303      	adds	r3, #3
 8001bf4:	b299      	uxth	r1, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	330c      	adds	r3, #12
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	3303      	adds	r3, #3
 8001c04:	b29c      	uxth	r4, r3
 8001c06:	8afb      	ldrh	r3, [r7, #22]
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	4623      	mov	r3, r4
 8001c0c:	f7ff face 	bl	80011ac <ILI9341_DrawLine>

	    // Mũi máy bay - hình côn đẹp
	    ILI9341_DrawPixel(x-18, y, nose_color);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	3b12      	subs	r3, #18
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	b291      	uxth	r1, r2
 8001c1c:	8a7a      	ldrh	r2, [r7, #18]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fa02 	bl	8001028 <ILI9341_DrawPixel>
	    ILI9341_DrawLine(x-17, y-1, x-17, y+1, nose_color);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	3b11      	subs	r3, #17
 8001c2a:	b298      	uxth	r0, r3
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	3b01      	subs	r3, #1
 8001c32:	b299      	uxth	r1, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	3b11      	subs	r3, #17
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	3301      	adds	r3, #1
 8001c42:	b29c      	uxth	r4, r3
 8001c44:	8a7b      	ldrh	r3, [r7, #18]
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	4623      	mov	r3, r4
 8001c4a:	f7ff faaf 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x-16, y-2, x-16, y+2, nose_color);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	3b10      	subs	r3, #16
 8001c54:	b298      	uxth	r0, r3
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	3b02      	subs	r3, #2
 8001c5c:	b299      	uxth	r1, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	3b10      	subs	r3, #16
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	3302      	adds	r3, #2
 8001c6c:	b29c      	uxth	r4, r3
 8001c6e:	8a7b      	ldrh	r3, [r7, #18]
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	4623      	mov	r3, r4
 8001c74:	f7ff fa9a 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x-15, y-2, x-15, y+2, nose_color);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	3b0f      	subs	r3, #15
 8001c7e:	b298      	uxth	r0, r3
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	3b02      	subs	r3, #2
 8001c86:	b299      	uxth	r1, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	3b0f      	subs	r3, #15
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	3302      	adds	r3, #2
 8001c96:	b29c      	uxth	r4, r3
 8001c98:	8a7b      	ldrh	r3, [r7, #18]
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	4623      	mov	r3, r4
 8001c9e:	f7ff fa85 	bl	80011ac <ILI9341_DrawLine>
	    // Viền mũi
	    ILI9341_DrawPixel(x-16, y-3, detail_color);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	3b10      	subs	r3, #16
 8001ca8:	b298      	uxth	r0, r3
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	3b03      	subs	r3, #3
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	89ba      	ldrh	r2, [r7, #12]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f7ff f9b7 	bl	8001028 <ILI9341_DrawPixel>
	    ILI9341_DrawPixel(x-16, y+3, detail_color);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	3b10      	subs	r3, #16
 8001cc0:	b298      	uxth	r0, r3
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	3303      	adds	r3, #3
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	89ba      	ldrh	r2, [r7, #12]
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f7ff f9ab 	bl	8001028 <ILI9341_DrawPixel>

	    // Đuôi máy bay - thiết kế phức tạp
	    ILI9341_DrawLine(x+13, y-4, x+13, y+4, fuselage_color);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	330d      	adds	r3, #13
 8001cd8:	b298      	uxth	r0, r3
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	3b04      	subs	r3, #4
 8001ce0:	b299      	uxth	r1, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	330d      	adds	r3, #13
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	3304      	adds	r3, #4
 8001cf0:	b29c      	uxth	r4, r3
 8001cf2:	8afb      	ldrh	r3, [r7, #22]
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	4623      	mov	r3, r4
 8001cf8:	f7ff fa58 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x+14, y-3, x+14, y+3, fuselage_color);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	330e      	adds	r3, #14
 8001d02:	b298      	uxth	r0, r3
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	3b03      	subs	r3, #3
 8001d0a:	b299      	uxth	r1, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	330e      	adds	r3, #14
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	3303      	adds	r3, #3
 8001d1a:	b29c      	uxth	r4, r3
 8001d1c:	8afb      	ldrh	r3, [r7, #22]
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	4623      	mov	r3, r4
 8001d22:	f7ff fa43 	bl	80011ac <ILI9341_DrawLine>
ILI9341_DrawLine(x+15, y-2, x+15, y+2, fuselage_color);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	330f      	adds	r3, #15
 8001d2c:	b298      	uxth	r0, r3
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	3b02      	subs	r3, #2
 8001d34:	b299      	uxth	r1, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	330f      	adds	r3, #15
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	3302      	adds	r3, #2
 8001d44:	b29c      	uxth	r4, r3
 8001d46:	8afb      	ldrh	r3, [r7, #22]
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	4623      	mov	r3, r4
 8001d4c:	f7ff fa2e 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x+16, y-1, x+16, y+1, fuselage_color);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	3310      	adds	r3, #16
 8001d56:	b298      	uxth	r0, r3
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	b299      	uxth	r1, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	3310      	adds	r3, #16
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	b29c      	uxth	r4, r3
 8001d70:	8afb      	ldrh	r3, [r7, #22]
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	4623      	mov	r3, r4
 8001d76:	f7ff fa19 	bl	80011ac <ILI9341_DrawLine>

	    // Cánh chính - thiết kế cong đẹp
	    // Cánh trên
	    ILI9341_DrawLine(x-2, y-16, x+8, y-8, wing_color);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	3b02      	subs	r3, #2
 8001d80:	b298      	uxth	r0, r3
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	3b10      	subs	r3, #16
 8001d88:	b299      	uxth	r1, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	3308      	adds	r3, #8
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	3b08      	subs	r3, #8
 8001d98:	b29c      	uxth	r4, r3
 8001d9a:	8abb      	ldrh	r3, [r7, #20]
 8001d9c:	9300      	str	r3, [sp, #0]
 8001d9e:	4623      	mov	r3, r4
 8001da0:	f7ff fa04 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x-1, y-15, x+7, y-7, wing_color);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	3b01      	subs	r3, #1
 8001daa:	b298      	uxth	r0, r3
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	3b0f      	subs	r3, #15
 8001db2:	b299      	uxth	r1, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	3307      	adds	r3, #7
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	3b07      	subs	r3, #7
 8001dc2:	b29c      	uxth	r4, r3
 8001dc4:	8abb      	ldrh	r3, [r7, #20]
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	4623      	mov	r3, r4
 8001dca:	f7ff f9ef 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x, y-14, x+6, y-6, wing_color);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	b298      	uxth	r0, r3
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	3b0e      	subs	r3, #14
 8001dd8:	b299      	uxth	r1, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	3306      	adds	r3, #6
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	3b06      	subs	r3, #6
 8001de8:	b29c      	uxth	r4, r3
 8001dea:	8abb      	ldrh	r3, [r7, #20]
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	4623      	mov	r3, r4
 8001df0:	f7ff f9dc 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x+1, y-13, x+5, y-5, wing_color);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	3301      	adds	r3, #1
 8001dfa:	b298      	uxth	r0, r3
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	3b0d      	subs	r3, #13
 8001e02:	b299      	uxth	r1, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	3305      	adds	r3, #5
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	3b05      	subs	r3, #5
 8001e12:	b29c      	uxth	r4, r3
 8001e14:	8abb      	ldrh	r3, [r7, #20]
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	4623      	mov	r3, r4
 8001e1a:	f7ff f9c7 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x+2, y-12, x+4, y-4, wing_color);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	3302      	adds	r3, #2
 8001e24:	b298      	uxth	r0, r3
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	3b0c      	subs	r3, #12
 8001e2c:	b299      	uxth	r1, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	3304      	adds	r3, #4
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	3b04      	subs	r3, #4
 8001e3c:	b29c      	uxth	r4, r3
 8001e3e:	8abb      	ldrh	r3, [r7, #20]
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	4623      	mov	r3, r4
 8001e44:	f7ff f9b2 	bl	80011ac <ILI9341_DrawLine>

	    // Cánh dưới
	    ILI9341_DrawLine(x-2, y+16, x+8, y+8, wing_color);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	3b02      	subs	r3, #2
 8001e4e:	b298      	uxth	r0, r3
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	3310      	adds	r3, #16
 8001e56:	b299      	uxth	r1, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	3308      	adds	r3, #8
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	3308      	adds	r3, #8
 8001e66:	b29c      	uxth	r4, r3
 8001e68:	8abb      	ldrh	r3, [r7, #20]
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	4623      	mov	r3, r4
 8001e6e:	f7ff f99d 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x-1, y+15, x+7, y+7, wing_color);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	3b01      	subs	r3, #1
 8001e78:	b298      	uxth	r0, r3
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	330f      	adds	r3, #15
 8001e80:	b299      	uxth	r1, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	3307      	adds	r3, #7
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	3307      	adds	r3, #7
 8001e90:	b29c      	uxth	r4, r3
 8001e92:	8abb      	ldrh	r3, [r7, #20]
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	4623      	mov	r3, r4
 8001e98:	f7ff f988 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x, y+14, x+6, y+6, wing_color);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	b298      	uxth	r0, r3
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	330e      	adds	r3, #14
 8001ea6:	b299      	uxth	r1, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	3306      	adds	r3, #6
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	3306      	adds	r3, #6
 8001eb6:	b29c      	uxth	r4, r3
 8001eb8:	8abb      	ldrh	r3, [r7, #20]
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	4623      	mov	r3, r4
 8001ebe:	f7ff f975 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x+1, y+13, x+5, y+5, wing_color);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	b298      	uxth	r0, r3
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	330d      	adds	r3, #13
 8001ed0:	b299      	uxth	r1, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	3305      	adds	r3, #5
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	3305      	adds	r3, #5
 8001ee0:	b29c      	uxth	r4, r3
 8001ee2:	8abb      	ldrh	r3, [r7, #20]
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	4623      	mov	r3, r4
 8001ee8:	f7ff f960 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x+2, y+12, x+4, y+4, wing_color);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	3302      	adds	r3, #2
 8001ef2:	b298      	uxth	r0, r3
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	330c      	adds	r3, #12
 8001efa:	b299      	uxth	r1, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	3304      	adds	r3, #4
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	3304      	adds	r3, #4
 8001f0a:	b29c      	uxth	r4, r3
 8001f0c:	8abb      	ldrh	r3, [r7, #20]
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	4623      	mov	r3, r4
 8001f12:	f7ff f94b 	bl	80011ac <ILI9341_DrawLine>

	    // Viền cánh
	    ILI9341_DrawLine(x-2, y-16, x-1, y-15, detail_color);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	3b02      	subs	r3, #2
 8001f1c:	b298      	uxth	r0, r3
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	3b10      	subs	r3, #16
 8001f24:	b299      	uxth	r1, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	3b0f      	subs	r3, #15
 8001f34:	b29c      	uxth	r4, r3
 8001f36:	89bb      	ldrh	r3, [r7, #12]
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	4623      	mov	r3, r4
 8001f3c:	f7ff f936 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x-2, y+16, x-1, y+15, detail_color);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	3b02      	subs	r3, #2
 8001f46:	b298      	uxth	r0, r3
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	3310      	adds	r3, #16
 8001f4e:	b299      	uxth	r1, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	3b01      	subs	r3, #1
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	330f      	adds	r3, #15
 8001f5e:	b29c      	uxth	r4, r3
 8001f60:	89bb      	ldrh	r3, [r7, #12]
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	4623      	mov	r3, r4
 8001f66:	f7ff f921 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x+7, y-8, x+8, y-7, detail_color);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	3307      	adds	r3, #7
 8001f70:	b298      	uxth	r0, r3
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	3b08      	subs	r3, #8
 8001f78:	b299      	uxth	r1, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	3308      	adds	r3, #8
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	3b07      	subs	r3, #7
 8001f88:	b29c      	uxth	r4, r3
 8001f8a:	89bb      	ldrh	r3, [r7, #12]
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	4623      	mov	r3, r4
 8001f90:	f7ff f90c 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x+7, y+8, x+8, y+7, detail_color);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	3307      	adds	r3, #7
 8001f9a:	b298      	uxth	r0, r3
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	3308      	adds	r3, #8
 8001fa2:	b299      	uxth	r1, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	3308      	adds	r3, #8
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	3307      	adds	r3, #7
 8001fb2:	b29c      	uxth	r4, r3
 8001fb4:	89bb      	ldrh	r3, [r7, #12]
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	4623      	mov	r3, r4
 8001fba:	f7ff f8f7 	bl	80011ac <ILI9341_DrawLine>

	    // Cánh đuôi ngang - nhỏ và thanh lịch
	    ILI9341_DrawLine(x-8, y-6, x-4, y-4, wing_color);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	3b08      	subs	r3, #8
 8001fc4:	b298      	uxth	r0, r3
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	3b06      	subs	r3, #6
 8001fcc:	b299      	uxth	r1, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	3b04      	subs	r3, #4
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	3b04      	subs	r3, #4
 8001fdc:	b29c      	uxth	r4, r3
 8001fde:	8abb      	ldrh	r3, [r7, #20]
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	4623      	mov	r3, r4
 8001fe4:	f7ff f8e2 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x-8, y+6, x-4, y+4, wing_color);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	3b08      	subs	r3, #8
 8001fee:	b298      	uxth	r0, r3
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	3306      	adds	r3, #6
 8001ff6:	b299      	uxth	r1, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	3b04      	subs	r3, #4
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	b29b      	uxth	r3, r3
 8002004:	3304      	adds	r3, #4
 8002006:	b29c      	uxth	r4, r3
 8002008:	8abb      	ldrh	r3, [r7, #20]
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	4623      	mov	r3, r4
 800200e:	f7ff f8cd 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x-7, y-5, x-5, y-3, wing_color);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	b29b      	uxth	r3, r3
 8002016:	3b07      	subs	r3, #7
 8002018:	b298      	uxth	r0, r3
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	b29b      	uxth	r3, r3
 800201e:	3b05      	subs	r3, #5
 8002020:	b299      	uxth	r1, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	b29b      	uxth	r3, r3
 8002026:	3b05      	subs	r3, #5
 8002028:	b29a      	uxth	r2, r3
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	b29b      	uxth	r3, r3
 800202e:	3b03      	subs	r3, #3
 8002030:	b29c      	uxth	r4, r3
 8002032:	8abb      	ldrh	r3, [r7, #20]
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	4623      	mov	r3, r4
 8002038:	f7ff f8b8 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x-7, y+5, x-5, y+3, wing_color);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	b29b      	uxth	r3, r3
 8002040:	3b07      	subs	r3, #7
 8002042:	b298      	uxth	r0, r3
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	b29b      	uxth	r3, r3
 8002048:	3305      	adds	r3, #5
 800204a:	b299      	uxth	r1, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	b29b      	uxth	r3, r3
 8002050:	3b05      	subs	r3, #5
 8002052:	b29a      	uxth	r2, r3
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	b29b      	uxth	r3, r3
 8002058:	3303      	adds	r3, #3
 800205a:	b29c      	uxth	r4, r3
 800205c:	8abb      	ldrh	r3, [r7, #20]
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	4623      	mov	r3, r4
 8002062:	f7ff f8a3 	bl	80011ac <ILI9341_DrawLine>

	    // Động cơ - hình trụ thực tế
	    // Động cơ trên
	    ILI9341_DrawLine(x-1, y-11, x+3, y-9, engine_color);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	b29b      	uxth	r3, r3
 800206a:	3b01      	subs	r3, #1
 800206c:	b298      	uxth	r0, r3
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	b29b      	uxth	r3, r3
 8002072:	3b0b      	subs	r3, #11
 8002074:	b299      	uxth	r1, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	b29b      	uxth	r3, r3
 800207a:	3303      	adds	r3, #3
 800207c:	b29a      	uxth	r2, r3
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	b29b      	uxth	r3, r3
 8002082:	3b09      	subs	r3, #9
 8002084:	b29c      	uxth	r4, r3
 8002086:	89fb      	ldrh	r3, [r7, #14]
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	4623      	mov	r3, r4
 800208c:	f7ff f88e 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x-1, y-10, x+3, y-8, engine_color);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	b29b      	uxth	r3, r3
 8002094:	3b01      	subs	r3, #1
 8002096:	b298      	uxth	r0, r3
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	b29b      	uxth	r3, r3
 800209c:	3b0a      	subs	r3, #10
 800209e:	b299      	uxth	r1, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	3303      	adds	r3, #3
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	3b08      	subs	r3, #8
 80020ae:	b29c      	uxth	r4, r3
 80020b0:	89fb      	ldrh	r3, [r7, #14]
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	4623      	mov	r3, r4
 80020b6:	f7ff f879 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x, y-12, x+2, y-10, engine_color);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	b298      	uxth	r0, r3
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	3b0c      	subs	r3, #12
 80020c4:	b299      	uxth	r1, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	3302      	adds	r3, #2
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	3b0a      	subs	r3, #10
 80020d4:	b29c      	uxth	r4, r3
 80020d6:	89fb      	ldrh	r3, [r7, #14]
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	4623      	mov	r3, r4
 80020dc:	f7ff f866 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawPixel(x-1, y-12, detail_color);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	3b01      	subs	r3, #1
 80020e6:	b298      	uxth	r0, r3
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	3b0c      	subs	r3, #12
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	89ba      	ldrh	r2, [r7, #12]
 80020f2:	4619      	mov	r1, r3
 80020f4:	f7fe ff98 	bl	8001028 <ILI9341_DrawPixel>
	    ILI9341_DrawPixel(x+3, y-8, detail_color);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	3303      	adds	r3, #3
 80020fe:	b298      	uxth	r0, r3
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	b29b      	uxth	r3, r3
 8002104:	3b08      	subs	r3, #8
 8002106:	b29b      	uxth	r3, r3
 8002108:	89ba      	ldrh	r2, [r7, #12]
 800210a:	4619      	mov	r1, r3
 800210c:	f7fe ff8c 	bl	8001028 <ILI9341_DrawPixel>

	    // Động cơ dưới
	    ILI9341_DrawLine(x-1, y+11, x+3, y+9, engine_color);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	b29b      	uxth	r3, r3
 8002114:	3b01      	subs	r3, #1
 8002116:	b298      	uxth	r0, r3
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	b29b      	uxth	r3, r3
 800211c:	330b      	adds	r3, #11
 800211e:	b299      	uxth	r1, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	b29b      	uxth	r3, r3
 8002124:	3303      	adds	r3, #3
 8002126:	b29a      	uxth	r2, r3
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	b29b      	uxth	r3, r3
 800212c:	3309      	adds	r3, #9
 800212e:	b29c      	uxth	r4, r3
 8002130:	89fb      	ldrh	r3, [r7, #14]
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	4623      	mov	r3, r4
 8002136:	f7ff f839 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x-1, y+10, x+3, y+8, engine_color);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	b29b      	uxth	r3, r3
 800213e:	3b01      	subs	r3, #1
 8002140:	b298      	uxth	r0, r3
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	b29b      	uxth	r3, r3
 8002146:	330a      	adds	r3, #10
 8002148:	b299      	uxth	r1, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	b29b      	uxth	r3, r3
 800214e:	3303      	adds	r3, #3
 8002150:	b29a      	uxth	r2, r3
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	b29b      	uxth	r3, r3
 8002156:	3308      	adds	r3, #8
 8002158:	b29c      	uxth	r4, r3
 800215a:	89fb      	ldrh	r3, [r7, #14]
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	4623      	mov	r3, r4
 8002160:	f7ff f824 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawLine(x, y+12, x+2, y+10, engine_color);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	b298      	uxth	r0, r3
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	b29b      	uxth	r3, r3
 800216c:	330c      	adds	r3, #12
 800216e:	b299      	uxth	r1, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	b29b      	uxth	r3, r3
 8002174:	3302      	adds	r3, #2
 8002176:	b29a      	uxth	r2, r3
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	b29b      	uxth	r3, r3
 800217c:	330a      	adds	r3, #10
 800217e:	b29c      	uxth	r4, r3
 8002180:	89fb      	ldrh	r3, [r7, #14]
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	4623      	mov	r3, r4
 8002186:	f7ff f811 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawPixel(x-1, y+12, detail_color);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	b29b      	uxth	r3, r3
 800218e:	3b01      	subs	r3, #1
 8002190:	b298      	uxth	r0, r3
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	b29b      	uxth	r3, r3
 8002196:	330c      	adds	r3, #12
 8002198:	b29b      	uxth	r3, r3
 800219a:	89ba      	ldrh	r2, [r7, #12]
 800219c:	4619      	mov	r1, r3
 800219e:	f7fe ff43 	bl	8001028 <ILI9341_DrawPixel>
	    ILI9341_DrawPixel(x+3, y+8, detail_color);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	3303      	adds	r3, #3
 80021a8:	b298      	uxth	r0, r3
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	3308      	adds	r3, #8
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	89ba      	ldrh	r2, [r7, #12]
 80021b4:	4619      	mov	r1, r3
 80021b6:	f7fe ff37 	bl	8001028 <ILI9341_DrawPixel>

	    // Cửa sổ máy bay - hàng cửa sổ đẹp
	    ILI9341_DrawPixel(x-10, y-1, window_color);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	b29b      	uxth	r3, r3
 80021be:	3b0a      	subs	r3, #10
 80021c0:	b298      	uxth	r0, r3
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	3b01      	subs	r3, #1
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	8a3a      	ldrh	r2, [r7, #16]
 80021cc:	4619      	mov	r1, r3
 80021ce:	f7fe ff2b 	bl	8001028 <ILI9341_DrawPixel>
	    ILI9341_DrawPixel(x-8, y-1, window_color);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	3b08      	subs	r3, #8
 80021d8:	b298      	uxth	r0, r3
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	b29b      	uxth	r3, r3
 80021de:	3b01      	subs	r3, #1
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	8a3a      	ldrh	r2, [r7, #16]
 80021e4:	4619      	mov	r1, r3
 80021e6:	f7fe ff1f 	bl	8001028 <ILI9341_DrawPixel>
	    ILI9341_DrawPixel(x-6, y-1, window_color);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	3b06      	subs	r3, #6
 80021f0:	b298      	uxth	r0, r3
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	3b01      	subs	r3, #1
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	8a3a      	ldrh	r2, [r7, #16]
 80021fc:	4619      	mov	r1, r3
 80021fe:	f7fe ff13 	bl	8001028 <ILI9341_DrawPixel>
	    ILI9341_DrawPixel(x-4, y-1, window_color);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	b29b      	uxth	r3, r3
 8002206:	3b04      	subs	r3, #4
 8002208:	b298      	uxth	r0, r3
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	b29b      	uxth	r3, r3
 800220e:	3b01      	subs	r3, #1
 8002210:	b29b      	uxth	r3, r3
 8002212:	8a3a      	ldrh	r2, [r7, #16]
 8002214:	4619      	mov	r1, r3
 8002216:	f7fe ff07 	bl	8001028 <ILI9341_DrawPixel>
	    ILI9341_DrawPixel(x-10, y+1, window_color);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	b29b      	uxth	r3, r3
 800221e:	3b0a      	subs	r3, #10
 8002220:	b298      	uxth	r0, r3
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	b29b      	uxth	r3, r3
 8002226:	3301      	adds	r3, #1
 8002228:	b29b      	uxth	r3, r3
 800222a:	8a3a      	ldrh	r2, [r7, #16]
 800222c:	4619      	mov	r1, r3
 800222e:	f7fe fefb 	bl	8001028 <ILI9341_DrawPixel>
	    ILI9341_DrawPixel(x-8, y+1, window_color);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	b29b      	uxth	r3, r3
 8002236:	3b08      	subs	r3, #8
 8002238:	b298      	uxth	r0, r3
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	b29b      	uxth	r3, r3
 800223e:	3301      	adds	r3, #1
 8002240:	b29b      	uxth	r3, r3
 8002242:	8a3a      	ldrh	r2, [r7, #16]
 8002244:	4619      	mov	r1, r3
 8002246:	f7fe feef 	bl	8001028 <ILI9341_DrawPixel>
	    ILI9341_DrawPixel(x-6, y+1, window_color);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	b29b      	uxth	r3, r3
 800224e:	3b06      	subs	r3, #6
 8002250:	b298      	uxth	r0, r3
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	b29b      	uxth	r3, r3
 8002256:	3301      	adds	r3, #1
 8002258:	b29b      	uxth	r3, r3
 800225a:	8a3a      	ldrh	r2, [r7, #16]
 800225c:	4619      	mov	r1, r3
 800225e:	f7fe fee3 	bl	8001028 <ILI9341_DrawPixel>
	    ILI9341_DrawPixel(x-4, y+1, window_color);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	b29b      	uxth	r3, r3
 8002266:	3b04      	subs	r3, #4
 8002268:	b298      	uxth	r0, r3
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	b29b      	uxth	r3, r3
 800226e:	3301      	adds	r3, #1
 8002270:	b29b      	uxth	r3, r3
 8002272:	8a3a      	ldrh	r2, [r7, #16]
 8002274:	4619      	mov	r1, r3
 8002276:	f7fe fed7 	bl	8001028 <ILI9341_DrawPixel>

	    // Cửa sổ cabin lái
	    ILI9341_DrawPixel(x-12, y, window_color);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	b29b      	uxth	r3, r3
 800227e:	3b0c      	subs	r3, #12
 8002280:	b29b      	uxth	r3, r3
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	b291      	uxth	r1, r2
 8002286:	8a3a      	ldrh	r2, [r7, #16]
 8002288:	4618      	mov	r0, r3
 800228a:	f7fe fecd 	bl	8001028 <ILI9341_DrawPixel>
	    ILI9341_DrawPixel(x-11, y-1, window_color);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	b29b      	uxth	r3, r3
 8002292:	3b0b      	subs	r3, #11
 8002294:	b298      	uxth	r0, r3
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	b29b      	uxth	r3, r3
 800229a:	3b01      	subs	r3, #1
 800229c:	b29b      	uxth	r3, r3
 800229e:	8a3a      	ldrh	r2, [r7, #16]
 80022a0:	4619      	mov	r1, r3
 80022a2:	f7fe fec1 	bl	8001028 <ILI9341_DrawPixel>
	    ILI9341_DrawPixel(x-11, y+1, window_color);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	3b0b      	subs	r3, #11
 80022ac:	b298      	uxth	r0, r3
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	3301      	adds	r3, #1
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	8a3a      	ldrh	r2, [r7, #16]
 80022b8:	4619      	mov	r1, r3
 80022ba:	f7fe feb5 	bl	8001028 <ILI9341_DrawPixel>

	    // Chi tiết trang trí
	    ILI9341_DrawLine(x-5, y, x+5, y, detail_color);  // Đường viền thân
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	3b05      	subs	r3, #5
 80022c4:	b298      	uxth	r0, r3
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	b299      	uxth	r1, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	3305      	adds	r3, #5
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	b29c      	uxth	r4, r3
 80022d6:	89bb      	ldrh	r3, [r7, #12]
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	4623      	mov	r3, r4
 80022dc:	f7fe ff66 	bl	80011ac <ILI9341_DrawLine>
	    ILI9341_DrawPixel(x+10, y-1, detail_color);      // Logo/chi tiết
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	330a      	adds	r3, #10
 80022e6:	b298      	uxth	r0, r3
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	3b01      	subs	r3, #1
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	89ba      	ldrh	r2, [r7, #12]
 80022f2:	4619      	mov	r1, r3
 80022f4:	f7fe fe98 	bl	8001028 <ILI9341_DrawPixel>
	    ILI9341_DrawPixel(x+10, y+1, detail_color);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	330a      	adds	r3, #10
 80022fe:	b298      	uxth	r0, r3
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	b29b      	uxth	r3, r3
 8002304:	3301      	adds	r3, #1
 8002306:	b29b      	uxth	r3, r3
 8002308:	89ba      	ldrh	r2, [r7, #12]
 800230a:	4619      	mov	r1, r3
 800230c:	f7fe fe8c 	bl	8001028 <ILI9341_DrawPixel>
}
 8002310:	bf00      	nop
 8002312:	371c      	adds	r7, #28
 8002314:	46bd      	mov	sp, r7
 8002316:	bd90      	pop	{r4, r7, pc}

08002318 <draw_enemies>:
//	ILI9341_DrawRectangle(x, y, PLANE_WIDTH, PLANE_HEIGHT, GREEN);
//}
//void erase_enemies(int x, int y) { //hàm xóa enemies
//	ILI9341_DrawRectangle(x, y, PLANE_WIDTH, PLANE_HEIGHT, WHITE);
//}
void draw_enemies(int x, int y) { // hàm vẽ enemies
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af02      	add	r7, sp, #8
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
    // Thân chính (bay từ trên xuống - mũi hướng xuống)
    ILI9341_DrawRectangle(x + 5, y + 8, 15, 4, DARKGREEN);  // thân trung tâm
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	b29b      	uxth	r3, r3
 8002326:	3305      	adds	r3, #5
 8002328:	b298      	uxth	r0, r3
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	b29b      	uxth	r3, r3
 800232e:	3308      	adds	r3, #8
 8002330:	b299      	uxth	r1, r3
 8002332:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	2304      	movs	r3, #4
 800233a:	220f      	movs	r2, #15
 800233c:	f7fe feda 	bl	80010f4 <ILI9341_DrawRectangle>
    ILI9341_DrawRectangle(x + 2, y + 10, 8, 2, DARKGREEN);  // mũi nhọn
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	b29b      	uxth	r3, r3
 8002344:	3302      	adds	r3, #2
 8002346:	b298      	uxth	r0, r3
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	b29b      	uxth	r3, r3
 800234c:	330a      	adds	r3, #10
 800234e:	b299      	uxth	r1, r3
 8002350:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	2302      	movs	r3, #2
 8002358:	2208      	movs	r2, #8
 800235a:	f7fe fecb 	bl	80010f4 <ILI9341_DrawRectangle>

    // Cánh delta (quay 90 độ)
    ILI9341_DrawRectangle(x + 8, y + 2, 6, 16, GREEN);      // cánh chính
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	b29b      	uxth	r3, r3
 8002362:	3308      	adds	r3, #8
 8002364:	b298      	uxth	r0, r3
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	b29b      	uxth	r3, r3
 800236a:	3302      	adds	r3, #2
 800236c:	b299      	uxth	r1, r3
 800236e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	2310      	movs	r3, #16
 8002376:	2206      	movs	r2, #6
 8002378:	f7fe febc 	bl	80010f4 <ILI9341_DrawRectangle>
    ILI9341_DrawRectangle(x + 6, y + 4, 10, 12, GREEN);     // phần cánh rộng
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	b29b      	uxth	r3, r3
 8002380:	3306      	adds	r3, #6
 8002382:	b298      	uxth	r0, r3
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	b29b      	uxth	r3, r3
 8002388:	3304      	adds	r3, #4
 800238a:	b299      	uxth	r1, r3
 800238c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	230c      	movs	r3, #12
 8002394:	220a      	movs	r2, #10
 8002396:	f7fe fead 	bl	80010f4 <ILI9341_DrawRectangle>
    ILI9341_DrawRectangle(x + 4, y + 6, 14, 8, GREEN);      // phần cánh trong
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	b29b      	uxth	r3, r3
 800239e:	3304      	adds	r3, #4
 80023a0:	b298      	uxth	r0, r3
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	3306      	adds	r3, #6
 80023a8:	b299      	uxth	r1, r3
 80023aa:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	2308      	movs	r3, #8
 80023b2:	220e      	movs	r2, #14
 80023b4:	f7fe fe9e 	bl	80010f4 <ILI9341_DrawRectangle>

    // Động cơ phía sau (2 ống ở phía trên)
    ILI9341_DrawRectangle(x + 18, y + 4, 4, 3, DARKGREEN); // động cơ trên
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	3312      	adds	r3, #18
 80023be:	b298      	uxth	r0, r3
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	3304      	adds	r3, #4
 80023c6:	b299      	uxth	r1, r3
 80023c8:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	2303      	movs	r3, #3
 80023d0:	2204      	movs	r2, #4
 80023d2:	f7fe fe8f 	bl	80010f4 <ILI9341_DrawRectangle>
    ILI9341_DrawRectangle(x + 18, y + 13, 4, 3, DARKGREEN);// động cơ dưới
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	b29b      	uxth	r3, r3
 80023da:	3312      	adds	r3, #18
 80023dc:	b298      	uxth	r0, r3
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	330d      	adds	r3, #13
 80023e4:	b299      	uxth	r1, r3
 80023e6:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	2303      	movs	r3, #3
 80023ee:	2204      	movs	r2, #4
 80023f0:	f7fe fe80 	bl	80010f4 <ILI9341_DrawRectangle>

    // Cockpit (buồng lái)
    ILI9341_DrawRectangle(x + 7, y + 9, 4, 2, BLUE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	3307      	adds	r3, #7
 80023fa:	b298      	uxth	r0, r3
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	b29b      	uxth	r3, r3
 8002400:	3309      	adds	r3, #9
 8002402:	b299      	uxth	r1, r3
 8002404:	231f      	movs	r3, #31
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	2302      	movs	r3, #2
 800240a:	2204      	movs	r2, #4
 800240c:	f7fe fe72 	bl	80010f4 <ILI9341_DrawRectangle>

    // Chi tiết nhỏ (đèn cảnh báo)
    ILI9341_DrawPixel(x + 10, y + 6, RED);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	b29b      	uxth	r3, r3
 8002414:	330a      	adds	r3, #10
 8002416:	b298      	uxth	r0, r3
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	b29b      	uxth	r3, r3
 800241c:	3306      	adds	r3, #6
 800241e:	b29b      	uxth	r3, r3
 8002420:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002424:	4619      	mov	r1, r3
 8002426:	f7fe fdff 	bl	8001028 <ILI9341_DrawPixel>
    ILI9341_DrawPixel(x + 10, y + 14, RED);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	b29b      	uxth	r3, r3
 800242e:	330a      	adds	r3, #10
 8002430:	b298      	uxth	r0, r3
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	b29b      	uxth	r3, r3
 8002436:	330e      	adds	r3, #14
 8002438:	b29b      	uxth	r3, r3
 800243a:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800243e:	4619      	mov	r1, r3
 8002440:	f7fe fdf2 	bl	8001028 <ILI9341_DrawPixel>
}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <erase_enemies>:

void erase_enemies(int x, int y) { // hàm xóa enemies
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af02      	add	r7, sp, #8
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
    // Xóa toàn bộ vùng enemy (sau khi quay)
    ILI9341_DrawRectangle(x, y, 25, 20, WHITE);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	b298      	uxth	r0, r3
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	b299      	uxth	r1, r3
 800245e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	2314      	movs	r3, #20
 8002466:	2219      	movs	r2, #25
 8002468:	f7fe fe44 	bl	80010f4 <ILI9341_DrawRectangle>
}
 800246c:	bf00      	nop
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <init_enemies>:

void init_enemies() { //hàm khởi tạo enemies
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
	for (int i = 0; i < current_enemy_count; i++) {
 800247a:	2300      	movs	r3, #0
 800247c:	607b      	str	r3, [r7, #4]
 800247e:	e031      	b.n	80024e4 <init_enemies+0x70>
		enemies[i].x = 280 + i * 10;
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	4613      	mov	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	f503 718c 	add.w	r1, r3, #280	@ 0x118
 800248e:	481a      	ldr	r0, [pc, #104]	@ (80024f8 <init_enemies+0x84>)
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4403      	add	r3, r0
 800249c:	6019      	str	r1, [r3, #0]
		enemies[i].y = rand() % 100;
 800249e:	f004 fc0d 	bl	8006cbc <rand>
 80024a2:	4603      	mov	r3, r0
 80024a4:	4a15      	ldr	r2, [pc, #84]	@ (80024fc <init_enemies+0x88>)
 80024a6:	fb82 1203 	smull	r1, r2, r2, r3
 80024aa:	1151      	asrs	r1, r2, #5
 80024ac:	17da      	asrs	r2, r3, #31
 80024ae:	1a8a      	subs	r2, r1, r2
 80024b0:	2164      	movs	r1, #100	@ 0x64
 80024b2:	fb01 f202 	mul.w	r2, r1, r2
 80024b6:	1a9a      	subs	r2, r3, r2
 80024b8:	480f      	ldr	r0, [pc, #60]	@ (80024f8 <init_enemies+0x84>)
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	440b      	add	r3, r1
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4403      	add	r3, r0
 80024c6:	3304      	adds	r3, #4
 80024c8:	601a      	str	r2, [r3, #0]
		enemies[i].active = 1;
 80024ca:	490b      	ldr	r1, [pc, #44]	@ (80024f8 <init_enemies+0x84>)
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	4413      	add	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	440b      	add	r3, r1
 80024d8:	3308      	adds	r3, #8
 80024da:	2201      	movs	r2, #1
 80024dc:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < current_enemy_count; i++) {
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3301      	adds	r3, #1
 80024e2:	607b      	str	r3, [r7, #4]
 80024e4:	4b06      	ldr	r3, [pc, #24]	@ (8002500 <init_enemies+0x8c>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	dbc8      	blt.n	8002480 <init_enemies+0xc>
	}
}
 80024ee:	bf00      	nop
 80024f0:	bf00      	nop
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	20000178 	.word	0x20000178
 80024fc:	51eb851f 	.word	0x51eb851f
 8002500:	2000000c 	.word	0x2000000c

08002504 <update_enemies>:

void update_enemies() { //hàm cập nhật enemies
 8002504:	b590      	push	{r4, r7, lr}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
	for (int i = 0; i < current_enemy_count; i++) {
 800250a:	2300      	movs	r3, #0
 800250c:	607b      	str	r3, [r7, #4]
 800250e:	e090      	b.n	8002632 <update_enemies+0x12e>
		if (enemies[i].active) {
 8002510:	494d      	ldr	r1, [pc, #308]	@ (8002648 <update_enemies+0x144>)
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	4413      	add	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	3308      	adds	r3, #8
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 8082 	beq.w	800262c <update_enemies+0x128>
			erase_enemies(enemies[i].x, enemies[i].y);
 8002528:	4947      	ldr	r1, [pc, #284]	@ (8002648 <update_enemies+0x144>)
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	4413      	add	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	6818      	ldr	r0, [r3, #0]
 8002538:	4943      	ldr	r1, [pc, #268]	@ (8002648 <update_enemies+0x144>)
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	4413      	add	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	3304      	adds	r3, #4
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4619      	mov	r1, r3
 800254c:	f7ff ff7e 	bl	800244c <erase_enemies>

			enemies[i].x -= level*3;
 8002550:	493d      	ldr	r1, [pc, #244]	@ (8002648 <update_enemies+0x144>)
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	4413      	add	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	4b3a      	ldr	r3, [pc, #232]	@ (800264c <update_enemies+0x148>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4619      	mov	r1, r3
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	1acb      	subs	r3, r1, r3
 800256a:	18d1      	adds	r1, r2, r3
 800256c:	4836      	ldr	r0, [pc, #216]	@ (8002648 <update_enemies+0x144>)
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4403      	add	r3, r0
 800257a:	6019      	str	r1, [r3, #0]

			if (enemies[i].x <= 0) {
 800257c:	4932      	ldr	r1, [pc, #200]	@ (8002648 <update_enemies+0x144>)
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	4413      	add	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	dc39      	bgt.n	8002604 <update_enemies+0x100>
				enemies[i].x = 320;
 8002590:	492d      	ldr	r1, [pc, #180]	@ (8002648 <update_enemies+0x144>)
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	4613      	mov	r3, r2
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	4413      	add	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	440b      	add	r3, r1
 800259e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80025a2:	601a      	str	r2, [r3, #0]
				enemies[i].y = (enemies[i].y + 100 + rand() * 3 % 70) % 220;
 80025a4:	4928      	ldr	r1, [pc, #160]	@ (8002648 <update_enemies+0x144>)
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	4413      	add	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	3304      	adds	r3, #4
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f103 0464 	add.w	r4, r3, #100	@ 0x64
 80025ba:	f004 fb7f 	bl	8006cbc <rand>
 80025be:	4602      	mov	r2, r0
 80025c0:	4613      	mov	r3, r2
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	4413      	add	r3, r2
 80025c6:	4a22      	ldr	r2, [pc, #136]	@ (8002650 <update_enemies+0x14c>)
 80025c8:	fb82 1203 	smull	r1, r2, r2, r3
 80025cc:	441a      	add	r2, r3
 80025ce:	1191      	asrs	r1, r2, #6
 80025d0:	17da      	asrs	r2, r3, #31
 80025d2:	1a8a      	subs	r2, r1, r2
 80025d4:	2146      	movs	r1, #70	@ 0x46
 80025d6:	fb01 f202 	mul.w	r2, r1, r2
 80025da:	1a9a      	subs	r2, r3, r2
 80025dc:	18a3      	adds	r3, r4, r2
 80025de:	4a1d      	ldr	r2, [pc, #116]	@ (8002654 <update_enemies+0x150>)
 80025e0:	fb82 1203 	smull	r1, r2, r2, r3
 80025e4:	10d1      	asrs	r1, r2, #3
 80025e6:	17da      	asrs	r2, r3, #31
 80025e8:	1a8a      	subs	r2, r1, r2
 80025ea:	21dc      	movs	r1, #220	@ 0xdc
 80025ec:	fb01 f202 	mul.w	r2, r1, r2
 80025f0:	1a9a      	subs	r2, r3, r2
 80025f2:	4815      	ldr	r0, [pc, #84]	@ (8002648 <update_enemies+0x144>)
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	460b      	mov	r3, r1
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	440b      	add	r3, r1
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4403      	add	r3, r0
 8002600:	3304      	adds	r3, #4
 8002602:	601a      	str	r2, [r3, #0]
			}

			draw_enemies(enemies[i].x, enemies[i].y); // vẽ lại enemy
 8002604:	4910      	ldr	r1, [pc, #64]	@ (8002648 <update_enemies+0x144>)
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	4413      	add	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	6818      	ldr	r0, [r3, #0]
 8002614:	490c      	ldr	r1, [pc, #48]	@ (8002648 <update_enemies+0x144>)
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	4613      	mov	r3, r2
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	4413      	add	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	3304      	adds	r3, #4
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4619      	mov	r1, r3
 8002628:	f7ff fe76 	bl	8002318 <draw_enemies>
	for (int i = 0; i < current_enemy_count; i++) {
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3301      	adds	r3, #1
 8002630:	607b      	str	r3, [r7, #4]
 8002632:	4b09      	ldr	r3, [pc, #36]	@ (8002658 <update_enemies+0x154>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	429a      	cmp	r2, r3
 800263a:	f6ff af69 	blt.w	8002510 <update_enemies+0xc>
		}
	}
}
 800263e:	bf00      	nop
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	bd90      	pop	{r4, r7, pc}
 8002648:	20000178 	.word	0x20000178
 800264c:	20000010 	.word	0x20000010
 8002650:	ea0ea0eb 	.word	0xea0ea0eb
 8002654:	094f2095 	.word	0x094f2095
 8002658:	2000000c 	.word	0x2000000c

0800265c <init_boss>:

void init_boss() { //hàm khởi tạo boss
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
	boss.x = 280;
 8002660:	4b0a      	ldr	r3, [pc, #40]	@ (800268c <init_boss+0x30>)
 8002662:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8002666:	601a      	str	r2, [r3, #0]
	boss.y = 20;
 8002668:	4b08      	ldr	r3, [pc, #32]	@ (800268c <init_boss+0x30>)
 800266a:	2214      	movs	r2, #20
 800266c:	605a      	str	r2, [r3, #4]
	boss.hp = 20;
 800266e:	4b07      	ldr	r3, [pc, #28]	@ (800268c <init_boss+0x30>)
 8002670:	2214      	movs	r2, #20
 8002672:	609a      	str	r2, [r3, #8]
	boss.active = 1;
 8002674:	4b05      	ldr	r3, [pc, #20]	@ (800268c <init_boss+0x30>)
 8002676:	2201      	movs	r2, #1
 8002678:	60da      	str	r2, [r3, #12]
	boss.laser_timer = 0;
 800267a:	4b04      	ldr	r3, [pc, #16]	@ (800268c <init_boss+0x30>)
 800267c:	2200      	movs	r2, #0
 800267e:	611a      	str	r2, [r3, #16]
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	20000268 	.word	0x20000268

08002690 <draw_boss>:
//}
//
//void erase_boss(int x, int y) { //xóa boss
//	ILI9341_DrawRectangle(x, y, BOSS_WIDTH, BOSS_HEIGHT, WHITE);
//}
void draw_boss(int x, int y) { // vẽ boss
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af02      	add	r7, sp, #8
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
    // Thân chính (oval lớn)
    ILI9341_DrawRectangle(x + 20, y + 15, 40, 20, GREEN);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	b29b      	uxth	r3, r3
 800269e:	3314      	adds	r3, #20
 80026a0:	b298      	uxth	r0, r3
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	330f      	adds	r3, #15
 80026a8:	b299      	uxth	r1, r3
 80026aa:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	2314      	movs	r3, #20
 80026b2:	2228      	movs	r2, #40	@ 0x28
 80026b4:	f7fe fd1e 	bl	80010f4 <ILI9341_DrawRectangle>
    ILI9341_DrawRectangle(x + 15, y + 20, 50, 10, GREEN);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	330f      	adds	r3, #15
 80026be:	b298      	uxth	r0, r3
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	3314      	adds	r3, #20
 80026c6:	b299      	uxth	r1, r3
 80026c8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	230a      	movs	r3, #10
 80026d0:	2232      	movs	r2, #50	@ 0x32
 80026d2:	f7fe fd0f 	bl	80010f4 <ILI9341_DrawRectangle>

    // Đầu boss (phần nhọn phía trước)
    ILI9341_DrawRectangle(x + 65, y + 22, 10, 6, DARKGREEN);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	b29b      	uxth	r3, r3
 80026da:	3341      	adds	r3, #65	@ 0x41
 80026dc:	b298      	uxth	r0, r3
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	3316      	adds	r3, #22
 80026e4:	b299      	uxth	r1, r3
 80026e6:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	2306      	movs	r3, #6
 80026ee:	220a      	movs	r2, #10
 80026f0:	f7fe fd00 	bl	80010f4 <ILI9341_DrawRectangle>

    // Cánh trên
    ILI9341_DrawRectangle(x + 10, y + 5, 60, 8, GREEN);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	330a      	adds	r3, #10
 80026fa:	b298      	uxth	r0, r3
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	3305      	adds	r3, #5
 8002702:	b299      	uxth	r1, r3
 8002704:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	2308      	movs	r3, #8
 800270c:	223c      	movs	r2, #60	@ 0x3c
 800270e:	f7fe fcf1 	bl	80010f4 <ILI9341_DrawRectangle>
    ILI9341_DrawRectangle(x + 5, y + 8, 70, 4, GREEN);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	b29b      	uxth	r3, r3
 8002716:	3305      	adds	r3, #5
 8002718:	b298      	uxth	r0, r3
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	b29b      	uxth	r3, r3
 800271e:	3308      	adds	r3, #8
 8002720:	b299      	uxth	r1, r3
 8002722:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	2304      	movs	r3, #4
 800272a:	2246      	movs	r2, #70	@ 0x46
 800272c:	f7fe fce2 	bl	80010f4 <ILI9341_DrawRectangle>

    // Cánh dưới
    ILI9341_DrawRectangle(x + 10, y + 37, 60, 8, GREEN);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	b29b      	uxth	r3, r3
 8002734:	330a      	adds	r3, #10
 8002736:	b298      	uxth	r0, r3
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	b29b      	uxth	r3, r3
 800273c:	3325      	adds	r3, #37	@ 0x25
 800273e:	b299      	uxth	r1, r3
 8002740:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	2308      	movs	r3, #8
 8002748:	223c      	movs	r2, #60	@ 0x3c
 800274a:	f7fe fcd3 	bl	80010f4 <ILI9341_DrawRectangle>
    ILI9341_DrawRectangle(x + 5, y + 40, 70, 4, GREEN);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	b29b      	uxth	r3, r3
 8002752:	3305      	adds	r3, #5
 8002754:	b298      	uxth	r0, r3
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	b29b      	uxth	r3, r3
 800275a:	3328      	adds	r3, #40	@ 0x28
 800275c:	b299      	uxth	r1, r3
 800275e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	2304      	movs	r3, #4
 8002766:	2246      	movs	r2, #70	@ 0x46
 8002768:	f7fe fcc4 	bl	80010f4 <ILI9341_DrawRectangle>

    // Động cơ/Turbin (4 cái)
    ILI9341_DrawRectangle(x + 8, y + 13, 6, 8, DARKGREEN);   // trái trên
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	b29b      	uxth	r3, r3
 8002770:	3308      	adds	r3, #8
 8002772:	b298      	uxth	r0, r3
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	b29b      	uxth	r3, r3
 8002778:	330d      	adds	r3, #13
 800277a:	b299      	uxth	r1, r3
 800277c:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	2308      	movs	r3, #8
 8002784:	2206      	movs	r2, #6
 8002786:	f7fe fcb5 	bl	80010f4 <ILI9341_DrawRectangle>
    ILI9341_DrawRectangle(x + 8, y + 29, 6, 8, DARKGREEN);   // trái dưới
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	b29b      	uxth	r3, r3
 800278e:	3308      	adds	r3, #8
 8002790:	b298      	uxth	r0, r3
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	b29b      	uxth	r3, r3
 8002796:	331d      	adds	r3, #29
 8002798:	b299      	uxth	r1, r3
 800279a:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	2308      	movs	r3, #8
 80027a2:	2206      	movs	r2, #6
 80027a4:	f7fe fca6 	bl	80010f4 <ILI9341_DrawRectangle>
    ILI9341_DrawRectangle(x + 66, y + 13, 6, 8, DARKGREEN);  // phải trên
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	3342      	adds	r3, #66	@ 0x42
 80027ae:	b298      	uxth	r0, r3
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	330d      	adds	r3, #13
 80027b6:	b299      	uxth	r1, r3
 80027b8:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	2308      	movs	r3, #8
 80027c0:	2206      	movs	r2, #6
 80027c2:	f7fe fc97 	bl	80010f4 <ILI9341_DrawRectangle>
    ILI9341_DrawRectangle(x + 66, y + 29, 6, 8, DARKGREEN);  // phải dưới
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	3342      	adds	r3, #66	@ 0x42
 80027cc:	b298      	uxth	r0, r3
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	331d      	adds	r3, #29
 80027d4:	b299      	uxth	r1, r3
 80027d6:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	2308      	movs	r3, #8
 80027de:	2206      	movs	r2, #6
 80027e0:	f7fe fc88 	bl	80010f4 <ILI9341_DrawRectangle>

    // Đuôi
    ILI9341_DrawRectangle(x, y + 20, 15, 10, GREEN);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	b298      	uxth	r0, r3
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	3314      	adds	r3, #20
 80027ee:	b299      	uxth	r1, r3
 80027f0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	230a      	movs	r3, #10
 80027f8:	220f      	movs	r2, #15
 80027fa:	f7fe fc7b 	bl	80010f4 <ILI9341_DrawRectangle>
    ILI9341_DrawRectangle(x - 5, y + 23, 8, 4, GREEN);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	b29b      	uxth	r3, r3
 8002802:	3b05      	subs	r3, #5
 8002804:	b298      	uxth	r0, r3
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	b29b      	uxth	r3, r3
 800280a:	3317      	adds	r3, #23
 800280c:	b299      	uxth	r1, r3
 800280e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	2304      	movs	r3, #4
 8002816:	2208      	movs	r2, #8
 8002818:	f7fe fc6c 	bl	80010f4 <ILI9341_DrawRectangle>

    // Cửa sổ/Cockpit
    ILI9341_DrawRectangle(x + 35, y + 22, 8, 6, BLUE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	b29b      	uxth	r3, r3
 8002820:	3323      	adds	r3, #35	@ 0x23
 8002822:	b298      	uxth	r0, r3
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	b29b      	uxth	r3, r3
 8002828:	3316      	adds	r3, #22
 800282a:	b299      	uxth	r1, r3
 800282c:	231f      	movs	r3, #31
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	2306      	movs	r3, #6
 8002832:	2208      	movs	r2, #8
 8002834:	f7fe fc5e 	bl	80010f4 <ILI9341_DrawRectangle>

    // Chi tiết nhỏ (đèn/cảm biến)
    ILI9341_DrawPixel(x + 25, y + 18, RED);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	b29b      	uxth	r3, r3
 800283c:	3319      	adds	r3, #25
 800283e:	b298      	uxth	r0, r3
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	b29b      	uxth	r3, r3
 8002844:	3312      	adds	r3, #18
 8002846:	b29b      	uxth	r3, r3
 8002848:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800284c:	4619      	mov	r1, r3
 800284e:	f7fe fbeb 	bl	8001028 <ILI9341_DrawPixel>
    ILI9341_DrawPixel(x + 55, y + 18, RED);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	b29b      	uxth	r3, r3
 8002856:	3337      	adds	r3, #55	@ 0x37
 8002858:	b298      	uxth	r0, r3
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	b29b      	uxth	r3, r3
 800285e:	3312      	adds	r3, #18
 8002860:	b29b      	uxth	r3, r3
 8002862:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002866:	4619      	mov	r1, r3
 8002868:	f7fe fbde 	bl	8001028 <ILI9341_DrawPixel>
    ILI9341_DrawPixel(x + 25, y + 32, RED);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	b29b      	uxth	r3, r3
 8002870:	3319      	adds	r3, #25
 8002872:	b298      	uxth	r0, r3
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	b29b      	uxth	r3, r3
 8002878:	3320      	adds	r3, #32
 800287a:	b29b      	uxth	r3, r3
 800287c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002880:	4619      	mov	r1, r3
 8002882:	f7fe fbd1 	bl	8001028 <ILI9341_DrawPixel>
    ILI9341_DrawPixel(x + 55, y + 32, RED);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	b29b      	uxth	r3, r3
 800288a:	3337      	adds	r3, #55	@ 0x37
 800288c:	b298      	uxth	r0, r3
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	b29b      	uxth	r3, r3
 8002892:	3320      	adds	r3, #32
 8002894:	b29b      	uxth	r3, r3
 8002896:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800289a:	4619      	mov	r1, r3
 800289c:	f7fe fbc4 	bl	8001028 <ILI9341_DrawPixel>
}
 80028a0:	bf00      	nop
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <erase_boss>:

void erase_boss(int x, int y) { // xóa boss
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af02      	add	r7, sp, #8
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
    // Xóa toàn bộ vùng boss bằng cách vẽ hình chữ nhật trắng lớn
    ILI9341_DrawRectangle(x - 5, y + 5, 85, 45, WHITE);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	3b05      	subs	r3, #5
 80028b8:	b298      	uxth	r0, r3
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	b29b      	uxth	r3, r3
 80028be:	3305      	adds	r3, #5
 80028c0:	b299      	uxth	r1, r3
 80028c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	232d      	movs	r3, #45	@ 0x2d
 80028ca:	2255      	movs	r2, #85	@ 0x55
 80028cc:	f7fe fc12 	bl	80010f4 <ILI9341_DrawRectangle>
}
 80028d0:	bf00      	nop
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <fire_boss_laser>:

void fire_boss_laser() { // hàm bắn đạn của boss
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_BOSS_BULLETS; i += 3) {
 80028de:	2300      	movs	r3, #0
 80028e0:	607b      	str	r3, [r7, #4]
 80028e2:	e071      	b.n	80029c8 <fire_boss_laser+0xf0>
		if (!boss_bullets[i].active) {
 80028e4:	493d      	ldr	r1, [pc, #244]	@ (80029dc <fire_boss_laser+0x104>)
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	4413      	add	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	3308      	adds	r3, #8
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d163      	bne.n	80029c2 <fire_boss_laser+0xea>
			boss_bullets[i].x = boss.x;
 80028fa:	4b39      	ldr	r3, [pc, #228]	@ (80029e0 <fire_boss_laser+0x108>)
 80028fc:	6819      	ldr	r1, [r3, #0]
 80028fe:	4837      	ldr	r0, [pc, #220]	@ (80029dc <fire_boss_laser+0x104>)
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	4413      	add	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4403      	add	r3, r0
 800290c:	6019      	str	r1, [r3, #0]
			boss_bullets[i].y = boss.y;
 800290e:	4b34      	ldr	r3, [pc, #208]	@ (80029e0 <fire_boss_laser+0x108>)
 8002910:	6859      	ldr	r1, [r3, #4]
 8002912:	4832      	ldr	r0, [pc, #200]	@ (80029dc <fire_boss_laser+0x104>)
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	4613      	mov	r3, r2
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	4413      	add	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4403      	add	r3, r0
 8002920:	3304      	adds	r3, #4
 8002922:	6019      	str	r1, [r3, #0]
			boss_bullets[i].active = 1;
 8002924:	492d      	ldr	r1, [pc, #180]	@ (80029dc <fire_boss_laser+0x104>)
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	4613      	mov	r3, r2
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	4413      	add	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	3308      	adds	r3, #8
 8002934:	2201      	movs	r2, #1
 8002936:	601a      	str	r2, [r3, #0]

			boss_bullets[i + 1].x = boss.x;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	1c5a      	adds	r2, r3, #1
 800293c:	4b28      	ldr	r3, [pc, #160]	@ (80029e0 <fire_boss_laser+0x108>)
 800293e:	6819      	ldr	r1, [r3, #0]
 8002940:	4826      	ldr	r0, [pc, #152]	@ (80029dc <fire_boss_laser+0x104>)
 8002942:	4613      	mov	r3, r2
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	4413      	add	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4403      	add	r3, r0
 800294c:	6019      	str	r1, [r3, #0]
			boss_bullets[i + 1].y = boss.y;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	4b23      	ldr	r3, [pc, #140]	@ (80029e0 <fire_boss_laser+0x108>)
 8002954:	6859      	ldr	r1, [r3, #4]
 8002956:	4821      	ldr	r0, [pc, #132]	@ (80029dc <fire_boss_laser+0x104>)
 8002958:	4613      	mov	r3, r2
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	4413      	add	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4403      	add	r3, r0
 8002962:	3304      	adds	r3, #4
 8002964:	6019      	str	r1, [r3, #0]
			boss_bullets[i + 1].active = 1;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	1c5a      	adds	r2, r3, #1
 800296a:	491c      	ldr	r1, [pc, #112]	@ (80029dc <fire_boss_laser+0x104>)
 800296c:	4613      	mov	r3, r2
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	4413      	add	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	3308      	adds	r3, #8
 8002978:	2201      	movs	r2, #1
 800297a:	601a      	str	r2, [r3, #0]

			boss_bullets[i + 2].x = boss.x;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	1c9a      	adds	r2, r3, #2
 8002980:	4b17      	ldr	r3, [pc, #92]	@ (80029e0 <fire_boss_laser+0x108>)
 8002982:	6819      	ldr	r1, [r3, #0]
 8002984:	4815      	ldr	r0, [pc, #84]	@ (80029dc <fire_boss_laser+0x104>)
 8002986:	4613      	mov	r3, r2
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	4413      	add	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4403      	add	r3, r0
 8002990:	6019      	str	r1, [r3, #0]
			boss_bullets[i + 2].y = boss.y;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	1c9a      	adds	r2, r3, #2
 8002996:	4b12      	ldr	r3, [pc, #72]	@ (80029e0 <fire_boss_laser+0x108>)
 8002998:	6859      	ldr	r1, [r3, #4]
 800299a:	4810      	ldr	r0, [pc, #64]	@ (80029dc <fire_boss_laser+0x104>)
 800299c:	4613      	mov	r3, r2
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	4413      	add	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4403      	add	r3, r0
 80029a6:	3304      	adds	r3, #4
 80029a8:	6019      	str	r1, [r3, #0]
			boss_bullets[i + 2].active = 1;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	1c9a      	adds	r2, r3, #2
 80029ae:	490b      	ldr	r1, [pc, #44]	@ (80029dc <fire_boss_laser+0x104>)
 80029b0:	4613      	mov	r3, r2
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	4413      	add	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	3308      	adds	r3, #8
 80029bc:	2201      	movs	r2, #1
 80029be:	601a      	str	r2, [r3, #0]
			break;
 80029c0:	e006      	b.n	80029d0 <fire_boss_laser+0xf8>
	for (int i = 0; i < MAX_BOSS_BULLETS; i += 3) {
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	3303      	adds	r3, #3
 80029c6:	607b      	str	r3, [r7, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b31      	cmp	r3, #49	@ 0x31
 80029cc:	dd8a      	ble.n	80028e4 <fire_boss_laser+0xc>
		}
	}
}
 80029ce:	bf00      	nop
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	2000027c 	.word	0x2000027c
 80029e0:	20000268 	.word	0x20000268

080029e4 <boss_shotgun>:

void boss_shotgun(int i) {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af02      	add	r7, sp, #8
 80029ea:	6078      	str	r0, [r7, #4]
	// Xóa viên đạn cũ
	ILI9341_DrawRectangle(boss_bullets[i].x, boss_bullets[i].y,
 80029ec:	4985      	ldr	r1, [pc, #532]	@ (8002c04 <boss_shotgun+0x220>)
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	4613      	mov	r3, r2
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	4413      	add	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	b298      	uxth	r0, r3
 80029fe:	4981      	ldr	r1, [pc, #516]	@ (8002c04 <boss_shotgun+0x220>)
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	4413      	add	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	b299      	uxth	r1, r3
 8002a12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a16:	9300      	str	r3, [sp, #0]
 8002a18:	2304      	movs	r3, #4
 8002a1a:	2208      	movs	r2, #8
 8002a1c:	f7fe fb6a 	bl	80010f4 <ILI9341_DrawRectangle>
	BULLET_HEIGHT, BULLET_WIDTH, WHITE);
	ILI9341_DrawRectangle(boss_bullets[i + 1].x, boss_bullets[i + 1].y,
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	1c5a      	adds	r2, r3, #1
 8002a24:	4977      	ldr	r1, [pc, #476]	@ (8002c04 <boss_shotgun+0x220>)
 8002a26:	4613      	mov	r3, r2
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	4413      	add	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	440b      	add	r3, r1
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	b298      	uxth	r0, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	1c5a      	adds	r2, r3, #1
 8002a38:	4972      	ldr	r1, [pc, #456]	@ (8002c04 <boss_shotgun+0x220>)
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	4413      	add	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	440b      	add	r3, r1
 8002a44:	3304      	adds	r3, #4
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	b299      	uxth	r1, r3
 8002a4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	2304      	movs	r3, #4
 8002a52:	2208      	movs	r2, #8
 8002a54:	f7fe fb4e 	bl	80010f4 <ILI9341_DrawRectangle>
	BULLET_HEIGHT, BULLET_WIDTH, WHITE);
	ILI9341_DrawRectangle(boss_bullets[i + 2].x, boss_bullets[i + 2].y,
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	1c9a      	adds	r2, r3, #2
 8002a5c:	4969      	ldr	r1, [pc, #420]	@ (8002c04 <boss_shotgun+0x220>)
 8002a5e:	4613      	mov	r3, r2
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	4413      	add	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	440b      	add	r3, r1
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	b298      	uxth	r0, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	1c9a      	adds	r2, r3, #2
 8002a70:	4964      	ldr	r1, [pc, #400]	@ (8002c04 <boss_shotgun+0x220>)
 8002a72:	4613      	mov	r3, r2
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	4413      	add	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	3304      	adds	r3, #4
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	b299      	uxth	r1, r3
 8002a82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	2304      	movs	r3, #4
 8002a8a:	2208      	movs	r2, #8
 8002a8c:	f7fe fb32 	bl	80010f4 <ILI9341_DrawRectangle>
	BULLET_HEIGHT, BULLET_WIDTH, WHITE);

	// Di chuyển đạn xuống
	boss_bullets[i].x -= 2;
 8002a90:	495c      	ldr	r1, [pc, #368]	@ (8002c04 <boss_shotgun+0x220>)
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	4413      	add	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	1e99      	subs	r1, r3, #2
 8002aa2:	4858      	ldr	r0, [pc, #352]	@ (8002c04 <boss_shotgun+0x220>)
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	4413      	add	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4403      	add	r3, r0
 8002ab0:	6019      	str	r1, [r3, #0]

	boss_bullets[i + 1].x -= 2;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	1c5a      	adds	r2, r3, #1
 8002ab6:	4953      	ldr	r1, [pc, #332]	@ (8002c04 <boss_shotgun+0x220>)
 8002ab8:	4613      	mov	r3, r2
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	4413      	add	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	3201      	adds	r2, #1
 8002ac8:	1e99      	subs	r1, r3, #2
 8002aca:	484e      	ldr	r0, [pc, #312]	@ (8002c04 <boss_shotgun+0x220>)
 8002acc:	4613      	mov	r3, r2
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	4413      	add	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4403      	add	r3, r0
 8002ad6:	6019      	str	r1, [r3, #0]
	boss_bullets[i + 1].y += 1;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	1c5a      	adds	r2, r3, #1
 8002adc:	4949      	ldr	r1, [pc, #292]	@ (8002c04 <boss_shotgun+0x220>)
 8002ade:	4613      	mov	r3, r2
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	4413      	add	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	3304      	adds	r3, #4
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	3201      	adds	r2, #1
 8002af0:	1c59      	adds	r1, r3, #1
 8002af2:	4844      	ldr	r0, [pc, #272]	@ (8002c04 <boss_shotgun+0x220>)
 8002af4:	4613      	mov	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	4413      	add	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4403      	add	r3, r0
 8002afe:	3304      	adds	r3, #4
 8002b00:	6019      	str	r1, [r3, #0]

	boss_bullets[i + 2].x -= 2;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	1c9a      	adds	r2, r3, #2
 8002b06:	493f      	ldr	r1, [pc, #252]	@ (8002c04 <boss_shotgun+0x220>)
 8002b08:	4613      	mov	r3, r2
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4413      	add	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	3202      	adds	r2, #2
 8002b18:	1e99      	subs	r1, r3, #2
 8002b1a:	483a      	ldr	r0, [pc, #232]	@ (8002c04 <boss_shotgun+0x220>)
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	4413      	add	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4403      	add	r3, r0
 8002b26:	6019      	str	r1, [r3, #0]
	boss_bullets[i + 2].y -= 1;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	1c9a      	adds	r2, r3, #2
 8002b2c:	4935      	ldr	r1, [pc, #212]	@ (8002c04 <boss_shotgun+0x220>)
 8002b2e:	4613      	mov	r3, r2
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	4413      	add	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	440b      	add	r3, r1
 8002b38:	3304      	adds	r3, #4
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	3202      	adds	r2, #2
 8002b40:	1e59      	subs	r1, r3, #1
 8002b42:	4830      	ldr	r0, [pc, #192]	@ (8002c04 <boss_shotgun+0x220>)
 8002b44:	4613      	mov	r3, r2
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	4413      	add	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4403      	add	r3, r0
 8002b4e:	3304      	adds	r3, #4
 8002b50:	6019      	str	r1, [r3, #0]
//		boss_bullets[i + 2].active = 0;
//		return;
//	}

	// Vẽ lại viên đạn mới
	ILI9341_DrawRectangle(boss_bullets[i].x, boss_bullets[i].y,
 8002b52:	492c      	ldr	r1, [pc, #176]	@ (8002c04 <boss_shotgun+0x220>)
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	440b      	add	r3, r1
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	b298      	uxth	r0, r3
 8002b64:	4927      	ldr	r1, [pc, #156]	@ (8002c04 <boss_shotgun+0x220>)
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	4413      	add	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	3304      	adds	r3, #4
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	b299      	uxth	r1, r3
 8002b78:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	2304      	movs	r3, #4
 8002b80:	2208      	movs	r2, #8
 8002b82:	f7fe fab7 	bl	80010f4 <ILI9341_DrawRectangle>
	BULLET_HEIGHT, BULLET_WIDTH, RED);

	ILI9341_DrawRectangle(boss_bullets[i + 1].x, boss_bullets[i + 1].y,
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	1c5a      	adds	r2, r3, #1
 8002b8a:	491e      	ldr	r1, [pc, #120]	@ (8002c04 <boss_shotgun+0x220>)
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	4413      	add	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	b298      	uxth	r0, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	1c5a      	adds	r2, r3, #1
 8002b9e:	4919      	ldr	r1, [pc, #100]	@ (8002c04 <boss_shotgun+0x220>)
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	4413      	add	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	3304      	adds	r3, #4
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	b299      	uxth	r1, r3
 8002bb0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	2304      	movs	r3, #4
 8002bb8:	2208      	movs	r2, #8
 8002bba:	f7fe fa9b 	bl	80010f4 <ILI9341_DrawRectangle>
	BULLET_HEIGHT, BULLET_WIDTH, RED);

	ILI9341_DrawRectangle(boss_bullets[i + 2].x, boss_bullets[i + 2].y,
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	1c9a      	adds	r2, r3, #2
 8002bc2:	4910      	ldr	r1, [pc, #64]	@ (8002c04 <boss_shotgun+0x220>)
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	4413      	add	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	b298      	uxth	r0, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	1c9a      	adds	r2, r3, #2
 8002bd6:	490b      	ldr	r1, [pc, #44]	@ (8002c04 <boss_shotgun+0x220>)
 8002bd8:	4613      	mov	r3, r2
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	4413      	add	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	3304      	adds	r3, #4
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	b299      	uxth	r1, r3
 8002be8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	2304      	movs	r3, #4
 8002bf0:	2208      	movs	r2, #8
 8002bf2:	f7fe fa7f 	bl	80010f4 <ILI9341_DrawRectangle>
	BULLET_HEIGHT, BULLET_WIDTH, RED);

	check_lose(i);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 fa5e 	bl	80030b8 <check_lose>
}
 8002bfc:	bf00      	nop
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	2000027c 	.word	0x2000027c

08002c08 <boss_burst>:

void boss_burst(int i) {
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af02      	add	r7, sp, #8
 8002c0e:	6078      	str	r0, [r7, #4]
	// Xóa viên đạn cũ
	ILI9341_DrawRectangle(boss_bullets[i].x, boss_bullets[i].y,
 8002c10:	4970      	ldr	r1, [pc, #448]	@ (8002dd4 <boss_burst+0x1cc>)
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	b298      	uxth	r0, r3
 8002c22:	496c      	ldr	r1, [pc, #432]	@ (8002dd4 <boss_burst+0x1cc>)
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	4413      	add	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	440b      	add	r3, r1
 8002c30:	3304      	adds	r3, #4
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	b299      	uxth	r1, r3
 8002c36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	2304      	movs	r3, #4
 8002c3e:	2208      	movs	r2, #8
 8002c40:	f7fe fa58 	bl	80010f4 <ILI9341_DrawRectangle>
	BULLET_HEIGHT, BULLET_WIDTH, WHITE);
	ILI9341_DrawRectangle(boss_bullets[i + 1].x, boss_bullets[i + 1].y,
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	4962      	ldr	r1, [pc, #392]	@ (8002dd4 <boss_burst+0x1cc>)
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	4413      	add	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	b298      	uxth	r0, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	1c5a      	adds	r2, r3, #1
 8002c5c:	495d      	ldr	r1, [pc, #372]	@ (8002dd4 <boss_burst+0x1cc>)
 8002c5e:	4613      	mov	r3, r2
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	4413      	add	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	3304      	adds	r3, #4
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	b299      	uxth	r1, r3
 8002c6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	2304      	movs	r3, #4
 8002c76:	2208      	movs	r2, #8
 8002c78:	f7fe fa3c 	bl	80010f4 <ILI9341_DrawRectangle>
	BULLET_HEIGHT, BULLET_WIDTH, WHITE);
	ILI9341_DrawRectangle(boss_bullets[i + 2].x, boss_bullets[i + 2].y,
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	1c9a      	adds	r2, r3, #2
 8002c80:	4954      	ldr	r1, [pc, #336]	@ (8002dd4 <boss_burst+0x1cc>)
 8002c82:	4613      	mov	r3, r2
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	4413      	add	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	b298      	uxth	r0, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	1c9a      	adds	r2, r3, #2
 8002c94:	494f      	ldr	r1, [pc, #316]	@ (8002dd4 <boss_burst+0x1cc>)
 8002c96:	4613      	mov	r3, r2
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	4413      	add	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	440b      	add	r3, r1
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	b299      	uxth	r1, r3
 8002ca6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	2304      	movs	r3, #4
 8002cae:	2208      	movs	r2, #8
 8002cb0:	f7fe fa20 	bl	80010f4 <ILI9341_DrawRectangle>
	BULLET_HEIGHT, BULLET_WIDTH, WHITE);

	// Di chuyển đạn xuống
	boss_bullets[i].x -= 2;
 8002cb4:	4947      	ldr	r1, [pc, #284]	@ (8002dd4 <boss_burst+0x1cc>)
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	1e99      	subs	r1, r3, #2
 8002cc6:	4843      	ldr	r0, [pc, #268]	@ (8002dd4 <boss_burst+0x1cc>)
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	4413      	add	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4403      	add	r3, r0
 8002cd4:	6019      	str	r1, [r3, #0]

	boss_bullets[i + 1].x = boss_bullets[i].x + 32;
 8002cd6:	493f      	ldr	r1, [pc, #252]	@ (8002dd4 <boss_burst+0x1cc>)
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	4413      	add	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	3201      	adds	r2, #1
 8002cea:	f103 0120 	add.w	r1, r3, #32
 8002cee:	4839      	ldr	r0, [pc, #228]	@ (8002dd4 <boss_burst+0x1cc>)
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4403      	add	r3, r0
 8002cfa:	6019      	str	r1, [r3, #0]

	boss_bullets[i + 2].x = boss_bullets[i].x + 64;
 8002cfc:	4935      	ldr	r1, [pc, #212]	@ (8002dd4 <boss_burst+0x1cc>)
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	4413      	add	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	3202      	adds	r2, #2
 8002d10:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8002d14:	482f      	ldr	r0, [pc, #188]	@ (8002dd4 <boss_burst+0x1cc>)
 8002d16:	4613      	mov	r3, r2
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	4413      	add	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4403      	add	r3, r0
 8002d20:	6019      	str	r1, [r3, #0]
//		boss_bullets[i + 2].active = 0;
//		return;
//	}

	// Vẽ lại viên đạn mới
	ILI9341_DrawRectangle(boss_bullets[i].x, boss_bullets[i].y,
 8002d22:	492c      	ldr	r1, [pc, #176]	@ (8002dd4 <boss_burst+0x1cc>)
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	4613      	mov	r3, r2
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	4413      	add	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	440b      	add	r3, r1
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	b298      	uxth	r0, r3
 8002d34:	4927      	ldr	r1, [pc, #156]	@ (8002dd4 <boss_burst+0x1cc>)
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	4413      	add	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	3304      	adds	r3, #4
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	b299      	uxth	r1, r3
 8002d48:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	2304      	movs	r3, #4
 8002d50:	2208      	movs	r2, #8
 8002d52:	f7fe f9cf 	bl	80010f4 <ILI9341_DrawRectangle>
	BULLET_HEIGHT, BULLET_WIDTH, RED);

	ILI9341_DrawRectangle(boss_bullets[i + 1].x, boss_bullets[i + 1].y,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	491e      	ldr	r1, [pc, #120]	@ (8002dd4 <boss_burst+0x1cc>)
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	4413      	add	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	b298      	uxth	r0, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	4919      	ldr	r1, [pc, #100]	@ (8002dd4 <boss_burst+0x1cc>)
 8002d70:	4613      	mov	r3, r2
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	4413      	add	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	3304      	adds	r3, #4
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	b299      	uxth	r1, r3
 8002d80:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	2304      	movs	r3, #4
 8002d88:	2208      	movs	r2, #8
 8002d8a:	f7fe f9b3 	bl	80010f4 <ILI9341_DrawRectangle>
	BULLET_HEIGHT, BULLET_WIDTH, RED);

	ILI9341_DrawRectangle(boss_bullets[i + 2].x, boss_bullets[i + 2].y,
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	1c9a      	adds	r2, r3, #2
 8002d92:	4910      	ldr	r1, [pc, #64]	@ (8002dd4 <boss_burst+0x1cc>)
 8002d94:	4613      	mov	r3, r2
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	4413      	add	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	b298      	uxth	r0, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	1c9a      	adds	r2, r3, #2
 8002da6:	490b      	ldr	r1, [pc, #44]	@ (8002dd4 <boss_burst+0x1cc>)
 8002da8:	4613      	mov	r3, r2
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	4413      	add	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	3304      	adds	r3, #4
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	b299      	uxth	r1, r3
 8002db8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	2208      	movs	r2, #8
 8002dc2:	f7fe f997 	bl	80010f4 <ILI9341_DrawRectangle>
	BULLET_HEIGHT, BULLET_WIDTH, RED);

	check_lose(i);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f976 	bl	80030b8 <check_lose>
}
 8002dcc:	bf00      	nop
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	2000027c 	.word	0x2000027c

08002dd8 <boss_wave>:

void boss_wave(int i) {
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af02      	add	r7, sp, #8
 8002dde:	6078      	str	r0, [r7, #4]
	// Xóa viên đạn cũ
	ILI9341_DrawRectangle(boss_bullets[i].x, boss_bullets[i].y,
 8002de0:	4985      	ldr	r1, [pc, #532]	@ (8002ff8 <boss_wave+0x220>)
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	4613      	mov	r3, r2
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	4413      	add	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	b298      	uxth	r0, r3
 8002df2:	4981      	ldr	r1, [pc, #516]	@ (8002ff8 <boss_wave+0x220>)
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	4613      	mov	r3, r2
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	4413      	add	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	3304      	adds	r3, #4
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	b299      	uxth	r1, r3
 8002e06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	2304      	movs	r3, #4
 8002e0e:	2208      	movs	r2, #8
 8002e10:	f7fe f970 	bl	80010f4 <ILI9341_DrawRectangle>
	BULLET_HEIGHT, BULLET_WIDTH, WHITE);
	ILI9341_DrawRectangle(boss_bullets[i + 1].x, boss_bullets[i + 1].y,
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	4977      	ldr	r1, [pc, #476]	@ (8002ff8 <boss_wave+0x220>)
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	4413      	add	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	440b      	add	r3, r1
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	b298      	uxth	r0, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	1c5a      	adds	r2, r3, #1
 8002e2c:	4972      	ldr	r1, [pc, #456]	@ (8002ff8 <boss_wave+0x220>)
 8002e2e:	4613      	mov	r3, r2
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	4413      	add	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	440b      	add	r3, r1
 8002e38:	3304      	adds	r3, #4
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	b299      	uxth	r1, r3
 8002e3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	2304      	movs	r3, #4
 8002e46:	2208      	movs	r2, #8
 8002e48:	f7fe f954 	bl	80010f4 <ILI9341_DrawRectangle>
	BULLET_HEIGHT, BULLET_WIDTH, WHITE);
	ILI9341_DrawRectangle(boss_bullets[i + 2].x, boss_bullets[i + 2].y,
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	1c9a      	adds	r2, r3, #2
 8002e50:	4969      	ldr	r1, [pc, #420]	@ (8002ff8 <boss_wave+0x220>)
 8002e52:	4613      	mov	r3, r2
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	4413      	add	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	440b      	add	r3, r1
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	b298      	uxth	r0, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	1c9a      	adds	r2, r3, #2
 8002e64:	4964      	ldr	r1, [pc, #400]	@ (8002ff8 <boss_wave+0x220>)
 8002e66:	4613      	mov	r3, r2
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	4413      	add	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	440b      	add	r3, r1
 8002e70:	3304      	adds	r3, #4
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	b299      	uxth	r1, r3
 8002e76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	2304      	movs	r3, #4
 8002e7e:	2208      	movs	r2, #8
 8002e80:	f7fe f938 	bl	80010f4 <ILI9341_DrawRectangle>
	BULLET_HEIGHT, BULLET_WIDTH, WHITE);

	// Di chuyển đạn xuống
	boss_bullets[i].x -= 2;
 8002e84:	495c      	ldr	r1, [pc, #368]	@ (8002ff8 <boss_wave+0x220>)
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	4413      	add	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	1e99      	subs	r1, r3, #2
 8002e96:	4858      	ldr	r0, [pc, #352]	@ (8002ff8 <boss_wave+0x220>)
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	4413      	add	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4403      	add	r3, r0
 8002ea4:	6019      	str	r1, [r3, #0]

	boss_bullets[i + 1].x = boss_bullets[i].x + 16;
 8002ea6:	4954      	ldr	r1, [pc, #336]	@ (8002ff8 <boss_wave+0x220>)
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	4413      	add	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	3201      	adds	r2, #1
 8002eba:	f103 0110 	add.w	r1, r3, #16
 8002ebe:	484e      	ldr	r0, [pc, #312]	@ (8002ff8 <boss_wave+0x220>)
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	4413      	add	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4403      	add	r3, r0
 8002eca:	6019      	str	r1, [r3, #0]
	boss_bullets[i + 1].y = boss_bullets[i].y + 16;
 8002ecc:	494a      	ldr	r1, [pc, #296]	@ (8002ff8 <boss_wave+0x220>)
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	4413      	add	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	3304      	adds	r3, #4
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	3201      	adds	r2, #1
 8002ee2:	f103 0110 	add.w	r1, r3, #16
 8002ee6:	4844      	ldr	r0, [pc, #272]	@ (8002ff8 <boss_wave+0x220>)
 8002ee8:	4613      	mov	r3, r2
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	4413      	add	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4403      	add	r3, r0
 8002ef2:	3304      	adds	r3, #4
 8002ef4:	6019      	str	r1, [r3, #0]

	boss_bullets[i + 2].x = boss_bullets[i].x + 16;
 8002ef6:	4940      	ldr	r1, [pc, #256]	@ (8002ff8 <boss_wave+0x220>)
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	4613      	mov	r3, r2
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	4413      	add	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	440b      	add	r3, r1
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	3202      	adds	r2, #2
 8002f0a:	f103 0110 	add.w	r1, r3, #16
 8002f0e:	483a      	ldr	r0, [pc, #232]	@ (8002ff8 <boss_wave+0x220>)
 8002f10:	4613      	mov	r3, r2
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	4413      	add	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4403      	add	r3, r0
 8002f1a:	6019      	str	r1, [r3, #0]
	boss_bullets[i + 2].y = boss_bullets[i].y - 16;
 8002f1c:	4936      	ldr	r1, [pc, #216]	@ (8002ff8 <boss_wave+0x220>)
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	4613      	mov	r3, r2
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	3202      	adds	r2, #2
 8002f32:	f1a3 0110 	sub.w	r1, r3, #16
 8002f36:	4830      	ldr	r0, [pc, #192]	@ (8002ff8 <boss_wave+0x220>)
 8002f38:	4613      	mov	r3, r2
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	4413      	add	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4403      	add	r3, r0
 8002f42:	3304      	adds	r3, #4
 8002f44:	6019      	str	r1, [r3, #0]
//		boss_bullets[i + 2].active = 0;
//		return;
//	}

	// Vẽ lại viên đạn mới
	ILI9341_DrawRectangle(boss_bullets[i].x, boss_bullets[i].y,
 8002f46:	492c      	ldr	r1, [pc, #176]	@ (8002ff8 <boss_wave+0x220>)
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	4413      	add	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	440b      	add	r3, r1
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	b298      	uxth	r0, r3
 8002f58:	4927      	ldr	r1, [pc, #156]	@ (8002ff8 <boss_wave+0x220>)
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	4413      	add	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	3304      	adds	r3, #4
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	b299      	uxth	r1, r3
 8002f6c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	2304      	movs	r3, #4
 8002f74:	2208      	movs	r2, #8
 8002f76:	f7fe f8bd 	bl	80010f4 <ILI9341_DrawRectangle>
	BULLET_HEIGHT, BULLET_WIDTH, RED);

	ILI9341_DrawRectangle(boss_bullets[i + 1].x, boss_bullets[i + 1].y,
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	491e      	ldr	r1, [pc, #120]	@ (8002ff8 <boss_wave+0x220>)
 8002f80:	4613      	mov	r3, r2
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	4413      	add	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	b298      	uxth	r0, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	1c5a      	adds	r2, r3, #1
 8002f92:	4919      	ldr	r1, [pc, #100]	@ (8002ff8 <boss_wave+0x220>)
 8002f94:	4613      	mov	r3, r2
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	4413      	add	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	b299      	uxth	r1, r3
 8002fa4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	2304      	movs	r3, #4
 8002fac:	2208      	movs	r2, #8
 8002fae:	f7fe f8a1 	bl	80010f4 <ILI9341_DrawRectangle>
	BULLET_HEIGHT, BULLET_WIDTH, RED);

	ILI9341_DrawRectangle(boss_bullets[i + 2].x, boss_bullets[i + 2].y,
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	1c9a      	adds	r2, r3, #2
 8002fb6:	4910      	ldr	r1, [pc, #64]	@ (8002ff8 <boss_wave+0x220>)
 8002fb8:	4613      	mov	r3, r2
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	b298      	uxth	r0, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	1c9a      	adds	r2, r3, #2
 8002fca:	490b      	ldr	r1, [pc, #44]	@ (8002ff8 <boss_wave+0x220>)
 8002fcc:	4613      	mov	r3, r2
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	4413      	add	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	b299      	uxth	r1, r3
 8002fdc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	2304      	movs	r3, #4
 8002fe4:	2208      	movs	r2, #8
 8002fe6:	f7fe f885 	bl	80010f4 <ILI9341_DrawRectangle>
	BULLET_HEIGHT, BULLET_WIDTH, RED);

	check_lose(i);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f864 	bl	80030b8 <check_lose>
}
 8002ff0:	bf00      	nop
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	2000027c 	.word	0x2000027c

08002ffc <update_boss_bullets>:

void update_boss_bullets() { // hàm cập nhật tình trạng đạn của boss
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
	//nếu viên đạn được active, vẽ lại đường đạn đi xuống, nếu va chạm vào máy bay thì thua
	for (int i = 0; i < MAX_BOSS_BULLETS; i += 3) {
 8003002:	2300      	movs	r3, #0
 8003004:	607b      	str	r3, [r7, #4]
 8003006:	e04b      	b.n	80030a0 <update_boss_bullets+0xa4>
		if (boss_bullets[i].active) {
 8003008:	4929      	ldr	r1, [pc, #164]	@ (80030b0 <update_boss_bullets+0xb4>)
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	4613      	mov	r3, r2
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	4413      	add	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	3308      	adds	r3, #8
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d03d      	beq.n	800309a <update_boss_bullets+0x9e>
			if ((i / 3) % 3 == 0) {
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a24      	ldr	r2, [pc, #144]	@ (80030b4 <update_boss_bullets+0xb8>)
 8003022:	fb82 1203 	smull	r1, r2, r2, r3
 8003026:	17db      	asrs	r3, r3, #31
 8003028:	1ad1      	subs	r1, r2, r3
 800302a:	4b22      	ldr	r3, [pc, #136]	@ (80030b4 <update_boss_bullets+0xb8>)
 800302c:	fb83 3201 	smull	r3, r2, r3, r1
 8003030:	17cb      	asrs	r3, r1, #31
 8003032:	1ad2      	subs	r2, r2, r3
 8003034:	4613      	mov	r3, r2
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	4413      	add	r3, r2
 800303a:	1aca      	subs	r2, r1, r3
 800303c:	2a00      	cmp	r2, #0
 800303e:	d103      	bne.n	8003048 <update_boss_bullets+0x4c>
				boss_shotgun(i);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7ff fccf 	bl	80029e4 <boss_shotgun>
 8003046:	e028      	b.n	800309a <update_boss_bullets+0x9e>
			} else if ((i / 3) % 3 == 1) {
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a1a      	ldr	r2, [pc, #104]	@ (80030b4 <update_boss_bullets+0xb8>)
 800304c:	fb82 1203 	smull	r1, r2, r2, r3
 8003050:	17db      	asrs	r3, r3, #31
 8003052:	1ad1      	subs	r1, r2, r3
 8003054:	4b17      	ldr	r3, [pc, #92]	@ (80030b4 <update_boss_bullets+0xb8>)
 8003056:	fb83 3201 	smull	r3, r2, r3, r1
 800305a:	17cb      	asrs	r3, r1, #31
 800305c:	1ad2      	subs	r2, r2, r3
 800305e:	4613      	mov	r3, r2
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	4413      	add	r3, r2
 8003064:	1aca      	subs	r2, r1, r3
 8003066:	2a01      	cmp	r2, #1
 8003068:	d103      	bne.n	8003072 <update_boss_bullets+0x76>
				boss_burst(i);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7ff fdcc 	bl	8002c08 <boss_burst>
 8003070:	e013      	b.n	800309a <update_boss_bullets+0x9e>
			} else if ((i / 3) % 3 == 2) {
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a0f      	ldr	r2, [pc, #60]	@ (80030b4 <update_boss_bullets+0xb8>)
 8003076:	fb82 1203 	smull	r1, r2, r2, r3
 800307a:	17db      	asrs	r3, r3, #31
 800307c:	1ad1      	subs	r1, r2, r3
 800307e:	4b0d      	ldr	r3, [pc, #52]	@ (80030b4 <update_boss_bullets+0xb8>)
 8003080:	fb83 3201 	smull	r3, r2, r3, r1
 8003084:	17cb      	asrs	r3, r1, #31
 8003086:	1ad2      	subs	r2, r2, r3
 8003088:	4613      	mov	r3, r2
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	4413      	add	r3, r2
 800308e:	1aca      	subs	r2, r1, r3
 8003090:	2a02      	cmp	r2, #2
 8003092:	d102      	bne.n	800309a <update_boss_bullets+0x9e>
				boss_wave(i);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7ff fe9f 	bl	8002dd8 <boss_wave>
	for (int i = 0; i < MAX_BOSS_BULLETS; i += 3) {
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3303      	adds	r3, #3
 800309e:	607b      	str	r3, [r7, #4]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b31      	cmp	r3, #49	@ 0x31
 80030a4:	ddb0      	ble.n	8003008 <update_boss_bullets+0xc>
			}
		}
	}
}
 80030a6:	bf00      	nop
 80030a8:	bf00      	nop
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	2000027c 	.word	0x2000027c
 80030b4:	55555556 	.word	0x55555556

080030b8 <check_lose>:
void check_lose(int i) {
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
// Kiểm tra va chạm với máy bay người chơi
	for (int j = i; j < i + 3; j++) {
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	e03f      	b.n	8003146 <check_lose+0x8e>
		if (boss_bullets[j].x + 4 <= plane_x
 80030c6:	4925      	ldr	r1, [pc, #148]	@ (800315c <check_lose+0xa4>)
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	4613      	mov	r3, r2
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	4413      	add	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	1cda      	adds	r2, r3, #3
 80030d8:	4b21      	ldr	r3, [pc, #132]	@ (8003160 <check_lose+0xa8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	db2f      	blt.n	8003140 <check_lose+0x88>
				|| boss_bullets[j].x >= plane_x + PLANE_WIDTH
 80030e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003160 <check_lose+0xa8>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f103 0113 	add.w	r1, r3, #19
 80030e8:	481c      	ldr	r0, [pc, #112]	@ (800315c <check_lose+0xa4>)
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	4613      	mov	r3, r2
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4403      	add	r3, r0
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4299      	cmp	r1, r3
 80030fa:	db21      	blt.n	8003140 <check_lose+0x88>
				|| boss_bullets[j].y + 4 <= plane_y - PLANE_WIDTH / 2
 80030fc:	4917      	ldr	r1, [pc, #92]	@ (800315c <check_lose+0xa4>)
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	4613      	mov	r3, r2
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	4413      	add	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	3304      	adds	r3, #4
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	1cda      	adds	r2, r3, #3
 8003110:	4b14      	ldr	r3, [pc, #80]	@ (8003164 <check_lose+0xac>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	3b0a      	subs	r3, #10
 8003116:	429a      	cmp	r2, r3
 8003118:	db12      	blt.n	8003140 <check_lose+0x88>
				|| boss_bullets[j].y >= plane_y + PLANE_HEIGHT / 2) {
 800311a:	4b12      	ldr	r3, [pc, #72]	@ (8003164 <check_lose+0xac>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f103 0109 	add.w	r1, r3, #9
 8003122:	480e      	ldr	r0, [pc, #56]	@ (800315c <check_lose+0xa4>)
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	4613      	mov	r3, r2
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	4413      	add	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4403      	add	r3, r0
 8003130:	3304      	adds	r3, #4
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4299      	cmp	r1, r3
 8003136:	db03      	blt.n	8003140 <check_lose+0x88>
		} else {
			show_game_over_screen();
 8003138:	f000 f962 	bl	8003400 <show_game_over_screen>
			while (1)
 800313c:	bf00      	nop
 800313e:	e7fd      	b.n	800313c <check_lose+0x84>
	for (int j = i; j < i + 3; j++) {
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	3301      	adds	r3, #1
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3302      	adds	r3, #2
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	429a      	cmp	r2, r3
 800314e:	ddba      	ble.n	80030c6 <check_lose+0xe>
				; // Dừng game tại đây
		}
	}
}
 8003150:	bf00      	nop
 8003152:	bf00      	nop
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	2000027c 	.word	0x2000027c
 8003160:	20000004 	.word	0x20000004
 8003164:	20000008 	.word	0x20000008

08003168 <update_boss>:

void update_boss() {
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
//hàm cập nhật tình trạng của boss, boss di chuyển qua lại màn hình, sau 100 chu kì sẽ bắn đạn 1 lần
	if (!boss.active)
 800316c:	4b1d      	ldr	r3, [pc, #116]	@ (80031e4 <update_boss+0x7c>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d035      	beq.n	80031e0 <update_boss+0x78>
		return;
	erase_boss(boss.x, boss.y);
 8003174:	4b1b      	ldr	r3, [pc, #108]	@ (80031e4 <update_boss+0x7c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a1a      	ldr	r2, [pc, #104]	@ (80031e4 <update_boss+0x7c>)
 800317a:	6852      	ldr	r2, [r2, #4]
 800317c:	4611      	mov	r1, r2
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff fb92 	bl	80028a8 <erase_boss>
	if (boss.y <= 0)
 8003184:	4b17      	ldr	r3, [pc, #92]	@ (80031e4 <update_boss+0x7c>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	dc03      	bgt.n	8003194 <update_boss+0x2c>
		a = 1;
 800318c:	4b16      	ldr	r3, [pc, #88]	@ (80031e8 <update_boss+0x80>)
 800318e:	2201      	movs	r2, #1
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	e007      	b.n	80031a4 <update_boss+0x3c>
	else if (boss.y >= 210)
 8003194:	4b13      	ldr	r3, [pc, #76]	@ (80031e4 <update_boss+0x7c>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2bd1      	cmp	r3, #209	@ 0xd1
 800319a:	dd03      	ble.n	80031a4 <update_boss+0x3c>
		a = -1; // Di chuyển lại từ phải sang trái
 800319c:	4b12      	ldr	r3, [pc, #72]	@ (80031e8 <update_boss+0x80>)
 800319e:	f04f 32ff 	mov.w	r2, #4294967295
 80031a2:	601a      	str	r2, [r3, #0]
	boss.y += a;
 80031a4:	4b0f      	ldr	r3, [pc, #60]	@ (80031e4 <update_boss+0x7c>)
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	4b0f      	ldr	r3, [pc, #60]	@ (80031e8 <update_boss+0x80>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4413      	add	r3, r2
 80031ae:	4a0d      	ldr	r2, [pc, #52]	@ (80031e4 <update_boss+0x7c>)
 80031b0:	6053      	str	r3, [r2, #4]

	draw_boss(boss.x, boss.y);
 80031b2:	4b0c      	ldr	r3, [pc, #48]	@ (80031e4 <update_boss+0x7c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a0b      	ldr	r2, [pc, #44]	@ (80031e4 <update_boss+0x7c>)
 80031b8:	6852      	ldr	r2, [r2, #4]
 80031ba:	4611      	mov	r1, r2
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff fa67 	bl	8002690 <draw_boss>

	boss.laser_timer++;
 80031c2:	4b08      	ldr	r3, [pc, #32]	@ (80031e4 <update_boss+0x7c>)
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	3301      	adds	r3, #1
 80031c8:	4a06      	ldr	r2, [pc, #24]	@ (80031e4 <update_boss+0x7c>)
 80031ca:	6113      	str	r3, [r2, #16]
	if (boss.laser_timer >= 100) { // Bắn laser sau mỗi 100 chu kỳ
 80031cc:	4b05      	ldr	r3, [pc, #20]	@ (80031e4 <update_boss+0x7c>)
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	2b63      	cmp	r3, #99	@ 0x63
 80031d2:	dd06      	ble.n	80031e2 <update_boss+0x7a>
		fire_boss_laser();
 80031d4:	f7ff fb80 	bl	80028d8 <fire_boss_laser>
		boss.laser_timer = 0;
 80031d8:	4b02      	ldr	r3, [pc, #8]	@ (80031e4 <update_boss+0x7c>)
 80031da:	2200      	movs	r2, #0
 80031dc:	611a      	str	r2, [r3, #16]
 80031de:	e000      	b.n	80031e2 <update_boss+0x7a>
		return;
 80031e0:	bf00      	nop
	}
}
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	20000268 	.word	0x20000268
 80031e8:	20000014 	.word	0x20000014

080031ec <check_bullet_boss_collision>:

int check_bullet_boss_collision() {
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af02      	add	r7, sp, #8
// hàm check va chạm boss với đạn, nếu bắn boss đủ số lượng đạn, boss sẽ chết
	if (!boss.active)
 80031f2:	4b49      	ldr	r3, [pc, #292]	@ (8003318 <check_bullet_boss_collision+0x12c>)
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <check_bullet_boss_collision+0x12>
		return 0;
 80031fa:	2300      	movs	r3, #0
 80031fc:	e088      	b.n	8003310 <check_bullet_boss_collision+0x124>

	for (int i = 0; i < MAX_BULLETS; i++) {
 80031fe:	2300      	movs	r3, #0
 8003200:	607b      	str	r3, [r7, #4]
 8003202:	e080      	b.n	8003306 <check_bullet_boss_collision+0x11a>
		if (!bullets[i].active)
 8003204:	4945      	ldr	r1, [pc, #276]	@ (800331c <check_bullet_boss_collision+0x130>)
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	4613      	mov	r3, r2
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	4413      	add	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	440b      	add	r3, r1
 8003212:	3308      	adds	r3, #8
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d071      	beq.n	80032fe <check_bullet_boss_collision+0x112>
			continue;

		if (bullets[i].x + BULLET_HEIGHT > boss.x&&
 800321a:	4940      	ldr	r1, [pc, #256]	@ (800331c <check_bullet_boss_collision+0x130>)
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	4613      	mov	r3, r2
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	4413      	add	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	440b      	add	r3, r1
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	1dda      	adds	r2, r3, #7
 800322c:	4b3a      	ldr	r3, [pc, #232]	@ (8003318 <check_bullet_boss_collision+0x12c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	db65      	blt.n	8003300 <check_bullet_boss_collision+0x114>
		bullets[i].x < boss.x + BOSS_WIDTH &&
 8003234:	4b38      	ldr	r3, [pc, #224]	@ (8003318 <check_bullet_boss_collision+0x12c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f103 0127 	add.w	r1, r3, #39	@ 0x27
 800323c:	4837      	ldr	r0, [pc, #220]	@ (800331c <check_bullet_boss_collision+0x130>)
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	4413      	add	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4403      	add	r3, r0
 800324a:	681b      	ldr	r3, [r3, #0]
		if (bullets[i].x + BULLET_HEIGHT > boss.x&&
 800324c:	4299      	cmp	r1, r3
 800324e:	db57      	blt.n	8003300 <check_bullet_boss_collision+0x114>
		bullets[i].y + BULLET_WIDTH > boss.y &&
 8003250:	4932      	ldr	r1, [pc, #200]	@ (800331c <check_bullet_boss_collision+0x130>)
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	4413      	add	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	3304      	adds	r3, #4
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	1cda      	adds	r2, r3, #3
 8003264:	4b2c      	ldr	r3, [pc, #176]	@ (8003318 <check_bullet_boss_collision+0x12c>)
 8003266:	685b      	ldr	r3, [r3, #4]
		bullets[i].x < boss.x + BOSS_WIDTH &&
 8003268:	429a      	cmp	r2, r3
 800326a:	db49      	blt.n	8003300 <check_bullet_boss_collision+0x114>
		bullets[i].y < boss.y + BOSS_HEIGHT) {
 800326c:	4b2a      	ldr	r3, [pc, #168]	@ (8003318 <check_bullet_boss_collision+0x12c>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f103 011d 	add.w	r1, r3, #29
 8003274:	4829      	ldr	r0, [pc, #164]	@ (800331c <check_bullet_boss_collision+0x130>)
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	4613      	mov	r3, r2
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	4413      	add	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4403      	add	r3, r0
 8003282:	3304      	adds	r3, #4
 8003284:	681b      	ldr	r3, [r3, #0]
		bullets[i].y + BULLET_WIDTH > boss.y &&
 8003286:	4299      	cmp	r1, r3
 8003288:	db3a      	blt.n	8003300 <check_bullet_boss_collision+0x114>

			bullets[i].active = 0;
 800328a:	4924      	ldr	r1, [pc, #144]	@ (800331c <check_bullet_boss_collision+0x130>)
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	4613      	mov	r3, r2
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	4413      	add	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	3308      	adds	r3, #8
 800329a:	2200      	movs	r2, #0
 800329c:	601a      	str	r2, [r3, #0]
			ILI9341_DrawRectangle(bullets[i].x, bullets[i].y,
 800329e:	491f      	ldr	r1, [pc, #124]	@ (800331c <check_bullet_boss_collision+0x130>)
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	4613      	mov	r3, r2
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	4413      	add	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	440b      	add	r3, r1
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	b298      	uxth	r0, r3
 80032b0:	491a      	ldr	r1, [pc, #104]	@ (800331c <check_bullet_boss_collision+0x130>)
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	4413      	add	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	3304      	adds	r3, #4
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	b299      	uxth	r1, r3
 80032c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	2304      	movs	r3, #4
 80032cc:	2208      	movs	r2, #8
 80032ce:	f7fd ff11 	bl	80010f4 <ILI9341_DrawRectangle>
			BULLET_HEIGHT, BULLET_WIDTH, WHITE);

			boss.hp--;
 80032d2:	4b11      	ldr	r3, [pc, #68]	@ (8003318 <check_bullet_boss_collision+0x12c>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	4a0f      	ldr	r2, [pc, #60]	@ (8003318 <check_bullet_boss_collision+0x12c>)
 80032da:	6093      	str	r3, [r2, #8]
			if (boss.hp <= 0) {
 80032dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003318 <check_bullet_boss_collision+0x12c>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	dc0d      	bgt.n	8003300 <check_bullet_boss_collision+0x114>
				erase_boss(boss.x, boss.y);
 80032e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003318 <check_bullet_boss_collision+0x12c>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a0b      	ldr	r2, [pc, #44]	@ (8003318 <check_bullet_boss_collision+0x12c>)
 80032ea:	6852      	ldr	r2, [r2, #4]
 80032ec:	4611      	mov	r1, r2
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff fada 	bl	80028a8 <erase_boss>
				boss.active = 0;
 80032f4:	4b08      	ldr	r3, [pc, #32]	@ (8003318 <check_bullet_boss_collision+0x12c>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	60da      	str	r2, [r3, #12]
				return 1;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e008      	b.n	8003310 <check_bullet_boss_collision+0x124>
			continue;
 80032fe:	bf00      	nop
	for (int i = 0; i < MAX_BULLETS; i++) {
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3301      	adds	r3, #1
 8003304:	607b      	str	r3, [r7, #4]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b04      	cmp	r3, #4
 800330a:	f77f af7b 	ble.w	8003204 <check_bullet_boss_collision+0x18>
			}
		}
	}
	return 0;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	20000268 	.word	0x20000268
 800331c:	2000022c 	.word	0x2000022c

08003320 <show_victory_screen>:
//	ILI9341_DrawText("YOU WIN!", FONT3, 90, 100, GREEN, BLACK);
//	ILI9341_DrawText("Congratulations", FONT3, 60, 160, WHITE, BLACK);
//	ILI9341_DrawText("Press RESET to play again", FONT2, 30, 270, CYAN, BLACK);
//}

void show_victory_screen() { // màn hình chiến thắng
 8003320:	b580      	push	{r7, lr}
 8003322:	b08c      	sub	sp, #48	@ 0x30
 8003324:	af02      	add	r7, sp, #8
    ILI9341_FillScreen(BLACK);
 8003326:	2000      	movs	r0, #0
 8003328:	f7fd fe58 	bl	8000fdc <ILI9341_FillScreen>

    // Hiệu ứng "pháo hoa" đơn giản
    for (int r = 0; r < 60; r += 4) {
 800332c:	2300      	movs	r3, #0
 800332e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003330:	e01d      	b.n	800336e <show_victory_screen+0x4e>
        ILI9341_DrawHollowCircle(80, 80, r, YELLOW);
 8003332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003334:	b29a      	uxth	r2, r3
 8003336:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800333a:	2150      	movs	r1, #80	@ 0x50
 800333c:	2050      	movs	r0, #80	@ 0x50
 800333e:	f7fd f93d 	bl	80005bc <ILI9341_DrawHollowCircle>
        ILI9341_DrawHollowCircle(240, 100, r, GREEN);
 8003342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003344:	b29a      	uxth	r2, r3
 8003346:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800334a:	2164      	movs	r1, #100	@ 0x64
 800334c:	20f0      	movs	r0, #240	@ 0xf0
 800334e:	f7fd f935 	bl	80005bc <ILI9341_DrawHollowCircle>
        ILI9341_DrawHollowCircle(160, 160, r, RED);
 8003352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003354:	b29a      	uxth	r2, r3
 8003356:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800335a:	21a0      	movs	r1, #160	@ 0xa0
 800335c:	20a0      	movs	r0, #160	@ 0xa0
 800335e:	f7fd f92d 	bl	80005bc <ILI9341_DrawHollowCircle>
        HAL_Delay(30);
 8003362:	201e      	movs	r0, #30
 8003364:	f001 fa82 	bl	800486c <HAL_Delay>
    for (int r = 0; r < 60; r += 4) {
 8003368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336a:	3304      	adds	r3, #4
 800336c:	627b      	str	r3, [r7, #36]	@ 0x24
 800336e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003370:	2b3b      	cmp	r3, #59	@ 0x3b
 8003372:	ddde      	ble.n	8003332 <show_victory_screen+0x12>
    }

    // Tiêu đề chiến thắng
    ILI9341_DrawText("YOU WIN!", FONT3, 90, 100, GREEN, BLACK);
 8003374:	2300      	movs	r3, #0
 8003376:	9301      	str	r3, [sp, #4]
 8003378:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	2364      	movs	r3, #100	@ 0x64
 8003380:	225a      	movs	r2, #90	@ 0x5a
 8003382:	4918      	ldr	r1, [pc, #96]	@ (80033e4 <show_victory_screen+0xc4>)
 8003384:	4818      	ldr	r0, [pc, #96]	@ (80033e8 <show_victory_screen+0xc8>)
 8003386:	f7fd facf 	bl	8000928 <ILI9341_DrawText>

    // Hiển thị điểm số
    char score_msg[30];
    sprintf(score_msg, "Final Score: %d", point);
 800338a:	4b18      	ldr	r3, [pc, #96]	@ (80033ec <show_victory_screen+0xcc>)
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	1d3b      	adds	r3, r7, #4
 8003390:	4917      	ldr	r1, [pc, #92]	@ (80033f0 <show_victory_screen+0xd0>)
 8003392:	4618      	mov	r0, r3
 8003394:	f003 fd92 	bl	8006ebc <siprintf>
    ILI9341_DrawText(score_msg, FONT3, 50, 130, YELLOW, BLACK);
 8003398:	1d38      	adds	r0, r7, #4
 800339a:	2300      	movs	r3, #0
 800339c:	9301      	str	r3, [sp, #4]
 800339e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	2382      	movs	r3, #130	@ 0x82
 80033a6:	2232      	movs	r2, #50	@ 0x32
 80033a8:	490e      	ldr	r1, [pc, #56]	@ (80033e4 <show_victory_screen+0xc4>)
 80033aa:	f7fd fabd 	bl	8000928 <ILI9341_DrawText>

    ILI9341_DrawText("Congratulations", FONT3, 60, 160, WHITE, BLACK);
 80033ae:	2300      	movs	r3, #0
 80033b0:	9301      	str	r3, [sp, #4]
 80033b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	23a0      	movs	r3, #160	@ 0xa0
 80033ba:	223c      	movs	r2, #60	@ 0x3c
 80033bc:	4909      	ldr	r1, [pc, #36]	@ (80033e4 <show_victory_screen+0xc4>)
 80033be:	480d      	ldr	r0, [pc, #52]	@ (80033f4 <show_victory_screen+0xd4>)
 80033c0:	f7fd fab2 	bl	8000928 <ILI9341_DrawText>
    ILI9341_DrawText("Press RESET to play again", FONT2, 30, 270, CYAN, BLACK);
 80033c4:	2300      	movs	r3, #0
 80033c6:	9301      	str	r3, [sp, #4]
 80033c8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 80033d2:	221e      	movs	r2, #30
 80033d4:	4908      	ldr	r1, [pc, #32]	@ (80033f8 <show_victory_screen+0xd8>)
 80033d6:	4809      	ldr	r0, [pc, #36]	@ (80033fc <show_victory_screen+0xdc>)
 80033d8:	f7fd faa6 	bl	8000928 <ILI9341_DrawText>
}
 80033dc:	bf00      	nop
 80033de:	3728      	adds	r7, #40	@ 0x28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	08008fd8 	.word	0x08008fd8
 80033e8:	080080a8 	.word	0x080080a8
 80033ec:	200004e0 	.word	0x200004e0
 80033f0:	080080b4 	.word	0x080080b4
 80033f4:	080080c4 	.word	0x080080c4
 80033f8:	080087f4 	.word	0x080087f4
 80033fc:	080080d4 	.word	0x080080d4

08003400 <show_game_over_screen>:

void show_game_over_screen() {
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af02      	add	r7, sp, #8
	ILI9341_FillScreen(BLACK);
 8003406:	2000      	movs	r0, #0
 8003408:	f7fd fde8 	bl	8000fdc <ILI9341_FillScreen>

	ILI9341_DrawText("GAME OVER", FONT3, 80, 80, RED, BLACK);
 800340c:	2300      	movs	r3, #0
 800340e:	9301      	str	r3, [sp, #4]
 8003410:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	2350      	movs	r3, #80	@ 0x50
 8003418:	2250      	movs	r2, #80	@ 0x50
 800341a:	4919      	ldr	r1, [pc, #100]	@ (8003480 <show_game_over_screen+0x80>)
 800341c:	4819      	ldr	r0, [pc, #100]	@ (8003484 <show_game_over_screen+0x84>)
 800341e:	f7fd fa83 	bl	8000928 <ILI9341_DrawText>
	ILI9341_DrawText("Thanks for playing!", FONT3, 60, 140, WHITE, BLACK);
 8003422:	2300      	movs	r3, #0
 8003424:	9301      	str	r3, [sp, #4]
 8003426:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	238c      	movs	r3, #140	@ 0x8c
 800342e:	223c      	movs	r2, #60	@ 0x3c
 8003430:	4913      	ldr	r1, [pc, #76]	@ (8003480 <show_game_over_screen+0x80>)
 8003432:	4815      	ldr	r0, [pc, #84]	@ (8003488 <show_game_over_screen+0x88>)
 8003434:	f7fd fa78 	bl	8000928 <ILI9341_DrawText>

	for (int r = 0; r < 50; r += 5) {
 8003438:	2300      	movs	r3, #0
 800343a:	607b      	str	r3, [r7, #4]
 800343c:	e00d      	b.n	800345a <show_game_over_screen+0x5a>
		ILI9341_DrawFilledCircle(160, 240, r, YELLOW);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	b29a      	uxth	r2, r3
 8003442:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8003446:	21f0      	movs	r1, #240	@ 0xf0
 8003448:	20a0      	movs	r0, #160	@ 0xa0
 800344a:	f7fd f96d 	bl	8000728 <ILI9341_DrawFilledCircle>
		HAL_Delay(30);
 800344e:	201e      	movs	r0, #30
 8003450:	f001 fa0c 	bl	800486c <HAL_Delay>
	for (int r = 0; r < 50; r += 5) {
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3305      	adds	r3, #5
 8003458:	607b      	str	r3, [r7, #4]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b31      	cmp	r3, #49	@ 0x31
 800345e:	ddee      	ble.n	800343e <show_game_over_screen+0x3e>
	}

	ILI9341_DrawText("Press RESET to play again", FONT2, 40, 270, BLUE, BLACK);
 8003460:	2300      	movs	r3, #0
 8003462:	9301      	str	r3, [sp, #4]
 8003464:	231f      	movs	r3, #31
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 800346c:	2228      	movs	r2, #40	@ 0x28
 800346e:	4907      	ldr	r1, [pc, #28]	@ (800348c <show_game_over_screen+0x8c>)
 8003470:	4807      	ldr	r0, [pc, #28]	@ (8003490 <show_game_over_screen+0x90>)
 8003472:	f7fd fa59 	bl	8000928 <ILI9341_DrawText>
}
 8003476:	bf00      	nop
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	08008fd8 	.word	0x08008fd8
 8003484:	080080f0 	.word	0x080080f0
 8003488:	080080fc 	.word	0x080080fc
 800348c:	080087f4 	.word	0x080087f4
 8003490:	080080d4 	.word	0x080080d4

08003494 <draw_bullet>:
//				; // Dừng game tại đây
//		}
//	}
//}

void draw_bullet(Bullet *b) {
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af02      	add	r7, sp, #8
 800349a:	6078      	str	r0, [r7, #4]
	ILI9341_DrawRectangle(b->x, b->y, BULLET_HEIGHT, BULLET_WIDTH, RED);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	b298      	uxth	r0, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	b299      	uxth	r1, r3
 80034a8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	2304      	movs	r3, #4
 80034b0:	2208      	movs	r2, #8
 80034b2:	f7fd fe1f 	bl	80010f4 <ILI9341_DrawRectangle>
}
 80034b6:	bf00      	nop
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <erase_bullet>:

void erase_bullet(Bullet *b) {
 80034be:	b580      	push	{r7, lr}
 80034c0:	b084      	sub	sp, #16
 80034c2:	af02      	add	r7, sp, #8
 80034c4:	6078      	str	r0, [r7, #4]
	ILI9341_DrawRectangle(b->x, b->y, BULLET_HEIGHT, BULLET_WIDTH, WHITE);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	b298      	uxth	r0, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	b299      	uxth	r1, r3
 80034d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	2304      	movs	r3, #4
 80034da:	2208      	movs	r2, #8
 80034dc:	f7fd fe0a 	bl	80010f4 <ILI9341_DrawRectangle>
}
 80034e0:	bf00      	nop
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <shoot_bullet>:

void shoot_bullet() {
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
	//hàm khởi tạo đạn của máy bay
	for (int i = 0; i < MAX_BULLETS; i++) {
 80034ee:	2300      	movs	r3, #0
 80034f0:	607b      	str	r3, [r7, #4]
 80034f2:	e02f      	b.n	8003554 <shoot_bullet+0x6c>
		if (!bullets[i].active) {
 80034f4:	491c      	ldr	r1, [pc, #112]	@ (8003568 <shoot_bullet+0x80>)
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	4613      	mov	r3, r2
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	4413      	add	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	3308      	adds	r3, #8
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d121      	bne.n	800354e <shoot_bullet+0x66>
			bullets[i].x = plane_x + PLANE_WIDTH;
 800350a:	4b18      	ldr	r3, [pc, #96]	@ (800356c <shoot_bullet+0x84>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f103 0114 	add.w	r1, r3, #20
 8003512:	4815      	ldr	r0, [pc, #84]	@ (8003568 <shoot_bullet+0x80>)
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	4613      	mov	r3, r2
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	4413      	add	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4403      	add	r3, r0
 8003520:	6019      	str	r1, [r3, #0]
			bullets[i].y = plane_y;
 8003522:	4b13      	ldr	r3, [pc, #76]	@ (8003570 <shoot_bullet+0x88>)
 8003524:	6819      	ldr	r1, [r3, #0]
 8003526:	4810      	ldr	r0, [pc, #64]	@ (8003568 <shoot_bullet+0x80>)
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4403      	add	r3, r0
 8003534:	3304      	adds	r3, #4
 8003536:	6019      	str	r1, [r3, #0]
			bullets[i].active = 1;
 8003538:	490b      	ldr	r1, [pc, #44]	@ (8003568 <shoot_bullet+0x80>)
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	3308      	adds	r3, #8
 8003548:	2201      	movs	r2, #1
 800354a:	601a      	str	r2, [r3, #0]
			break;
 800354c:	e006      	b.n	800355c <shoot_bullet+0x74>
	for (int i = 0; i < MAX_BULLETS; i++) {
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3301      	adds	r3, #1
 8003552:	607b      	str	r3, [r7, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b04      	cmp	r3, #4
 8003558:	ddcc      	ble.n	80034f4 <shoot_bullet+0xc>
		}
	}
}
 800355a:	bf00      	nop
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	2000022c 	.word	0x2000022c
 800356c:	20000004 	.word	0x20000004
 8003570:	20000008 	.word	0x20000008

08003574 <update_bullets>:

void update_bullets() {
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
	//hàm cập nhật tình trạng đạn, nếu viên đạn active thì sẽ di chuyển lên
	for (int i = 0; i < MAX_BULLETS; i++) {
 800357a:	2300      	movs	r3, #0
 800357c:	607b      	str	r3, [r7, #4]
 800357e:	e048      	b.n	8003612 <update_bullets+0x9e>
		if (bullets[i].active) {
 8003580:	4928      	ldr	r1, [pc, #160]	@ (8003624 <update_bullets+0xb0>)
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	4413      	add	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	3308      	adds	r3, #8
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d03a      	beq.n	800360c <update_bullets+0x98>
			erase_bullet(&bullets[i]);
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	4613      	mov	r3, r2
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	4413      	add	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4a20      	ldr	r2, [pc, #128]	@ (8003624 <update_bullets+0xb0>)
 80035a2:	4413      	add	r3, r2
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff ff8a 	bl	80034be <erase_bullet>
			bullets[i].x += 5;
 80035aa:	491e      	ldr	r1, [pc, #120]	@ (8003624 <update_bullets+0xb0>)
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	4413      	add	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	440b      	add	r3, r1
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	1d59      	adds	r1, r3, #5
 80035bc:	4819      	ldr	r0, [pc, #100]	@ (8003624 <update_bullets+0xb0>)
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	4413      	add	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4403      	add	r3, r0
 80035ca:	6019      	str	r1, [r3, #0]
			if (bullets[i].x >= 320) {
 80035cc:	4915      	ldr	r1, [pc, #84]	@ (8003624 <update_bullets+0xb0>)
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	4613      	mov	r3, r2
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	4413      	add	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80035e0:	db0a      	blt.n	80035f8 <update_bullets+0x84>
				bullets[i].active = 0;
 80035e2:	4910      	ldr	r1, [pc, #64]	@ (8003624 <update_bullets+0xb0>)
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	4613      	mov	r3, r2
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	4413      	add	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	440b      	add	r3, r1
 80035f0:	3308      	adds	r3, #8
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	e009      	b.n	800360c <update_bullets+0x98>
			} else {
				draw_bullet(&bullets[i]);
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	4413      	add	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4a08      	ldr	r2, [pc, #32]	@ (8003624 <update_bullets+0xb0>)
 8003604:	4413      	add	r3, r2
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff ff44 	bl	8003494 <draw_bullet>
	for (int i = 0; i < MAX_BULLETS; i++) {
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3301      	adds	r3, #1
 8003610:	607b      	str	r3, [r7, #4]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b04      	cmp	r3, #4
 8003616:	ddb3      	ble.n	8003580 <update_bullets+0xc>
			}
		}
	}
}
 8003618:	bf00      	nop
 800361a:	bf00      	nop
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	2000022c 	.word	0x2000022c

08003628 <draw_score>:

void draw_score(int point) {
 8003628:	b580      	push	{r7, lr}
 800362a:	b08a      	sub	sp, #40	@ 0x28
 800362c:	af02      	add	r7, sp, #8
 800362e:	6078      	str	r0, [r7, #4]
	char buffer[20];
	sprintf(buffer, "Score: %d", point);
 8003630:	f107 030c 	add.w	r3, r7, #12
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	490e      	ldr	r1, [pc, #56]	@ (8003670 <draw_score+0x48>)
 8003638:	4618      	mov	r0, r3
 800363a:	f003 fc3f 	bl	8006ebc <siprintf>

	// Xóa vùng cũ (giả sử vùng rộng 120px, cao 18px)
	ILI9341_DrawRectangle(0, 0, 120, 18, WHITE);
 800363e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	2312      	movs	r3, #18
 8003646:	2278      	movs	r2, #120	@ 0x78
 8003648:	2100      	movs	r1, #0
 800364a:	2000      	movs	r0, #0
 800364c:	f7fd fd52 	bl	80010f4 <ILI9341_DrawRectangle>

	// Vẽ chuỗi mới (x=0, y=0), dùng font 11x18
	ILI9341_DrawText(buffer, Arial_Narrow8x12, 0, 0, BLACK, WHITE);
 8003650:	f107 000c 	add.w	r0, r7, #12
 8003654:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003658:	9301      	str	r3, [sp, #4]
 800365a:	2300      	movs	r3, #0
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	2300      	movs	r3, #0
 8003660:	2200      	movs	r2, #0
 8003662:	4904      	ldr	r1, [pc, #16]	@ (8003674 <draw_score+0x4c>)
 8003664:	f7fd f960 	bl	8000928 <ILI9341_DrawText>
}
 8003668:	bf00      	nop
 800366a:	3720      	adds	r7, #32
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	08008110 	.word	0x08008110
 8003674:	08008190 	.word	0x08008190

08003678 <check_bullet_enemy_collision>:

void check_bullet_enemy_collision() { //hàm check máy bay địch chạm đạn
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_BULLETS; i++) {
 800367e:	2300      	movs	r3, #0
 8003680:	607b      	str	r3, [r7, #4]
 8003682:	e0df      	b.n	8003844 <check_bullet_enemy_collision+0x1cc>
		if (!bullets[i].active)
 8003684:	4974      	ldr	r1, [pc, #464]	@ (8003858 <check_bullet_enemy_collision+0x1e0>)
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	4613      	mov	r3, r2
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	4413      	add	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	3308      	adds	r3, #8
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	f000 80d0 	beq.w	800383c <check_bullet_enemy_collision+0x1c4>
			continue;
		for (int j = 0; j < current_enemy_count; j++) {
 800369c:	2300      	movs	r3, #0
 800369e:	603b      	str	r3, [r7, #0]
 80036a0:	e0c5      	b.n	800382e <check_bullet_enemy_collision+0x1b6>
			if (!enemies[j].active)
 80036a2:	496e      	ldr	r1, [pc, #440]	@ (800385c <check_bullet_enemy_collision+0x1e4>)
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	4613      	mov	r3, r2
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	4413      	add	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	440b      	add	r3, r1
 80036b0:	3308      	adds	r3, #8
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 80b6 	beq.w	8003826 <check_bullet_enemy_collision+0x1ae>
				continue;

			// Kiểm tra va chạm hình chữ nhật
			if (bullets[i].x + BULLET_HEIGHT > enemies[j].x&&
 80036ba:	4967      	ldr	r1, [pc, #412]	@ (8003858 <check_bullet_enemy_collision+0x1e0>)
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	4613      	mov	r3, r2
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	4413      	add	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	440b      	add	r3, r1
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	1dd9      	adds	r1, r3, #7
 80036cc:	4863      	ldr	r0, [pc, #396]	@ (800385c <check_bullet_enemy_collision+0x1e4>)
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	4613      	mov	r3, r2
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	4413      	add	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4403      	add	r3, r0
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4299      	cmp	r1, r3
 80036de:	f2c0 80a3 	blt.w	8003828 <check_bullet_enemy_collision+0x1b0>
			bullets[i].x < enemies[j].x + PLANE_WIDTH &&
 80036e2:	495e      	ldr	r1, [pc, #376]	@ (800385c <check_bullet_enemy_collision+0x1e4>)
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	4613      	mov	r3, r2
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	4413      	add	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	440b      	add	r3, r1
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f103 0113 	add.w	r1, r3, #19
 80036f6:	4858      	ldr	r0, [pc, #352]	@ (8003858 <check_bullet_enemy_collision+0x1e0>)
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	4613      	mov	r3, r2
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	4413      	add	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4403      	add	r3, r0
 8003704:	681b      	ldr	r3, [r3, #0]
			if (bullets[i].x + BULLET_HEIGHT > enemies[j].x&&
 8003706:	4299      	cmp	r1, r3
 8003708:	f2c0 808e 	blt.w	8003828 <check_bullet_enemy_collision+0x1b0>
			bullets[i].y + BULLET_WIDTH > enemies[j].y &&
 800370c:	4952      	ldr	r1, [pc, #328]	@ (8003858 <check_bullet_enemy_collision+0x1e0>)
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	4613      	mov	r3, r2
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	4413      	add	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	440b      	add	r3, r1
 800371a:	3304      	adds	r3, #4
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	1cd9      	adds	r1, r3, #3
 8003720:	484e      	ldr	r0, [pc, #312]	@ (800385c <check_bullet_enemy_collision+0x1e4>)
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	4613      	mov	r3, r2
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	4413      	add	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4403      	add	r3, r0
 800372e:	3304      	adds	r3, #4
 8003730:	681b      	ldr	r3, [r3, #0]
			bullets[i].x < enemies[j].x + PLANE_WIDTH &&
 8003732:	4299      	cmp	r1, r3
 8003734:	db78      	blt.n	8003828 <check_bullet_enemy_collision+0x1b0>
			bullets[i].y < enemies[j].y + PLANE_HEIGHT) {
 8003736:	4949      	ldr	r1, [pc, #292]	@ (800385c <check_bullet_enemy_collision+0x1e4>)
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	4613      	mov	r3, r2
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	4413      	add	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	440b      	add	r3, r1
 8003744:	3304      	adds	r3, #4
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f103 0113 	add.w	r1, r3, #19
 800374c:	4842      	ldr	r0, [pc, #264]	@ (8003858 <check_bullet_enemy_collision+0x1e0>)
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	4613      	mov	r3, r2
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	4413      	add	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4403      	add	r3, r0
 800375a:	3304      	adds	r3, #4
 800375c:	681b      	ldr	r3, [r3, #0]
			bullets[i].y + BULLET_WIDTH > enemies[j].y &&
 800375e:	4299      	cmp	r1, r3
 8003760:	db62      	blt.n	8003828 <check_bullet_enemy_collision+0x1b0>

				// Xóa máy bay địch và đạn
				erase_enemies(enemies[j].x, enemies[j].y);
 8003762:	493e      	ldr	r1, [pc, #248]	@ (800385c <check_bullet_enemy_collision+0x1e4>)
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	4613      	mov	r3, r2
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	4413      	add	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	6818      	ldr	r0, [r3, #0]
 8003772:	493a      	ldr	r1, [pc, #232]	@ (800385c <check_bullet_enemy_collision+0x1e4>)
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	4613      	mov	r3, r2
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	4413      	add	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	440b      	add	r3, r1
 8003780:	3304      	adds	r3, #4
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4619      	mov	r1, r3
 8003786:	f7fe fe61 	bl	800244c <erase_enemies>
				erase_bullet(&bullets[i]);
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	4613      	mov	r3, r2
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	4413      	add	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4a30      	ldr	r2, [pc, #192]	@ (8003858 <check_bullet_enemy_collision+0x1e0>)
 8003796:	4413      	add	r3, r2
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff fe90 	bl	80034be <erase_bullet>
				bullets[i].active = 0;
 800379e:	492e      	ldr	r1, [pc, #184]	@ (8003858 <check_bullet_enemy_collision+0x1e0>)
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	4613      	mov	r3, r2
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	4413      	add	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	440b      	add	r3, r1
 80037ac:	3308      	adds	r3, #8
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]
				enemies[j].active = 0;
 80037b2:	492a      	ldr	r1, [pc, #168]	@ (800385c <check_bullet_enemy_collision+0x1e4>)
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	4613      	mov	r3, r2
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	4413      	add	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	440b      	add	r3, r1
 80037c0:	3308      	adds	r3, #8
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]

				// (Tùy chọn) Reset lại địch sau khi bị bắn( đảm bảo màn hình luốn đủ số lượng địch)
				enemies[j].x = 320;
 80037c6:	4925      	ldr	r1, [pc, #148]	@ (800385c <check_bullet_enemy_collision+0x1e4>)
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	4613      	mov	r3, r2
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	4413      	add	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	440b      	add	r3, r1
 80037d4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80037d8:	601a      	str	r2, [r3, #0]
				enemies[j].y = rand() % 100; // rand chạy từ 0 -> 32767
 80037da:	f003 fa6f 	bl	8006cbc <rand>
 80037de:	4603      	mov	r3, r0
 80037e0:	4a1f      	ldr	r2, [pc, #124]	@ (8003860 <check_bullet_enemy_collision+0x1e8>)
 80037e2:	fb82 1203 	smull	r1, r2, r2, r3
 80037e6:	1151      	asrs	r1, r2, #5
 80037e8:	17da      	asrs	r2, r3, #31
 80037ea:	1a8a      	subs	r2, r1, r2
 80037ec:	2164      	movs	r1, #100	@ 0x64
 80037ee:	fb01 f202 	mul.w	r2, r1, r2
 80037f2:	1a9a      	subs	r2, r3, r2
 80037f4:	4819      	ldr	r0, [pc, #100]	@ (800385c <check_bullet_enemy_collision+0x1e4>)
 80037f6:	6839      	ldr	r1, [r7, #0]
 80037f8:	460b      	mov	r3, r1
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	440b      	add	r3, r1
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4403      	add	r3, r0
 8003802:	3304      	adds	r3, #4
 8003804:	601a      	str	r2, [r3, #0]
				enemies[j].active = 1;
 8003806:	4915      	ldr	r1, [pc, #84]	@ (800385c <check_bullet_enemy_collision+0x1e4>)
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	4613      	mov	r3, r2
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	4413      	add	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	440b      	add	r3, r1
 8003814:	3308      	adds	r3, #8
 8003816:	2201      	movs	r2, #1
 8003818:	601a      	str	r2, [r3, #0]

				//cộng điểm
				point += 10;
 800381a:	4b12      	ldr	r3, [pc, #72]	@ (8003864 <check_bullet_enemy_collision+0x1ec>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	330a      	adds	r3, #10
 8003820:	4a10      	ldr	r2, [pc, #64]	@ (8003864 <check_bullet_enemy_collision+0x1ec>)
 8003822:	6013      	str	r3, [r2, #0]
 8003824:	e000      	b.n	8003828 <check_bullet_enemy_collision+0x1b0>
				continue;
 8003826:	bf00      	nop
		for (int j = 0; j < current_enemy_count; j++) {
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	3301      	adds	r3, #1
 800382c:	603b      	str	r3, [r7, #0]
 800382e:	4b0e      	ldr	r3, [pc, #56]	@ (8003868 <check_bullet_enemy_collision+0x1f0>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	429a      	cmp	r2, r3
 8003836:	f6ff af34 	blt.w	80036a2 <check_bullet_enemy_collision+0x2a>
 800383a:	e000      	b.n	800383e <check_bullet_enemy_collision+0x1c6>
			continue;
 800383c:	bf00      	nop
	for (int i = 0; i < MAX_BULLETS; i++) {
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3301      	adds	r3, #1
 8003842:	607b      	str	r3, [r7, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b04      	cmp	r3, #4
 8003848:	f77f af1c 	ble.w	8003684 <check_bullet_enemy_collision+0xc>

			}
		}
	}
}
 800384c:	bf00      	nop
 800384e:	bf00      	nop
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	2000022c 	.word	0x2000022c
 800385c:	20000178 	.word	0x20000178
 8003860:	51eb851f 	.word	0x51eb851f
 8003864:	200004e0 	.word	0x200004e0
 8003868:	2000000c 	.word	0x2000000c

0800386c <show_welcome_screen>:

void show_welcome_screen() {
 800386c:	b580      	push	{r7, lr}
 800386e:	b088      	sub	sp, #32
 8003870:	af02      	add	r7, sp, #8
    ILI9341_FillScreen(WHITE);
 8003872:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003876:	f7fd fbb1 	bl	8000fdc <ILI9341_FillScreen>

    // Hiển thị tiêu đề
    ILI9341_DrawText("WELCOME TO", FONT3, 90, 80, RED, WHITE);
 800387a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800387e:	9301      	str	r3, [sp, #4]
 8003880:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	2350      	movs	r3, #80	@ 0x50
 8003888:	225a      	movs	r2, #90	@ 0x5a
 800388a:	493c      	ldr	r1, [pc, #240]	@ (800397c <show_welcome_screen+0x110>)
 800388c:	483c      	ldr	r0, [pc, #240]	@ (8003980 <show_welcome_screen+0x114>)
 800388e:	f7fd f84b 	bl	8000928 <ILI9341_DrawText>
    ILI9341_DrawText("AIR WAR", FONT4, 110, 100, BLUE, WHITE);
 8003892:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003896:	9301      	str	r3, [sp, #4]
 8003898:	231f      	movs	r3, #31
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	2364      	movs	r3, #100	@ 0x64
 800389e:	226e      	movs	r2, #110	@ 0x6e
 80038a0:	4938      	ldr	r1, [pc, #224]	@ (8003984 <show_welcome_screen+0x118>)
 80038a2:	4839      	ldr	r0, [pc, #228]	@ (8003988 <show_welcome_screen+0x11c>)
 80038a4:	f7fd f840 	bl	8000928 <ILI9341_DrawText>
    ILI9341_DrawText("PRESS TO START", FONT3, 90, 140, BLUE, WHITE);
 80038a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038ac:	9301      	str	r3, [sp, #4]
 80038ae:	231f      	movs	r3, #31
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	238c      	movs	r3, #140	@ 0x8c
 80038b4:	225a      	movs	r2, #90	@ 0x5a
 80038b6:	4931      	ldr	r1, [pc, #196]	@ (800397c <show_welcome_screen+0x110>)
 80038b8:	4834      	ldr	r0, [pc, #208]	@ (800398c <show_welcome_screen+0x120>)
 80038ba:	f7fd f835 	bl	8000928 <ILI9341_DrawText>

    // Khởi tạo máy bay và địch cho demo
    int demo_plane_y = 120;
 80038be:	2378      	movs	r3, #120	@ 0x78
 80038c0:	617b      	str	r3, [r7, #20]
    int direction = 1;
 80038c2:	2301      	movs	r3, #1
 80038c4:	613b      	str	r3, [r7, #16]
    int demo_enemy_y = 30;
 80038c6:	231e      	movs	r3, #30
 80038c8:	60bb      	str	r3, [r7, #8]

    uint32_t last_update = HAL_GetTick();
 80038ca:	f000 ffc3 	bl	8004854 <HAL_GetTick>
 80038ce:	60f8      	str	r0, [r7, #12]

    while (!plane_move_flag) { // Đợi cho đến khi nhấn nút thật sự
 80038d0:	e040      	b.n	8003954 <show_welcome_screen+0xe8>
        uint32_t now = HAL_GetTick();
 80038d2:	f000 ffbf 	bl	8004854 <HAL_GetTick>
 80038d6:	6078      	str	r0, [r7, #4]

        if (now - last_update >= 100) {
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b63      	cmp	r3, #99	@ 0x63
 80038e0:	d938      	bls.n	8003954 <show_welcome_screen+0xe8>
            // Cập nhật máy bay demo bay lên xuống
            int old_y = demo_plane_y;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	603b      	str	r3, [r7, #0]
            demo_plane_y += direction * 5;
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4613      	mov	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	4413      	add	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]
            if (demo_plane_y > 180 || demo_plane_y < 60) direction *= -1;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2bb4      	cmp	r3, #180	@ 0xb4
 80038f8:	dc02      	bgt.n	8003900 <show_welcome_screen+0x94>
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2b3b      	cmp	r3, #59	@ 0x3b
 80038fe:	dc02      	bgt.n	8003906 <show_welcome_screen+0x9a>
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	425b      	negs	r3, r3
 8003904:	613b      	str	r3, [r7, #16]

            // Xóa và vẽ lại máy bay
            erase_plane(plane_x, old_y);
 8003906:	4b22      	ldr	r3, [pc, #136]	@ (8003990 <show_welcome_screen+0x124>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6839      	ldr	r1, [r7, #0]
 800390c:	4618      	mov	r0, r3
 800390e:	f7fe f8d9 	bl	8001ac4 <erase_plane>
            draw_plane(plane_x, demo_plane_y);
 8003912:	4b1f      	ldr	r3, [pc, #124]	@ (8003990 <show_welcome_screen+0x124>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6979      	ldr	r1, [r7, #20]
 8003918:	4618      	mov	r0, r3
 800391a:	f7fd fcac 	bl	8001276 <draw_plane>

            // Địch bay ngang đơn giản
            static int enemy_x = 220;
            erase_enemies(enemy_x, demo_enemy_y);
 800391e:	4b1d      	ldr	r3, [pc, #116]	@ (8003994 <show_welcome_screen+0x128>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68b9      	ldr	r1, [r7, #8]
 8003924:	4618      	mov	r0, r3
 8003926:	f7fe fd91 	bl	800244c <erase_enemies>
            enemy_x -= 10;
 800392a:	4b1a      	ldr	r3, [pc, #104]	@ (8003994 <show_welcome_screen+0x128>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	3b0a      	subs	r3, #10
 8003930:	4a18      	ldr	r2, [pc, #96]	@ (8003994 <show_welcome_screen+0x128>)
 8003932:	6013      	str	r3, [r2, #0]
            if (enemy_x < -20) enemy_x = 220;
 8003934:	4b17      	ldr	r3, [pc, #92]	@ (8003994 <show_welcome_screen+0x128>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f113 0f14 	cmn.w	r3, #20
 800393c:	da02      	bge.n	8003944 <show_welcome_screen+0xd8>
 800393e:	4b15      	ldr	r3, [pc, #84]	@ (8003994 <show_welcome_screen+0x128>)
 8003940:	22dc      	movs	r2, #220	@ 0xdc
 8003942:	601a      	str	r2, [r3, #0]
            draw_enemies(enemy_x, demo_enemy_y);
 8003944:	4b13      	ldr	r3, [pc, #76]	@ (8003994 <show_welcome_screen+0x128>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68b9      	ldr	r1, [r7, #8]
 800394a:	4618      	mov	r0, r3
 800394c:	f7fe fce4 	bl	8002318 <draw_enemies>

            last_update = now;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	60fb      	str	r3, [r7, #12]
    while (!plane_move_flag) { // Đợi cho đến khi nhấn nút thật sự
 8003954:	4b10      	ldr	r3, [pc, #64]	@ (8003998 <show_welcome_screen+0x12c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0ba      	beq.n	80038d2 <show_welcome_screen+0x66>
        }
    }
    if (plane_move_flag) {
 800395c:	4b0e      	ldr	r3, [pc, #56]	@ (8003998 <show_welcome_screen+0x12c>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d007      	beq.n	8003974 <show_welcome_screen+0x108>
        ILI9341_FillScreen(WHITE);  // Xóa màn hình welcome
 8003964:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003968:	f7fd fb38 	bl	8000fdc <ILI9341_FillScreen>
        plane_move_flag = 0;        // Reset flag để không bị bắn ngay khi vào game
 800396c:	4b0a      	ldr	r3, [pc, #40]	@ (8003998 <show_welcome_screen+0x12c>)
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
        return;                     // Thoát khỏi hàm show_welcome_screen()
 8003972:	bf00      	nop
    }
}
 8003974:	3718      	adds	r7, #24
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	08008fd8 	.word	0x08008fd8
 8003980:	0800811c 	.word	0x0800811c
 8003984:	0800993c 	.word	0x0800993c
 8003988:	08008128 	.word	0x08008128
 800398c:	08008130 	.word	0x08008130
 8003990:	20000004 	.word	0x20000004
 8003994:	20000018 	.word	0x20000018
 8003998:	200004d4 	.word	0x200004d4

0800399c <check_collision>:


int check_collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2,
		int h2)
// hàm check va chạm máy bay ta với địch
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
 80039a8:	603b      	str	r3, [r7, #0]
	return !(x1 + w1 <= x2 ||  // máy bay ta ở hoàn toàn ở dưới máy bay địch
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4413      	add	r3, r2
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	da1e      	bge.n	80039f4 <check_collision+0x58>
			x2 + w2 <= x1 ||  // máy bay địch hoàn toàn ở dưới máy bay ta
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	4413      	add	r3, r2
	return !(x1 + w1 <= x2 ||  // máy bay ta ở hoàn toàn ở dưới máy bay địch
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	429a      	cmp	r2, r3
 80039c0:	da18      	bge.n	80039f4 <check_collision+0x58>
			y1 + h1 / 2 <= y2 ||  // máy bay ta hoàn toàn bên phải máy bay đich
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	0fda      	lsrs	r2, r3, #31
 80039c6:	4413      	add	r3, r2
 80039c8:	105b      	asrs	r3, r3, #1
 80039ca:	461a      	mov	r2, r3
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	4413      	add	r3, r2
			x2 + w2 <= x1 ||  // máy bay địch hoàn toàn ở dưới máy bay ta
 80039d0:	69fa      	ldr	r2, [r7, #28]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	da0e      	bge.n	80039f4 <check_collision+0x58>
			y1 - h1 / 2 >= y2 + h2); // máy bay địch ở hoàn toàn bên phải máy bay ta
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	0fda      	lsrs	r2, r3, #31
 80039da:	4413      	add	r3, r2
 80039dc:	105b      	asrs	r3, r3, #1
 80039de:	425b      	negs	r3, r3
 80039e0:	461a      	mov	r2, r3
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	441a      	add	r2, r3
 80039e6:	69f9      	ldr	r1, [r7, #28]
 80039e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ea:	440b      	add	r3, r1
	return !(x1 + w1 <= x2 ||  // máy bay ta ở hoàn toàn ở dưới máy bay địch
 80039ec:	429a      	cmp	r2, r3
 80039ee:	da01      	bge.n	80039f4 <check_collision+0x58>
 80039f0:	2301      	movs	r3, #1
 80039f2:	e000      	b.n	80039f6 <check_collision+0x5a>
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
	...

08003a04 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003a04:	b5b0      	push	{r4, r5, r7, lr}
 8003a06:	b0ac      	sub	sp, #176	@ 0xb0
 8003a08:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003a0a:	f000 febd 	bl	8004788 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003a0e:	f000 fa99 	bl	8003f44 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003a12:	f000 fb85 	bl	8004120 <MX_GPIO_Init>
	MX_DMA_Init();
 8003a16:	f000 fb63 	bl	80040e0 <MX_DMA_Init>
	MX_RTC_Init();
 8003a1a:	f000 fb05 	bl	8004028 <MX_RTC_Init>
	MX_SPI5_Init();
 8003a1e:	f000 fb29 	bl	8004074 <MX_SPI5_Init>
	/* USER CODE BEGIN 2 */
	ILI9341_Init();
 8003a22:	f7fd f8e3 	bl	8000bec <ILI9341_Init>
	ILI9341_FillScreen(WHITE); //xóa màn hình cũ
 8003a26:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003a2a:	f7fd fad7 	bl	8000fdc <ILI9341_FillScreen>
	ILI9341_SetRotation(SCREEN_HORIZONTAL_2); // khởi tạo trục Oxy
 8003a2e:	2003      	movs	r0, #3
 8003a30:	f7fd f9e6 	bl	8000e00 <ILI9341_SetRotation>

	srand(time(NULL)); // lệnh này khởi tạo "seed" (hạt giống) cho bộ sinh số ngẫu nhiên rand()
 8003a34:	2000      	movs	r0, #0
 8003a36:	f003 faaf 	bl	8006f98 <time>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	4613      	mov	r3, r2
 8003a40:	4618      	mov	r0, r3
 8003a42:	f003 f90d 	bl	8006c60 <srand>
	show_welcome_screen();
 8003a46:	f7ff ff11 	bl	800386c <show_welcome_screen>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		/* Infinite loop */
		for (int i = 0; i < MAX_BULLETS; i++)
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a50:	e00f      	b.n	8003a72 <main+0x6e>
			bullets[i].active = 0;
 8003a52:	4988      	ldr	r1, [pc, #544]	@ (8003c74 <main+0x270>)
 8003a54:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8003a58:	4613      	mov	r3, r2
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	4413      	add	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	3308      	adds	r3, #8
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < MAX_BULLETS; i++)
 8003a68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a72:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	ddeb      	ble.n	8003a52 <main+0x4e>

		draw_plane(plane_x, plane_y);
 8003a7a:	4b7f      	ldr	r3, [pc, #508]	@ (8003c78 <main+0x274>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a7f      	ldr	r2, [pc, #508]	@ (8003c7c <main+0x278>)
 8003a80:	6812      	ldr	r2, [r2, #0]
 8003a82:	4611      	mov	r1, r2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fd fbf6 	bl	8001276 <draw_plane>
		init_enemies();
 8003a8a:	f7fe fcf3 	bl	8002474 <init_enemies>
		draw_score(point);
 8003a8e:	4b7c      	ldr	r3, [pc, #496]	@ (8003c80 <main+0x27c>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff fdc8 	bl	8003628 <draw_score>
		level_start_time = HAL_GetTick(); // Bắt đầu đếm thời gian level đầu tiên
 8003a98:	f000 fedc 	bl	8004854 <HAL_GetTick>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	4a79      	ldr	r2, [pc, #484]	@ (8003c84 <main+0x280>)
 8003aa0:	6013      	str	r3, [r2, #0]

		while (1) {
			current_time = HAL_GetTick();
 8003aa2:	f000 fed7 	bl	8004854 <HAL_GetTick>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	4a77      	ldr	r2, [pc, #476]	@ (8003c88 <main+0x284>)
 8003aaa:	6013      	str	r3, [r2, #0]
			draw_score(point);
 8003aac:	4b74      	ldr	r3, [pc, #464]	@ (8003c80 <main+0x27c>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7ff fdb9 	bl	8003628 <draw_score>
			update_bullets();
 8003ab6:	f7ff fd5d 	bl	8003574 <update_bullets>
			if (level <= 2) {
 8003aba:	4b74      	ldr	r3, [pc, #464]	@ (8003c8c <main+0x288>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	f300 80f4 	bgt.w	8003cac <main+0x2a8>
				draw_plane(plane_x, plane_y);
 8003ac4:	4b6c      	ldr	r3, [pc, #432]	@ (8003c78 <main+0x274>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a6c      	ldr	r2, [pc, #432]	@ (8003c7c <main+0x278>)
 8003aca:	6812      	ldr	r2, [r2, #0]
 8003acc:	4611      	mov	r1, r2
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fd fbd1 	bl	8001276 <draw_plane>
				update_enemies();
 8003ad4:	f7fe fd16 	bl	8002504 <update_enemies>
				for (int i = 0; i < current_enemy_count; i++) {
 8003ad8:	2300      	movs	r3, #0
 8003ada:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ade:	e039      	b.n	8003b54 <main+0x150>
					if (enemies[i].active
 8003ae0:	496b      	ldr	r1, [pc, #428]	@ (8003c90 <main+0x28c>)
 8003ae2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	4413      	add	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	440b      	add	r3, r1
 8003af0:	3308      	adds	r3, #8
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d028      	beq.n	8003b4a <main+0x146>
							&& check_collision(plane_x, plane_y, PLANE_WIDTH,
 8003af8:	4b5f      	ldr	r3, [pc, #380]	@ (8003c78 <main+0x274>)
 8003afa:	6818      	ldr	r0, [r3, #0]
 8003afc:	4b5f      	ldr	r3, [pc, #380]	@ (8003c7c <main+0x278>)
 8003afe:	681c      	ldr	r4, [r3, #0]
 8003b00:	4963      	ldr	r1, [pc, #396]	@ (8003c90 <main+0x28c>)
 8003b02:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8003b06:	4613      	mov	r3, r2
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	4413      	add	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	440b      	add	r3, r1
 8003b10:	6819      	ldr	r1, [r3, #0]
 8003b12:	4d5f      	ldr	r5, [pc, #380]	@ (8003c90 <main+0x28c>)
 8003b14:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8003b18:	4613      	mov	r3, r2
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	4413      	add	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	442b      	add	r3, r5
 8003b22:	3304      	adds	r3, #4
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2214      	movs	r2, #20
 8003b28:	9203      	str	r2, [sp, #12]
 8003b2a:	2214      	movs	r2, #20
 8003b2c:	9202      	str	r2, [sp, #8]
 8003b2e:	9301      	str	r3, [sp, #4]
 8003b30:	9100      	str	r1, [sp, #0]
 8003b32:	2314      	movs	r3, #20
 8003b34:	2214      	movs	r2, #20
 8003b36:	4621      	mov	r1, r4
 8003b38:	f7ff ff30 	bl	800399c <check_collision>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <main+0x146>
							PLANE_HEIGHT, enemies[i].x, enemies[i].y,
							PLANE_WIDTH, PLANE_HEIGHT)) {
						// Hiển thị "Game Over"
						show_game_over_screen();
 8003b42:	f7ff fc5d 	bl	8003400 <show_game_over_screen>
						while (1)
 8003b46:	bf00      	nop
 8003b48:	e7fd      	b.n	8003b46 <main+0x142>
				for (int i = 0; i < current_enemy_count; i++) {
 8003b4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b4e:	3301      	adds	r3, #1
 8003b50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b54:	4b4f      	ldr	r3, [pc, #316]	@ (8003c94 <main+0x290>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	dbbf      	blt.n	8003ae0 <main+0xdc>
							; // Dừng game tại đây
					}
				}

				check_bullet_enemy_collision();
 8003b60:	f7ff fd8a 	bl	8003678 <check_bullet_enemy_collision>
				if (plane_move_flag) {
 8003b64:	4b4c      	ldr	r3, [pc, #304]	@ (8003c98 <main+0x294>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d004      	beq.n	8003b76 <main+0x172>
					plane_move_flag = 0;
 8003b6c:	4b4a      	ldr	r3, [pc, #296]	@ (8003c98 <main+0x294>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]
					shoot_bullet();  // chỉ bắn, không di chuyển
 8003b72:	f7ff fcb9 	bl	80034e8 <shoot_bullet>
				}

				if (plane_move_left_flag) {
 8003b76:	4b49      	ldr	r3, [pc, #292]	@ (8003c9c <main+0x298>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d01c      	beq.n	8003bb8 <main+0x1b4>
					plane_move_left_flag = 0;
 8003b7e:	4b47      	ldr	r3, [pc, #284]	@ (8003c9c <main+0x298>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]
					int old_y = plane_y;
 8003b84:	4b3d      	ldr	r3, [pc, #244]	@ (8003c7c <main+0x278>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	67fb      	str	r3, [r7, #124]	@ 0x7c
					if (plane_y < 220) {
 8003b8a:	4b3c      	ldr	r3, [pc, #240]	@ (8003c7c <main+0x278>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2bdb      	cmp	r3, #219	@ 0xdb
 8003b90:	dc04      	bgt.n	8003b9c <main+0x198>
						plane_y = plane_y + 10;
 8003b92:	4b3a      	ldr	r3, [pc, #232]	@ (8003c7c <main+0x278>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	330a      	adds	r3, #10
 8003b98:	4a38      	ldr	r2, [pc, #224]	@ (8003c7c <main+0x278>)
 8003b9a:	6013      	str	r3, [r2, #0]
					}
					erase_plane(plane_x, old_y);
 8003b9c:	4b36      	ldr	r3, [pc, #216]	@ (8003c78 <main+0x274>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fd ff8e 	bl	8001ac4 <erase_plane>
					draw_plane(plane_x, plane_y);
 8003ba8:	4b33      	ldr	r3, [pc, #204]	@ (8003c78 <main+0x274>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a33      	ldr	r2, [pc, #204]	@ (8003c7c <main+0x278>)
 8003bae:	6812      	ldr	r2, [r2, #0]
 8003bb0:	4611      	mov	r1, r2
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7fd fb5f 	bl	8001276 <draw_plane>
				}

				if (plane_move_right_flag) {
 8003bb8:	4b39      	ldr	r3, [pc, #228]	@ (8003ca0 <main+0x29c>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d01c      	beq.n	8003bfa <main+0x1f6>
					plane_move_right_flag = 0;
 8003bc0:	4b37      	ldr	r3, [pc, #220]	@ (8003ca0 <main+0x29c>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]
					int old_y = plane_y;
 8003bc6:	4b2d      	ldr	r3, [pc, #180]	@ (8003c7c <main+0x278>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	67bb      	str	r3, [r7, #120]	@ 0x78
					if (plane_y > 30) {
 8003bcc:	4b2b      	ldr	r3, [pc, #172]	@ (8003c7c <main+0x278>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b1e      	cmp	r3, #30
 8003bd2:	dd04      	ble.n	8003bde <main+0x1da>
						plane_y = plane_y - 10;
 8003bd4:	4b29      	ldr	r3, [pc, #164]	@ (8003c7c <main+0x278>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	3b0a      	subs	r3, #10
 8003bda:	4a28      	ldr	r2, [pc, #160]	@ (8003c7c <main+0x278>)
 8003bdc:	6013      	str	r3, [r2, #0]
					}
					erase_plane(plane_x, old_y);
 8003bde:	4b26      	ldr	r3, [pc, #152]	@ (8003c78 <main+0x274>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7fd ff6d 	bl	8001ac4 <erase_plane>
					draw_plane(plane_x, plane_y);
 8003bea:	4b23      	ldr	r3, [pc, #140]	@ (8003c78 <main+0x274>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a23      	ldr	r2, [pc, #140]	@ (8003c7c <main+0x278>)
 8003bf0:	6812      	ldr	r2, [r2, #0]
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7fd fb3e 	bl	8001276 <draw_plane>
				}
				if (current_time - level_start_time >= LEVEL_DURATION) {
 8003bfa:	4b23      	ldr	r3, [pc, #140]	@ (8003c88 <main+0x284>)
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	4b21      	ldr	r3, [pc, #132]	@ (8003c84 <main+0x280>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	f247 5230 	movw	r2, #30000	@ 0x7530
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	f4ff af4a 	bcc.w	8003aa2 <main+0x9e>
				    level_start_time = HAL_GetTick(); // Reset thời gian cho level mới
 8003c0e:	f000 fe21 	bl	8004854 <HAL_GetTick>
 8003c12:	4603      	mov	r3, r0
 8003c14:	4a1b      	ldr	r2, [pc, #108]	@ (8003c84 <main+0x280>)
 8003c16:	6013      	str	r3, [r2, #0]
				    level++;
 8003c18:	4b1c      	ldr	r3, [pc, #112]	@ (8003c8c <main+0x288>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	4a1b      	ldr	r2, [pc, #108]	@ (8003c8c <main+0x288>)
 8003c20:	6013      	str	r3, [r2, #0]
				    current_enemy_count += 2;
 8003c22:	4b1c      	ldr	r3, [pc, #112]	@ (8003c94 <main+0x290>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	3302      	adds	r3, #2
 8003c28:	4a1a      	ldr	r2, [pc, #104]	@ (8003c94 <main+0x290>)
 8003c2a:	6013      	str	r3, [r2, #0]
				    init_enemies();
 8003c2c:	f7fe fc22 	bl	8002474 <init_enemies>

				    // Hiển thị thông báo level up
				    ILI9341_FillScreen(WHITE);
 8003c30:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003c34:	f7fd f9d2 	bl	8000fdc <ILI9341_FillScreen>
				    char msg[30];
				    sprintf(msg, "LEVEL %d", level);
 8003c38:	4b14      	ldr	r3, [pc, #80]	@ (8003c8c <main+0x288>)
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003c40:	4918      	ldr	r1, [pc, #96]	@ (8003ca4 <main+0x2a0>)
 8003c42:	4618      	mov	r0, r3
 8003c44:	f003 f93a 	bl	8006ebc <siprintf>
				    ILI9341_DrawText(msg, FONT3, 50, 120, BLUE, WHITE);
 8003c48:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8003c4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c50:	9301      	str	r3, [sp, #4]
 8003c52:	231f      	movs	r3, #31
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	2378      	movs	r3, #120	@ 0x78
 8003c58:	2232      	movs	r2, #50	@ 0x32
 8003c5a:	4913      	ldr	r1, [pc, #76]	@ (8003ca8 <main+0x2a4>)
 8003c5c:	f7fc fe64 	bl	8000928 <ILI9341_DrawText>
				    HAL_Delay(1000);
 8003c60:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003c64:	f000 fe02 	bl	800486c <HAL_Delay>
				    ILI9341_FillScreen(WHITE);
 8003c68:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003c6c:	f7fd f9b6 	bl	8000fdc <ILI9341_FillScreen>
 8003c70:	e717      	b.n	8003aa2 <main+0x9e>
 8003c72:	bf00      	nop
 8003c74:	2000022c 	.word	0x2000022c
 8003c78:	20000004 	.word	0x20000004
 8003c7c:	20000008 	.word	0x20000008
 8003c80:	200004e0 	.word	0x200004e0
 8003c84:	200004e8 	.word	0x200004e8
 8003c88:	200004ec 	.word	0x200004ec
 8003c8c:	20000010 	.word	0x20000010
 8003c90:	20000178 	.word	0x20000178
 8003c94:	2000000c 	.word	0x2000000c
 8003c98:	200004d4 	.word	0x200004d4
 8003c9c:	200004d8 	.word	0x200004d8
 8003ca0:	200004dc 	.word	0x200004dc
 8003ca4:	08008140 	.word	0x08008140
 8003ca8:	08008fd8 	.word	0x08008fd8
				}
			} else if (level == 3) {
 8003cac:	4b93      	ldr	r3, [pc, #588]	@ (8003efc <main+0x4f8>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b03      	cmp	r3, #3
 8003cb2:	f47f aef6 	bne.w	8003aa2 <main+0x9e>
				// Hiển thị thông báo level up

				ILI9341_FillScreen(WHITE);
 8003cb6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003cba:	f7fd f98f 	bl	8000fdc <ILI9341_FillScreen>
				char msg[30];
				sprintf(msg, "FINAL BOSS", level);
 8003cbe:	4b8f      	ldr	r3, [pc, #572]	@ (8003efc <main+0x4f8>)
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003cc6:	498e      	ldr	r1, [pc, #568]	@ (8003f00 <main+0x4fc>)
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f003 f8f7 	bl	8006ebc <siprintf>
				ILI9341_DrawText(msg, FONT3, 50, 120, BLUE, WHITE);
 8003cce:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8003cd2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003cd6:	9301      	str	r3, [sp, #4]
 8003cd8:	231f      	movs	r3, #31
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	2378      	movs	r3, #120	@ 0x78
 8003cde:	2232      	movs	r2, #50	@ 0x32
 8003ce0:	4988      	ldr	r1, [pc, #544]	@ (8003f04 <main+0x500>)
 8003ce2:	f7fc fe21 	bl	8000928 <ILI9341_DrawText>
				HAL_Delay(1000);  // Hiển thị 1 giây
 8003ce6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003cea:	f000 fdbf 	bl	800486c <HAL_Delay>
				ILI9341_FillScreen(WHITE);
 8003cee:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003cf2:	f7fd f973 	bl	8000fdc <ILI9341_FillScreen>
				init_boss();
 8003cf6:	f7fe fcb1 	bl	800265c <init_boss>
				draw_boss(boss.x, boss.y);
 8003cfa:	4b83      	ldr	r3, [pc, #524]	@ (8003f08 <main+0x504>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a82      	ldr	r2, [pc, #520]	@ (8003f08 <main+0x504>)
 8003d00:	6852      	ldr	r2, [r2, #4]
 8003d02:	4611      	mov	r1, r2
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7fe fcc3 	bl	8002690 <draw_boss>
				draw_plane(plane_x, plane_y);
 8003d0a:	4b80      	ldr	r3, [pc, #512]	@ (8003f0c <main+0x508>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a80      	ldr	r2, [pc, #512]	@ (8003f10 <main+0x50c>)
 8003d10:	6812      	ldr	r2, [r2, #0]
 8003d12:	4611      	mov	r1, r2
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fd faae 	bl	8001276 <draw_plane>
				boss_start_time = HAL_GetTick(); // Bắt đầu đếm thời gian boss
 8003d1a:	f000 fd9b 	bl	8004854 <HAL_GetTick>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	4a7c      	ldr	r2, [pc, #496]	@ (8003f14 <main+0x510>)
 8003d22:	6013      	str	r3, [r2, #0]
				uint32_t now = HAL_GetTick(); // Lấy thời gian hiện tại (milis)
 8003d24:	f000 fd96 	bl	8004854 <HAL_GetTick>
 8003d28:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
				while (1) {
					draw_score(point);
 8003d2c:	4b7a      	ldr	r3, [pc, #488]	@ (8003f18 <main+0x514>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff fc79 	bl	8003628 <draw_score>
					now = HAL_GetTick();
 8003d36:	f000 fd8d 	bl	8004854 <HAL_GetTick>
 8003d3a:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
					if (now - last_boss_fire_time >= boss_fire_interval) {
 8003d3e:	4b77      	ldr	r3, [pc, #476]	@ (8003f1c <main+0x518>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d305      	bcc.n	8003d5c <main+0x358>
						fire_boss_laser();
 8003d50:	f7fe fdc2 	bl	80028d8 <fire_boss_laser>
						last_boss_fire_time = now;
 8003d54:	4a71      	ldr	r2, [pc, #452]	@ (8003f1c <main+0x518>)
 8003d56:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003d5a:	6013      	str	r3, [r2, #0]
					}
					update_bullets();
 8003d5c:	f7ff fc0a 	bl	8003574 <update_bullets>
					HAL_Delay(10);
 8003d60:	200a      	movs	r0, #10
 8003d62:	f000 fd83 	bl	800486c <HAL_Delay>
					update_boss();
 8003d66:	f7ff f9ff 	bl	8003168 <update_boss>
					update_boss_bullets();
 8003d6a:	f7ff f947 	bl	8002ffc <update_boss_bullets>
					if (check_bullet_boss_collision() == 1) {
 8003d6e:	f7ff fa3d 	bl	80031ec <check_bullet_boss_collision>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d164      	bne.n	8003e42 <main+0x43e>
					    // Tính điểm thưởng khi tiêu diệt boss
					    uint32_t boss_kill_time = now - boss_start_time;
 8003d78:	4b66      	ldr	r3, [pc, #408]	@ (8003f14 <main+0x510>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
					    uint32_t seconds_taken = boss_kill_time / 1000; // Chuyển về giây
 8003d86:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d8a:	4a65      	ldr	r2, [pc, #404]	@ (8003f20 <main+0x51c>)
 8003d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d90:	099b      	lsrs	r3, r3, #6
 8003d92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

					    int bonus_points = 500 - seconds_taken;
 8003d96:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003d9a:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8003d9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
					    if (bonus_points < 100) {
 8003da2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003da6:	2b63      	cmp	r3, #99	@ 0x63
 8003da8:	dc02      	bgt.n	8003db0 <main+0x3ac>
					        bonus_points = 100; // Tối thiểu 100 điểm
 8003daa:	2364      	movs	r3, #100	@ 0x64
 8003dac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
					    }

					    point += bonus_points;
 8003db0:	4b59      	ldr	r3, [pc, #356]	@ (8003f18 <main+0x514>)
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003db8:	4413      	add	r3, r2
 8003dba:	4a57      	ldr	r2, [pc, #348]	@ (8003f18 <main+0x514>)
 8003dbc:	6013      	str	r3, [r2, #0]

					    // Hiển thị điểm thưởng
					    ILI9341_FillScreen(WHITE);
 8003dbe:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003dc2:	f7fd f90b 	bl	8000fdc <ILI9341_FillScreen>
					    char bonus_msg[50];
					    sprintf(bonus_msg, "BOSS KILLED!");
 8003dc6:	1d3b      	adds	r3, r7, #4
 8003dc8:	4956      	ldr	r1, [pc, #344]	@ (8003f24 <main+0x520>)
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f003 f876 	bl	8006ebc <siprintf>
					    ILI9341_DrawText(bonus_msg, FONT3, 30, 100, RED, WHITE);
 8003dd0:	1d38      	adds	r0, r7, #4
 8003dd2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003dd6:	9301      	str	r3, [sp, #4]
 8003dd8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	2364      	movs	r3, #100	@ 0x64
 8003de0:	221e      	movs	r2, #30
 8003de2:	4948      	ldr	r1, [pc, #288]	@ (8003f04 <main+0x500>)
 8003de4:	f7fc fda0 	bl	8000928 <ILI9341_DrawText>

					    sprintf(bonus_msg, "Time: %lu seconds", seconds_taken);
 8003de8:	1d3b      	adds	r3, r7, #4
 8003dea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003dee:	494e      	ldr	r1, [pc, #312]	@ (8003f28 <main+0x524>)
 8003df0:	4618      	mov	r0, r3
 8003df2:	f003 f863 	bl	8006ebc <siprintf>
					    ILI9341_DrawText(bonus_msg, FONT2, 50, 130, BLUE, WHITE);
 8003df6:	1d38      	adds	r0, r7, #4
 8003df8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003dfc:	9301      	str	r3, [sp, #4]
 8003dfe:	231f      	movs	r3, #31
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	2382      	movs	r3, #130	@ 0x82
 8003e04:	2232      	movs	r2, #50	@ 0x32
 8003e06:	4949      	ldr	r1, [pc, #292]	@ (8003f2c <main+0x528>)
 8003e08:	f7fc fd8e 	bl	8000928 <ILI9341_DrawText>

					    sprintf(bonus_msg, "Bonus: +%d points", bonus_points);
 8003e0c:	1d3b      	adds	r3, r7, #4
 8003e0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003e12:	4947      	ldr	r1, [pc, #284]	@ (8003f30 <main+0x52c>)
 8003e14:	4618      	mov	r0, r3
 8003e16:	f003 f851 	bl	8006ebc <siprintf>
					    ILI9341_DrawText(bonus_msg, FONT2, 40, 150, GREEN, WHITE);
 8003e1a:	1d38      	adds	r0, r7, #4
 8003e1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e20:	9301      	str	r3, [sp, #4]
 8003e22:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	2396      	movs	r3, #150	@ 0x96
 8003e2a:	2228      	movs	r2, #40	@ 0x28
 8003e2c:	493f      	ldr	r1, [pc, #252]	@ (8003f2c <main+0x528>)
 8003e2e:	f7fc fd7b 	bl	8000928 <ILI9341_DrawText>

					    HAL_Delay(5000); // Hiển thị 5 giây
 8003e32:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003e36:	f000 fd19 	bl	800486c <HAL_Delay>

					    show_victory_screen();
 8003e3a:	f7ff fa71 	bl	8003320 <show_victory_screen>
					    while (1); // Dừng trò chơi
 8003e3e:	bf00      	nop
 8003e40:	e7fd      	b.n	8003e3e <main+0x43a>
					}

					if (plane_move_flag) {
 8003e42:	4b3c      	ldr	r3, [pc, #240]	@ (8003f34 <main+0x530>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d004      	beq.n	8003e54 <main+0x450>
						plane_move_flag = 0;
 8003e4a:	4b3a      	ldr	r3, [pc, #232]	@ (8003f34 <main+0x530>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]
						shoot_bullet();  // chỉ bắn, không di chuyển
 8003e50:	f7ff fb4a 	bl	80034e8 <shoot_bullet>
					}

					if (plane_move_left_flag) {
 8003e54:	4b38      	ldr	r3, [pc, #224]	@ (8003f38 <main+0x534>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d024      	beq.n	8003ea6 <main+0x4a2>
						plane_move_left_flag = 0;
 8003e5c:	4b36      	ldr	r3, [pc, #216]	@ (8003f38 <main+0x534>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]
						int old_y = plane_y;
 8003e62:	4b2b      	ldr	r3, [pc, #172]	@ (8003f10 <main+0x50c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
						plane_y = (plane_y + 5) % 220;
 8003e6a:	4b29      	ldr	r3, [pc, #164]	@ (8003f10 <main+0x50c>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	1d5a      	adds	r2, r3, #5
 8003e70:	4b32      	ldr	r3, [pc, #200]	@ (8003f3c <main+0x538>)
 8003e72:	fb83 1302 	smull	r1, r3, r3, r2
 8003e76:	10d9      	asrs	r1, r3, #3
 8003e78:	17d3      	asrs	r3, r2, #31
 8003e7a:	1acb      	subs	r3, r1, r3
 8003e7c:	21dc      	movs	r1, #220	@ 0xdc
 8003e7e:	fb01 f303 	mul.w	r3, r1, r3
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	4a22      	ldr	r2, [pc, #136]	@ (8003f10 <main+0x50c>)
 8003e86:	6013      	str	r3, [r2, #0]
						erase_plane(plane_x, old_y);
 8003e88:	4b20      	ldr	r3, [pc, #128]	@ (8003f0c <main+0x508>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7fd fe17 	bl	8001ac4 <erase_plane>
						draw_plane(plane_x, plane_y);
 8003e96:	4b1d      	ldr	r3, [pc, #116]	@ (8003f0c <main+0x508>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a1d      	ldr	r2, [pc, #116]	@ (8003f10 <main+0x50c>)
 8003e9c:	6812      	ldr	r2, [r2, #0]
 8003e9e:	4611      	mov	r1, r2
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7fd f9e8 	bl	8001276 <draw_plane>
					}

					if (plane_move_right_flag) {
 8003ea6:	4b26      	ldr	r3, [pc, #152]	@ (8003f40 <main+0x53c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f43f af3e 	beq.w	8003d2c <main+0x328>
						plane_move_right_flag = 0;
 8003eb0:	4b23      	ldr	r3, [pc, #140]	@ (8003f40 <main+0x53c>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]
						int old_y = plane_y;
 8003eb6:	4b16      	ldr	r3, [pc, #88]	@ (8003f10 <main+0x50c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						plane_y = (plane_y - 5) % 220;
 8003ebe:	4b14      	ldr	r3, [pc, #80]	@ (8003f10 <main+0x50c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	1f5a      	subs	r2, r3, #5
 8003ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8003f3c <main+0x538>)
 8003ec6:	fb83 1302 	smull	r1, r3, r3, r2
 8003eca:	10d9      	asrs	r1, r3, #3
 8003ecc:	17d3      	asrs	r3, r2, #31
 8003ece:	1acb      	subs	r3, r1, r3
 8003ed0:	21dc      	movs	r1, #220	@ 0xdc
 8003ed2:	fb01 f303 	mul.w	r3, r1, r3
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	4a0d      	ldr	r2, [pc, #52]	@ (8003f10 <main+0x50c>)
 8003eda:	6013      	str	r3, [r2, #0]
						erase_plane(plane_x, old_y);
 8003edc:	4b0b      	ldr	r3, [pc, #44]	@ (8003f0c <main+0x508>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7fd fded 	bl	8001ac4 <erase_plane>
						draw_plane(plane_x, plane_y);
 8003eea:	4b08      	ldr	r3, [pc, #32]	@ (8003f0c <main+0x508>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a08      	ldr	r2, [pc, #32]	@ (8003f10 <main+0x50c>)
 8003ef0:	6812      	ldr	r2, [r2, #0]
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7fd f9be 	bl	8001276 <draw_plane>
					draw_score(point);
 8003efa:	e717      	b.n	8003d2c <main+0x328>
 8003efc:	20000010 	.word	0x20000010
 8003f00:	0800814c 	.word	0x0800814c
 8003f04:	08008fd8 	.word	0x08008fd8
 8003f08:	20000268 	.word	0x20000268
 8003f0c:	20000004 	.word	0x20000004
 8003f10:	20000008 	.word	0x20000008
 8003f14:	200004f0 	.word	0x200004f0
 8003f18:	200004e0 	.word	0x200004e0
 8003f1c:	200004e4 	.word	0x200004e4
 8003f20:	10624dd3 	.word	0x10624dd3
 8003f24:	08008158 	.word	0x08008158
 8003f28:	08008168 	.word	0x08008168
 8003f2c:	080087f4 	.word	0x080087f4
 8003f30:	0800817c 	.word	0x0800817c
 8003f34:	200004d4 	.word	0x200004d4
 8003f38:	200004d8 	.word	0x200004d8
 8003f3c:	094f2095 	.word	0x094f2095
 8003f40:	200004dc 	.word	0x200004dc

08003f44 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b094      	sub	sp, #80	@ 0x50
 8003f48:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003f4a:	f107 0320 	add.w	r3, r7, #32
 8003f4e:	2230      	movs	r2, #48	@ 0x30
 8003f50:	2100      	movs	r1, #0
 8003f52:	4618      	mov	r0, r3
 8003f54:	f003 f817 	bl	8006f86 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003f58:	f107 030c 	add.w	r3, r7, #12
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	605a      	str	r2, [r3, #4]
 8003f62:	609a      	str	r2, [r3, #8]
 8003f64:	60da      	str	r2, [r3, #12]
 8003f66:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003f68:	2300      	movs	r3, #0
 8003f6a:	60bb      	str	r3, [r7, #8]
 8003f6c:	4b2c      	ldr	r3, [pc, #176]	@ (8004020 <SystemClock_Config+0xdc>)
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f70:	4a2b      	ldr	r2, [pc, #172]	@ (8004020 <SystemClock_Config+0xdc>)
 8003f72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f76:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f78:	4b29      	ldr	r3, [pc, #164]	@ (8004020 <SystemClock_Config+0xdc>)
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f80:	60bb      	str	r3, [r7, #8]
 8003f82:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f84:	2300      	movs	r3, #0
 8003f86:	607b      	str	r3, [r7, #4]
 8003f88:	4b26      	ldr	r3, [pc, #152]	@ (8004024 <SystemClock_Config+0xe0>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a25      	ldr	r2, [pc, #148]	@ (8004024 <SystemClock_Config+0xe0>)
 8003f8e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f92:	6013      	str	r3, [r2, #0]
 8003f94:	4b23      	ldr	r3, [pc, #140]	@ (8004024 <SystemClock_Config+0xe0>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003f9c:	607b      	str	r3, [r7, #4]
 8003f9e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8003fa0:	2309      	movs	r3, #9
 8003fa2:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003fa4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003fa8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003faa:	2301      	movs	r3, #1
 8003fac:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003fae:	2302      	movs	r3, #2
 8003fb0:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003fb2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8003fb8:	2304      	movs	r3, #4
 8003fba:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 8003fbc:	23b4      	movs	r3, #180	@ 0xb4
 8003fbe:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8003fc4:	2304      	movs	r3, #4
 8003fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003fc8:	f107 0320 	add.w	r3, r7, #32
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f001 fb2d 	bl	800562c <HAL_RCC_OscConfig>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <SystemClock_Config+0x98>
		Error_Handler();
 8003fd8:	f000 f980 	bl	80042dc <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8003fdc:	f001 fad6 	bl	800558c <HAL_PWREx_EnableOverDrive>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <SystemClock_Config+0xa6>
		Error_Handler();
 8003fe6:	f000 f979 	bl	80042dc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003fea:	230f      	movs	r3, #15
 8003fec:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003fee:	2302      	movs	r3, #2
 8003ff0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003ff6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003ffa:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003ffc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004000:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8004002:	f107 030c 	add.w	r3, r7, #12
 8004006:	2105      	movs	r1, #5
 8004008:	4618      	mov	r0, r3
 800400a:	f001 fd87 	bl	8005b1c <HAL_RCC_ClockConfig>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <SystemClock_Config+0xd4>
		Error_Handler();
 8004014:	f000 f962 	bl	80042dc <Error_Handler>
	}
}
 8004018:	bf00      	nop
 800401a:	3750      	adds	r7, #80	@ 0x50
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40023800 	.word	0x40023800
 8004024:	40007000 	.word	0x40007000

08004028 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 800402c:	4b0f      	ldr	r3, [pc, #60]	@ (800406c <MX_RTC_Init+0x44>)
 800402e:	4a10      	ldr	r2, [pc, #64]	@ (8004070 <MX_RTC_Init+0x48>)
 8004030:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004032:	4b0e      	ldr	r3, [pc, #56]	@ (800406c <MX_RTC_Init+0x44>)
 8004034:	2200      	movs	r2, #0
 8004036:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8004038:	4b0c      	ldr	r3, [pc, #48]	@ (800406c <MX_RTC_Init+0x44>)
 800403a:	227f      	movs	r2, #127	@ 0x7f
 800403c:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 800403e:	4b0b      	ldr	r3, [pc, #44]	@ (800406c <MX_RTC_Init+0x44>)
 8004040:	22ff      	movs	r2, #255	@ 0xff
 8004042:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004044:	4b09      	ldr	r3, [pc, #36]	@ (800406c <MX_RTC_Init+0x44>)
 8004046:	2200      	movs	r2, #0
 8004048:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800404a:	4b08      	ldr	r3, [pc, #32]	@ (800406c <MX_RTC_Init+0x44>)
 800404c:	2200      	movs	r2, #0
 800404e:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004050:	4b06      	ldr	r3, [pc, #24]	@ (800406c <MX_RTC_Init+0x44>)
 8004052:	2200      	movs	r2, #0
 8004054:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8004056:	4805      	ldr	r0, [pc, #20]	@ (800406c <MX_RTC_Init+0x44>)
 8004058:	f002 f90c 	bl	8006274 <HAL_RTC_Init>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <MX_RTC_Init+0x3e>
		Error_Handler();
 8004062:	f000 f93b 	bl	80042dc <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8004066:	bf00      	nop
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	200000a0 	.word	0x200000a0
 8004070:	40002800 	.word	0x40002800

08004074 <MX_SPI5_Init>:
/**
 * @brief SPI5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI5_Init(void) {
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI5_Init 1 */

	/* USER CODE END SPI5_Init 1 */
	/* SPI5 parameter configuration*/
	hspi5.Instance = SPI5;
 8004078:	4b17      	ldr	r3, [pc, #92]	@ (80040d8 <MX_SPI5_Init+0x64>)
 800407a:	4a18      	ldr	r2, [pc, #96]	@ (80040dc <MX_SPI5_Init+0x68>)
 800407c:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 800407e:	4b16      	ldr	r3, [pc, #88]	@ (80040d8 <MX_SPI5_Init+0x64>)
 8004080:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004084:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8004086:	4b14      	ldr	r3, [pc, #80]	@ (80040d8 <MX_SPI5_Init+0x64>)
 8004088:	2200      	movs	r2, #0
 800408a:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800408c:	4b12      	ldr	r3, [pc, #72]	@ (80040d8 <MX_SPI5_Init+0x64>)
 800408e:	2200      	movs	r2, #0
 8004090:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004092:	4b11      	ldr	r3, [pc, #68]	@ (80040d8 <MX_SPI5_Init+0x64>)
 8004094:	2200      	movs	r2, #0
 8004096:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004098:	4b0f      	ldr	r3, [pc, #60]	@ (80040d8 <MX_SPI5_Init+0x64>)
 800409a:	2200      	movs	r2, #0
 800409c:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 800409e:	4b0e      	ldr	r3, [pc, #56]	@ (80040d8 <MX_SPI5_Init+0x64>)
 80040a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040a4:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80040a6:	4b0c      	ldr	r3, [pc, #48]	@ (80040d8 <MX_SPI5_Init+0x64>)
 80040a8:	2208      	movs	r2, #8
 80040aa:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80040ac:	4b0a      	ldr	r3, [pc, #40]	@ (80040d8 <MX_SPI5_Init+0x64>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80040b2:	4b09      	ldr	r3, [pc, #36]	@ (80040d8 <MX_SPI5_Init+0x64>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040b8:	4b07      	ldr	r3, [pc, #28]	@ (80040d8 <MX_SPI5_Init+0x64>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi5.Init.CRCPolynomial = 10;
 80040be:	4b06      	ldr	r3, [pc, #24]	@ (80040d8 <MX_SPI5_Init+0x64>)
 80040c0:	220a      	movs	r2, #10
 80040c2:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi5) != HAL_OK) {
 80040c4:	4804      	ldr	r0, [pc, #16]	@ (80040d8 <MX_SPI5_Init+0x64>)
 80040c6:	f002 f9d9 	bl	800647c <HAL_SPI_Init>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <MX_SPI5_Init+0x60>
		Error_Handler();
 80040d0:	f000 f904 	bl	80042dc <Error_Handler>
	}
	/* USER CODE BEGIN SPI5_Init 2 */

	/* USER CODE END SPI5_Init 2 */

}
 80040d4:	bf00      	nop
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	200000c0 	.word	0x200000c0
 80040dc:	40015000 	.word	0x40015000

080040e0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80040e6:	2300      	movs	r3, #0
 80040e8:	607b      	str	r3, [r7, #4]
 80040ea:	4b0c      	ldr	r3, [pc, #48]	@ (800411c <MX_DMA_Init+0x3c>)
 80040ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ee:	4a0b      	ldr	r2, [pc, #44]	@ (800411c <MX_DMA_Init+0x3c>)
 80040f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80040f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80040f6:	4b09      	ldr	r3, [pc, #36]	@ (800411c <MX_DMA_Init+0x3c>)
 80040f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040fe:	607b      	str	r3, [r7, #4]
 8004100:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8004102:	2200      	movs	r2, #0
 8004104:	2100      	movs	r1, #0
 8004106:	203c      	movs	r0, #60	@ 0x3c
 8004108:	f000 fcaf 	bl	8004a6a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800410c:	203c      	movs	r0, #60	@ 0x3c
 800410e:	f000 fcc8 	bl	8004aa2 <HAL_NVIC_EnableIRQ>

}
 8004112:	bf00      	nop
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	40023800 	.word	0x40023800

08004120 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8004120:	b580      	push	{r7, lr}
 8004122:	b08c      	sub	sp, #48	@ 0x30
 8004124:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004126:	f107 031c 	add.w	r3, r7, #28
 800412a:	2200      	movs	r2, #0
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	605a      	str	r2, [r3, #4]
 8004130:	609a      	str	r2, [r3, #8]
 8004132:	60da      	str	r2, [r3, #12]
 8004134:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004136:	2300      	movs	r3, #0
 8004138:	61bb      	str	r3, [r7, #24]
 800413a:	4b63      	ldr	r3, [pc, #396]	@ (80042c8 <MX_GPIO_Init+0x1a8>)
 800413c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413e:	4a62      	ldr	r2, [pc, #392]	@ (80042c8 <MX_GPIO_Init+0x1a8>)
 8004140:	f043 0304 	orr.w	r3, r3, #4
 8004144:	6313      	str	r3, [r2, #48]	@ 0x30
 8004146:	4b60      	ldr	r3, [pc, #384]	@ (80042c8 <MX_GPIO_Init+0x1a8>)
 8004148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414a:	f003 0304 	and.w	r3, r3, #4
 800414e:	61bb      	str	r3, [r7, #24]
 8004150:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8004152:	2300      	movs	r3, #0
 8004154:	617b      	str	r3, [r7, #20]
 8004156:	4b5c      	ldr	r3, [pc, #368]	@ (80042c8 <MX_GPIO_Init+0x1a8>)
 8004158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415a:	4a5b      	ldr	r2, [pc, #364]	@ (80042c8 <MX_GPIO_Init+0x1a8>)
 800415c:	f043 0320 	orr.w	r3, r3, #32
 8004160:	6313      	str	r3, [r2, #48]	@ 0x30
 8004162:	4b59      	ldr	r3, [pc, #356]	@ (80042c8 <MX_GPIO_Init+0x1a8>)
 8004164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004166:	f003 0320 	and.w	r3, r3, #32
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800416e:	2300      	movs	r3, #0
 8004170:	613b      	str	r3, [r7, #16]
 8004172:	4b55      	ldr	r3, [pc, #340]	@ (80042c8 <MX_GPIO_Init+0x1a8>)
 8004174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004176:	4a54      	ldr	r2, [pc, #336]	@ (80042c8 <MX_GPIO_Init+0x1a8>)
 8004178:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800417c:	6313      	str	r3, [r2, #48]	@ 0x30
 800417e:	4b52      	ldr	r3, [pc, #328]	@ (80042c8 <MX_GPIO_Init+0x1a8>)
 8004180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004186:	613b      	str	r3, [r7, #16]
 8004188:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800418a:	2300      	movs	r3, #0
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	4b4e      	ldr	r3, [pc, #312]	@ (80042c8 <MX_GPIO_Init+0x1a8>)
 8004190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004192:	4a4d      	ldr	r2, [pc, #308]	@ (80042c8 <MX_GPIO_Init+0x1a8>)
 8004194:	f043 0301 	orr.w	r3, r3, #1
 8004198:	6313      	str	r3, [r2, #48]	@ 0x30
 800419a:	4b4b      	ldr	r3, [pc, #300]	@ (80042c8 <MX_GPIO_Init+0x1a8>)
 800419c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80041a6:	2300      	movs	r3, #0
 80041a8:	60bb      	str	r3, [r7, #8]
 80041aa:	4b47      	ldr	r3, [pc, #284]	@ (80042c8 <MX_GPIO_Init+0x1a8>)
 80041ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ae:	4a46      	ldr	r2, [pc, #280]	@ (80042c8 <MX_GPIO_Init+0x1a8>)
 80041b0:	f043 0308 	orr.w	r3, r3, #8
 80041b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80041b6:	4b44      	ldr	r3, [pc, #272]	@ (80042c8 <MX_GPIO_Init+0x1a8>)
 80041b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	60bb      	str	r3, [r7, #8]
 80041c0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80041c2:	2300      	movs	r3, #0
 80041c4:	607b      	str	r3, [r7, #4]
 80041c6:	4b40      	ldr	r3, [pc, #256]	@ (80042c8 <MX_GPIO_Init+0x1a8>)
 80041c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ca:	4a3f      	ldr	r2, [pc, #252]	@ (80042c8 <MX_GPIO_Init+0x1a8>)
 80041cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80041d2:	4b3d      	ldr	r3, [pc, #244]	@ (80042c8 <MX_GPIO_Init+0x1a8>)
 80041d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041da:	607b      	str	r3, [r7, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80041de:	2200      	movs	r2, #0
 80041e0:	2104      	movs	r1, #4
 80041e2:	483a      	ldr	r0, [pc, #232]	@ (80042cc <MX_GPIO_Init+0x1ac>)
 80041e4:	f001 f994 	bl	8005510 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_RESET);
 80041e8:	2200      	movs	r2, #0
 80041ea:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80041ee:	4838      	ldr	r0, [pc, #224]	@ (80042d0 <MX_GPIO_Init+0x1b0>)
 80041f0:	f001 f98e 	bl	8005510 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 80041f4:	2200      	movs	r2, #0
 80041f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80041fa:	4836      	ldr	r0, [pc, #216]	@ (80042d4 <MX_GPIO_Init+0x1b4>)
 80041fc:	f001 f988 	bl	8005510 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004200:	2304      	movs	r3, #4
 8004202:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004204:	2301      	movs	r3, #1
 8004206:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004208:	2300      	movs	r3, #0
 800420a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800420c:	2300      	movs	r3, #0
 800420e:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004210:	f107 031c 	add.w	r3, r7, #28
 8004214:	4619      	mov	r1, r3
 8004216:	482d      	ldr	r0, [pc, #180]	@ (80042cc <MX_GPIO_Init+0x1ac>)
 8004218:	f000 ffce 	bl	80051b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800421c:	2301      	movs	r3, #1
 800421e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004220:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004224:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004226:	2300      	movs	r3, #0
 8004228:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800422a:	f107 031c 	add.w	r3, r7, #28
 800422e:	4619      	mov	r1, r3
 8004230:	4829      	ldr	r0, [pc, #164]	@ (80042d8 <MX_GPIO_Init+0x1b8>)
 8004232:	f000 ffc1 	bl	80051b8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD8 PD10 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_10;
 8004236:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 800423a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800423c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004240:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004242:	2302      	movs	r3, #2
 8004244:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004246:	f107 031c 	add.w	r3, r7, #28
 800424a:	4619      	mov	r1, r3
 800424c:	4820      	ldr	r0, [pc, #128]	@ (80042d0 <MX_GPIO_Init+0x1b0>)
 800424e:	f000 ffb3 	bl	80051b8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD12 PD13 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 8004252:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004256:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004258:	2301      	movs	r3, #1
 800425a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800425c:	2300      	movs	r3, #0
 800425e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004260:	2300      	movs	r3, #0
 8004262:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004264:	f107 031c 	add.w	r3, r7, #28
 8004268:	4619      	mov	r1, r3
 800426a:	4819      	ldr	r0, [pc, #100]	@ (80042d0 <MX_GPIO_Init+0x1b0>)
 800426c:	f000 ffa4 	bl	80051b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PG13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004270:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004274:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004276:	2301      	movs	r3, #1
 8004278:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800427a:	2300      	movs	r3, #0
 800427c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800427e:	2300      	movs	r3, #0
 8004280:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004282:	f107 031c 	add.w	r3, r7, #28
 8004286:	4619      	mov	r1, r3
 8004288:	4812      	ldr	r0, [pc, #72]	@ (80042d4 <MX_GPIO_Init+0x1b4>)
 800428a:	f000 ff95 	bl	80051b8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800428e:	2200      	movs	r2, #0
 8004290:	2100      	movs	r1, #0
 8004292:	2006      	movs	r0, #6
 8004294:	f000 fbe9 	bl	8004a6a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004298:	2006      	movs	r0, #6
 800429a:	f000 fc02 	bl	8004aa2 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800429e:	2200      	movs	r2, #0
 80042a0:	2100      	movs	r1, #0
 80042a2:	2017      	movs	r0, #23
 80042a4:	f000 fbe1 	bl	8004a6a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80042a8:	2017      	movs	r0, #23
 80042aa:	f000 fbfa 	bl	8004aa2 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80042ae:	2200      	movs	r2, #0
 80042b0:	2100      	movs	r1, #0
 80042b2:	2028      	movs	r0, #40	@ 0x28
 80042b4:	f000 fbd9 	bl	8004a6a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80042b8:	2028      	movs	r0, #40	@ 0x28
 80042ba:	f000 fbf2 	bl	8004aa2 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 80042be:	bf00      	nop
 80042c0:	3730      	adds	r7, #48	@ 0x30
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	40023800 	.word	0x40023800
 80042cc:	40020800 	.word	0x40020800
 80042d0:	40020c00 	.word	0x40020c00
 80042d4:	40021800 	.word	0x40021800
 80042d8:	40020000 	.word	0x40020000

080042dc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80042e0:	b672      	cpsid	i
}
 80042e2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80042e4:	bf00      	nop
 80042e6:	e7fd      	b.n	80042e4 <Error_Handler+0x8>

080042e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042ee:	2300      	movs	r3, #0
 80042f0:	607b      	str	r3, [r7, #4]
 80042f2:	4b10      	ldr	r3, [pc, #64]	@ (8004334 <HAL_MspInit+0x4c>)
 80042f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042f6:	4a0f      	ldr	r2, [pc, #60]	@ (8004334 <HAL_MspInit+0x4c>)
 80042f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80042fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80042fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004334 <HAL_MspInit+0x4c>)
 8004300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004302:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004306:	607b      	str	r3, [r7, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800430a:	2300      	movs	r3, #0
 800430c:	603b      	str	r3, [r7, #0]
 800430e:	4b09      	ldr	r3, [pc, #36]	@ (8004334 <HAL_MspInit+0x4c>)
 8004310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004312:	4a08      	ldr	r2, [pc, #32]	@ (8004334 <HAL_MspInit+0x4c>)
 8004314:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004318:	6413      	str	r3, [r2, #64]	@ 0x40
 800431a:	4b06      	ldr	r3, [pc, #24]	@ (8004334 <HAL_MspInit+0x4c>)
 800431c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004322:	603b      	str	r3, [r7, #0]
 8004324:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	40023800 	.word	0x40023800

08004338 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b08e      	sub	sp, #56	@ 0x38
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004340:	f107 0308 	add.w	r3, r7, #8
 8004344:	2230      	movs	r2, #48	@ 0x30
 8004346:	2100      	movs	r1, #0
 8004348:	4618      	mov	r0, r3
 800434a:	f002 fe1c 	bl	8006f86 <memset>
  if(hrtc->Instance==RTC)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a0c      	ldr	r2, [pc, #48]	@ (8004384 <HAL_RTC_MspInit+0x4c>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d111      	bne.n	800437c <HAL_RTC_MspInit+0x44>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004358:	2320      	movs	r3, #32
 800435a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800435c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004360:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004362:	f107 0308 	add.w	r3, r7, #8
 8004366:	4618      	mov	r0, r3
 8004368:	f001 fdc4 	bl	8005ef4 <HAL_RCCEx_PeriphCLKConfig>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8004372:	f7ff ffb3 	bl	80042dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004376:	4b04      	ldr	r3, [pc, #16]	@ (8004388 <HAL_RTC_MspInit+0x50>)
 8004378:	2201      	movs	r2, #1
 800437a:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 800437c:	bf00      	nop
 800437e:	3738      	adds	r7, #56	@ 0x38
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40002800 	.word	0x40002800
 8004388:	42470e3c 	.word	0x42470e3c

0800438c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b08a      	sub	sp, #40	@ 0x28
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004394:	f107 0314 	add.w	r3, r7, #20
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	605a      	str	r2, [r3, #4]
 800439e:	609a      	str	r2, [r3, #8]
 80043a0:	60da      	str	r2, [r3, #12]
 80043a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a30      	ldr	r2, [pc, #192]	@ (800446c <HAL_SPI_MspInit+0xe0>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d15a      	bne.n	8004464 <HAL_SPI_MspInit+0xd8>
  {
    /* USER CODE BEGIN SPI5_MspInit 0 */

    /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80043ae:	2300      	movs	r3, #0
 80043b0:	613b      	str	r3, [r7, #16]
 80043b2:	4b2f      	ldr	r3, [pc, #188]	@ (8004470 <HAL_SPI_MspInit+0xe4>)
 80043b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b6:	4a2e      	ldr	r2, [pc, #184]	@ (8004470 <HAL_SPI_MspInit+0xe4>)
 80043b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80043be:	4b2c      	ldr	r3, [pc, #176]	@ (8004470 <HAL_SPI_MspInit+0xe4>)
 80043c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043c6:	613b      	str	r3, [r7, #16]
 80043c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80043ca:	2300      	movs	r3, #0
 80043cc:	60fb      	str	r3, [r7, #12]
 80043ce:	4b28      	ldr	r3, [pc, #160]	@ (8004470 <HAL_SPI_MspInit+0xe4>)
 80043d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d2:	4a27      	ldr	r2, [pc, #156]	@ (8004470 <HAL_SPI_MspInit+0xe4>)
 80043d4:	f043 0320 	orr.w	r3, r3, #32
 80043d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80043da:	4b25      	ldr	r3, [pc, #148]	@ (8004470 <HAL_SPI_MspInit+0xe4>)
 80043dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043de:	f003 0320 	and.w	r3, r3, #32
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80043e6:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80043ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ec:	2302      	movs	r3, #2
 80043ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f0:	2300      	movs	r3, #0
 80043f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043f4:	2303      	movs	r3, #3
 80043f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80043f8:	2305      	movs	r3, #5
 80043fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80043fc:	f107 0314 	add.w	r3, r7, #20
 8004400:	4619      	mov	r1, r3
 8004402:	481c      	ldr	r0, [pc, #112]	@ (8004474 <HAL_SPI_MspInit+0xe8>)
 8004404:	f000 fed8 	bl	80051b8 <HAL_GPIO_Init>

    /* SPI5 DMA Init */
    /* SPI5_TX Init */
    hdma_spi5_tx.Instance = DMA2_Stream4;
 8004408:	4b1b      	ldr	r3, [pc, #108]	@ (8004478 <HAL_SPI_MspInit+0xec>)
 800440a:	4a1c      	ldr	r2, [pc, #112]	@ (800447c <HAL_SPI_MspInit+0xf0>)
 800440c:	601a      	str	r2, [r3, #0]
    hdma_spi5_tx.Init.Channel = DMA_CHANNEL_2;
 800440e:	4b1a      	ldr	r3, [pc, #104]	@ (8004478 <HAL_SPI_MspInit+0xec>)
 8004410:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004414:	605a      	str	r2, [r3, #4]
    hdma_spi5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004416:	4b18      	ldr	r3, [pc, #96]	@ (8004478 <HAL_SPI_MspInit+0xec>)
 8004418:	2240      	movs	r2, #64	@ 0x40
 800441a:	609a      	str	r2, [r3, #8]
    hdma_spi5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800441c:	4b16      	ldr	r3, [pc, #88]	@ (8004478 <HAL_SPI_MspInit+0xec>)
 800441e:	2200      	movs	r2, #0
 8004420:	60da      	str	r2, [r3, #12]
    hdma_spi5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004422:	4b15      	ldr	r3, [pc, #84]	@ (8004478 <HAL_SPI_MspInit+0xec>)
 8004424:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004428:	611a      	str	r2, [r3, #16]
    hdma_spi5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800442a:	4b13      	ldr	r3, [pc, #76]	@ (8004478 <HAL_SPI_MspInit+0xec>)
 800442c:	2200      	movs	r2, #0
 800442e:	615a      	str	r2, [r3, #20]
    hdma_spi5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004430:	4b11      	ldr	r3, [pc, #68]	@ (8004478 <HAL_SPI_MspInit+0xec>)
 8004432:	2200      	movs	r2, #0
 8004434:	619a      	str	r2, [r3, #24]
    hdma_spi5_tx.Init.Mode = DMA_NORMAL;
 8004436:	4b10      	ldr	r3, [pc, #64]	@ (8004478 <HAL_SPI_MspInit+0xec>)
 8004438:	2200      	movs	r2, #0
 800443a:	61da      	str	r2, [r3, #28]
    hdma_spi5_tx.Init.Priority = DMA_PRIORITY_LOW;
 800443c:	4b0e      	ldr	r3, [pc, #56]	@ (8004478 <HAL_SPI_MspInit+0xec>)
 800443e:	2200      	movs	r2, #0
 8004440:	621a      	str	r2, [r3, #32]
    hdma_spi5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004442:	4b0d      	ldr	r3, [pc, #52]	@ (8004478 <HAL_SPI_MspInit+0xec>)
 8004444:	2200      	movs	r2, #0
 8004446:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi5_tx) != HAL_OK)
 8004448:	480b      	ldr	r0, [pc, #44]	@ (8004478 <HAL_SPI_MspInit+0xec>)
 800444a:	f000 fb45 	bl	8004ad8 <HAL_DMA_Init>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8004454:	f7ff ff42 	bl	80042dc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi5_tx);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a07      	ldr	r2, [pc, #28]	@ (8004478 <HAL_SPI_MspInit+0xec>)
 800445c:	649a      	str	r2, [r3, #72]	@ 0x48
 800445e:	4a06      	ldr	r2, [pc, #24]	@ (8004478 <HAL_SPI_MspInit+0xec>)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI5_MspInit 1 */

  }

}
 8004464:	bf00      	nop
 8004466:	3728      	adds	r7, #40	@ 0x28
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	40015000 	.word	0x40015000
 8004470:	40023800 	.word	0x40023800
 8004474:	40021400 	.word	0x40021400
 8004478:	20000118 	.word	0x20000118
 800447c:	40026470 	.word	0x40026470

08004480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004484:	bf00      	nop
 8004486:	e7fd      	b.n	8004484 <NMI_Handler+0x4>

08004488 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800448c:	bf00      	nop
 800448e:	e7fd      	b.n	800448c <HardFault_Handler+0x4>

08004490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004494:	bf00      	nop
 8004496:	e7fd      	b.n	8004494 <MemManage_Handler+0x4>

08004498 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800449c:	bf00      	nop
 800449e:	e7fd      	b.n	800449c <BusFault_Handler+0x4>

080044a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044a4:	bf00      	nop
 80044a6:	e7fd      	b.n	80044a4 <UsageFault_Handler+0x4>

080044a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80044ac:	bf00      	nop
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044b6:	b480      	push	{r7}
 80044b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044ba:	bf00      	nop
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80044c8:	bf00      	nop
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr

080044d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044d6:	f000 f9a9 	bl	800482c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044da:	bf00      	nop
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	//HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
    plane_move_flag = 1;
 80044e4:	4b03      	ldr	r3, [pc, #12]	@ (80044f4 <EXTI0_IRQHandler+0x14>)
 80044e6:	2201      	movs	r2, #1
 80044e8:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80044ea:	2001      	movs	r0, #1
 80044ec:	f001 f82a 	bl	8005544 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
////
  /* USER CODE END EXTI0_IRQn 1 */
}
 80044f0:	bf00      	nop
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	200004d4 	.word	0x200004d4

080044f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	uint32_t current_time = HAL_GetTick();
 80044fe:	f000 f9a9 	bl	8004854 <HAL_GetTick>
 8004502:	6078      	str	r0, [r7, #4]

		if (current_time - last_interrupt_time > DEBOUNCE_DELAY)
 8004504:	4b09      	ldr	r3, [pc, #36]	@ (800452c <EXTI9_5_IRQHandler+0x34>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b64      	cmp	r3, #100	@ 0x64
 800450e:	d905      	bls.n	800451c <EXTI9_5_IRQHandler+0x24>
		{
			// Xử lý nút hợp lệ
			plane_move_left_flag = 1;
 8004510:	4b07      	ldr	r3, [pc, #28]	@ (8004530 <EXTI9_5_IRQHandler+0x38>)
 8004512:	2201      	movs	r2, #1
 8004514:	601a      	str	r2, [r3, #0]
			last_interrupt_time = current_time;
 8004516:	4a05      	ldr	r2, [pc, #20]	@ (800452c <EXTI9_5_IRQHandler+0x34>)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6013      	str	r3, [r2, #0]
		}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800451c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004520:	f001 f810 	bl	8005544 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004524:	bf00      	nop
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	200004f4 	.word	0x200004f4
 8004530:	200004d8 	.word	0x200004d8

08004534 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	uint32_t current_time = HAL_GetTick();
 800453a:	f000 f98b 	bl	8004854 <HAL_GetTick>
 800453e:	6078      	str	r0, [r7, #4]

	if (current_time - last_interrupt_time > DEBOUNCE_DELAY)
 8004540:	4b09      	ldr	r3, [pc, #36]	@ (8004568 <EXTI15_10_IRQHandler+0x34>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b64      	cmp	r3, #100	@ 0x64
 800454a:	d905      	bls.n	8004558 <EXTI15_10_IRQHandler+0x24>
	{
		// Xử lý nút hợp lệ
		plane_move_right_flag = 1;
 800454c:	4b07      	ldr	r3, [pc, #28]	@ (800456c <EXTI15_10_IRQHandler+0x38>)
 800454e:	2201      	movs	r2, #1
 8004550:	601a      	str	r2, [r3, #0]
		last_interrupt_time = current_time;
 8004552:	4a05      	ldr	r2, [pc, #20]	@ (8004568 <EXTI15_10_IRQHandler+0x34>)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8004558:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800455c:	f000 fff2 	bl	8005544 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004560:	bf00      	nop
 8004562:	3708      	adds	r7, #8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	200004f4 	.word	0x200004f4
 800456c:	200004dc 	.word	0x200004dc

08004570 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_tx);
 8004574:	4802      	ldr	r0, [pc, #8]	@ (8004580 <DMA2_Stream4_IRQHandler+0x10>)
 8004576:	f000 fbb5 	bl	8004ce4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800457a:	bf00      	nop
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	20000118 	.word	0x20000118

08004584 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
  return 1;
 8004588:	2301      	movs	r3, #1
}
 800458a:	4618      	mov	r0, r3
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <_kill>:

int _kill(int pid, int sig)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800459e:	f002 fd6f 	bl	8007080 <__errno>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2216      	movs	r2, #22
 80045a6:	601a      	str	r2, [r3, #0]
  return -1;
 80045a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <_exit>:

void _exit (int status)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80045bc:	f04f 31ff 	mov.w	r1, #4294967295
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f7ff ffe7 	bl	8004594 <_kill>
  while (1) {}    /* Make sure we hang here */
 80045c6:	bf00      	nop
 80045c8:	e7fd      	b.n	80045c6 <_exit+0x12>

080045ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b086      	sub	sp, #24
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	60f8      	str	r0, [r7, #12]
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045d6:	2300      	movs	r3, #0
 80045d8:	617b      	str	r3, [r7, #20]
 80045da:	e00a      	b.n	80045f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80045dc:	f3af 8000 	nop.w
 80045e0:	4601      	mov	r1, r0
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	1c5a      	adds	r2, r3, #1
 80045e6:	60ba      	str	r2, [r7, #8]
 80045e8:	b2ca      	uxtb	r2, r1
 80045ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	3301      	adds	r3, #1
 80045f0:	617b      	str	r3, [r7, #20]
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	dbf0      	blt.n	80045dc <_read+0x12>
  }

  return len;
 80045fa:	687b      	ldr	r3, [r7, #4]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3718      	adds	r7, #24
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004610:	2300      	movs	r3, #0
 8004612:	617b      	str	r3, [r7, #20]
 8004614:	e009      	b.n	800462a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	1c5a      	adds	r2, r3, #1
 800461a:	60ba      	str	r2, [r7, #8]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	4618      	mov	r0, r3
 8004620:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	3301      	adds	r3, #1
 8004628:	617b      	str	r3, [r7, #20]
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	429a      	cmp	r2, r3
 8004630:	dbf1      	blt.n	8004616 <_write+0x12>
  }
  return len;
 8004632:	687b      	ldr	r3, [r7, #4]
}
 8004634:	4618      	mov	r0, r3
 8004636:	3718      	adds	r7, #24
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <_close>:

int _close(int file)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004644:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004648:	4618      	mov	r0, r3
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004664:	605a      	str	r2, [r3, #4]
  return 0;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <_isatty>:

int _isatty(int file)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800467c:	2301      	movs	r3, #1
}
 800467e:	4618      	mov	r0, r3
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800468a:	b480      	push	{r7}
 800468c:	b085      	sub	sp, #20
 800468e:	af00      	add	r7, sp, #0
 8004690:	60f8      	str	r0, [r7, #12]
 8004692:	60b9      	str	r1, [r7, #8]
 8004694:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80046ac:	4a14      	ldr	r2, [pc, #80]	@ (8004700 <_sbrk+0x5c>)
 80046ae:	4b15      	ldr	r3, [pc, #84]	@ (8004704 <_sbrk+0x60>)
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80046b8:	4b13      	ldr	r3, [pc, #76]	@ (8004708 <_sbrk+0x64>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d102      	bne.n	80046c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80046c0:	4b11      	ldr	r3, [pc, #68]	@ (8004708 <_sbrk+0x64>)
 80046c2:	4a12      	ldr	r2, [pc, #72]	@ (800470c <_sbrk+0x68>)
 80046c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80046c6:	4b10      	ldr	r3, [pc, #64]	@ (8004708 <_sbrk+0x64>)
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4413      	add	r3, r2
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d207      	bcs.n	80046e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80046d4:	f002 fcd4 	bl	8007080 <__errno>
 80046d8:	4603      	mov	r3, r0
 80046da:	220c      	movs	r2, #12
 80046dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80046de:	f04f 33ff 	mov.w	r3, #4294967295
 80046e2:	e009      	b.n	80046f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80046e4:	4b08      	ldr	r3, [pc, #32]	@ (8004708 <_sbrk+0x64>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80046ea:	4b07      	ldr	r3, [pc, #28]	@ (8004708 <_sbrk+0x64>)
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4413      	add	r3, r2
 80046f2:	4a05      	ldr	r2, [pc, #20]	@ (8004708 <_sbrk+0x64>)
 80046f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80046f6:	68fb      	ldr	r3, [r7, #12]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3718      	adds	r7, #24
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	20030000 	.word	0x20030000
 8004704:	00000400 	.word	0x00000400
 8004708:	200004f8 	.word	0x200004f8
 800470c:	20000650 	.word	0x20000650

08004710 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004710:	b480      	push	{r7}
 8004712:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004714:	4b06      	ldr	r3, [pc, #24]	@ (8004730 <SystemInit+0x20>)
 8004716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800471a:	4a05      	ldr	r2, [pc, #20]	@ (8004730 <SystemInit+0x20>)
 800471c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004720:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004724:	bf00      	nop
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	e000ed00 	.word	0xe000ed00

08004734 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004734:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800476c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004738:	f7ff ffea 	bl	8004710 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800473c:	480c      	ldr	r0, [pc, #48]	@ (8004770 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800473e:	490d      	ldr	r1, [pc, #52]	@ (8004774 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004740:	4a0d      	ldr	r2, [pc, #52]	@ (8004778 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004744:	e002      	b.n	800474c <LoopCopyDataInit>

08004746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800474a:	3304      	adds	r3, #4

0800474c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800474c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800474e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004750:	d3f9      	bcc.n	8004746 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004752:	4a0a      	ldr	r2, [pc, #40]	@ (800477c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004754:	4c0a      	ldr	r4, [pc, #40]	@ (8004780 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004758:	e001      	b.n	800475e <LoopFillZerobss>

0800475a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800475a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800475c:	3204      	adds	r2, #4

0800475e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800475e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004760:	d3fb      	bcc.n	800475a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004762:	f002 fc93 	bl	800708c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004766:	f7ff f94d 	bl	8003a04 <main>
  bx  lr    
 800476a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800476c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004774:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8004778:	0800ab88 	.word	0x0800ab88
  ldr r2, =_sbss
 800477c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8004780:	2000064c 	.word	0x2000064c

08004784 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004784:	e7fe      	b.n	8004784 <ADC_IRQHandler>
	...

08004788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800478c:	4b0e      	ldr	r3, [pc, #56]	@ (80047c8 <HAL_Init+0x40>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a0d      	ldr	r2, [pc, #52]	@ (80047c8 <HAL_Init+0x40>)
 8004792:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004796:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004798:	4b0b      	ldr	r3, [pc, #44]	@ (80047c8 <HAL_Init+0x40>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a0a      	ldr	r2, [pc, #40]	@ (80047c8 <HAL_Init+0x40>)
 800479e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80047a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047a4:	4b08      	ldr	r3, [pc, #32]	@ (80047c8 <HAL_Init+0x40>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a07      	ldr	r2, [pc, #28]	@ (80047c8 <HAL_Init+0x40>)
 80047aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047b0:	2003      	movs	r0, #3
 80047b2:	f000 f94f 	bl	8004a54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80047b6:	200f      	movs	r0, #15
 80047b8:	f000 f808 	bl	80047cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80047bc:	f7ff fd94 	bl	80042e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40023c00 	.word	0x40023c00

080047cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80047d4:	4b12      	ldr	r3, [pc, #72]	@ (8004820 <HAL_InitTick+0x54>)
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	4b12      	ldr	r3, [pc, #72]	@ (8004824 <HAL_InitTick+0x58>)
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	4619      	mov	r1, r3
 80047de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80047e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80047e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 f967 	bl	8004abe <HAL_SYSTICK_Config>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e00e      	b.n	8004818 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b0f      	cmp	r3, #15
 80047fe:	d80a      	bhi.n	8004816 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004800:	2200      	movs	r2, #0
 8004802:	6879      	ldr	r1, [r7, #4]
 8004804:	f04f 30ff 	mov.w	r0, #4294967295
 8004808:	f000 f92f 	bl	8004a6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800480c:	4a06      	ldr	r2, [pc, #24]	@ (8004828 <HAL_InitTick+0x5c>)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004812:	2300      	movs	r3, #0
 8004814:	e000      	b.n	8004818 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
}
 8004818:	4618      	mov	r0, r3
 800481a:	3708      	adds	r7, #8
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	2000001c 	.word	0x2000001c
 8004824:	20000024 	.word	0x20000024
 8004828:	20000020 	.word	0x20000020

0800482c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004830:	4b06      	ldr	r3, [pc, #24]	@ (800484c <HAL_IncTick+0x20>)
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	461a      	mov	r2, r3
 8004836:	4b06      	ldr	r3, [pc, #24]	@ (8004850 <HAL_IncTick+0x24>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4413      	add	r3, r2
 800483c:	4a04      	ldr	r2, [pc, #16]	@ (8004850 <HAL_IncTick+0x24>)
 800483e:	6013      	str	r3, [r2, #0]
}
 8004840:	bf00      	nop
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	20000024 	.word	0x20000024
 8004850:	200004fc 	.word	0x200004fc

08004854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0
  return uwTick;
 8004858:	4b03      	ldr	r3, [pc, #12]	@ (8004868 <HAL_GetTick+0x14>)
 800485a:	681b      	ldr	r3, [r3, #0]
}
 800485c:	4618      	mov	r0, r3
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	200004fc 	.word	0x200004fc

0800486c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004874:	f7ff ffee 	bl	8004854 <HAL_GetTick>
 8004878:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004884:	d005      	beq.n	8004892 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004886:	4b0a      	ldr	r3, [pc, #40]	@ (80048b0 <HAL_Delay+0x44>)
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	461a      	mov	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4413      	add	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004892:	bf00      	nop
 8004894:	f7ff ffde 	bl	8004854 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d8f7      	bhi.n	8004894 <HAL_Delay+0x28>
  {
  }
}
 80048a4:	bf00      	nop
 80048a6:	bf00      	nop
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	20000024 	.word	0x20000024

080048b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f003 0307 	and.w	r3, r3, #7
 80048c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048c4:	4b0c      	ldr	r3, [pc, #48]	@ (80048f8 <__NVIC_SetPriorityGrouping+0x44>)
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80048d0:	4013      	ands	r3, r2
 80048d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80048e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048e6:	4a04      	ldr	r2, [pc, #16]	@ (80048f8 <__NVIC_SetPriorityGrouping+0x44>)
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	60d3      	str	r3, [r2, #12]
}
 80048ec:	bf00      	nop
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	e000ed00 	.word	0xe000ed00

080048fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004900:	4b04      	ldr	r3, [pc, #16]	@ (8004914 <__NVIC_GetPriorityGrouping+0x18>)
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	0a1b      	lsrs	r3, r3, #8
 8004906:	f003 0307 	and.w	r3, r3, #7
}
 800490a:	4618      	mov	r0, r3
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	e000ed00 	.word	0xe000ed00

08004918 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	4603      	mov	r3, r0
 8004920:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004926:	2b00      	cmp	r3, #0
 8004928:	db0b      	blt.n	8004942 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800492a:	79fb      	ldrb	r3, [r7, #7]
 800492c:	f003 021f 	and.w	r2, r3, #31
 8004930:	4907      	ldr	r1, [pc, #28]	@ (8004950 <__NVIC_EnableIRQ+0x38>)
 8004932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004936:	095b      	lsrs	r3, r3, #5
 8004938:	2001      	movs	r0, #1
 800493a:	fa00 f202 	lsl.w	r2, r0, r2
 800493e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004942:	bf00      	nop
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	e000e100 	.word	0xe000e100

08004954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	4603      	mov	r3, r0
 800495c:	6039      	str	r1, [r7, #0]
 800495e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004964:	2b00      	cmp	r3, #0
 8004966:	db0a      	blt.n	800497e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	b2da      	uxtb	r2, r3
 800496c:	490c      	ldr	r1, [pc, #48]	@ (80049a0 <__NVIC_SetPriority+0x4c>)
 800496e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004972:	0112      	lsls	r2, r2, #4
 8004974:	b2d2      	uxtb	r2, r2
 8004976:	440b      	add	r3, r1
 8004978:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800497c:	e00a      	b.n	8004994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	b2da      	uxtb	r2, r3
 8004982:	4908      	ldr	r1, [pc, #32]	@ (80049a4 <__NVIC_SetPriority+0x50>)
 8004984:	79fb      	ldrb	r3, [r7, #7]
 8004986:	f003 030f 	and.w	r3, r3, #15
 800498a:	3b04      	subs	r3, #4
 800498c:	0112      	lsls	r2, r2, #4
 800498e:	b2d2      	uxtb	r2, r2
 8004990:	440b      	add	r3, r1
 8004992:	761a      	strb	r2, [r3, #24]
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr
 80049a0:	e000e100 	.word	0xe000e100
 80049a4:	e000ed00 	.word	0xe000ed00

080049a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b089      	sub	sp, #36	@ 0x24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f003 0307 	and.w	r3, r3, #7
 80049ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	f1c3 0307 	rsb	r3, r3, #7
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	bf28      	it	cs
 80049c6:	2304      	movcs	r3, #4
 80049c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	3304      	adds	r3, #4
 80049ce:	2b06      	cmp	r3, #6
 80049d0:	d902      	bls.n	80049d8 <NVIC_EncodePriority+0x30>
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	3b03      	subs	r3, #3
 80049d6:	e000      	b.n	80049da <NVIC_EncodePriority+0x32>
 80049d8:	2300      	movs	r3, #0
 80049da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049dc:	f04f 32ff 	mov.w	r2, #4294967295
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	fa02 f303 	lsl.w	r3, r2, r3
 80049e6:	43da      	mvns	r2, r3
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	401a      	ands	r2, r3
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049f0:	f04f 31ff 	mov.w	r1, #4294967295
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	fa01 f303 	lsl.w	r3, r1, r3
 80049fa:	43d9      	mvns	r1, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a00:	4313      	orrs	r3, r2
         );
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3724      	adds	r7, #36	@ 0x24
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
	...

08004a10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a20:	d301      	bcc.n	8004a26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a22:	2301      	movs	r3, #1
 8004a24:	e00f      	b.n	8004a46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a26:	4a0a      	ldr	r2, [pc, #40]	@ (8004a50 <SysTick_Config+0x40>)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a2e:	210f      	movs	r1, #15
 8004a30:	f04f 30ff 	mov.w	r0, #4294967295
 8004a34:	f7ff ff8e 	bl	8004954 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a38:	4b05      	ldr	r3, [pc, #20]	@ (8004a50 <SysTick_Config+0x40>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a3e:	4b04      	ldr	r3, [pc, #16]	@ (8004a50 <SysTick_Config+0x40>)
 8004a40:	2207      	movs	r2, #7
 8004a42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	e000e010 	.word	0xe000e010

08004a54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f7ff ff29 	bl	80048b4 <__NVIC_SetPriorityGrouping>
}
 8004a62:	bf00      	nop
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b086      	sub	sp, #24
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	4603      	mov	r3, r0
 8004a72:	60b9      	str	r1, [r7, #8]
 8004a74:	607a      	str	r2, [r7, #4]
 8004a76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a7c:	f7ff ff3e 	bl	80048fc <__NVIC_GetPriorityGrouping>
 8004a80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	68b9      	ldr	r1, [r7, #8]
 8004a86:	6978      	ldr	r0, [r7, #20]
 8004a88:	f7ff ff8e 	bl	80049a8 <NVIC_EncodePriority>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a92:	4611      	mov	r1, r2
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7ff ff5d 	bl	8004954 <__NVIC_SetPriority>
}
 8004a9a:	bf00      	nop
 8004a9c:	3718      	adds	r7, #24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b082      	sub	sp, #8
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7ff ff31 	bl	8004918 <__NVIC_EnableIRQ>
}
 8004ab6:	bf00      	nop
 8004ab8:	3708      	adds	r7, #8
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b082      	sub	sp, #8
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7ff ffa2 	bl	8004a10 <SysTick_Config>
 8004acc:	4603      	mov	r3, r0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
	...

08004ad8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004ae4:	f7ff feb6 	bl	8004854 <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e099      	b.n	8004c28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2202      	movs	r2, #2
 8004af8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0201 	bic.w	r2, r2, #1
 8004b12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b14:	e00f      	b.n	8004b36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b16:	f7ff fe9d 	bl	8004854 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b05      	cmp	r3, #5
 8004b22:	d908      	bls.n	8004b36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2220      	movs	r2, #32
 8004b28:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2203      	movs	r2, #3
 8004b2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e078      	b.n	8004c28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1e8      	bne.n	8004b16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	4b38      	ldr	r3, [pc, #224]	@ (8004c30 <HAL_DMA_Init+0x158>)
 8004b50:	4013      	ands	r3, r2
 8004b52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a1b      	ldr	r3, [r3, #32]
 8004b80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b8c:	2b04      	cmp	r3, #4
 8004b8e:	d107      	bne.n	8004ba0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f023 0307 	bic.w	r3, r3, #7
 8004bb6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	d117      	bne.n	8004bfa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00e      	beq.n	8004bfa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 fa6f 	bl	80050c0 <DMA_CheckFifoParam>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d008      	beq.n	8004bfa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2240      	movs	r2, #64	@ 0x40
 8004bec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e016      	b.n	8004c28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 fa26 	bl	8005054 <DMA_CalcBaseAndBitshift>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c10:	223f      	movs	r2, #63	@ 0x3f
 8004c12:	409a      	lsls	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3718      	adds	r7, #24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	f010803f 	.word	0xf010803f

08004c34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c4a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d101      	bne.n	8004c5a <HAL_DMA_Start_IT+0x26>
 8004c56:	2302      	movs	r3, #2
 8004c58:	e040      	b.n	8004cdc <HAL_DMA_Start_IT+0xa8>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d12f      	bne.n	8004cce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2202      	movs	r2, #2
 8004c72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	68b9      	ldr	r1, [r7, #8]
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f000 f9b8 	bl	8004ff8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c8c:	223f      	movs	r2, #63	@ 0x3f
 8004c8e:	409a      	lsls	r2, r3
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f042 0216 	orr.w	r2, r2, #22
 8004ca2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d007      	beq.n	8004cbc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0208 	orr.w	r2, r2, #8
 8004cba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f042 0201 	orr.w	r2, r2, #1
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	e005      	b.n	8004cda <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3718      	adds	r7, #24
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004cf0:	4b8e      	ldr	r3, [pc, #568]	@ (8004f2c <HAL_DMA_IRQHandler+0x248>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a8e      	ldr	r2, [pc, #568]	@ (8004f30 <HAL_DMA_IRQHandler+0x24c>)
 8004cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfa:	0a9b      	lsrs	r3, r3, #10
 8004cfc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d0e:	2208      	movs	r2, #8
 8004d10:	409a      	lsls	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	4013      	ands	r3, r2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d01a      	beq.n	8004d50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d013      	beq.n	8004d50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f022 0204 	bic.w	r2, r2, #4
 8004d36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d3c:	2208      	movs	r2, #8
 8004d3e:	409a      	lsls	r2, r3
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d48:	f043 0201 	orr.w	r2, r3, #1
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d54:	2201      	movs	r2, #1
 8004d56:	409a      	lsls	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d012      	beq.n	8004d86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00b      	beq.n	8004d86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d72:	2201      	movs	r2, #1
 8004d74:	409a      	lsls	r2, r3
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d7e:	f043 0202 	orr.w	r2, r3, #2
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d8a:	2204      	movs	r2, #4
 8004d8c:	409a      	lsls	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	4013      	ands	r3, r2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d012      	beq.n	8004dbc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00b      	beq.n	8004dbc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004da8:	2204      	movs	r2, #4
 8004daa:	409a      	lsls	r2, r3
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004db4:	f043 0204 	orr.w	r2, r3, #4
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dc0:	2210      	movs	r2, #16
 8004dc2:	409a      	lsls	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d043      	beq.n	8004e54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0308 	and.w	r3, r3, #8
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d03c      	beq.n	8004e54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dde:	2210      	movs	r2, #16
 8004de0:	409a      	lsls	r2, r3
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d018      	beq.n	8004e26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d108      	bne.n	8004e14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d024      	beq.n	8004e54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	4798      	blx	r3
 8004e12:	e01f      	b.n	8004e54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d01b      	beq.n	8004e54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	4798      	blx	r3
 8004e24:	e016      	b.n	8004e54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d107      	bne.n	8004e44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 0208 	bic.w	r2, r2, #8
 8004e42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d003      	beq.n	8004e54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e58:	2220      	movs	r2, #32
 8004e5a:	409a      	lsls	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4013      	ands	r3, r2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 808f 	beq.w	8004f84 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0310 	and.w	r3, r3, #16
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f000 8087 	beq.w	8004f84 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	409a      	lsls	r2, r3
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b05      	cmp	r3, #5
 8004e8c:	d136      	bne.n	8004efc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0216 	bic.w	r2, r2, #22
 8004e9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	695a      	ldr	r2, [r3, #20]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004eac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d103      	bne.n	8004ebe <HAL_DMA_IRQHandler+0x1da>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d007      	beq.n	8004ece <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 0208 	bic.w	r2, r2, #8
 8004ecc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ed2:	223f      	movs	r2, #63	@ 0x3f
 8004ed4:	409a      	lsls	r2, r3
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d07e      	beq.n	8004ff0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	4798      	blx	r3
        }
        return;
 8004efa:	e079      	b.n	8004ff0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d01d      	beq.n	8004f46 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10d      	bne.n	8004f34 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d031      	beq.n	8004f84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	4798      	blx	r3
 8004f28:	e02c      	b.n	8004f84 <HAL_DMA_IRQHandler+0x2a0>
 8004f2a:	bf00      	nop
 8004f2c:	2000001c 	.word	0x2000001c
 8004f30:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d023      	beq.n	8004f84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	4798      	blx	r3
 8004f44:	e01e      	b.n	8004f84 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10f      	bne.n	8004f74 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 0210 	bic.w	r2, r2, #16
 8004f62:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d032      	beq.n	8004ff2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d022      	beq.n	8004fde <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2205      	movs	r2, #5
 8004f9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0201 	bic.w	r2, r2, #1
 8004fae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	60bb      	str	r3, [r7, #8]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d307      	bcc.n	8004fcc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1f2      	bne.n	8004fb0 <HAL_DMA_IRQHandler+0x2cc>
 8004fca:	e000      	b.n	8004fce <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004fcc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d005      	beq.n	8004ff2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	4798      	blx	r3
 8004fee:	e000      	b.n	8004ff2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004ff0:	bf00      	nop
    }
  }
}
 8004ff2:	3718      	adds	r7, #24
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
 8005004:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005014:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	2b40      	cmp	r3, #64	@ 0x40
 8005024:	d108      	bne.n	8005038 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005036:	e007      	b.n	8005048 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	60da      	str	r2, [r3, #12]
}
 8005048:	bf00      	nop
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	b2db      	uxtb	r3, r3
 8005062:	3b10      	subs	r3, #16
 8005064:	4a14      	ldr	r2, [pc, #80]	@ (80050b8 <DMA_CalcBaseAndBitshift+0x64>)
 8005066:	fba2 2303 	umull	r2, r3, r2, r3
 800506a:	091b      	lsrs	r3, r3, #4
 800506c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800506e:	4a13      	ldr	r2, [pc, #76]	@ (80050bc <DMA_CalcBaseAndBitshift+0x68>)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	4413      	add	r3, r2
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	461a      	mov	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2b03      	cmp	r3, #3
 8005080:	d909      	bls.n	8005096 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800508a:	f023 0303 	bic.w	r3, r3, #3
 800508e:	1d1a      	adds	r2, r3, #4
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	659a      	str	r2, [r3, #88]	@ 0x58
 8005094:	e007      	b.n	80050a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800509e:	f023 0303 	bic.w	r3, r3, #3
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	aaaaaaab 	.word	0xaaaaaaab
 80050bc:	0800aa90 	.word	0x0800aa90

080050c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050c8:	2300      	movs	r3, #0
 80050ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d11f      	bne.n	800511a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	2b03      	cmp	r3, #3
 80050de:	d856      	bhi.n	800518e <DMA_CheckFifoParam+0xce>
 80050e0:	a201      	add	r2, pc, #4	@ (adr r2, 80050e8 <DMA_CheckFifoParam+0x28>)
 80050e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e6:	bf00      	nop
 80050e8:	080050f9 	.word	0x080050f9
 80050ec:	0800510b 	.word	0x0800510b
 80050f0:	080050f9 	.word	0x080050f9
 80050f4:	0800518f 	.word	0x0800518f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d046      	beq.n	8005192 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005108:	e043      	b.n	8005192 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800510e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005112:	d140      	bne.n	8005196 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005118:	e03d      	b.n	8005196 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005122:	d121      	bne.n	8005168 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	2b03      	cmp	r3, #3
 8005128:	d837      	bhi.n	800519a <DMA_CheckFifoParam+0xda>
 800512a:	a201      	add	r2, pc, #4	@ (adr r2, 8005130 <DMA_CheckFifoParam+0x70>)
 800512c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005130:	08005141 	.word	0x08005141
 8005134:	08005147 	.word	0x08005147
 8005138:	08005141 	.word	0x08005141
 800513c:	08005159 	.word	0x08005159
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	73fb      	strb	r3, [r7, #15]
      break;
 8005144:	e030      	b.n	80051a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d025      	beq.n	800519e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005156:	e022      	b.n	800519e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005160:	d11f      	bne.n	80051a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005166:	e01c      	b.n	80051a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2b02      	cmp	r3, #2
 800516c:	d903      	bls.n	8005176 <DMA_CheckFifoParam+0xb6>
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	2b03      	cmp	r3, #3
 8005172:	d003      	beq.n	800517c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005174:	e018      	b.n	80051a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	73fb      	strb	r3, [r7, #15]
      break;
 800517a:	e015      	b.n	80051a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005180:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00e      	beq.n	80051a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	73fb      	strb	r3, [r7, #15]
      break;
 800518c:	e00b      	b.n	80051a6 <DMA_CheckFifoParam+0xe6>
      break;
 800518e:	bf00      	nop
 8005190:	e00a      	b.n	80051a8 <DMA_CheckFifoParam+0xe8>
      break;
 8005192:	bf00      	nop
 8005194:	e008      	b.n	80051a8 <DMA_CheckFifoParam+0xe8>
      break;
 8005196:	bf00      	nop
 8005198:	e006      	b.n	80051a8 <DMA_CheckFifoParam+0xe8>
      break;
 800519a:	bf00      	nop
 800519c:	e004      	b.n	80051a8 <DMA_CheckFifoParam+0xe8>
      break;
 800519e:	bf00      	nop
 80051a0:	e002      	b.n	80051a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80051a2:	bf00      	nop
 80051a4:	e000      	b.n	80051a8 <DMA_CheckFifoParam+0xe8>
      break;
 80051a6:	bf00      	nop
    }
  } 
  
  return status; 
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop

080051b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b089      	sub	sp, #36	@ 0x24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80051c2:	2300      	movs	r3, #0
 80051c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80051c6:	2300      	movs	r3, #0
 80051c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051ce:	2300      	movs	r3, #0
 80051d0:	61fb      	str	r3, [r7, #28]
 80051d2:	e177      	b.n	80054c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80051d4:	2201      	movs	r2, #1
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	fa02 f303 	lsl.w	r3, r2, r3
 80051dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	4013      	ands	r3, r2
 80051e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	f040 8166 	bne.w	80054be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f003 0303 	and.w	r3, r3, #3
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d005      	beq.n	800520a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005206:	2b02      	cmp	r3, #2
 8005208:	d130      	bne.n	800526c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	2203      	movs	r2, #3
 8005216:	fa02 f303 	lsl.w	r3, r2, r3
 800521a:	43db      	mvns	r3, r3
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	4013      	ands	r3, r2
 8005220:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	68da      	ldr	r2, [r3, #12]
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	fa02 f303 	lsl.w	r3, r2, r3
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	4313      	orrs	r3, r2
 8005232:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005240:	2201      	movs	r2, #1
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	fa02 f303 	lsl.w	r3, r2, r3
 8005248:	43db      	mvns	r3, r3
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	4013      	ands	r3, r2
 800524e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	091b      	lsrs	r3, r3, #4
 8005256:	f003 0201 	and.w	r2, r3, #1
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	fa02 f303 	lsl.w	r3, r2, r3
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	4313      	orrs	r3, r2
 8005264:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f003 0303 	and.w	r3, r3, #3
 8005274:	2b03      	cmp	r3, #3
 8005276:	d017      	beq.n	80052a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	2203      	movs	r2, #3
 8005284:	fa02 f303 	lsl.w	r3, r2, r3
 8005288:	43db      	mvns	r3, r3
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	4013      	ands	r3, r2
 800528e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	689a      	ldr	r2, [r3, #8]
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	005b      	lsls	r3, r3, #1
 8005298:	fa02 f303 	lsl.w	r3, r2, r3
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	4313      	orrs	r3, r2
 80052a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f003 0303 	and.w	r3, r3, #3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d123      	bne.n	80052fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	08da      	lsrs	r2, r3, #3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	3208      	adds	r2, #8
 80052bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	f003 0307 	and.w	r3, r3, #7
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	220f      	movs	r2, #15
 80052cc:	fa02 f303 	lsl.w	r3, r2, r3
 80052d0:	43db      	mvns	r3, r3
 80052d2:	69ba      	ldr	r2, [r7, #24]
 80052d4:	4013      	ands	r3, r2
 80052d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	691a      	ldr	r2, [r3, #16]
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	f003 0307 	and.w	r3, r3, #7
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	fa02 f303 	lsl.w	r3, r2, r3
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	08da      	lsrs	r2, r3, #3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	3208      	adds	r2, #8
 80052f6:	69b9      	ldr	r1, [r7, #24]
 80052f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	005b      	lsls	r3, r3, #1
 8005306:	2203      	movs	r2, #3
 8005308:	fa02 f303 	lsl.w	r3, r2, r3
 800530c:	43db      	mvns	r3, r3
 800530e:	69ba      	ldr	r2, [r7, #24]
 8005310:	4013      	ands	r3, r2
 8005312:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f003 0203 	and.w	r2, r3, #3
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	fa02 f303 	lsl.w	r3, r2, r3
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	4313      	orrs	r3, r2
 8005328:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005338:	2b00      	cmp	r3, #0
 800533a:	f000 80c0 	beq.w	80054be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800533e:	2300      	movs	r3, #0
 8005340:	60fb      	str	r3, [r7, #12]
 8005342:	4b66      	ldr	r3, [pc, #408]	@ (80054dc <HAL_GPIO_Init+0x324>)
 8005344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005346:	4a65      	ldr	r2, [pc, #404]	@ (80054dc <HAL_GPIO_Init+0x324>)
 8005348:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800534c:	6453      	str	r3, [r2, #68]	@ 0x44
 800534e:	4b63      	ldr	r3, [pc, #396]	@ (80054dc <HAL_GPIO_Init+0x324>)
 8005350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005352:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800535a:	4a61      	ldr	r2, [pc, #388]	@ (80054e0 <HAL_GPIO_Init+0x328>)
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	089b      	lsrs	r3, r3, #2
 8005360:	3302      	adds	r3, #2
 8005362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005366:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	f003 0303 	and.w	r3, r3, #3
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	220f      	movs	r2, #15
 8005372:	fa02 f303 	lsl.w	r3, r2, r3
 8005376:	43db      	mvns	r3, r3
 8005378:	69ba      	ldr	r2, [r7, #24]
 800537a:	4013      	ands	r3, r2
 800537c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a58      	ldr	r2, [pc, #352]	@ (80054e4 <HAL_GPIO_Init+0x32c>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d037      	beq.n	80053f6 <HAL_GPIO_Init+0x23e>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a57      	ldr	r2, [pc, #348]	@ (80054e8 <HAL_GPIO_Init+0x330>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d031      	beq.n	80053f2 <HAL_GPIO_Init+0x23a>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a56      	ldr	r2, [pc, #344]	@ (80054ec <HAL_GPIO_Init+0x334>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d02b      	beq.n	80053ee <HAL_GPIO_Init+0x236>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a55      	ldr	r2, [pc, #340]	@ (80054f0 <HAL_GPIO_Init+0x338>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d025      	beq.n	80053ea <HAL_GPIO_Init+0x232>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a54      	ldr	r2, [pc, #336]	@ (80054f4 <HAL_GPIO_Init+0x33c>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d01f      	beq.n	80053e6 <HAL_GPIO_Init+0x22e>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a53      	ldr	r2, [pc, #332]	@ (80054f8 <HAL_GPIO_Init+0x340>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d019      	beq.n	80053e2 <HAL_GPIO_Init+0x22a>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a52      	ldr	r2, [pc, #328]	@ (80054fc <HAL_GPIO_Init+0x344>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d013      	beq.n	80053de <HAL_GPIO_Init+0x226>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a51      	ldr	r2, [pc, #324]	@ (8005500 <HAL_GPIO_Init+0x348>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d00d      	beq.n	80053da <HAL_GPIO_Init+0x222>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a50      	ldr	r2, [pc, #320]	@ (8005504 <HAL_GPIO_Init+0x34c>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d007      	beq.n	80053d6 <HAL_GPIO_Init+0x21e>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a4f      	ldr	r2, [pc, #316]	@ (8005508 <HAL_GPIO_Init+0x350>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d101      	bne.n	80053d2 <HAL_GPIO_Init+0x21a>
 80053ce:	2309      	movs	r3, #9
 80053d0:	e012      	b.n	80053f8 <HAL_GPIO_Init+0x240>
 80053d2:	230a      	movs	r3, #10
 80053d4:	e010      	b.n	80053f8 <HAL_GPIO_Init+0x240>
 80053d6:	2308      	movs	r3, #8
 80053d8:	e00e      	b.n	80053f8 <HAL_GPIO_Init+0x240>
 80053da:	2307      	movs	r3, #7
 80053dc:	e00c      	b.n	80053f8 <HAL_GPIO_Init+0x240>
 80053de:	2306      	movs	r3, #6
 80053e0:	e00a      	b.n	80053f8 <HAL_GPIO_Init+0x240>
 80053e2:	2305      	movs	r3, #5
 80053e4:	e008      	b.n	80053f8 <HAL_GPIO_Init+0x240>
 80053e6:	2304      	movs	r3, #4
 80053e8:	e006      	b.n	80053f8 <HAL_GPIO_Init+0x240>
 80053ea:	2303      	movs	r3, #3
 80053ec:	e004      	b.n	80053f8 <HAL_GPIO_Init+0x240>
 80053ee:	2302      	movs	r3, #2
 80053f0:	e002      	b.n	80053f8 <HAL_GPIO_Init+0x240>
 80053f2:	2301      	movs	r3, #1
 80053f4:	e000      	b.n	80053f8 <HAL_GPIO_Init+0x240>
 80053f6:	2300      	movs	r3, #0
 80053f8:	69fa      	ldr	r2, [r7, #28]
 80053fa:	f002 0203 	and.w	r2, r2, #3
 80053fe:	0092      	lsls	r2, r2, #2
 8005400:	4093      	lsls	r3, r2
 8005402:	69ba      	ldr	r2, [r7, #24]
 8005404:	4313      	orrs	r3, r2
 8005406:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005408:	4935      	ldr	r1, [pc, #212]	@ (80054e0 <HAL_GPIO_Init+0x328>)
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	089b      	lsrs	r3, r3, #2
 800540e:	3302      	adds	r3, #2
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005416:	4b3d      	ldr	r3, [pc, #244]	@ (800550c <HAL_GPIO_Init+0x354>)
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	43db      	mvns	r3, r3
 8005420:	69ba      	ldr	r2, [r7, #24]
 8005422:	4013      	ands	r3, r2
 8005424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	4313      	orrs	r3, r2
 8005438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800543a:	4a34      	ldr	r2, [pc, #208]	@ (800550c <HAL_GPIO_Init+0x354>)
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005440:	4b32      	ldr	r3, [pc, #200]	@ (800550c <HAL_GPIO_Init+0x354>)
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	43db      	mvns	r3, r3
 800544a:	69ba      	ldr	r2, [r7, #24]
 800544c:	4013      	ands	r3, r2
 800544e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d003      	beq.n	8005464 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	4313      	orrs	r3, r2
 8005462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005464:	4a29      	ldr	r2, [pc, #164]	@ (800550c <HAL_GPIO_Init+0x354>)
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800546a:	4b28      	ldr	r3, [pc, #160]	@ (800550c <HAL_GPIO_Init+0x354>)
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	43db      	mvns	r3, r3
 8005474:	69ba      	ldr	r2, [r7, #24]
 8005476:	4013      	ands	r3, r2
 8005478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d003      	beq.n	800548e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005486:	69ba      	ldr	r2, [r7, #24]
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	4313      	orrs	r3, r2
 800548c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800548e:	4a1f      	ldr	r2, [pc, #124]	@ (800550c <HAL_GPIO_Init+0x354>)
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005494:	4b1d      	ldr	r3, [pc, #116]	@ (800550c <HAL_GPIO_Init+0x354>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	43db      	mvns	r3, r3
 800549e:	69ba      	ldr	r2, [r7, #24]
 80054a0:	4013      	ands	r3, r2
 80054a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d003      	beq.n	80054b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80054b8:	4a14      	ldr	r2, [pc, #80]	@ (800550c <HAL_GPIO_Init+0x354>)
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	3301      	adds	r3, #1
 80054c2:	61fb      	str	r3, [r7, #28]
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	2b0f      	cmp	r3, #15
 80054c8:	f67f ae84 	bls.w	80051d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80054cc:	bf00      	nop
 80054ce:	bf00      	nop
 80054d0:	3724      	adds	r7, #36	@ 0x24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	40023800 	.word	0x40023800
 80054e0:	40013800 	.word	0x40013800
 80054e4:	40020000 	.word	0x40020000
 80054e8:	40020400 	.word	0x40020400
 80054ec:	40020800 	.word	0x40020800
 80054f0:	40020c00 	.word	0x40020c00
 80054f4:	40021000 	.word	0x40021000
 80054f8:	40021400 	.word	0x40021400
 80054fc:	40021800 	.word	0x40021800
 8005500:	40021c00 	.word	0x40021c00
 8005504:	40022000 	.word	0x40022000
 8005508:	40022400 	.word	0x40022400
 800550c:	40013c00 	.word	0x40013c00

08005510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	460b      	mov	r3, r1
 800551a:	807b      	strh	r3, [r7, #2]
 800551c:	4613      	mov	r3, r2
 800551e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005520:	787b      	ldrb	r3, [r7, #1]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d003      	beq.n	800552e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005526:	887a      	ldrh	r2, [r7, #2]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800552c:	e003      	b.n	8005536 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800552e:	887b      	ldrh	r3, [r7, #2]
 8005530:	041a      	lsls	r2, r3, #16
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	619a      	str	r2, [r3, #24]
}
 8005536:	bf00      	nop
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
	...

08005544 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	4603      	mov	r3, r0
 800554c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800554e:	4b08      	ldr	r3, [pc, #32]	@ (8005570 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005550:	695a      	ldr	r2, [r3, #20]
 8005552:	88fb      	ldrh	r3, [r7, #6]
 8005554:	4013      	ands	r3, r2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d006      	beq.n	8005568 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800555a:	4a05      	ldr	r2, [pc, #20]	@ (8005570 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800555c:	88fb      	ldrh	r3, [r7, #6]
 800555e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005560:	88fb      	ldrh	r3, [r7, #6]
 8005562:	4618      	mov	r0, r3
 8005564:	f000 f806 	bl	8005574 <HAL_GPIO_EXTI_Callback>
  }
}
 8005568:	bf00      	nop
 800556a:	3708      	adds	r7, #8
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	40013c00 	.word	0x40013c00

08005574 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	4603      	mov	r3, r0
 800557c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800557e:	bf00      	nop
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
	...

0800558c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005592:	2300      	movs	r3, #0
 8005594:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005596:	2300      	movs	r3, #0
 8005598:	603b      	str	r3, [r7, #0]
 800559a:	4b20      	ldr	r3, [pc, #128]	@ (800561c <HAL_PWREx_EnableOverDrive+0x90>)
 800559c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559e:	4a1f      	ldr	r2, [pc, #124]	@ (800561c <HAL_PWREx_EnableOverDrive+0x90>)
 80055a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80055a6:	4b1d      	ldr	r3, [pc, #116]	@ (800561c <HAL_PWREx_EnableOverDrive+0x90>)
 80055a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055ae:	603b      	str	r3, [r7, #0]
 80055b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80055b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005620 <HAL_PWREx_EnableOverDrive+0x94>)
 80055b4:	2201      	movs	r2, #1
 80055b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80055b8:	f7ff f94c 	bl	8004854 <HAL_GetTick>
 80055bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80055be:	e009      	b.n	80055d4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80055c0:	f7ff f948 	bl	8004854 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80055ce:	d901      	bls.n	80055d4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e01f      	b.n	8005614 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80055d4:	4b13      	ldr	r3, [pc, #76]	@ (8005624 <HAL_PWREx_EnableOverDrive+0x98>)
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055e0:	d1ee      	bne.n	80055c0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80055e2:	4b11      	ldr	r3, [pc, #68]	@ (8005628 <HAL_PWREx_EnableOverDrive+0x9c>)
 80055e4:	2201      	movs	r2, #1
 80055e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80055e8:	f7ff f934 	bl	8004854 <HAL_GetTick>
 80055ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80055ee:	e009      	b.n	8005604 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80055f0:	f7ff f930 	bl	8004854 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80055fe:	d901      	bls.n	8005604 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e007      	b.n	8005614 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005604:	4b07      	ldr	r3, [pc, #28]	@ (8005624 <HAL_PWREx_EnableOverDrive+0x98>)
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800560c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005610:	d1ee      	bne.n	80055f0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	40023800 	.word	0x40023800
 8005620:	420e0040 	.word	0x420e0040
 8005624:	40007000 	.word	0x40007000
 8005628:	420e0044 	.word	0x420e0044

0800562c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d101      	bne.n	800563e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e267      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d075      	beq.n	8005736 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800564a:	4b88      	ldr	r3, [pc, #544]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f003 030c 	and.w	r3, r3, #12
 8005652:	2b04      	cmp	r3, #4
 8005654:	d00c      	beq.n	8005670 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005656:	4b85      	ldr	r3, [pc, #532]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800565e:	2b08      	cmp	r3, #8
 8005660:	d112      	bne.n	8005688 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005662:	4b82      	ldr	r3, [pc, #520]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800566a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800566e:	d10b      	bne.n	8005688 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005670:	4b7e      	ldr	r3, [pc, #504]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d05b      	beq.n	8005734 <HAL_RCC_OscConfig+0x108>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d157      	bne.n	8005734 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e242      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005690:	d106      	bne.n	80056a0 <HAL_RCC_OscConfig+0x74>
 8005692:	4b76      	ldr	r3, [pc, #472]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a75      	ldr	r2, [pc, #468]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 8005698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800569c:	6013      	str	r3, [r2, #0]
 800569e:	e01d      	b.n	80056dc <HAL_RCC_OscConfig+0xb0>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80056a8:	d10c      	bne.n	80056c4 <HAL_RCC_OscConfig+0x98>
 80056aa:	4b70      	ldr	r3, [pc, #448]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a6f      	ldr	r2, [pc, #444]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 80056b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80056b4:	6013      	str	r3, [r2, #0]
 80056b6:	4b6d      	ldr	r3, [pc, #436]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a6c      	ldr	r2, [pc, #432]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 80056bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056c0:	6013      	str	r3, [r2, #0]
 80056c2:	e00b      	b.n	80056dc <HAL_RCC_OscConfig+0xb0>
 80056c4:	4b69      	ldr	r3, [pc, #420]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a68      	ldr	r2, [pc, #416]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 80056ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056ce:	6013      	str	r3, [r2, #0]
 80056d0:	4b66      	ldr	r3, [pc, #408]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a65      	ldr	r2, [pc, #404]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 80056d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d013      	beq.n	800570c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e4:	f7ff f8b6 	bl	8004854 <HAL_GetTick>
 80056e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ea:	e008      	b.n	80056fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056ec:	f7ff f8b2 	bl	8004854 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	2b64      	cmp	r3, #100	@ 0x64
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e207      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056fe:	4b5b      	ldr	r3, [pc, #364]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d0f0      	beq.n	80056ec <HAL_RCC_OscConfig+0xc0>
 800570a:	e014      	b.n	8005736 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800570c:	f7ff f8a2 	bl	8004854 <HAL_GetTick>
 8005710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005712:	e008      	b.n	8005726 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005714:	f7ff f89e 	bl	8004854 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	2b64      	cmp	r3, #100	@ 0x64
 8005720:	d901      	bls.n	8005726 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e1f3      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005726:	4b51      	ldr	r3, [pc, #324]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1f0      	bne.n	8005714 <HAL_RCC_OscConfig+0xe8>
 8005732:	e000      	b.n	8005736 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	2b00      	cmp	r3, #0
 8005740:	d063      	beq.n	800580a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005742:	4b4a      	ldr	r3, [pc, #296]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f003 030c 	and.w	r3, r3, #12
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00b      	beq.n	8005766 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800574e:	4b47      	ldr	r3, [pc, #284]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005756:	2b08      	cmp	r3, #8
 8005758:	d11c      	bne.n	8005794 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800575a:	4b44      	ldr	r3, [pc, #272]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d116      	bne.n	8005794 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005766:	4b41      	ldr	r3, [pc, #260]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d005      	beq.n	800577e <HAL_RCC_OscConfig+0x152>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d001      	beq.n	800577e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e1c7      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800577e:	4b3b      	ldr	r3, [pc, #236]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	00db      	lsls	r3, r3, #3
 800578c:	4937      	ldr	r1, [pc, #220]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 800578e:	4313      	orrs	r3, r2
 8005790:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005792:	e03a      	b.n	800580a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d020      	beq.n	80057de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800579c:	4b34      	ldr	r3, [pc, #208]	@ (8005870 <HAL_RCC_OscConfig+0x244>)
 800579e:	2201      	movs	r2, #1
 80057a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a2:	f7ff f857 	bl	8004854 <HAL_GetTick>
 80057a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057a8:	e008      	b.n	80057bc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057aa:	f7ff f853 	bl	8004854 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d901      	bls.n	80057bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e1a8      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057bc:	4b2b      	ldr	r3, [pc, #172]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0302 	and.w	r3, r3, #2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d0f0      	beq.n	80057aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057c8:	4b28      	ldr	r3, [pc, #160]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	00db      	lsls	r3, r3, #3
 80057d6:	4925      	ldr	r1, [pc, #148]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	600b      	str	r3, [r1, #0]
 80057dc:	e015      	b.n	800580a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057de:	4b24      	ldr	r3, [pc, #144]	@ (8005870 <HAL_RCC_OscConfig+0x244>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e4:	f7ff f836 	bl	8004854 <HAL_GetTick>
 80057e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057ea:	e008      	b.n	80057fe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057ec:	f7ff f832 	bl	8004854 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e187      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057fe:	4b1b      	ldr	r3, [pc, #108]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0302 	and.w	r3, r3, #2
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1f0      	bne.n	80057ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0308 	and.w	r3, r3, #8
 8005812:	2b00      	cmp	r3, #0
 8005814:	d036      	beq.n	8005884 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d016      	beq.n	800584c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800581e:	4b15      	ldr	r3, [pc, #84]	@ (8005874 <HAL_RCC_OscConfig+0x248>)
 8005820:	2201      	movs	r2, #1
 8005822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005824:	f7ff f816 	bl	8004854 <HAL_GetTick>
 8005828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800582a:	e008      	b.n	800583e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800582c:	f7ff f812 	bl	8004854 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	2b02      	cmp	r3, #2
 8005838:	d901      	bls.n	800583e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e167      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800583e:	4b0b      	ldr	r3, [pc, #44]	@ (800586c <HAL_RCC_OscConfig+0x240>)
 8005840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d0f0      	beq.n	800582c <HAL_RCC_OscConfig+0x200>
 800584a:	e01b      	b.n	8005884 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800584c:	4b09      	ldr	r3, [pc, #36]	@ (8005874 <HAL_RCC_OscConfig+0x248>)
 800584e:	2200      	movs	r2, #0
 8005850:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005852:	f7fe ffff 	bl	8004854 <HAL_GetTick>
 8005856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005858:	e00e      	b.n	8005878 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800585a:	f7fe fffb 	bl	8004854 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b02      	cmp	r3, #2
 8005866:	d907      	bls.n	8005878 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e150      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
 800586c:	40023800 	.word	0x40023800
 8005870:	42470000 	.word	0x42470000
 8005874:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005878:	4b88      	ldr	r3, [pc, #544]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 800587a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1ea      	bne.n	800585a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0304 	and.w	r3, r3, #4
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 8097 	beq.w	80059c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005892:	2300      	movs	r3, #0
 8005894:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005896:	4b81      	ldr	r3, [pc, #516]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 8005898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800589a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10f      	bne.n	80058c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058a2:	2300      	movs	r3, #0
 80058a4:	60bb      	str	r3, [r7, #8]
 80058a6:	4b7d      	ldr	r3, [pc, #500]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 80058a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058aa:	4a7c      	ldr	r2, [pc, #496]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 80058ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80058b2:	4b7a      	ldr	r3, [pc, #488]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 80058b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058ba:	60bb      	str	r3, [r7, #8]
 80058bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058be:	2301      	movs	r3, #1
 80058c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058c2:	4b77      	ldr	r3, [pc, #476]	@ (8005aa0 <HAL_RCC_OscConfig+0x474>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d118      	bne.n	8005900 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058ce:	4b74      	ldr	r3, [pc, #464]	@ (8005aa0 <HAL_RCC_OscConfig+0x474>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a73      	ldr	r2, [pc, #460]	@ (8005aa0 <HAL_RCC_OscConfig+0x474>)
 80058d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058da:	f7fe ffbb 	bl	8004854 <HAL_GetTick>
 80058de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058e0:	e008      	b.n	80058f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058e2:	f7fe ffb7 	bl	8004854 <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d901      	bls.n	80058f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e10c      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058f4:	4b6a      	ldr	r3, [pc, #424]	@ (8005aa0 <HAL_RCC_OscConfig+0x474>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d0f0      	beq.n	80058e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d106      	bne.n	8005916 <HAL_RCC_OscConfig+0x2ea>
 8005908:	4b64      	ldr	r3, [pc, #400]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 800590a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800590c:	4a63      	ldr	r2, [pc, #396]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 800590e:	f043 0301 	orr.w	r3, r3, #1
 8005912:	6713      	str	r3, [r2, #112]	@ 0x70
 8005914:	e01c      	b.n	8005950 <HAL_RCC_OscConfig+0x324>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	2b05      	cmp	r3, #5
 800591c:	d10c      	bne.n	8005938 <HAL_RCC_OscConfig+0x30c>
 800591e:	4b5f      	ldr	r3, [pc, #380]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 8005920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005922:	4a5e      	ldr	r2, [pc, #376]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 8005924:	f043 0304 	orr.w	r3, r3, #4
 8005928:	6713      	str	r3, [r2, #112]	@ 0x70
 800592a:	4b5c      	ldr	r3, [pc, #368]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 800592c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800592e:	4a5b      	ldr	r2, [pc, #364]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 8005930:	f043 0301 	orr.w	r3, r3, #1
 8005934:	6713      	str	r3, [r2, #112]	@ 0x70
 8005936:	e00b      	b.n	8005950 <HAL_RCC_OscConfig+0x324>
 8005938:	4b58      	ldr	r3, [pc, #352]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 800593a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800593c:	4a57      	ldr	r2, [pc, #348]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 800593e:	f023 0301 	bic.w	r3, r3, #1
 8005942:	6713      	str	r3, [r2, #112]	@ 0x70
 8005944:	4b55      	ldr	r3, [pc, #340]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 8005946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005948:	4a54      	ldr	r2, [pc, #336]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 800594a:	f023 0304 	bic.w	r3, r3, #4
 800594e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d015      	beq.n	8005984 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005958:	f7fe ff7c 	bl	8004854 <HAL_GetTick>
 800595c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800595e:	e00a      	b.n	8005976 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005960:	f7fe ff78 	bl	8004854 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800596e:	4293      	cmp	r3, r2
 8005970:	d901      	bls.n	8005976 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e0cb      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005976:	4b49      	ldr	r3, [pc, #292]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 8005978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d0ee      	beq.n	8005960 <HAL_RCC_OscConfig+0x334>
 8005982:	e014      	b.n	80059ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005984:	f7fe ff66 	bl	8004854 <HAL_GetTick>
 8005988:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800598a:	e00a      	b.n	80059a2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800598c:	f7fe ff62 	bl	8004854 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	f241 3288 	movw	r2, #5000	@ 0x1388
 800599a:	4293      	cmp	r3, r2
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e0b5      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059a2:	4b3e      	ldr	r3, [pc, #248]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 80059a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1ee      	bne.n	800598c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80059ae:	7dfb      	ldrb	r3, [r7, #23]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d105      	bne.n	80059c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059b4:	4b39      	ldr	r3, [pc, #228]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 80059b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b8:	4a38      	ldr	r2, [pc, #224]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 80059ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 80a1 	beq.w	8005b0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059ca:	4b34      	ldr	r3, [pc, #208]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f003 030c 	and.w	r3, r3, #12
 80059d2:	2b08      	cmp	r3, #8
 80059d4:	d05c      	beq.n	8005a90 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d141      	bne.n	8005a62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059de:	4b31      	ldr	r3, [pc, #196]	@ (8005aa4 <HAL_RCC_OscConfig+0x478>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059e4:	f7fe ff36 	bl	8004854 <HAL_GetTick>
 80059e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059ea:	e008      	b.n	80059fe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ec:	f7fe ff32 	bl	8004854 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e087      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059fe:	4b27      	ldr	r3, [pc, #156]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1f0      	bne.n	80059ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	69da      	ldr	r2, [r3, #28]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	431a      	orrs	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a18:	019b      	lsls	r3, r3, #6
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a20:	085b      	lsrs	r3, r3, #1
 8005a22:	3b01      	subs	r3, #1
 8005a24:	041b      	lsls	r3, r3, #16
 8005a26:	431a      	orrs	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2c:	061b      	lsls	r3, r3, #24
 8005a2e:	491b      	ldr	r1, [pc, #108]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a34:	4b1b      	ldr	r3, [pc, #108]	@ (8005aa4 <HAL_RCC_OscConfig+0x478>)
 8005a36:	2201      	movs	r2, #1
 8005a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a3a:	f7fe ff0b 	bl	8004854 <HAL_GetTick>
 8005a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a40:	e008      	b.n	8005a54 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a42:	f7fe ff07 	bl	8004854 <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d901      	bls.n	8005a54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e05c      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a54:	4b11      	ldr	r3, [pc, #68]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d0f0      	beq.n	8005a42 <HAL_RCC_OscConfig+0x416>
 8005a60:	e054      	b.n	8005b0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a62:	4b10      	ldr	r3, [pc, #64]	@ (8005aa4 <HAL_RCC_OscConfig+0x478>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a68:	f7fe fef4 	bl	8004854 <HAL_GetTick>
 8005a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a6e:	e008      	b.n	8005a82 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a70:	f7fe fef0 	bl	8004854 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d901      	bls.n	8005a82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e045      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a82:	4b06      	ldr	r3, [pc, #24]	@ (8005a9c <HAL_RCC_OscConfig+0x470>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1f0      	bne.n	8005a70 <HAL_RCC_OscConfig+0x444>
 8005a8e:	e03d      	b.n	8005b0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d107      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e038      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
 8005a9c:	40023800 	.word	0x40023800
 8005aa0:	40007000 	.word	0x40007000
 8005aa4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8005b18 <HAL_RCC_OscConfig+0x4ec>)
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d028      	beq.n	8005b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d121      	bne.n	8005b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d11a      	bne.n	8005b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005ad8:	4013      	ands	r3, r2
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005ade:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d111      	bne.n	8005b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aee:	085b      	lsrs	r3, r3, #1
 8005af0:	3b01      	subs	r3, #1
 8005af2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d107      	bne.n	8005b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d001      	beq.n	8005b0c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e000      	b.n	8005b0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3718      	adds	r7, #24
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	40023800 	.word	0x40023800

08005b1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d101      	bne.n	8005b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e0cc      	b.n	8005cca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b30:	4b68      	ldr	r3, [pc, #416]	@ (8005cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 030f 	and.w	r3, r3, #15
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d90c      	bls.n	8005b58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b3e:	4b65      	ldr	r3, [pc, #404]	@ (8005cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b40:	683a      	ldr	r2, [r7, #0]
 8005b42:	b2d2      	uxtb	r2, r2
 8005b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b46:	4b63      	ldr	r3, [pc, #396]	@ (8005cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d001      	beq.n	8005b58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e0b8      	b.n	8005cca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0302 	and.w	r3, r3, #2
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d020      	beq.n	8005ba6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0304 	and.w	r3, r3, #4
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d005      	beq.n	8005b7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b70:	4b59      	ldr	r3, [pc, #356]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	4a58      	ldr	r2, [pc, #352]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005b7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0308 	and.w	r3, r3, #8
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d005      	beq.n	8005b94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b88:	4b53      	ldr	r3, [pc, #332]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	4a52      	ldr	r2, [pc, #328]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005b92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b94:	4b50      	ldr	r3, [pc, #320]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	494d      	ldr	r1, [pc, #308]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d044      	beq.n	8005c3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d107      	bne.n	8005bca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bba:	4b47      	ldr	r3, [pc, #284]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d119      	bne.n	8005bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e07f      	b.n	8005cca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d003      	beq.n	8005bda <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bd6:	2b03      	cmp	r3, #3
 8005bd8:	d107      	bne.n	8005bea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bda:	4b3f      	ldr	r3, [pc, #252]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d109      	bne.n	8005bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e06f      	b.n	8005cca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bea:	4b3b      	ldr	r3, [pc, #236]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e067      	b.n	8005cca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bfa:	4b37      	ldr	r3, [pc, #220]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f023 0203 	bic.w	r2, r3, #3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	4934      	ldr	r1, [pc, #208]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c0c:	f7fe fe22 	bl	8004854 <HAL_GetTick>
 8005c10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c12:	e00a      	b.n	8005c2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c14:	f7fe fe1e 	bl	8004854 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e04f      	b.n	8005cca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c2a:	4b2b      	ldr	r3, [pc, #172]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f003 020c 	and.w	r2, r3, #12
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d1eb      	bne.n	8005c14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c3c:	4b25      	ldr	r3, [pc, #148]	@ (8005cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 030f 	and.w	r3, r3, #15
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d20c      	bcs.n	8005c64 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c4a:	4b22      	ldr	r3, [pc, #136]	@ (8005cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	b2d2      	uxtb	r2, r2
 8005c50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c52:	4b20      	ldr	r3, [pc, #128]	@ (8005cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 030f 	and.w	r3, r3, #15
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d001      	beq.n	8005c64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e032      	b.n	8005cca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d008      	beq.n	8005c82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c70:	4b19      	ldr	r3, [pc, #100]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	4916      	ldr	r1, [pc, #88]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0308 	and.w	r3, r3, #8
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d009      	beq.n	8005ca2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c8e:	4b12      	ldr	r3, [pc, #72]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	00db      	lsls	r3, r3, #3
 8005c9c:	490e      	ldr	r1, [pc, #56]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005ca2:	f000 f821 	bl	8005ce8 <HAL_RCC_GetSysClockFreq>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	091b      	lsrs	r3, r3, #4
 8005cae:	f003 030f 	and.w	r3, r3, #15
 8005cb2:	490a      	ldr	r1, [pc, #40]	@ (8005cdc <HAL_RCC_ClockConfig+0x1c0>)
 8005cb4:	5ccb      	ldrb	r3, [r1, r3]
 8005cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8005cba:	4a09      	ldr	r2, [pc, #36]	@ (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005cbe:	4b09      	ldr	r3, [pc, #36]	@ (8005ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7fe fd82 	bl	80047cc <HAL_InitTick>

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	40023c00 	.word	0x40023c00
 8005cd8:	40023800 	.word	0x40023800
 8005cdc:	0800aa80 	.word	0x0800aa80
 8005ce0:	2000001c 	.word	0x2000001c
 8005ce4:	20000020 	.word	0x20000020

08005ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cec:	b094      	sub	sp, #80	@ 0x50
 8005cee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d00:	4b79      	ldr	r3, [pc, #484]	@ (8005ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f003 030c 	and.w	r3, r3, #12
 8005d08:	2b08      	cmp	r3, #8
 8005d0a:	d00d      	beq.n	8005d28 <HAL_RCC_GetSysClockFreq+0x40>
 8005d0c:	2b08      	cmp	r3, #8
 8005d0e:	f200 80e1 	bhi.w	8005ed4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d002      	beq.n	8005d1c <HAL_RCC_GetSysClockFreq+0x34>
 8005d16:	2b04      	cmp	r3, #4
 8005d18:	d003      	beq.n	8005d22 <HAL_RCC_GetSysClockFreq+0x3a>
 8005d1a:	e0db      	b.n	8005ed4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d1c:	4b73      	ldr	r3, [pc, #460]	@ (8005eec <HAL_RCC_GetSysClockFreq+0x204>)
 8005d1e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d20:	e0db      	b.n	8005eda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d22:	4b73      	ldr	r3, [pc, #460]	@ (8005ef0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005d24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d26:	e0d8      	b.n	8005eda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d28:	4b6f      	ldr	r3, [pc, #444]	@ (8005ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d30:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d32:	4b6d      	ldr	r3, [pc, #436]	@ (8005ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d063      	beq.n	8005e06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d3e:	4b6a      	ldr	r3, [pc, #424]	@ (8005ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	099b      	lsrs	r3, r3, #6
 8005d44:	2200      	movs	r2, #0
 8005d46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d48:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d50:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d52:	2300      	movs	r3, #0
 8005d54:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005d5a:	4622      	mov	r2, r4
 8005d5c:	462b      	mov	r3, r5
 8005d5e:	f04f 0000 	mov.w	r0, #0
 8005d62:	f04f 0100 	mov.w	r1, #0
 8005d66:	0159      	lsls	r1, r3, #5
 8005d68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d6c:	0150      	lsls	r0, r2, #5
 8005d6e:	4602      	mov	r2, r0
 8005d70:	460b      	mov	r3, r1
 8005d72:	4621      	mov	r1, r4
 8005d74:	1a51      	subs	r1, r2, r1
 8005d76:	6139      	str	r1, [r7, #16]
 8005d78:	4629      	mov	r1, r5
 8005d7a:	eb63 0301 	sbc.w	r3, r3, r1
 8005d7e:	617b      	str	r3, [r7, #20]
 8005d80:	f04f 0200 	mov.w	r2, #0
 8005d84:	f04f 0300 	mov.w	r3, #0
 8005d88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d8c:	4659      	mov	r1, fp
 8005d8e:	018b      	lsls	r3, r1, #6
 8005d90:	4651      	mov	r1, sl
 8005d92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d96:	4651      	mov	r1, sl
 8005d98:	018a      	lsls	r2, r1, #6
 8005d9a:	4651      	mov	r1, sl
 8005d9c:	ebb2 0801 	subs.w	r8, r2, r1
 8005da0:	4659      	mov	r1, fp
 8005da2:	eb63 0901 	sbc.w	r9, r3, r1
 8005da6:	f04f 0200 	mov.w	r2, #0
 8005daa:	f04f 0300 	mov.w	r3, #0
 8005dae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005db2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005db6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005dba:	4690      	mov	r8, r2
 8005dbc:	4699      	mov	r9, r3
 8005dbe:	4623      	mov	r3, r4
 8005dc0:	eb18 0303 	adds.w	r3, r8, r3
 8005dc4:	60bb      	str	r3, [r7, #8]
 8005dc6:	462b      	mov	r3, r5
 8005dc8:	eb49 0303 	adc.w	r3, r9, r3
 8005dcc:	60fb      	str	r3, [r7, #12]
 8005dce:	f04f 0200 	mov.w	r2, #0
 8005dd2:	f04f 0300 	mov.w	r3, #0
 8005dd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005dda:	4629      	mov	r1, r5
 8005ddc:	024b      	lsls	r3, r1, #9
 8005dde:	4621      	mov	r1, r4
 8005de0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005de4:	4621      	mov	r1, r4
 8005de6:	024a      	lsls	r2, r1, #9
 8005de8:	4610      	mov	r0, r2
 8005dea:	4619      	mov	r1, r3
 8005dec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dee:	2200      	movs	r2, #0
 8005df0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005df2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005df4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005df8:	f7fa fa4a 	bl	8000290 <__aeabi_uldivmod>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	460b      	mov	r3, r1
 8005e00:	4613      	mov	r3, r2
 8005e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e04:	e058      	b.n	8005eb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e06:	4b38      	ldr	r3, [pc, #224]	@ (8005ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	099b      	lsrs	r3, r3, #6
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	4618      	mov	r0, r3
 8005e10:	4611      	mov	r1, r2
 8005e12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e16:	623b      	str	r3, [r7, #32]
 8005e18:	2300      	movs	r3, #0
 8005e1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e20:	4642      	mov	r2, r8
 8005e22:	464b      	mov	r3, r9
 8005e24:	f04f 0000 	mov.w	r0, #0
 8005e28:	f04f 0100 	mov.w	r1, #0
 8005e2c:	0159      	lsls	r1, r3, #5
 8005e2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e32:	0150      	lsls	r0, r2, #5
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	4641      	mov	r1, r8
 8005e3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e3e:	4649      	mov	r1, r9
 8005e40:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e44:	f04f 0200 	mov.w	r2, #0
 8005e48:	f04f 0300 	mov.w	r3, #0
 8005e4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e58:	ebb2 040a 	subs.w	r4, r2, sl
 8005e5c:	eb63 050b 	sbc.w	r5, r3, fp
 8005e60:	f04f 0200 	mov.w	r2, #0
 8005e64:	f04f 0300 	mov.w	r3, #0
 8005e68:	00eb      	lsls	r3, r5, #3
 8005e6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e6e:	00e2      	lsls	r2, r4, #3
 8005e70:	4614      	mov	r4, r2
 8005e72:	461d      	mov	r5, r3
 8005e74:	4643      	mov	r3, r8
 8005e76:	18e3      	adds	r3, r4, r3
 8005e78:	603b      	str	r3, [r7, #0]
 8005e7a:	464b      	mov	r3, r9
 8005e7c:	eb45 0303 	adc.w	r3, r5, r3
 8005e80:	607b      	str	r3, [r7, #4]
 8005e82:	f04f 0200 	mov.w	r2, #0
 8005e86:	f04f 0300 	mov.w	r3, #0
 8005e8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e8e:	4629      	mov	r1, r5
 8005e90:	028b      	lsls	r3, r1, #10
 8005e92:	4621      	mov	r1, r4
 8005e94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e98:	4621      	mov	r1, r4
 8005e9a:	028a      	lsls	r2, r1, #10
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	61bb      	str	r3, [r7, #24]
 8005ea6:	61fa      	str	r2, [r7, #28]
 8005ea8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005eac:	f7fa f9f0 	bl	8000290 <__aeabi_uldivmod>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8005ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	0c1b      	lsrs	r3, r3, #16
 8005ebe:	f003 0303 	and.w	r3, r3, #3
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	005b      	lsls	r3, r3, #1
 8005ec6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005ec8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005eca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ed2:	e002      	b.n	8005eda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ed4:	4b05      	ldr	r3, [pc, #20]	@ (8005eec <HAL_RCC_GetSysClockFreq+0x204>)
 8005ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ed8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005eda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3750      	adds	r7, #80	@ 0x50
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ee6:	bf00      	nop
 8005ee8:	40023800 	.word	0x40023800
 8005eec:	00f42400 	.word	0x00f42400
 8005ef0:	007a1200 	.word	0x007a1200

08005ef4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005efc:	2300      	movs	r3, #0
 8005efe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005f00:	2300      	movs	r3, #0
 8005f02:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d10b      	bne.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d105      	bne.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d075      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005f28:	4b91      	ldr	r3, [pc, #580]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f2e:	f7fe fc91 	bl	8004854 <HAL_GetTick>
 8005f32:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f34:	e008      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005f36:	f7fe fc8d 	bl	8004854 <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d901      	bls.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e189      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f48:	4b8a      	ldr	r3, [pc, #552]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1f0      	bne.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d009      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	019a      	lsls	r2, r3, #6
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	071b      	lsls	r3, r3, #28
 8005f6c:	4981      	ldr	r1, [pc, #516]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0302 	and.w	r3, r3, #2
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d01f      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f80:	4b7c      	ldr	r3, [pc, #496]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f86:	0f1b      	lsrs	r3, r3, #28
 8005f88:	f003 0307 	and.w	r3, r3, #7
 8005f8c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	019a      	lsls	r2, r3, #6
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	061b      	lsls	r3, r3, #24
 8005f9a:	431a      	orrs	r2, r3
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	071b      	lsls	r3, r3, #28
 8005fa0:	4974      	ldr	r1, [pc, #464]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005fa8:	4b72      	ldr	r3, [pc, #456]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005faa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fae:	f023 021f 	bic.w	r2, r3, #31
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	69db      	ldr	r3, [r3, #28]
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	496e      	ldr	r1, [pc, #440]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00d      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	019a      	lsls	r2, r3, #6
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	061b      	lsls	r3, r3, #24
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	071b      	lsls	r3, r3, #28
 8005fe0:	4964      	ldr	r1, [pc, #400]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005fe8:	4b61      	ldr	r3, [pc, #388]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005fea:	2201      	movs	r2, #1
 8005fec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005fee:	f7fe fc31 	bl	8004854 <HAL_GetTick>
 8005ff2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ff4:	e008      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005ff6:	f7fe fc2d 	bl	8004854 <HAL_GetTick>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	2b02      	cmp	r3, #2
 8006002:	d901      	bls.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	e129      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006008:	4b5a      	ldr	r3, [pc, #360]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d0f0      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0304 	and.w	r3, r3, #4
 800601c:	2b00      	cmp	r3, #0
 800601e:	d105      	bne.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006028:	2b00      	cmp	r3, #0
 800602a:	d079      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800602c:	4b52      	ldr	r3, [pc, #328]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800602e:	2200      	movs	r2, #0
 8006030:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006032:	f7fe fc0f 	bl	8004854 <HAL_GetTick>
 8006036:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006038:	e008      	b.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800603a:	f7fe fc0b 	bl	8004854 <HAL_GetTick>
 800603e:	4602      	mov	r2, r0
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	2b02      	cmp	r3, #2
 8006046:	d901      	bls.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e107      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800604c:	4b49      	ldr	r3, [pc, #292]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006054:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006058:	d0ef      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0304 	and.w	r3, r3, #4
 8006062:	2b00      	cmp	r3, #0
 8006064:	d020      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006066:	4b43      	ldr	r3, [pc, #268]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800606c:	0f1b      	lsrs	r3, r3, #28
 800606e:	f003 0307 	and.w	r3, r3, #7
 8006072:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	019a      	lsls	r2, r3, #6
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	061b      	lsls	r3, r3, #24
 8006080:	431a      	orrs	r2, r3
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	071b      	lsls	r3, r3, #28
 8006086:	493b      	ldr	r1, [pc, #236]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006088:	4313      	orrs	r3, r2
 800608a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800608e:	4b39      	ldr	r3, [pc, #228]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006090:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006094:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	3b01      	subs	r3, #1
 800609e:	021b      	lsls	r3, r3, #8
 80060a0:	4934      	ldr	r1, [pc, #208]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0308 	and.w	r3, r3, #8
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d01e      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80060b4:	4b2f      	ldr	r3, [pc, #188]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060ba:	0e1b      	lsrs	r3, r3, #24
 80060bc:	f003 030f 	and.w	r3, r3, #15
 80060c0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	019a      	lsls	r2, r3, #6
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	061b      	lsls	r3, r3, #24
 80060cc:	431a      	orrs	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	071b      	lsls	r3, r3, #28
 80060d4:	4927      	ldr	r1, [pc, #156]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80060dc:	4b25      	ldr	r3, [pc, #148]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060e2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ea:	4922      	ldr	r1, [pc, #136]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060ec:	4313      	orrs	r3, r2
 80060ee:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80060f2:	4b21      	ldr	r3, [pc, #132]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80060f4:	2201      	movs	r2, #1
 80060f6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80060f8:	f7fe fbac 	bl	8004854 <HAL_GetTick>
 80060fc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80060fe:	e008      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006100:	f7fe fba8 	bl	8004854 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b02      	cmp	r3, #2
 800610c:	d901      	bls.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e0a4      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006112:	4b18      	ldr	r3, [pc, #96]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800611a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800611e:	d1ef      	bne.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0320 	and.w	r3, r3, #32
 8006128:	2b00      	cmp	r3, #0
 800612a:	f000 808b 	beq.w	8006244 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800612e:	2300      	movs	r3, #0
 8006130:	60fb      	str	r3, [r7, #12]
 8006132:	4b10      	ldr	r3, [pc, #64]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006136:	4a0f      	ldr	r2, [pc, #60]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006138:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800613c:	6413      	str	r3, [r2, #64]	@ 0x40
 800613e:	4b0d      	ldr	r3, [pc, #52]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006142:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006146:	60fb      	str	r3, [r7, #12]
 8006148:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800614a:	4b0c      	ldr	r3, [pc, #48]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a0b      	ldr	r2, [pc, #44]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006150:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006154:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006156:	f7fe fb7d 	bl	8004854 <HAL_GetTick>
 800615a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800615c:	e010      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800615e:	f7fe fb79 	bl	8004854 <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	2b02      	cmp	r3, #2
 800616a:	d909      	bls.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e075      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006170:	42470068 	.word	0x42470068
 8006174:	40023800 	.word	0x40023800
 8006178:	42470070 	.word	0x42470070
 800617c:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006180:	4b38      	ldr	r3, [pc, #224]	@ (8006264 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006188:	2b00      	cmp	r3, #0
 800618a:	d0e8      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800618c:	4b36      	ldr	r3, [pc, #216]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800618e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006190:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006194:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d02f      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x308>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d028      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061aa:	4b2f      	ldr	r3, [pc, #188]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061b2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061b4:	4b2d      	ldr	r3, [pc, #180]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80061b6:	2201      	movs	r2, #1
 80061b8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061ba:	4b2c      	ldr	r3, [pc, #176]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80061bc:	2200      	movs	r2, #0
 80061be:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80061c0:	4a29      	ldr	r2, [pc, #164]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80061c6:	4b28      	ldr	r3, [pc, #160]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061ca:	f003 0301 	and.w	r3, r3, #1
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d114      	bne.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80061d2:	f7fe fb3f 	bl	8004854 <HAL_GetTick>
 80061d6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061d8:	e00a      	b.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061da:	f7fe fb3b 	bl	8004854 <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d901      	bls.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e035      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061f0:	4b1d      	ldr	r3, [pc, #116]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061f4:	f003 0302 	and.w	r3, r3, #2
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d0ee      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006200:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006204:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006208:	d10d      	bne.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800620a:	4b17      	ldr	r3, [pc, #92]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006216:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800621a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800621e:	4912      	ldr	r1, [pc, #72]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006220:	4313      	orrs	r3, r2
 8006222:	608b      	str	r3, [r1, #8]
 8006224:	e005      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006226:	4b10      	ldr	r3, [pc, #64]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	4a0f      	ldr	r2, [pc, #60]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800622c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006230:	6093      	str	r3, [r2, #8]
 8006232:	4b0d      	ldr	r3, [pc, #52]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006234:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800623a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800623e:	490a      	ldr	r1, [pc, #40]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006240:	4313      	orrs	r3, r2
 8006242:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0310 	and.w	r3, r3, #16
 800624c:	2b00      	cmp	r3, #0
 800624e:	d004      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8006256:	4b06      	ldr	r3, [pc, #24]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006258:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3718      	adds	r7, #24
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	40007000 	.word	0x40007000
 8006268:	40023800 	.word	0x40023800
 800626c:	42470e40 	.word	0x42470e40
 8006270:	424711e0 	.word	0x424711e0

08006274 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d101      	bne.n	8006286 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e073      	b.n	800636e <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	7f5b      	ldrb	r3, [r3, #29]
 800628a:	b2db      	uxtb	r3, r3
 800628c:	2b00      	cmp	r3, #0
 800628e:	d105      	bne.n	800629c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f7fe f84e 	bl	8004338 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2202      	movs	r2, #2
 80062a0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	f003 0310 	and.w	r3, r3, #16
 80062ac:	2b10      	cmp	r3, #16
 80062ae:	d055      	beq.n	800635c <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	22ca      	movs	r2, #202	@ 0xca
 80062b6:	625a      	str	r2, [r3, #36]	@ 0x24
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2253      	movs	r2, #83	@ 0x53
 80062be:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 f87f 	bl	80063c4 <RTC_EnterInitMode>
 80062c6:	4603      	mov	r3, r0
 80062c8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80062ca:	7bfb      	ldrb	r3, [r7, #15]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d12c      	bne.n	800632a <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	6812      	ldr	r2, [r2, #0]
 80062da:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80062de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062e2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6899      	ldr	r1, [r3, #8]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685a      	ldr	r2, [r3, #4]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	431a      	orrs	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	695b      	ldr	r3, [r3, #20]
 80062f8:	431a      	orrs	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	430a      	orrs	r2, r1
 8006300:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	68d2      	ldr	r2, [r2, #12]
 800630a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6919      	ldr	r1, [r3, #16]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	041a      	lsls	r2, r3, #16
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	430a      	orrs	r2, r1
 800631e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 f886 	bl	8006432 <RTC_ExitInitMode>
 8006326:	4603      	mov	r3, r0
 8006328:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800632a:	7bfb      	ldrb	r3, [r7, #15]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d110      	bne.n	8006352 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800633e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	699a      	ldr	r2, [r3, #24]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	430a      	orrs	r2, r1
 8006350:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	22ff      	movs	r2, #255	@ 0xff
 8006358:	625a      	str	r2, [r3, #36]	@ 0x24
 800635a:	e001      	b.n	8006360 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800635c:	2300      	movs	r3, #0
 800635e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006360:	7bfb      	ldrb	r3, [r7, #15]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d102      	bne.n	800636c <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800636c:	7bfb      	ldrb	r3, [r7, #15]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
	...

08006378 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006380:	2300      	movs	r3, #0
 8006382:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a0d      	ldr	r2, [pc, #52]	@ (80063c0 <HAL_RTC_WaitForSynchro+0x48>)
 800638a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800638c:	f7fe fa62 	bl	8004854 <HAL_GetTick>
 8006390:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006392:	e009      	b.n	80063a8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006394:	f7fe fa5e 	bl	8004854 <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80063a2:	d901      	bls.n	80063a8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80063a4:	2303      	movs	r3, #3
 80063a6:	e007      	b.n	80063b8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	f003 0320 	and.w	r3, r3, #32
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d0ee      	beq.n	8006394 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	00017f5f 	.word	0x00017f5f

080063c4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80063cc:	2300      	movs	r3, #0
 80063ce:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80063d0:	2300      	movs	r3, #0
 80063d2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d122      	bne.n	8006428 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68da      	ldr	r2, [r3, #12]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80063f0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80063f2:	f7fe fa2f 	bl	8004854 <HAL_GetTick>
 80063f6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80063f8:	e00c      	b.n	8006414 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80063fa:	f7fe fa2b 	bl	8004854 <HAL_GetTick>
 80063fe:	4602      	mov	r2, r0
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006408:	d904      	bls.n	8006414 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2204      	movs	r2, #4
 800640e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800641e:	2b00      	cmp	r3, #0
 8006420:	d102      	bne.n	8006428 <RTC_EnterInitMode+0x64>
 8006422:	7bfb      	ldrb	r3, [r7, #15]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d1e8      	bne.n	80063fa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006428:	7bfb      	ldrb	r3, [r7, #15]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b084      	sub	sp, #16
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800643a:	2300      	movs	r3, #0
 800643c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68da      	ldr	r2, [r3, #12]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800644c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	f003 0320 	and.w	r3, r3, #32
 8006458:	2b00      	cmp	r3, #0
 800645a:	d10a      	bne.n	8006472 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f7ff ff8b 	bl	8006378 <HAL_RTC_WaitForSynchro>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d004      	beq.n	8006472 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2204      	movs	r2, #4
 800646c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006472:	7bfb      	ldrb	r3, [r7, #15]
}
 8006474:	4618      	mov	r0, r3
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d101      	bne.n	800648e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e07b      	b.n	8006586 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006492:	2b00      	cmp	r3, #0
 8006494:	d108      	bne.n	80064a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800649e:	d009      	beq.n	80064b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	61da      	str	r2, [r3, #28]
 80064a6:	e005      	b.n	80064b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d106      	bne.n	80064d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f7fd ff5c 	bl	800438c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2202      	movs	r2, #2
 80064d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80064fc:	431a      	orrs	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006506:	431a      	orrs	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	f003 0302 	and.w	r3, r3, #2
 8006510:	431a      	orrs	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	431a      	orrs	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006524:	431a      	orrs	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800652e:	431a      	orrs	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a1b      	ldr	r3, [r3, #32]
 8006534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006538:	ea42 0103 	orr.w	r1, r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006540:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	430a      	orrs	r2, r1
 800654a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	0c1b      	lsrs	r3, r3, #16
 8006552:	f003 0104 	and.w	r1, r3, #4
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800655a:	f003 0210 	and.w	r2, r3, #16
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	430a      	orrs	r2, r1
 8006564:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	69da      	ldr	r2, [r3, #28]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006574:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3708      	adds	r7, #8
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b088      	sub	sp, #32
 8006592:	af00      	add	r7, sp, #0
 8006594:	60f8      	str	r0, [r7, #12]
 8006596:	60b9      	str	r1, [r7, #8]
 8006598:	603b      	str	r3, [r7, #0]
 800659a:	4613      	mov	r3, r2
 800659c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800659e:	f7fe f959 	bl	8004854 <HAL_GetTick>
 80065a2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80065a4:	88fb      	ldrh	r3, [r7, #6]
 80065a6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d001      	beq.n	80065b8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80065b4:	2302      	movs	r3, #2
 80065b6:	e12a      	b.n	800680e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d002      	beq.n	80065c4 <HAL_SPI_Transmit+0x36>
 80065be:	88fb      	ldrh	r3, [r7, #6]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d101      	bne.n	80065c8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e122      	b.n	800680e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d101      	bne.n	80065d6 <HAL_SPI_Transmit+0x48>
 80065d2:	2302      	movs	r3, #2
 80065d4:	e11b      	b.n	800680e <HAL_SPI_Transmit+0x280>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2203      	movs	r2, #3
 80065e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	88fa      	ldrh	r2, [r7, #6]
 80065f6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	88fa      	ldrh	r2, [r7, #6]
 80065fc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006624:	d10f      	bne.n	8006646 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006634:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006644:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006650:	2b40      	cmp	r3, #64	@ 0x40
 8006652:	d007      	beq.n	8006664 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006662:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800666c:	d152      	bne.n	8006714 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d002      	beq.n	800667c <HAL_SPI_Transmit+0xee>
 8006676:	8b7b      	ldrh	r3, [r7, #26]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d145      	bne.n	8006708 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006680:	881a      	ldrh	r2, [r3, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800668c:	1c9a      	adds	r2, r3, #2
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006696:	b29b      	uxth	r3, r3
 8006698:	3b01      	subs	r3, #1
 800669a:	b29a      	uxth	r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80066a0:	e032      	b.n	8006708 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	f003 0302 	and.w	r3, r3, #2
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d112      	bne.n	80066d6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066b4:	881a      	ldrh	r2, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066c0:	1c9a      	adds	r2, r3, #2
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	3b01      	subs	r3, #1
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80066d4:	e018      	b.n	8006708 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066d6:	f7fe f8bd 	bl	8004854 <HAL_GetTick>
 80066da:	4602      	mov	r2, r0
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	683a      	ldr	r2, [r7, #0]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d803      	bhi.n	80066ee <HAL_SPI_Transmit+0x160>
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ec:	d102      	bne.n	80066f4 <HAL_SPI_Transmit+0x166>
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d109      	bne.n	8006708 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	e082      	b.n	800680e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800670c:	b29b      	uxth	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1c7      	bne.n	80066a2 <HAL_SPI_Transmit+0x114>
 8006712:	e053      	b.n	80067bc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d002      	beq.n	8006722 <HAL_SPI_Transmit+0x194>
 800671c:	8b7b      	ldrh	r3, [r7, #26]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d147      	bne.n	80067b2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	330c      	adds	r3, #12
 800672c:	7812      	ldrb	r2, [r2, #0]
 800672e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800673e:	b29b      	uxth	r3, r3
 8006740:	3b01      	subs	r3, #1
 8006742:	b29a      	uxth	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006748:	e033      	b.n	80067b2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	f003 0302 	and.w	r3, r3, #2
 8006754:	2b02      	cmp	r3, #2
 8006756:	d113      	bne.n	8006780 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	330c      	adds	r3, #12
 8006762:	7812      	ldrb	r2, [r2, #0]
 8006764:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800676a:	1c5a      	adds	r2, r3, #1
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006774:	b29b      	uxth	r3, r3
 8006776:	3b01      	subs	r3, #1
 8006778:	b29a      	uxth	r2, r3
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800677e:	e018      	b.n	80067b2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006780:	f7fe f868 	bl	8004854 <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	429a      	cmp	r2, r3
 800678e:	d803      	bhi.n	8006798 <HAL_SPI_Transmit+0x20a>
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006796:	d102      	bne.n	800679e <HAL_SPI_Transmit+0x210>
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d109      	bne.n	80067b2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e02d      	b.n	800680e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1c6      	bne.n	800674a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067bc:	69fa      	ldr	r2, [r7, #28]
 80067be:	6839      	ldr	r1, [r7, #0]
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f000 f9f9 	bl	8006bb8 <SPI_EndRxTxTransaction>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d002      	beq.n	80067d2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2220      	movs	r2, #32
 80067d0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d10a      	bne.n	80067f0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067da:	2300      	movs	r3, #0
 80067dc:	617b      	str	r3, [r7, #20]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	617b      	str	r3, [r7, #20]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	617b      	str	r3, [r7, #20]
 80067ee:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006804:	2b00      	cmp	r3, #0
 8006806:	d001      	beq.n	800680c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e000      	b.n	800680e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800680c:	2300      	movs	r3, #0
  }
}
 800680e:	4618      	mov	r0, r3
 8006810:	3720      	adds	r7, #32
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
	...

08006818 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	4613      	mov	r3, r2
 8006824:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b01      	cmp	r3, #1
 8006830:	d001      	beq.n	8006836 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8006832:	2302      	movs	r3, #2
 8006834:	e097      	b.n	8006966 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d002      	beq.n	8006842 <HAL_SPI_Transmit_DMA+0x2a>
 800683c:	88fb      	ldrh	r3, [r7, #6]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d101      	bne.n	8006846 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e08f      	b.n	8006966 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800684c:	2b01      	cmp	r3, #1
 800684e:	d101      	bne.n	8006854 <HAL_SPI_Transmit_DMA+0x3c>
 8006850:	2302      	movs	r3, #2
 8006852:	e088      	b.n	8006966 <HAL_SPI_Transmit_DMA+0x14e>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2203      	movs	r2, #3
 8006860:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	88fa      	ldrh	r2, [r7, #6]
 8006874:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	88fa      	ldrh	r2, [r7, #6]
 800687a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068a2:	d10f      	bne.n	80068c4 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80068c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068c8:	4a29      	ldr	r2, [pc, #164]	@ (8006970 <HAL_SPI_Transmit_DMA+0x158>)
 80068ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068d0:	4a28      	ldr	r2, [pc, #160]	@ (8006974 <HAL_SPI_Transmit_DMA+0x15c>)
 80068d2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068d8:	4a27      	ldr	r2, [pc, #156]	@ (8006978 <HAL_SPI_Transmit_DMA+0x160>)
 80068da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068e0:	2200      	movs	r2, #0
 80068e2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ec:	4619      	mov	r1, r3
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	330c      	adds	r3, #12
 80068f4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068fa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80068fc:	f7fe f99a 	bl	8004c34 <HAL_DMA_Start_IT>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00b      	beq.n	800691e <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800690a:	f043 0210 	orr.w	r2, r3, #16
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e023      	b.n	8006966 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006928:	2b40      	cmp	r3, #64	@ 0x40
 800692a:	d007      	beq.n	800693c <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800693a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	685a      	ldr	r2, [r3, #4]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f042 0220 	orr.w	r2, r2, #32
 8006952:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	685a      	ldr	r2, [r3, #4]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f042 0202 	orr.w	r2, r2, #2
 8006962:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	08006a4d 	.word	0x08006a4d
 8006974:	080069a5 	.word	0x080069a5
 8006978:	08006a69 	.word	0x08006a69

0800697c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006998:	bf00      	nop
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b086      	sub	sp, #24
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069b0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069b2:	f7fd ff4f 	bl	8004854 <HAL_GetTick>
 80069b6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069c6:	d03b      	beq.n	8006a40 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	685a      	ldr	r2, [r3, #4]
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f022 0220 	bic.w	r2, r2, #32
 80069d6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	685a      	ldr	r2, [r3, #4]
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f022 0202 	bic.w	r2, r2, #2
 80069e6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	2164      	movs	r1, #100	@ 0x64
 80069ec:	6978      	ldr	r0, [r7, #20]
 80069ee:	f000 f8e3 	bl	8006bb8 <SPI_EndRxTxTransaction>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d005      	beq.n	8006a04 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069fc:	f043 0220 	orr.w	r2, r3, #32
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10a      	bne.n	8006a22 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	60fb      	str	r3, [r7, #12]
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	60fb      	str	r3, [r7, #12]
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	60fb      	str	r3, [r7, #12]
 8006a20:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	2200      	movs	r2, #0
 8006a26:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d003      	beq.n	8006a40 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006a38:	6978      	ldr	r0, [r7, #20]
 8006a3a:	f7ff ffa9 	bl	8006990 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006a3e:	e002      	b.n	8006a46 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006a40:	6978      	ldr	r0, [r7, #20]
 8006a42:	f7f9 ffbb 	bl	80009bc <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006a46:	3718      	adds	r7, #24
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a58:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f7ff ff8e 	bl	800697c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006a60:	bf00      	nop
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a74:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f022 0203 	bic.w	r2, r2, #3
 8006a84:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a8a:	f043 0210 	orr.w	r2, r3, #16
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f7ff ff78 	bl	8006990 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006aa0:	bf00      	nop
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b088      	sub	sp, #32
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	603b      	str	r3, [r7, #0]
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ab8:	f7fd fecc 	bl	8004854 <HAL_GetTick>
 8006abc:	4602      	mov	r2, r0
 8006abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac0:	1a9b      	subs	r3, r3, r2
 8006ac2:	683a      	ldr	r2, [r7, #0]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ac8:	f7fd fec4 	bl	8004854 <HAL_GetTick>
 8006acc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006ace:	4b39      	ldr	r3, [pc, #228]	@ (8006bb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	015b      	lsls	r3, r3, #5
 8006ad4:	0d1b      	lsrs	r3, r3, #20
 8006ad6:	69fa      	ldr	r2, [r7, #28]
 8006ad8:	fb02 f303 	mul.w	r3, r2, r3
 8006adc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ade:	e055      	b.n	8006b8c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae6:	d051      	beq.n	8006b8c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ae8:	f7fd feb4 	bl	8004854 <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	69fa      	ldr	r2, [r7, #28]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d902      	bls.n	8006afe <SPI_WaitFlagStateUntilTimeout+0x56>
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d13d      	bne.n	8006b7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	685a      	ldr	r2, [r3, #4]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006b0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b16:	d111      	bne.n	8006b3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b20:	d004      	beq.n	8006b2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b2a:	d107      	bne.n	8006b3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b44:	d10f      	bne.n	8006b66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006b54:	601a      	str	r2, [r3, #0]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006b64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e018      	b.n	8006bac <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d102      	bne.n	8006b86 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8006b80:	2300      	movs	r3, #0
 8006b82:	61fb      	str	r3, [r7, #28]
 8006b84:	e002      	b.n	8006b8c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	689a      	ldr	r2, [r3, #8]
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	4013      	ands	r3, r2
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	bf0c      	ite	eq
 8006b9c:	2301      	moveq	r3, #1
 8006b9e:	2300      	movne	r3, #0
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	79fb      	ldrb	r3, [r7, #7]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d19a      	bne.n	8006ae0 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3720      	adds	r7, #32
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	2000001c 	.word	0x2000001c

08006bb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b088      	sub	sp, #32
 8006bbc:	af02      	add	r7, sp, #8
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	9300      	str	r3, [sp, #0]
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	2102      	movs	r1, #2
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f7ff ff6a 	bl	8006aa8 <SPI_WaitFlagStateUntilTimeout>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d007      	beq.n	8006bea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bde:	f043 0220 	orr.w	r2, r3, #32
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e032      	b.n	8006c50 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006bea:	4b1b      	ldr	r3, [pc, #108]	@ (8006c58 <SPI_EndRxTxTransaction+0xa0>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a1b      	ldr	r2, [pc, #108]	@ (8006c5c <SPI_EndRxTxTransaction+0xa4>)
 8006bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf4:	0d5b      	lsrs	r3, r3, #21
 8006bf6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006bfa:	fb02 f303 	mul.w	r3, r2, r3
 8006bfe:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c08:	d112      	bne.n	8006c30 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	9300      	str	r3, [sp, #0]
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	2200      	movs	r2, #0
 8006c12:	2180      	movs	r1, #128	@ 0x80
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f7ff ff47 	bl	8006aa8 <SPI_WaitFlagStateUntilTimeout>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d016      	beq.n	8006c4e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c24:	f043 0220 	orr.w	r2, r3, #32
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e00f      	b.n	8006c50 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00a      	beq.n	8006c4c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c46:	2b80      	cmp	r3, #128	@ 0x80
 8006c48:	d0f2      	beq.n	8006c30 <SPI_EndRxTxTransaction+0x78>
 8006c4a:	e000      	b.n	8006c4e <SPI_EndRxTxTransaction+0x96>
        break;
 8006c4c:	bf00      	nop
  }

  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3718      	adds	r7, #24
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	2000001c 	.word	0x2000001c
 8006c5c:	165e9f81 	.word	0x165e9f81

08006c60 <srand>:
 8006c60:	b538      	push	{r3, r4, r5, lr}
 8006c62:	4b10      	ldr	r3, [pc, #64]	@ (8006ca4 <srand+0x44>)
 8006c64:	681d      	ldr	r5, [r3, #0]
 8006c66:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006c68:	4604      	mov	r4, r0
 8006c6a:	b9b3      	cbnz	r3, 8006c9a <srand+0x3a>
 8006c6c:	2018      	movs	r0, #24
 8006c6e:	f000 fa9d 	bl	80071ac <malloc>
 8006c72:	4602      	mov	r2, r0
 8006c74:	6328      	str	r0, [r5, #48]	@ 0x30
 8006c76:	b920      	cbnz	r0, 8006c82 <srand+0x22>
 8006c78:	4b0b      	ldr	r3, [pc, #44]	@ (8006ca8 <srand+0x48>)
 8006c7a:	480c      	ldr	r0, [pc, #48]	@ (8006cac <srand+0x4c>)
 8006c7c:	2146      	movs	r1, #70	@ 0x46
 8006c7e:	f000 fa2d 	bl	80070dc <__assert_func>
 8006c82:	490b      	ldr	r1, [pc, #44]	@ (8006cb0 <srand+0x50>)
 8006c84:	4b0b      	ldr	r3, [pc, #44]	@ (8006cb4 <srand+0x54>)
 8006c86:	e9c0 1300 	strd	r1, r3, [r0]
 8006c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8006cb8 <srand+0x58>)
 8006c8c:	6083      	str	r3, [r0, #8]
 8006c8e:	230b      	movs	r3, #11
 8006c90:	8183      	strh	r3, [r0, #12]
 8006c92:	2100      	movs	r1, #0
 8006c94:	2001      	movs	r0, #1
 8006c96:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006c9a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	611c      	str	r4, [r3, #16]
 8006ca0:	615a      	str	r2, [r3, #20]
 8006ca2:	bd38      	pop	{r3, r4, r5, pc}
 8006ca4:	20000034 	.word	0x20000034
 8006ca8:	0800aa98 	.word	0x0800aa98
 8006cac:	0800aaaf 	.word	0x0800aaaf
 8006cb0:	abcd330e 	.word	0xabcd330e
 8006cb4:	e66d1234 	.word	0xe66d1234
 8006cb8:	0005deec 	.word	0x0005deec

08006cbc <rand>:
 8006cbc:	4b16      	ldr	r3, [pc, #88]	@ (8006d18 <rand+0x5c>)
 8006cbe:	b510      	push	{r4, lr}
 8006cc0:	681c      	ldr	r4, [r3, #0]
 8006cc2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006cc4:	b9b3      	cbnz	r3, 8006cf4 <rand+0x38>
 8006cc6:	2018      	movs	r0, #24
 8006cc8:	f000 fa70 	bl	80071ac <malloc>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	6320      	str	r0, [r4, #48]	@ 0x30
 8006cd0:	b920      	cbnz	r0, 8006cdc <rand+0x20>
 8006cd2:	4b12      	ldr	r3, [pc, #72]	@ (8006d1c <rand+0x60>)
 8006cd4:	4812      	ldr	r0, [pc, #72]	@ (8006d20 <rand+0x64>)
 8006cd6:	2152      	movs	r1, #82	@ 0x52
 8006cd8:	f000 fa00 	bl	80070dc <__assert_func>
 8006cdc:	4911      	ldr	r1, [pc, #68]	@ (8006d24 <rand+0x68>)
 8006cde:	4b12      	ldr	r3, [pc, #72]	@ (8006d28 <rand+0x6c>)
 8006ce0:	e9c0 1300 	strd	r1, r3, [r0]
 8006ce4:	4b11      	ldr	r3, [pc, #68]	@ (8006d2c <rand+0x70>)
 8006ce6:	6083      	str	r3, [r0, #8]
 8006ce8:	230b      	movs	r3, #11
 8006cea:	8183      	strh	r3, [r0, #12]
 8006cec:	2100      	movs	r1, #0
 8006cee:	2001      	movs	r0, #1
 8006cf0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006cf4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006cf6:	480e      	ldr	r0, [pc, #56]	@ (8006d30 <rand+0x74>)
 8006cf8:	690b      	ldr	r3, [r1, #16]
 8006cfa:	694c      	ldr	r4, [r1, #20]
 8006cfc:	4a0d      	ldr	r2, [pc, #52]	@ (8006d34 <rand+0x78>)
 8006cfe:	4358      	muls	r0, r3
 8006d00:	fb02 0004 	mla	r0, r2, r4, r0
 8006d04:	fba3 3202 	umull	r3, r2, r3, r2
 8006d08:	3301      	adds	r3, #1
 8006d0a:	eb40 0002 	adc.w	r0, r0, r2
 8006d0e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8006d12:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8006d16:	bd10      	pop	{r4, pc}
 8006d18:	20000034 	.word	0x20000034
 8006d1c:	0800aa98 	.word	0x0800aa98
 8006d20:	0800aaaf 	.word	0x0800aaaf
 8006d24:	abcd330e 	.word	0xabcd330e
 8006d28:	e66d1234 	.word	0xe66d1234
 8006d2c:	0005deec 	.word	0x0005deec
 8006d30:	5851f42d 	.word	0x5851f42d
 8006d34:	4c957f2d 	.word	0x4c957f2d

08006d38 <std>:
 8006d38:	2300      	movs	r3, #0
 8006d3a:	b510      	push	{r4, lr}
 8006d3c:	4604      	mov	r4, r0
 8006d3e:	e9c0 3300 	strd	r3, r3, [r0]
 8006d42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d46:	6083      	str	r3, [r0, #8]
 8006d48:	8181      	strh	r1, [r0, #12]
 8006d4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006d4c:	81c2      	strh	r2, [r0, #14]
 8006d4e:	6183      	str	r3, [r0, #24]
 8006d50:	4619      	mov	r1, r3
 8006d52:	2208      	movs	r2, #8
 8006d54:	305c      	adds	r0, #92	@ 0x5c
 8006d56:	f000 f916 	bl	8006f86 <memset>
 8006d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d90 <std+0x58>)
 8006d5c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d94 <std+0x5c>)
 8006d60:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006d62:	4b0d      	ldr	r3, [pc, #52]	@ (8006d98 <std+0x60>)
 8006d64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006d66:	4b0d      	ldr	r3, [pc, #52]	@ (8006d9c <std+0x64>)
 8006d68:	6323      	str	r3, [r4, #48]	@ 0x30
 8006d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006da0 <std+0x68>)
 8006d6c:	6224      	str	r4, [r4, #32]
 8006d6e:	429c      	cmp	r4, r3
 8006d70:	d006      	beq.n	8006d80 <std+0x48>
 8006d72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006d76:	4294      	cmp	r4, r2
 8006d78:	d002      	beq.n	8006d80 <std+0x48>
 8006d7a:	33d0      	adds	r3, #208	@ 0xd0
 8006d7c:	429c      	cmp	r4, r3
 8006d7e:	d105      	bne.n	8006d8c <std+0x54>
 8006d80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d88:	f000 b9a4 	b.w	80070d4 <__retarget_lock_init_recursive>
 8006d8c:	bd10      	pop	{r4, pc}
 8006d8e:	bf00      	nop
 8006d90:	08006f01 	.word	0x08006f01
 8006d94:	08006f23 	.word	0x08006f23
 8006d98:	08006f5b 	.word	0x08006f5b
 8006d9c:	08006f7f 	.word	0x08006f7f
 8006da0:	20000500 	.word	0x20000500

08006da4 <stdio_exit_handler>:
 8006da4:	4a02      	ldr	r2, [pc, #8]	@ (8006db0 <stdio_exit_handler+0xc>)
 8006da6:	4903      	ldr	r1, [pc, #12]	@ (8006db4 <stdio_exit_handler+0x10>)
 8006da8:	4803      	ldr	r0, [pc, #12]	@ (8006db8 <stdio_exit_handler+0x14>)
 8006daa:	f000 b869 	b.w	8006e80 <_fwalk_sglue>
 8006dae:	bf00      	nop
 8006db0:	20000028 	.word	0x20000028
 8006db4:	080079e9 	.word	0x080079e9
 8006db8:	20000038 	.word	0x20000038

08006dbc <cleanup_stdio>:
 8006dbc:	6841      	ldr	r1, [r0, #4]
 8006dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8006df0 <cleanup_stdio+0x34>)
 8006dc0:	4299      	cmp	r1, r3
 8006dc2:	b510      	push	{r4, lr}
 8006dc4:	4604      	mov	r4, r0
 8006dc6:	d001      	beq.n	8006dcc <cleanup_stdio+0x10>
 8006dc8:	f000 fe0e 	bl	80079e8 <_fflush_r>
 8006dcc:	68a1      	ldr	r1, [r4, #8]
 8006dce:	4b09      	ldr	r3, [pc, #36]	@ (8006df4 <cleanup_stdio+0x38>)
 8006dd0:	4299      	cmp	r1, r3
 8006dd2:	d002      	beq.n	8006dda <cleanup_stdio+0x1e>
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	f000 fe07 	bl	80079e8 <_fflush_r>
 8006dda:	68e1      	ldr	r1, [r4, #12]
 8006ddc:	4b06      	ldr	r3, [pc, #24]	@ (8006df8 <cleanup_stdio+0x3c>)
 8006dde:	4299      	cmp	r1, r3
 8006de0:	d004      	beq.n	8006dec <cleanup_stdio+0x30>
 8006de2:	4620      	mov	r0, r4
 8006de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006de8:	f000 bdfe 	b.w	80079e8 <_fflush_r>
 8006dec:	bd10      	pop	{r4, pc}
 8006dee:	bf00      	nop
 8006df0:	20000500 	.word	0x20000500
 8006df4:	20000568 	.word	0x20000568
 8006df8:	200005d0 	.word	0x200005d0

08006dfc <global_stdio_init.part.0>:
 8006dfc:	b510      	push	{r4, lr}
 8006dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8006e2c <global_stdio_init.part.0+0x30>)
 8006e00:	4c0b      	ldr	r4, [pc, #44]	@ (8006e30 <global_stdio_init.part.0+0x34>)
 8006e02:	4a0c      	ldr	r2, [pc, #48]	@ (8006e34 <global_stdio_init.part.0+0x38>)
 8006e04:	601a      	str	r2, [r3, #0]
 8006e06:	4620      	mov	r0, r4
 8006e08:	2200      	movs	r2, #0
 8006e0a:	2104      	movs	r1, #4
 8006e0c:	f7ff ff94 	bl	8006d38 <std>
 8006e10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e14:	2201      	movs	r2, #1
 8006e16:	2109      	movs	r1, #9
 8006e18:	f7ff ff8e 	bl	8006d38 <std>
 8006e1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e20:	2202      	movs	r2, #2
 8006e22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e26:	2112      	movs	r1, #18
 8006e28:	f7ff bf86 	b.w	8006d38 <std>
 8006e2c:	20000638 	.word	0x20000638
 8006e30:	20000500 	.word	0x20000500
 8006e34:	08006da5 	.word	0x08006da5

08006e38 <__sfp_lock_acquire>:
 8006e38:	4801      	ldr	r0, [pc, #4]	@ (8006e40 <__sfp_lock_acquire+0x8>)
 8006e3a:	f000 b94c 	b.w	80070d6 <__retarget_lock_acquire_recursive>
 8006e3e:	bf00      	nop
 8006e40:	20000641 	.word	0x20000641

08006e44 <__sfp_lock_release>:
 8006e44:	4801      	ldr	r0, [pc, #4]	@ (8006e4c <__sfp_lock_release+0x8>)
 8006e46:	f000 b947 	b.w	80070d8 <__retarget_lock_release_recursive>
 8006e4a:	bf00      	nop
 8006e4c:	20000641 	.word	0x20000641

08006e50 <__sinit>:
 8006e50:	b510      	push	{r4, lr}
 8006e52:	4604      	mov	r4, r0
 8006e54:	f7ff fff0 	bl	8006e38 <__sfp_lock_acquire>
 8006e58:	6a23      	ldr	r3, [r4, #32]
 8006e5a:	b11b      	cbz	r3, 8006e64 <__sinit+0x14>
 8006e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e60:	f7ff bff0 	b.w	8006e44 <__sfp_lock_release>
 8006e64:	4b04      	ldr	r3, [pc, #16]	@ (8006e78 <__sinit+0x28>)
 8006e66:	6223      	str	r3, [r4, #32]
 8006e68:	4b04      	ldr	r3, [pc, #16]	@ (8006e7c <__sinit+0x2c>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1f5      	bne.n	8006e5c <__sinit+0xc>
 8006e70:	f7ff ffc4 	bl	8006dfc <global_stdio_init.part.0>
 8006e74:	e7f2      	b.n	8006e5c <__sinit+0xc>
 8006e76:	bf00      	nop
 8006e78:	08006dbd 	.word	0x08006dbd
 8006e7c:	20000638 	.word	0x20000638

08006e80 <_fwalk_sglue>:
 8006e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e84:	4607      	mov	r7, r0
 8006e86:	4688      	mov	r8, r1
 8006e88:	4614      	mov	r4, r2
 8006e8a:	2600      	movs	r6, #0
 8006e8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e90:	f1b9 0901 	subs.w	r9, r9, #1
 8006e94:	d505      	bpl.n	8006ea2 <_fwalk_sglue+0x22>
 8006e96:	6824      	ldr	r4, [r4, #0]
 8006e98:	2c00      	cmp	r4, #0
 8006e9a:	d1f7      	bne.n	8006e8c <_fwalk_sglue+0xc>
 8006e9c:	4630      	mov	r0, r6
 8006e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ea2:	89ab      	ldrh	r3, [r5, #12]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d907      	bls.n	8006eb8 <_fwalk_sglue+0x38>
 8006ea8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006eac:	3301      	adds	r3, #1
 8006eae:	d003      	beq.n	8006eb8 <_fwalk_sglue+0x38>
 8006eb0:	4629      	mov	r1, r5
 8006eb2:	4638      	mov	r0, r7
 8006eb4:	47c0      	blx	r8
 8006eb6:	4306      	orrs	r6, r0
 8006eb8:	3568      	adds	r5, #104	@ 0x68
 8006eba:	e7e9      	b.n	8006e90 <_fwalk_sglue+0x10>

08006ebc <siprintf>:
 8006ebc:	b40e      	push	{r1, r2, r3}
 8006ebe:	b510      	push	{r4, lr}
 8006ec0:	b09d      	sub	sp, #116	@ 0x74
 8006ec2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006ec4:	9002      	str	r0, [sp, #8]
 8006ec6:	9006      	str	r0, [sp, #24]
 8006ec8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006ecc:	480a      	ldr	r0, [pc, #40]	@ (8006ef8 <siprintf+0x3c>)
 8006ece:	9107      	str	r1, [sp, #28]
 8006ed0:	9104      	str	r1, [sp, #16]
 8006ed2:	490a      	ldr	r1, [pc, #40]	@ (8006efc <siprintf+0x40>)
 8006ed4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ed8:	9105      	str	r1, [sp, #20]
 8006eda:	2400      	movs	r4, #0
 8006edc:	a902      	add	r1, sp, #8
 8006ede:	6800      	ldr	r0, [r0, #0]
 8006ee0:	9301      	str	r3, [sp, #4]
 8006ee2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006ee4:	f000 fa74 	bl	80073d0 <_svfiprintf_r>
 8006ee8:	9b02      	ldr	r3, [sp, #8]
 8006eea:	701c      	strb	r4, [r3, #0]
 8006eec:	b01d      	add	sp, #116	@ 0x74
 8006eee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ef2:	b003      	add	sp, #12
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	20000034 	.word	0x20000034
 8006efc:	ffff0208 	.word	0xffff0208

08006f00 <__sread>:
 8006f00:	b510      	push	{r4, lr}
 8006f02:	460c      	mov	r4, r1
 8006f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f08:	f000 f896 	bl	8007038 <_read_r>
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	bfab      	itete	ge
 8006f10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006f12:	89a3      	ldrhlt	r3, [r4, #12]
 8006f14:	181b      	addge	r3, r3, r0
 8006f16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006f1a:	bfac      	ite	ge
 8006f1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006f1e:	81a3      	strhlt	r3, [r4, #12]
 8006f20:	bd10      	pop	{r4, pc}

08006f22 <__swrite>:
 8006f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f26:	461f      	mov	r7, r3
 8006f28:	898b      	ldrh	r3, [r1, #12]
 8006f2a:	05db      	lsls	r3, r3, #23
 8006f2c:	4605      	mov	r5, r0
 8006f2e:	460c      	mov	r4, r1
 8006f30:	4616      	mov	r6, r2
 8006f32:	d505      	bpl.n	8006f40 <__swrite+0x1e>
 8006f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f38:	2302      	movs	r3, #2
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f000 f86a 	bl	8007014 <_lseek_r>
 8006f40:	89a3      	ldrh	r3, [r4, #12]
 8006f42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f4a:	81a3      	strh	r3, [r4, #12]
 8006f4c:	4632      	mov	r2, r6
 8006f4e:	463b      	mov	r3, r7
 8006f50:	4628      	mov	r0, r5
 8006f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f56:	f000 b881 	b.w	800705c <_write_r>

08006f5a <__sseek>:
 8006f5a:	b510      	push	{r4, lr}
 8006f5c:	460c      	mov	r4, r1
 8006f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f62:	f000 f857 	bl	8007014 <_lseek_r>
 8006f66:	1c43      	adds	r3, r0, #1
 8006f68:	89a3      	ldrh	r3, [r4, #12]
 8006f6a:	bf15      	itete	ne
 8006f6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006f6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006f72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006f76:	81a3      	strheq	r3, [r4, #12]
 8006f78:	bf18      	it	ne
 8006f7a:	81a3      	strhne	r3, [r4, #12]
 8006f7c:	bd10      	pop	{r4, pc}

08006f7e <__sclose>:
 8006f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f82:	f000 b825 	b.w	8006fd0 <_close_r>

08006f86 <memset>:
 8006f86:	4402      	add	r2, r0
 8006f88:	4603      	mov	r3, r0
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d100      	bne.n	8006f90 <memset+0xa>
 8006f8e:	4770      	bx	lr
 8006f90:	f803 1b01 	strb.w	r1, [r3], #1
 8006f94:	e7f9      	b.n	8006f8a <memset+0x4>
	...

08006f98 <time>:
 8006f98:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 8006f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8006fcc <time+0x34>)
 8006f9c:	f04f 36ff 	mov.w	r6, #4294967295
 8006fa0:	f04f 37ff 	mov.w	r7, #4294967295
 8006fa4:	4669      	mov	r1, sp
 8006fa6:	4604      	mov	r4, r0
 8006fa8:	2200      	movs	r2, #0
 8006faa:	6818      	ldr	r0, [r3, #0]
 8006fac:	e9cd 6700 	strd	r6, r7, [sp]
 8006fb0:	f000 f81e 	bl	8006ff0 <_gettimeofday_r>
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	bfb8      	it	lt
 8006fb8:	e9cd 6700 	strdlt	r6, r7, [sp]
 8006fbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fc0:	b10c      	cbz	r4, 8006fc6 <time+0x2e>
 8006fc2:	e9c4 0100 	strd	r0, r1, [r4]
 8006fc6:	b004      	add	sp, #16
 8006fc8:	bdd0      	pop	{r4, r6, r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	20000034 	.word	0x20000034

08006fd0 <_close_r>:
 8006fd0:	b538      	push	{r3, r4, r5, lr}
 8006fd2:	4d06      	ldr	r5, [pc, #24]	@ (8006fec <_close_r+0x1c>)
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	4604      	mov	r4, r0
 8006fd8:	4608      	mov	r0, r1
 8006fda:	602b      	str	r3, [r5, #0]
 8006fdc:	f7fd fb2e 	bl	800463c <_close>
 8006fe0:	1c43      	adds	r3, r0, #1
 8006fe2:	d102      	bne.n	8006fea <_close_r+0x1a>
 8006fe4:	682b      	ldr	r3, [r5, #0]
 8006fe6:	b103      	cbz	r3, 8006fea <_close_r+0x1a>
 8006fe8:	6023      	str	r3, [r4, #0]
 8006fea:	bd38      	pop	{r3, r4, r5, pc}
 8006fec:	2000063c 	.word	0x2000063c

08006ff0 <_gettimeofday_r>:
 8006ff0:	b538      	push	{r3, r4, r5, lr}
 8006ff2:	4d07      	ldr	r5, [pc, #28]	@ (8007010 <_gettimeofday_r+0x20>)
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	4604      	mov	r4, r0
 8006ff8:	4608      	mov	r0, r1
 8006ffa:	4611      	mov	r1, r2
 8006ffc:	602b      	str	r3, [r5, #0]
 8006ffe:	f001 f83f 	bl	8008080 <_gettimeofday>
 8007002:	1c43      	adds	r3, r0, #1
 8007004:	d102      	bne.n	800700c <_gettimeofday_r+0x1c>
 8007006:	682b      	ldr	r3, [r5, #0]
 8007008:	b103      	cbz	r3, 800700c <_gettimeofday_r+0x1c>
 800700a:	6023      	str	r3, [r4, #0]
 800700c:	bd38      	pop	{r3, r4, r5, pc}
 800700e:	bf00      	nop
 8007010:	2000063c 	.word	0x2000063c

08007014 <_lseek_r>:
 8007014:	b538      	push	{r3, r4, r5, lr}
 8007016:	4d07      	ldr	r5, [pc, #28]	@ (8007034 <_lseek_r+0x20>)
 8007018:	4604      	mov	r4, r0
 800701a:	4608      	mov	r0, r1
 800701c:	4611      	mov	r1, r2
 800701e:	2200      	movs	r2, #0
 8007020:	602a      	str	r2, [r5, #0]
 8007022:	461a      	mov	r2, r3
 8007024:	f7fd fb31 	bl	800468a <_lseek>
 8007028:	1c43      	adds	r3, r0, #1
 800702a:	d102      	bne.n	8007032 <_lseek_r+0x1e>
 800702c:	682b      	ldr	r3, [r5, #0]
 800702e:	b103      	cbz	r3, 8007032 <_lseek_r+0x1e>
 8007030:	6023      	str	r3, [r4, #0]
 8007032:	bd38      	pop	{r3, r4, r5, pc}
 8007034:	2000063c 	.word	0x2000063c

08007038 <_read_r>:
 8007038:	b538      	push	{r3, r4, r5, lr}
 800703a:	4d07      	ldr	r5, [pc, #28]	@ (8007058 <_read_r+0x20>)
 800703c:	4604      	mov	r4, r0
 800703e:	4608      	mov	r0, r1
 8007040:	4611      	mov	r1, r2
 8007042:	2200      	movs	r2, #0
 8007044:	602a      	str	r2, [r5, #0]
 8007046:	461a      	mov	r2, r3
 8007048:	f7fd fabf 	bl	80045ca <_read>
 800704c:	1c43      	adds	r3, r0, #1
 800704e:	d102      	bne.n	8007056 <_read_r+0x1e>
 8007050:	682b      	ldr	r3, [r5, #0]
 8007052:	b103      	cbz	r3, 8007056 <_read_r+0x1e>
 8007054:	6023      	str	r3, [r4, #0]
 8007056:	bd38      	pop	{r3, r4, r5, pc}
 8007058:	2000063c 	.word	0x2000063c

0800705c <_write_r>:
 800705c:	b538      	push	{r3, r4, r5, lr}
 800705e:	4d07      	ldr	r5, [pc, #28]	@ (800707c <_write_r+0x20>)
 8007060:	4604      	mov	r4, r0
 8007062:	4608      	mov	r0, r1
 8007064:	4611      	mov	r1, r2
 8007066:	2200      	movs	r2, #0
 8007068:	602a      	str	r2, [r5, #0]
 800706a:	461a      	mov	r2, r3
 800706c:	f7fd faca 	bl	8004604 <_write>
 8007070:	1c43      	adds	r3, r0, #1
 8007072:	d102      	bne.n	800707a <_write_r+0x1e>
 8007074:	682b      	ldr	r3, [r5, #0]
 8007076:	b103      	cbz	r3, 800707a <_write_r+0x1e>
 8007078:	6023      	str	r3, [r4, #0]
 800707a:	bd38      	pop	{r3, r4, r5, pc}
 800707c:	2000063c 	.word	0x2000063c

08007080 <__errno>:
 8007080:	4b01      	ldr	r3, [pc, #4]	@ (8007088 <__errno+0x8>)
 8007082:	6818      	ldr	r0, [r3, #0]
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	20000034 	.word	0x20000034

0800708c <__libc_init_array>:
 800708c:	b570      	push	{r4, r5, r6, lr}
 800708e:	4d0d      	ldr	r5, [pc, #52]	@ (80070c4 <__libc_init_array+0x38>)
 8007090:	4c0d      	ldr	r4, [pc, #52]	@ (80070c8 <__libc_init_array+0x3c>)
 8007092:	1b64      	subs	r4, r4, r5
 8007094:	10a4      	asrs	r4, r4, #2
 8007096:	2600      	movs	r6, #0
 8007098:	42a6      	cmp	r6, r4
 800709a:	d109      	bne.n	80070b0 <__libc_init_array+0x24>
 800709c:	4d0b      	ldr	r5, [pc, #44]	@ (80070cc <__libc_init_array+0x40>)
 800709e:	4c0c      	ldr	r4, [pc, #48]	@ (80070d0 <__libc_init_array+0x44>)
 80070a0:	f000 fff6 	bl	8008090 <_init>
 80070a4:	1b64      	subs	r4, r4, r5
 80070a6:	10a4      	asrs	r4, r4, #2
 80070a8:	2600      	movs	r6, #0
 80070aa:	42a6      	cmp	r6, r4
 80070ac:	d105      	bne.n	80070ba <__libc_init_array+0x2e>
 80070ae:	bd70      	pop	{r4, r5, r6, pc}
 80070b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80070b4:	4798      	blx	r3
 80070b6:	3601      	adds	r6, #1
 80070b8:	e7ee      	b.n	8007098 <__libc_init_array+0xc>
 80070ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80070be:	4798      	blx	r3
 80070c0:	3601      	adds	r6, #1
 80070c2:	e7f2      	b.n	80070aa <__libc_init_array+0x1e>
 80070c4:	0800ab80 	.word	0x0800ab80
 80070c8:	0800ab80 	.word	0x0800ab80
 80070cc:	0800ab80 	.word	0x0800ab80
 80070d0:	0800ab84 	.word	0x0800ab84

080070d4 <__retarget_lock_init_recursive>:
 80070d4:	4770      	bx	lr

080070d6 <__retarget_lock_acquire_recursive>:
 80070d6:	4770      	bx	lr

080070d8 <__retarget_lock_release_recursive>:
 80070d8:	4770      	bx	lr
	...

080070dc <__assert_func>:
 80070dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070de:	4614      	mov	r4, r2
 80070e0:	461a      	mov	r2, r3
 80070e2:	4b09      	ldr	r3, [pc, #36]	@ (8007108 <__assert_func+0x2c>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4605      	mov	r5, r0
 80070e8:	68d8      	ldr	r0, [r3, #12]
 80070ea:	b14c      	cbz	r4, 8007100 <__assert_func+0x24>
 80070ec:	4b07      	ldr	r3, [pc, #28]	@ (800710c <__assert_func+0x30>)
 80070ee:	9100      	str	r1, [sp, #0]
 80070f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80070f4:	4906      	ldr	r1, [pc, #24]	@ (8007110 <__assert_func+0x34>)
 80070f6:	462b      	mov	r3, r5
 80070f8:	f000 fc9e 	bl	8007a38 <fiprintf>
 80070fc:	f000 fce6 	bl	8007acc <abort>
 8007100:	4b04      	ldr	r3, [pc, #16]	@ (8007114 <__assert_func+0x38>)
 8007102:	461c      	mov	r4, r3
 8007104:	e7f3      	b.n	80070ee <__assert_func+0x12>
 8007106:	bf00      	nop
 8007108:	20000034 	.word	0x20000034
 800710c:	0800ab07 	.word	0x0800ab07
 8007110:	0800ab14 	.word	0x0800ab14
 8007114:	0800ab42 	.word	0x0800ab42

08007118 <_free_r>:
 8007118:	b538      	push	{r3, r4, r5, lr}
 800711a:	4605      	mov	r5, r0
 800711c:	2900      	cmp	r1, #0
 800711e:	d041      	beq.n	80071a4 <_free_r+0x8c>
 8007120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007124:	1f0c      	subs	r4, r1, #4
 8007126:	2b00      	cmp	r3, #0
 8007128:	bfb8      	it	lt
 800712a:	18e4      	addlt	r4, r4, r3
 800712c:	f000 f8e8 	bl	8007300 <__malloc_lock>
 8007130:	4a1d      	ldr	r2, [pc, #116]	@ (80071a8 <_free_r+0x90>)
 8007132:	6813      	ldr	r3, [r2, #0]
 8007134:	b933      	cbnz	r3, 8007144 <_free_r+0x2c>
 8007136:	6063      	str	r3, [r4, #4]
 8007138:	6014      	str	r4, [r2, #0]
 800713a:	4628      	mov	r0, r5
 800713c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007140:	f000 b8e4 	b.w	800730c <__malloc_unlock>
 8007144:	42a3      	cmp	r3, r4
 8007146:	d908      	bls.n	800715a <_free_r+0x42>
 8007148:	6820      	ldr	r0, [r4, #0]
 800714a:	1821      	adds	r1, r4, r0
 800714c:	428b      	cmp	r3, r1
 800714e:	bf01      	itttt	eq
 8007150:	6819      	ldreq	r1, [r3, #0]
 8007152:	685b      	ldreq	r3, [r3, #4]
 8007154:	1809      	addeq	r1, r1, r0
 8007156:	6021      	streq	r1, [r4, #0]
 8007158:	e7ed      	b.n	8007136 <_free_r+0x1e>
 800715a:	461a      	mov	r2, r3
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	b10b      	cbz	r3, 8007164 <_free_r+0x4c>
 8007160:	42a3      	cmp	r3, r4
 8007162:	d9fa      	bls.n	800715a <_free_r+0x42>
 8007164:	6811      	ldr	r1, [r2, #0]
 8007166:	1850      	adds	r0, r2, r1
 8007168:	42a0      	cmp	r0, r4
 800716a:	d10b      	bne.n	8007184 <_free_r+0x6c>
 800716c:	6820      	ldr	r0, [r4, #0]
 800716e:	4401      	add	r1, r0
 8007170:	1850      	adds	r0, r2, r1
 8007172:	4283      	cmp	r3, r0
 8007174:	6011      	str	r1, [r2, #0]
 8007176:	d1e0      	bne.n	800713a <_free_r+0x22>
 8007178:	6818      	ldr	r0, [r3, #0]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	6053      	str	r3, [r2, #4]
 800717e:	4408      	add	r0, r1
 8007180:	6010      	str	r0, [r2, #0]
 8007182:	e7da      	b.n	800713a <_free_r+0x22>
 8007184:	d902      	bls.n	800718c <_free_r+0x74>
 8007186:	230c      	movs	r3, #12
 8007188:	602b      	str	r3, [r5, #0]
 800718a:	e7d6      	b.n	800713a <_free_r+0x22>
 800718c:	6820      	ldr	r0, [r4, #0]
 800718e:	1821      	adds	r1, r4, r0
 8007190:	428b      	cmp	r3, r1
 8007192:	bf04      	itt	eq
 8007194:	6819      	ldreq	r1, [r3, #0]
 8007196:	685b      	ldreq	r3, [r3, #4]
 8007198:	6063      	str	r3, [r4, #4]
 800719a:	bf04      	itt	eq
 800719c:	1809      	addeq	r1, r1, r0
 800719e:	6021      	streq	r1, [r4, #0]
 80071a0:	6054      	str	r4, [r2, #4]
 80071a2:	e7ca      	b.n	800713a <_free_r+0x22>
 80071a4:	bd38      	pop	{r3, r4, r5, pc}
 80071a6:	bf00      	nop
 80071a8:	20000648 	.word	0x20000648

080071ac <malloc>:
 80071ac:	4b02      	ldr	r3, [pc, #8]	@ (80071b8 <malloc+0xc>)
 80071ae:	4601      	mov	r1, r0
 80071b0:	6818      	ldr	r0, [r3, #0]
 80071b2:	f000 b825 	b.w	8007200 <_malloc_r>
 80071b6:	bf00      	nop
 80071b8:	20000034 	.word	0x20000034

080071bc <sbrk_aligned>:
 80071bc:	b570      	push	{r4, r5, r6, lr}
 80071be:	4e0f      	ldr	r6, [pc, #60]	@ (80071fc <sbrk_aligned+0x40>)
 80071c0:	460c      	mov	r4, r1
 80071c2:	6831      	ldr	r1, [r6, #0]
 80071c4:	4605      	mov	r5, r0
 80071c6:	b911      	cbnz	r1, 80071ce <sbrk_aligned+0x12>
 80071c8:	f000 fc62 	bl	8007a90 <_sbrk_r>
 80071cc:	6030      	str	r0, [r6, #0]
 80071ce:	4621      	mov	r1, r4
 80071d0:	4628      	mov	r0, r5
 80071d2:	f000 fc5d 	bl	8007a90 <_sbrk_r>
 80071d6:	1c43      	adds	r3, r0, #1
 80071d8:	d103      	bne.n	80071e2 <sbrk_aligned+0x26>
 80071da:	f04f 34ff 	mov.w	r4, #4294967295
 80071de:	4620      	mov	r0, r4
 80071e0:	bd70      	pop	{r4, r5, r6, pc}
 80071e2:	1cc4      	adds	r4, r0, #3
 80071e4:	f024 0403 	bic.w	r4, r4, #3
 80071e8:	42a0      	cmp	r0, r4
 80071ea:	d0f8      	beq.n	80071de <sbrk_aligned+0x22>
 80071ec:	1a21      	subs	r1, r4, r0
 80071ee:	4628      	mov	r0, r5
 80071f0:	f000 fc4e 	bl	8007a90 <_sbrk_r>
 80071f4:	3001      	adds	r0, #1
 80071f6:	d1f2      	bne.n	80071de <sbrk_aligned+0x22>
 80071f8:	e7ef      	b.n	80071da <sbrk_aligned+0x1e>
 80071fa:	bf00      	nop
 80071fc:	20000644 	.word	0x20000644

08007200 <_malloc_r>:
 8007200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007204:	1ccd      	adds	r5, r1, #3
 8007206:	f025 0503 	bic.w	r5, r5, #3
 800720a:	3508      	adds	r5, #8
 800720c:	2d0c      	cmp	r5, #12
 800720e:	bf38      	it	cc
 8007210:	250c      	movcc	r5, #12
 8007212:	2d00      	cmp	r5, #0
 8007214:	4606      	mov	r6, r0
 8007216:	db01      	blt.n	800721c <_malloc_r+0x1c>
 8007218:	42a9      	cmp	r1, r5
 800721a:	d904      	bls.n	8007226 <_malloc_r+0x26>
 800721c:	230c      	movs	r3, #12
 800721e:	6033      	str	r3, [r6, #0]
 8007220:	2000      	movs	r0, #0
 8007222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007226:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80072fc <_malloc_r+0xfc>
 800722a:	f000 f869 	bl	8007300 <__malloc_lock>
 800722e:	f8d8 3000 	ldr.w	r3, [r8]
 8007232:	461c      	mov	r4, r3
 8007234:	bb44      	cbnz	r4, 8007288 <_malloc_r+0x88>
 8007236:	4629      	mov	r1, r5
 8007238:	4630      	mov	r0, r6
 800723a:	f7ff ffbf 	bl	80071bc <sbrk_aligned>
 800723e:	1c43      	adds	r3, r0, #1
 8007240:	4604      	mov	r4, r0
 8007242:	d158      	bne.n	80072f6 <_malloc_r+0xf6>
 8007244:	f8d8 4000 	ldr.w	r4, [r8]
 8007248:	4627      	mov	r7, r4
 800724a:	2f00      	cmp	r7, #0
 800724c:	d143      	bne.n	80072d6 <_malloc_r+0xd6>
 800724e:	2c00      	cmp	r4, #0
 8007250:	d04b      	beq.n	80072ea <_malloc_r+0xea>
 8007252:	6823      	ldr	r3, [r4, #0]
 8007254:	4639      	mov	r1, r7
 8007256:	4630      	mov	r0, r6
 8007258:	eb04 0903 	add.w	r9, r4, r3
 800725c:	f000 fc18 	bl	8007a90 <_sbrk_r>
 8007260:	4581      	cmp	r9, r0
 8007262:	d142      	bne.n	80072ea <_malloc_r+0xea>
 8007264:	6821      	ldr	r1, [r4, #0]
 8007266:	1a6d      	subs	r5, r5, r1
 8007268:	4629      	mov	r1, r5
 800726a:	4630      	mov	r0, r6
 800726c:	f7ff ffa6 	bl	80071bc <sbrk_aligned>
 8007270:	3001      	adds	r0, #1
 8007272:	d03a      	beq.n	80072ea <_malloc_r+0xea>
 8007274:	6823      	ldr	r3, [r4, #0]
 8007276:	442b      	add	r3, r5
 8007278:	6023      	str	r3, [r4, #0]
 800727a:	f8d8 3000 	ldr.w	r3, [r8]
 800727e:	685a      	ldr	r2, [r3, #4]
 8007280:	bb62      	cbnz	r2, 80072dc <_malloc_r+0xdc>
 8007282:	f8c8 7000 	str.w	r7, [r8]
 8007286:	e00f      	b.n	80072a8 <_malloc_r+0xa8>
 8007288:	6822      	ldr	r2, [r4, #0]
 800728a:	1b52      	subs	r2, r2, r5
 800728c:	d420      	bmi.n	80072d0 <_malloc_r+0xd0>
 800728e:	2a0b      	cmp	r2, #11
 8007290:	d917      	bls.n	80072c2 <_malloc_r+0xc2>
 8007292:	1961      	adds	r1, r4, r5
 8007294:	42a3      	cmp	r3, r4
 8007296:	6025      	str	r5, [r4, #0]
 8007298:	bf18      	it	ne
 800729a:	6059      	strne	r1, [r3, #4]
 800729c:	6863      	ldr	r3, [r4, #4]
 800729e:	bf08      	it	eq
 80072a0:	f8c8 1000 	streq.w	r1, [r8]
 80072a4:	5162      	str	r2, [r4, r5]
 80072a6:	604b      	str	r3, [r1, #4]
 80072a8:	4630      	mov	r0, r6
 80072aa:	f000 f82f 	bl	800730c <__malloc_unlock>
 80072ae:	f104 000b 	add.w	r0, r4, #11
 80072b2:	1d23      	adds	r3, r4, #4
 80072b4:	f020 0007 	bic.w	r0, r0, #7
 80072b8:	1ac2      	subs	r2, r0, r3
 80072ba:	bf1c      	itt	ne
 80072bc:	1a1b      	subne	r3, r3, r0
 80072be:	50a3      	strne	r3, [r4, r2]
 80072c0:	e7af      	b.n	8007222 <_malloc_r+0x22>
 80072c2:	6862      	ldr	r2, [r4, #4]
 80072c4:	42a3      	cmp	r3, r4
 80072c6:	bf0c      	ite	eq
 80072c8:	f8c8 2000 	streq.w	r2, [r8]
 80072cc:	605a      	strne	r2, [r3, #4]
 80072ce:	e7eb      	b.n	80072a8 <_malloc_r+0xa8>
 80072d0:	4623      	mov	r3, r4
 80072d2:	6864      	ldr	r4, [r4, #4]
 80072d4:	e7ae      	b.n	8007234 <_malloc_r+0x34>
 80072d6:	463c      	mov	r4, r7
 80072d8:	687f      	ldr	r7, [r7, #4]
 80072da:	e7b6      	b.n	800724a <_malloc_r+0x4a>
 80072dc:	461a      	mov	r2, r3
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	42a3      	cmp	r3, r4
 80072e2:	d1fb      	bne.n	80072dc <_malloc_r+0xdc>
 80072e4:	2300      	movs	r3, #0
 80072e6:	6053      	str	r3, [r2, #4]
 80072e8:	e7de      	b.n	80072a8 <_malloc_r+0xa8>
 80072ea:	230c      	movs	r3, #12
 80072ec:	6033      	str	r3, [r6, #0]
 80072ee:	4630      	mov	r0, r6
 80072f0:	f000 f80c 	bl	800730c <__malloc_unlock>
 80072f4:	e794      	b.n	8007220 <_malloc_r+0x20>
 80072f6:	6005      	str	r5, [r0, #0]
 80072f8:	e7d6      	b.n	80072a8 <_malloc_r+0xa8>
 80072fa:	bf00      	nop
 80072fc:	20000648 	.word	0x20000648

08007300 <__malloc_lock>:
 8007300:	4801      	ldr	r0, [pc, #4]	@ (8007308 <__malloc_lock+0x8>)
 8007302:	f7ff bee8 	b.w	80070d6 <__retarget_lock_acquire_recursive>
 8007306:	bf00      	nop
 8007308:	20000640 	.word	0x20000640

0800730c <__malloc_unlock>:
 800730c:	4801      	ldr	r0, [pc, #4]	@ (8007314 <__malloc_unlock+0x8>)
 800730e:	f7ff bee3 	b.w	80070d8 <__retarget_lock_release_recursive>
 8007312:	bf00      	nop
 8007314:	20000640 	.word	0x20000640

08007318 <__ssputs_r>:
 8007318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800731c:	688e      	ldr	r6, [r1, #8]
 800731e:	461f      	mov	r7, r3
 8007320:	42be      	cmp	r6, r7
 8007322:	680b      	ldr	r3, [r1, #0]
 8007324:	4682      	mov	sl, r0
 8007326:	460c      	mov	r4, r1
 8007328:	4690      	mov	r8, r2
 800732a:	d82d      	bhi.n	8007388 <__ssputs_r+0x70>
 800732c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007330:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007334:	d026      	beq.n	8007384 <__ssputs_r+0x6c>
 8007336:	6965      	ldr	r5, [r4, #20]
 8007338:	6909      	ldr	r1, [r1, #16]
 800733a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800733e:	eba3 0901 	sub.w	r9, r3, r1
 8007342:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007346:	1c7b      	adds	r3, r7, #1
 8007348:	444b      	add	r3, r9
 800734a:	106d      	asrs	r5, r5, #1
 800734c:	429d      	cmp	r5, r3
 800734e:	bf38      	it	cc
 8007350:	461d      	movcc	r5, r3
 8007352:	0553      	lsls	r3, r2, #21
 8007354:	d527      	bpl.n	80073a6 <__ssputs_r+0x8e>
 8007356:	4629      	mov	r1, r5
 8007358:	f7ff ff52 	bl	8007200 <_malloc_r>
 800735c:	4606      	mov	r6, r0
 800735e:	b360      	cbz	r0, 80073ba <__ssputs_r+0xa2>
 8007360:	6921      	ldr	r1, [r4, #16]
 8007362:	464a      	mov	r2, r9
 8007364:	f000 fba4 	bl	8007ab0 <memcpy>
 8007368:	89a3      	ldrh	r3, [r4, #12]
 800736a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800736e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007372:	81a3      	strh	r3, [r4, #12]
 8007374:	6126      	str	r6, [r4, #16]
 8007376:	6165      	str	r5, [r4, #20]
 8007378:	444e      	add	r6, r9
 800737a:	eba5 0509 	sub.w	r5, r5, r9
 800737e:	6026      	str	r6, [r4, #0]
 8007380:	60a5      	str	r5, [r4, #8]
 8007382:	463e      	mov	r6, r7
 8007384:	42be      	cmp	r6, r7
 8007386:	d900      	bls.n	800738a <__ssputs_r+0x72>
 8007388:	463e      	mov	r6, r7
 800738a:	6820      	ldr	r0, [r4, #0]
 800738c:	4632      	mov	r2, r6
 800738e:	4641      	mov	r1, r8
 8007390:	f000 fb64 	bl	8007a5c <memmove>
 8007394:	68a3      	ldr	r3, [r4, #8]
 8007396:	1b9b      	subs	r3, r3, r6
 8007398:	60a3      	str	r3, [r4, #8]
 800739a:	6823      	ldr	r3, [r4, #0]
 800739c:	4433      	add	r3, r6
 800739e:	6023      	str	r3, [r4, #0]
 80073a0:	2000      	movs	r0, #0
 80073a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073a6:	462a      	mov	r2, r5
 80073a8:	f000 fb97 	bl	8007ada <_realloc_r>
 80073ac:	4606      	mov	r6, r0
 80073ae:	2800      	cmp	r0, #0
 80073b0:	d1e0      	bne.n	8007374 <__ssputs_r+0x5c>
 80073b2:	6921      	ldr	r1, [r4, #16]
 80073b4:	4650      	mov	r0, sl
 80073b6:	f7ff feaf 	bl	8007118 <_free_r>
 80073ba:	230c      	movs	r3, #12
 80073bc:	f8ca 3000 	str.w	r3, [sl]
 80073c0:	89a3      	ldrh	r3, [r4, #12]
 80073c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073c6:	81a3      	strh	r3, [r4, #12]
 80073c8:	f04f 30ff 	mov.w	r0, #4294967295
 80073cc:	e7e9      	b.n	80073a2 <__ssputs_r+0x8a>
	...

080073d0 <_svfiprintf_r>:
 80073d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d4:	4698      	mov	r8, r3
 80073d6:	898b      	ldrh	r3, [r1, #12]
 80073d8:	061b      	lsls	r3, r3, #24
 80073da:	b09d      	sub	sp, #116	@ 0x74
 80073dc:	4607      	mov	r7, r0
 80073de:	460d      	mov	r5, r1
 80073e0:	4614      	mov	r4, r2
 80073e2:	d510      	bpl.n	8007406 <_svfiprintf_r+0x36>
 80073e4:	690b      	ldr	r3, [r1, #16]
 80073e6:	b973      	cbnz	r3, 8007406 <_svfiprintf_r+0x36>
 80073e8:	2140      	movs	r1, #64	@ 0x40
 80073ea:	f7ff ff09 	bl	8007200 <_malloc_r>
 80073ee:	6028      	str	r0, [r5, #0]
 80073f0:	6128      	str	r0, [r5, #16]
 80073f2:	b930      	cbnz	r0, 8007402 <_svfiprintf_r+0x32>
 80073f4:	230c      	movs	r3, #12
 80073f6:	603b      	str	r3, [r7, #0]
 80073f8:	f04f 30ff 	mov.w	r0, #4294967295
 80073fc:	b01d      	add	sp, #116	@ 0x74
 80073fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007402:	2340      	movs	r3, #64	@ 0x40
 8007404:	616b      	str	r3, [r5, #20]
 8007406:	2300      	movs	r3, #0
 8007408:	9309      	str	r3, [sp, #36]	@ 0x24
 800740a:	2320      	movs	r3, #32
 800740c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007410:	f8cd 800c 	str.w	r8, [sp, #12]
 8007414:	2330      	movs	r3, #48	@ 0x30
 8007416:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80075b4 <_svfiprintf_r+0x1e4>
 800741a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800741e:	f04f 0901 	mov.w	r9, #1
 8007422:	4623      	mov	r3, r4
 8007424:	469a      	mov	sl, r3
 8007426:	f813 2b01 	ldrb.w	r2, [r3], #1
 800742a:	b10a      	cbz	r2, 8007430 <_svfiprintf_r+0x60>
 800742c:	2a25      	cmp	r2, #37	@ 0x25
 800742e:	d1f9      	bne.n	8007424 <_svfiprintf_r+0x54>
 8007430:	ebba 0b04 	subs.w	fp, sl, r4
 8007434:	d00b      	beq.n	800744e <_svfiprintf_r+0x7e>
 8007436:	465b      	mov	r3, fp
 8007438:	4622      	mov	r2, r4
 800743a:	4629      	mov	r1, r5
 800743c:	4638      	mov	r0, r7
 800743e:	f7ff ff6b 	bl	8007318 <__ssputs_r>
 8007442:	3001      	adds	r0, #1
 8007444:	f000 80a7 	beq.w	8007596 <_svfiprintf_r+0x1c6>
 8007448:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800744a:	445a      	add	r2, fp
 800744c:	9209      	str	r2, [sp, #36]	@ 0x24
 800744e:	f89a 3000 	ldrb.w	r3, [sl]
 8007452:	2b00      	cmp	r3, #0
 8007454:	f000 809f 	beq.w	8007596 <_svfiprintf_r+0x1c6>
 8007458:	2300      	movs	r3, #0
 800745a:	f04f 32ff 	mov.w	r2, #4294967295
 800745e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007462:	f10a 0a01 	add.w	sl, sl, #1
 8007466:	9304      	str	r3, [sp, #16]
 8007468:	9307      	str	r3, [sp, #28]
 800746a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800746e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007470:	4654      	mov	r4, sl
 8007472:	2205      	movs	r2, #5
 8007474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007478:	484e      	ldr	r0, [pc, #312]	@ (80075b4 <_svfiprintf_r+0x1e4>)
 800747a:	f7f8 feb9 	bl	80001f0 <memchr>
 800747e:	9a04      	ldr	r2, [sp, #16]
 8007480:	b9d8      	cbnz	r0, 80074ba <_svfiprintf_r+0xea>
 8007482:	06d0      	lsls	r0, r2, #27
 8007484:	bf44      	itt	mi
 8007486:	2320      	movmi	r3, #32
 8007488:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800748c:	0711      	lsls	r1, r2, #28
 800748e:	bf44      	itt	mi
 8007490:	232b      	movmi	r3, #43	@ 0x2b
 8007492:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007496:	f89a 3000 	ldrb.w	r3, [sl]
 800749a:	2b2a      	cmp	r3, #42	@ 0x2a
 800749c:	d015      	beq.n	80074ca <_svfiprintf_r+0xfa>
 800749e:	9a07      	ldr	r2, [sp, #28]
 80074a0:	4654      	mov	r4, sl
 80074a2:	2000      	movs	r0, #0
 80074a4:	f04f 0c0a 	mov.w	ip, #10
 80074a8:	4621      	mov	r1, r4
 80074aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074ae:	3b30      	subs	r3, #48	@ 0x30
 80074b0:	2b09      	cmp	r3, #9
 80074b2:	d94b      	bls.n	800754c <_svfiprintf_r+0x17c>
 80074b4:	b1b0      	cbz	r0, 80074e4 <_svfiprintf_r+0x114>
 80074b6:	9207      	str	r2, [sp, #28]
 80074b8:	e014      	b.n	80074e4 <_svfiprintf_r+0x114>
 80074ba:	eba0 0308 	sub.w	r3, r0, r8
 80074be:	fa09 f303 	lsl.w	r3, r9, r3
 80074c2:	4313      	orrs	r3, r2
 80074c4:	9304      	str	r3, [sp, #16]
 80074c6:	46a2      	mov	sl, r4
 80074c8:	e7d2      	b.n	8007470 <_svfiprintf_r+0xa0>
 80074ca:	9b03      	ldr	r3, [sp, #12]
 80074cc:	1d19      	adds	r1, r3, #4
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	9103      	str	r1, [sp, #12]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	bfbb      	ittet	lt
 80074d6:	425b      	neglt	r3, r3
 80074d8:	f042 0202 	orrlt.w	r2, r2, #2
 80074dc:	9307      	strge	r3, [sp, #28]
 80074de:	9307      	strlt	r3, [sp, #28]
 80074e0:	bfb8      	it	lt
 80074e2:	9204      	strlt	r2, [sp, #16]
 80074e4:	7823      	ldrb	r3, [r4, #0]
 80074e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80074e8:	d10a      	bne.n	8007500 <_svfiprintf_r+0x130>
 80074ea:	7863      	ldrb	r3, [r4, #1]
 80074ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80074ee:	d132      	bne.n	8007556 <_svfiprintf_r+0x186>
 80074f0:	9b03      	ldr	r3, [sp, #12]
 80074f2:	1d1a      	adds	r2, r3, #4
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	9203      	str	r2, [sp, #12]
 80074f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80074fc:	3402      	adds	r4, #2
 80074fe:	9305      	str	r3, [sp, #20]
 8007500:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80075c4 <_svfiprintf_r+0x1f4>
 8007504:	7821      	ldrb	r1, [r4, #0]
 8007506:	2203      	movs	r2, #3
 8007508:	4650      	mov	r0, sl
 800750a:	f7f8 fe71 	bl	80001f0 <memchr>
 800750e:	b138      	cbz	r0, 8007520 <_svfiprintf_r+0x150>
 8007510:	9b04      	ldr	r3, [sp, #16]
 8007512:	eba0 000a 	sub.w	r0, r0, sl
 8007516:	2240      	movs	r2, #64	@ 0x40
 8007518:	4082      	lsls	r2, r0
 800751a:	4313      	orrs	r3, r2
 800751c:	3401      	adds	r4, #1
 800751e:	9304      	str	r3, [sp, #16]
 8007520:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007524:	4824      	ldr	r0, [pc, #144]	@ (80075b8 <_svfiprintf_r+0x1e8>)
 8007526:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800752a:	2206      	movs	r2, #6
 800752c:	f7f8 fe60 	bl	80001f0 <memchr>
 8007530:	2800      	cmp	r0, #0
 8007532:	d036      	beq.n	80075a2 <_svfiprintf_r+0x1d2>
 8007534:	4b21      	ldr	r3, [pc, #132]	@ (80075bc <_svfiprintf_r+0x1ec>)
 8007536:	bb1b      	cbnz	r3, 8007580 <_svfiprintf_r+0x1b0>
 8007538:	9b03      	ldr	r3, [sp, #12]
 800753a:	3307      	adds	r3, #7
 800753c:	f023 0307 	bic.w	r3, r3, #7
 8007540:	3308      	adds	r3, #8
 8007542:	9303      	str	r3, [sp, #12]
 8007544:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007546:	4433      	add	r3, r6
 8007548:	9309      	str	r3, [sp, #36]	@ 0x24
 800754a:	e76a      	b.n	8007422 <_svfiprintf_r+0x52>
 800754c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007550:	460c      	mov	r4, r1
 8007552:	2001      	movs	r0, #1
 8007554:	e7a8      	b.n	80074a8 <_svfiprintf_r+0xd8>
 8007556:	2300      	movs	r3, #0
 8007558:	3401      	adds	r4, #1
 800755a:	9305      	str	r3, [sp, #20]
 800755c:	4619      	mov	r1, r3
 800755e:	f04f 0c0a 	mov.w	ip, #10
 8007562:	4620      	mov	r0, r4
 8007564:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007568:	3a30      	subs	r2, #48	@ 0x30
 800756a:	2a09      	cmp	r2, #9
 800756c:	d903      	bls.n	8007576 <_svfiprintf_r+0x1a6>
 800756e:	2b00      	cmp	r3, #0
 8007570:	d0c6      	beq.n	8007500 <_svfiprintf_r+0x130>
 8007572:	9105      	str	r1, [sp, #20]
 8007574:	e7c4      	b.n	8007500 <_svfiprintf_r+0x130>
 8007576:	fb0c 2101 	mla	r1, ip, r1, r2
 800757a:	4604      	mov	r4, r0
 800757c:	2301      	movs	r3, #1
 800757e:	e7f0      	b.n	8007562 <_svfiprintf_r+0x192>
 8007580:	ab03      	add	r3, sp, #12
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	462a      	mov	r2, r5
 8007586:	4b0e      	ldr	r3, [pc, #56]	@ (80075c0 <_svfiprintf_r+0x1f0>)
 8007588:	a904      	add	r1, sp, #16
 800758a:	4638      	mov	r0, r7
 800758c:	f3af 8000 	nop.w
 8007590:	1c42      	adds	r2, r0, #1
 8007592:	4606      	mov	r6, r0
 8007594:	d1d6      	bne.n	8007544 <_svfiprintf_r+0x174>
 8007596:	89ab      	ldrh	r3, [r5, #12]
 8007598:	065b      	lsls	r3, r3, #25
 800759a:	f53f af2d 	bmi.w	80073f8 <_svfiprintf_r+0x28>
 800759e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075a0:	e72c      	b.n	80073fc <_svfiprintf_r+0x2c>
 80075a2:	ab03      	add	r3, sp, #12
 80075a4:	9300      	str	r3, [sp, #0]
 80075a6:	462a      	mov	r2, r5
 80075a8:	4b05      	ldr	r3, [pc, #20]	@ (80075c0 <_svfiprintf_r+0x1f0>)
 80075aa:	a904      	add	r1, sp, #16
 80075ac:	4638      	mov	r0, r7
 80075ae:	f000 f879 	bl	80076a4 <_printf_i>
 80075b2:	e7ed      	b.n	8007590 <_svfiprintf_r+0x1c0>
 80075b4:	0800ab43 	.word	0x0800ab43
 80075b8:	0800ab4d 	.word	0x0800ab4d
 80075bc:	00000000 	.word	0x00000000
 80075c0:	08007319 	.word	0x08007319
 80075c4:	0800ab49 	.word	0x0800ab49

080075c8 <_printf_common>:
 80075c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075cc:	4616      	mov	r6, r2
 80075ce:	4698      	mov	r8, r3
 80075d0:	688a      	ldr	r2, [r1, #8]
 80075d2:	690b      	ldr	r3, [r1, #16]
 80075d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80075d8:	4293      	cmp	r3, r2
 80075da:	bfb8      	it	lt
 80075dc:	4613      	movlt	r3, r2
 80075de:	6033      	str	r3, [r6, #0]
 80075e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80075e4:	4607      	mov	r7, r0
 80075e6:	460c      	mov	r4, r1
 80075e8:	b10a      	cbz	r2, 80075ee <_printf_common+0x26>
 80075ea:	3301      	adds	r3, #1
 80075ec:	6033      	str	r3, [r6, #0]
 80075ee:	6823      	ldr	r3, [r4, #0]
 80075f0:	0699      	lsls	r1, r3, #26
 80075f2:	bf42      	ittt	mi
 80075f4:	6833      	ldrmi	r3, [r6, #0]
 80075f6:	3302      	addmi	r3, #2
 80075f8:	6033      	strmi	r3, [r6, #0]
 80075fa:	6825      	ldr	r5, [r4, #0]
 80075fc:	f015 0506 	ands.w	r5, r5, #6
 8007600:	d106      	bne.n	8007610 <_printf_common+0x48>
 8007602:	f104 0a19 	add.w	sl, r4, #25
 8007606:	68e3      	ldr	r3, [r4, #12]
 8007608:	6832      	ldr	r2, [r6, #0]
 800760a:	1a9b      	subs	r3, r3, r2
 800760c:	42ab      	cmp	r3, r5
 800760e:	dc26      	bgt.n	800765e <_printf_common+0x96>
 8007610:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007614:	6822      	ldr	r2, [r4, #0]
 8007616:	3b00      	subs	r3, #0
 8007618:	bf18      	it	ne
 800761a:	2301      	movne	r3, #1
 800761c:	0692      	lsls	r2, r2, #26
 800761e:	d42b      	bmi.n	8007678 <_printf_common+0xb0>
 8007620:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007624:	4641      	mov	r1, r8
 8007626:	4638      	mov	r0, r7
 8007628:	47c8      	blx	r9
 800762a:	3001      	adds	r0, #1
 800762c:	d01e      	beq.n	800766c <_printf_common+0xa4>
 800762e:	6823      	ldr	r3, [r4, #0]
 8007630:	6922      	ldr	r2, [r4, #16]
 8007632:	f003 0306 	and.w	r3, r3, #6
 8007636:	2b04      	cmp	r3, #4
 8007638:	bf02      	ittt	eq
 800763a:	68e5      	ldreq	r5, [r4, #12]
 800763c:	6833      	ldreq	r3, [r6, #0]
 800763e:	1aed      	subeq	r5, r5, r3
 8007640:	68a3      	ldr	r3, [r4, #8]
 8007642:	bf0c      	ite	eq
 8007644:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007648:	2500      	movne	r5, #0
 800764a:	4293      	cmp	r3, r2
 800764c:	bfc4      	itt	gt
 800764e:	1a9b      	subgt	r3, r3, r2
 8007650:	18ed      	addgt	r5, r5, r3
 8007652:	2600      	movs	r6, #0
 8007654:	341a      	adds	r4, #26
 8007656:	42b5      	cmp	r5, r6
 8007658:	d11a      	bne.n	8007690 <_printf_common+0xc8>
 800765a:	2000      	movs	r0, #0
 800765c:	e008      	b.n	8007670 <_printf_common+0xa8>
 800765e:	2301      	movs	r3, #1
 8007660:	4652      	mov	r2, sl
 8007662:	4641      	mov	r1, r8
 8007664:	4638      	mov	r0, r7
 8007666:	47c8      	blx	r9
 8007668:	3001      	adds	r0, #1
 800766a:	d103      	bne.n	8007674 <_printf_common+0xac>
 800766c:	f04f 30ff 	mov.w	r0, #4294967295
 8007670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007674:	3501      	adds	r5, #1
 8007676:	e7c6      	b.n	8007606 <_printf_common+0x3e>
 8007678:	18e1      	adds	r1, r4, r3
 800767a:	1c5a      	adds	r2, r3, #1
 800767c:	2030      	movs	r0, #48	@ 0x30
 800767e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007682:	4422      	add	r2, r4
 8007684:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007688:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800768c:	3302      	adds	r3, #2
 800768e:	e7c7      	b.n	8007620 <_printf_common+0x58>
 8007690:	2301      	movs	r3, #1
 8007692:	4622      	mov	r2, r4
 8007694:	4641      	mov	r1, r8
 8007696:	4638      	mov	r0, r7
 8007698:	47c8      	blx	r9
 800769a:	3001      	adds	r0, #1
 800769c:	d0e6      	beq.n	800766c <_printf_common+0xa4>
 800769e:	3601      	adds	r6, #1
 80076a0:	e7d9      	b.n	8007656 <_printf_common+0x8e>
	...

080076a4 <_printf_i>:
 80076a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076a8:	7e0f      	ldrb	r7, [r1, #24]
 80076aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80076ac:	2f78      	cmp	r7, #120	@ 0x78
 80076ae:	4691      	mov	r9, r2
 80076b0:	4680      	mov	r8, r0
 80076b2:	460c      	mov	r4, r1
 80076b4:	469a      	mov	sl, r3
 80076b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80076ba:	d807      	bhi.n	80076cc <_printf_i+0x28>
 80076bc:	2f62      	cmp	r7, #98	@ 0x62
 80076be:	d80a      	bhi.n	80076d6 <_printf_i+0x32>
 80076c0:	2f00      	cmp	r7, #0
 80076c2:	f000 80d1 	beq.w	8007868 <_printf_i+0x1c4>
 80076c6:	2f58      	cmp	r7, #88	@ 0x58
 80076c8:	f000 80b8 	beq.w	800783c <_printf_i+0x198>
 80076cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80076d4:	e03a      	b.n	800774c <_printf_i+0xa8>
 80076d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80076da:	2b15      	cmp	r3, #21
 80076dc:	d8f6      	bhi.n	80076cc <_printf_i+0x28>
 80076de:	a101      	add	r1, pc, #4	@ (adr r1, 80076e4 <_printf_i+0x40>)
 80076e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076e4:	0800773d 	.word	0x0800773d
 80076e8:	08007751 	.word	0x08007751
 80076ec:	080076cd 	.word	0x080076cd
 80076f0:	080076cd 	.word	0x080076cd
 80076f4:	080076cd 	.word	0x080076cd
 80076f8:	080076cd 	.word	0x080076cd
 80076fc:	08007751 	.word	0x08007751
 8007700:	080076cd 	.word	0x080076cd
 8007704:	080076cd 	.word	0x080076cd
 8007708:	080076cd 	.word	0x080076cd
 800770c:	080076cd 	.word	0x080076cd
 8007710:	0800784f 	.word	0x0800784f
 8007714:	0800777b 	.word	0x0800777b
 8007718:	08007809 	.word	0x08007809
 800771c:	080076cd 	.word	0x080076cd
 8007720:	080076cd 	.word	0x080076cd
 8007724:	08007871 	.word	0x08007871
 8007728:	080076cd 	.word	0x080076cd
 800772c:	0800777b 	.word	0x0800777b
 8007730:	080076cd 	.word	0x080076cd
 8007734:	080076cd 	.word	0x080076cd
 8007738:	08007811 	.word	0x08007811
 800773c:	6833      	ldr	r3, [r6, #0]
 800773e:	1d1a      	adds	r2, r3, #4
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	6032      	str	r2, [r6, #0]
 8007744:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007748:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800774c:	2301      	movs	r3, #1
 800774e:	e09c      	b.n	800788a <_printf_i+0x1e6>
 8007750:	6833      	ldr	r3, [r6, #0]
 8007752:	6820      	ldr	r0, [r4, #0]
 8007754:	1d19      	adds	r1, r3, #4
 8007756:	6031      	str	r1, [r6, #0]
 8007758:	0606      	lsls	r6, r0, #24
 800775a:	d501      	bpl.n	8007760 <_printf_i+0xbc>
 800775c:	681d      	ldr	r5, [r3, #0]
 800775e:	e003      	b.n	8007768 <_printf_i+0xc4>
 8007760:	0645      	lsls	r5, r0, #25
 8007762:	d5fb      	bpl.n	800775c <_printf_i+0xb8>
 8007764:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007768:	2d00      	cmp	r5, #0
 800776a:	da03      	bge.n	8007774 <_printf_i+0xd0>
 800776c:	232d      	movs	r3, #45	@ 0x2d
 800776e:	426d      	negs	r5, r5
 8007770:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007774:	4858      	ldr	r0, [pc, #352]	@ (80078d8 <_printf_i+0x234>)
 8007776:	230a      	movs	r3, #10
 8007778:	e011      	b.n	800779e <_printf_i+0xfa>
 800777a:	6821      	ldr	r1, [r4, #0]
 800777c:	6833      	ldr	r3, [r6, #0]
 800777e:	0608      	lsls	r0, r1, #24
 8007780:	f853 5b04 	ldr.w	r5, [r3], #4
 8007784:	d402      	bmi.n	800778c <_printf_i+0xe8>
 8007786:	0649      	lsls	r1, r1, #25
 8007788:	bf48      	it	mi
 800778a:	b2ad      	uxthmi	r5, r5
 800778c:	2f6f      	cmp	r7, #111	@ 0x6f
 800778e:	4852      	ldr	r0, [pc, #328]	@ (80078d8 <_printf_i+0x234>)
 8007790:	6033      	str	r3, [r6, #0]
 8007792:	bf14      	ite	ne
 8007794:	230a      	movne	r3, #10
 8007796:	2308      	moveq	r3, #8
 8007798:	2100      	movs	r1, #0
 800779a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800779e:	6866      	ldr	r6, [r4, #4]
 80077a0:	60a6      	str	r6, [r4, #8]
 80077a2:	2e00      	cmp	r6, #0
 80077a4:	db05      	blt.n	80077b2 <_printf_i+0x10e>
 80077a6:	6821      	ldr	r1, [r4, #0]
 80077a8:	432e      	orrs	r6, r5
 80077aa:	f021 0104 	bic.w	r1, r1, #4
 80077ae:	6021      	str	r1, [r4, #0]
 80077b0:	d04b      	beq.n	800784a <_printf_i+0x1a6>
 80077b2:	4616      	mov	r6, r2
 80077b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80077b8:	fb03 5711 	mls	r7, r3, r1, r5
 80077bc:	5dc7      	ldrb	r7, [r0, r7]
 80077be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80077c2:	462f      	mov	r7, r5
 80077c4:	42bb      	cmp	r3, r7
 80077c6:	460d      	mov	r5, r1
 80077c8:	d9f4      	bls.n	80077b4 <_printf_i+0x110>
 80077ca:	2b08      	cmp	r3, #8
 80077cc:	d10b      	bne.n	80077e6 <_printf_i+0x142>
 80077ce:	6823      	ldr	r3, [r4, #0]
 80077d0:	07df      	lsls	r7, r3, #31
 80077d2:	d508      	bpl.n	80077e6 <_printf_i+0x142>
 80077d4:	6923      	ldr	r3, [r4, #16]
 80077d6:	6861      	ldr	r1, [r4, #4]
 80077d8:	4299      	cmp	r1, r3
 80077da:	bfde      	ittt	le
 80077dc:	2330      	movle	r3, #48	@ 0x30
 80077de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80077e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80077e6:	1b92      	subs	r2, r2, r6
 80077e8:	6122      	str	r2, [r4, #16]
 80077ea:	f8cd a000 	str.w	sl, [sp]
 80077ee:	464b      	mov	r3, r9
 80077f0:	aa03      	add	r2, sp, #12
 80077f2:	4621      	mov	r1, r4
 80077f4:	4640      	mov	r0, r8
 80077f6:	f7ff fee7 	bl	80075c8 <_printf_common>
 80077fa:	3001      	adds	r0, #1
 80077fc:	d14a      	bne.n	8007894 <_printf_i+0x1f0>
 80077fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007802:	b004      	add	sp, #16
 8007804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007808:	6823      	ldr	r3, [r4, #0]
 800780a:	f043 0320 	orr.w	r3, r3, #32
 800780e:	6023      	str	r3, [r4, #0]
 8007810:	4832      	ldr	r0, [pc, #200]	@ (80078dc <_printf_i+0x238>)
 8007812:	2778      	movs	r7, #120	@ 0x78
 8007814:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007818:	6823      	ldr	r3, [r4, #0]
 800781a:	6831      	ldr	r1, [r6, #0]
 800781c:	061f      	lsls	r7, r3, #24
 800781e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007822:	d402      	bmi.n	800782a <_printf_i+0x186>
 8007824:	065f      	lsls	r7, r3, #25
 8007826:	bf48      	it	mi
 8007828:	b2ad      	uxthmi	r5, r5
 800782a:	6031      	str	r1, [r6, #0]
 800782c:	07d9      	lsls	r1, r3, #31
 800782e:	bf44      	itt	mi
 8007830:	f043 0320 	orrmi.w	r3, r3, #32
 8007834:	6023      	strmi	r3, [r4, #0]
 8007836:	b11d      	cbz	r5, 8007840 <_printf_i+0x19c>
 8007838:	2310      	movs	r3, #16
 800783a:	e7ad      	b.n	8007798 <_printf_i+0xf4>
 800783c:	4826      	ldr	r0, [pc, #152]	@ (80078d8 <_printf_i+0x234>)
 800783e:	e7e9      	b.n	8007814 <_printf_i+0x170>
 8007840:	6823      	ldr	r3, [r4, #0]
 8007842:	f023 0320 	bic.w	r3, r3, #32
 8007846:	6023      	str	r3, [r4, #0]
 8007848:	e7f6      	b.n	8007838 <_printf_i+0x194>
 800784a:	4616      	mov	r6, r2
 800784c:	e7bd      	b.n	80077ca <_printf_i+0x126>
 800784e:	6833      	ldr	r3, [r6, #0]
 8007850:	6825      	ldr	r5, [r4, #0]
 8007852:	6961      	ldr	r1, [r4, #20]
 8007854:	1d18      	adds	r0, r3, #4
 8007856:	6030      	str	r0, [r6, #0]
 8007858:	062e      	lsls	r6, r5, #24
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	d501      	bpl.n	8007862 <_printf_i+0x1be>
 800785e:	6019      	str	r1, [r3, #0]
 8007860:	e002      	b.n	8007868 <_printf_i+0x1c4>
 8007862:	0668      	lsls	r0, r5, #25
 8007864:	d5fb      	bpl.n	800785e <_printf_i+0x1ba>
 8007866:	8019      	strh	r1, [r3, #0]
 8007868:	2300      	movs	r3, #0
 800786a:	6123      	str	r3, [r4, #16]
 800786c:	4616      	mov	r6, r2
 800786e:	e7bc      	b.n	80077ea <_printf_i+0x146>
 8007870:	6833      	ldr	r3, [r6, #0]
 8007872:	1d1a      	adds	r2, r3, #4
 8007874:	6032      	str	r2, [r6, #0]
 8007876:	681e      	ldr	r6, [r3, #0]
 8007878:	6862      	ldr	r2, [r4, #4]
 800787a:	2100      	movs	r1, #0
 800787c:	4630      	mov	r0, r6
 800787e:	f7f8 fcb7 	bl	80001f0 <memchr>
 8007882:	b108      	cbz	r0, 8007888 <_printf_i+0x1e4>
 8007884:	1b80      	subs	r0, r0, r6
 8007886:	6060      	str	r0, [r4, #4]
 8007888:	6863      	ldr	r3, [r4, #4]
 800788a:	6123      	str	r3, [r4, #16]
 800788c:	2300      	movs	r3, #0
 800788e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007892:	e7aa      	b.n	80077ea <_printf_i+0x146>
 8007894:	6923      	ldr	r3, [r4, #16]
 8007896:	4632      	mov	r2, r6
 8007898:	4649      	mov	r1, r9
 800789a:	4640      	mov	r0, r8
 800789c:	47d0      	blx	sl
 800789e:	3001      	adds	r0, #1
 80078a0:	d0ad      	beq.n	80077fe <_printf_i+0x15a>
 80078a2:	6823      	ldr	r3, [r4, #0]
 80078a4:	079b      	lsls	r3, r3, #30
 80078a6:	d413      	bmi.n	80078d0 <_printf_i+0x22c>
 80078a8:	68e0      	ldr	r0, [r4, #12]
 80078aa:	9b03      	ldr	r3, [sp, #12]
 80078ac:	4298      	cmp	r0, r3
 80078ae:	bfb8      	it	lt
 80078b0:	4618      	movlt	r0, r3
 80078b2:	e7a6      	b.n	8007802 <_printf_i+0x15e>
 80078b4:	2301      	movs	r3, #1
 80078b6:	4632      	mov	r2, r6
 80078b8:	4649      	mov	r1, r9
 80078ba:	4640      	mov	r0, r8
 80078bc:	47d0      	blx	sl
 80078be:	3001      	adds	r0, #1
 80078c0:	d09d      	beq.n	80077fe <_printf_i+0x15a>
 80078c2:	3501      	adds	r5, #1
 80078c4:	68e3      	ldr	r3, [r4, #12]
 80078c6:	9903      	ldr	r1, [sp, #12]
 80078c8:	1a5b      	subs	r3, r3, r1
 80078ca:	42ab      	cmp	r3, r5
 80078cc:	dcf2      	bgt.n	80078b4 <_printf_i+0x210>
 80078ce:	e7eb      	b.n	80078a8 <_printf_i+0x204>
 80078d0:	2500      	movs	r5, #0
 80078d2:	f104 0619 	add.w	r6, r4, #25
 80078d6:	e7f5      	b.n	80078c4 <_printf_i+0x220>
 80078d8:	0800ab54 	.word	0x0800ab54
 80078dc:	0800ab65 	.word	0x0800ab65

080078e0 <__sflush_r>:
 80078e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80078e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078e8:	0716      	lsls	r6, r2, #28
 80078ea:	4605      	mov	r5, r0
 80078ec:	460c      	mov	r4, r1
 80078ee:	d454      	bmi.n	800799a <__sflush_r+0xba>
 80078f0:	684b      	ldr	r3, [r1, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	dc02      	bgt.n	80078fc <__sflush_r+0x1c>
 80078f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	dd48      	ble.n	800798e <__sflush_r+0xae>
 80078fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80078fe:	2e00      	cmp	r6, #0
 8007900:	d045      	beq.n	800798e <__sflush_r+0xae>
 8007902:	2300      	movs	r3, #0
 8007904:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007908:	682f      	ldr	r7, [r5, #0]
 800790a:	6a21      	ldr	r1, [r4, #32]
 800790c:	602b      	str	r3, [r5, #0]
 800790e:	d030      	beq.n	8007972 <__sflush_r+0x92>
 8007910:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007912:	89a3      	ldrh	r3, [r4, #12]
 8007914:	0759      	lsls	r1, r3, #29
 8007916:	d505      	bpl.n	8007924 <__sflush_r+0x44>
 8007918:	6863      	ldr	r3, [r4, #4]
 800791a:	1ad2      	subs	r2, r2, r3
 800791c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800791e:	b10b      	cbz	r3, 8007924 <__sflush_r+0x44>
 8007920:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007922:	1ad2      	subs	r2, r2, r3
 8007924:	2300      	movs	r3, #0
 8007926:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007928:	6a21      	ldr	r1, [r4, #32]
 800792a:	4628      	mov	r0, r5
 800792c:	47b0      	blx	r6
 800792e:	1c43      	adds	r3, r0, #1
 8007930:	89a3      	ldrh	r3, [r4, #12]
 8007932:	d106      	bne.n	8007942 <__sflush_r+0x62>
 8007934:	6829      	ldr	r1, [r5, #0]
 8007936:	291d      	cmp	r1, #29
 8007938:	d82b      	bhi.n	8007992 <__sflush_r+0xb2>
 800793a:	4a2a      	ldr	r2, [pc, #168]	@ (80079e4 <__sflush_r+0x104>)
 800793c:	40ca      	lsrs	r2, r1
 800793e:	07d6      	lsls	r6, r2, #31
 8007940:	d527      	bpl.n	8007992 <__sflush_r+0xb2>
 8007942:	2200      	movs	r2, #0
 8007944:	6062      	str	r2, [r4, #4]
 8007946:	04d9      	lsls	r1, r3, #19
 8007948:	6922      	ldr	r2, [r4, #16]
 800794a:	6022      	str	r2, [r4, #0]
 800794c:	d504      	bpl.n	8007958 <__sflush_r+0x78>
 800794e:	1c42      	adds	r2, r0, #1
 8007950:	d101      	bne.n	8007956 <__sflush_r+0x76>
 8007952:	682b      	ldr	r3, [r5, #0]
 8007954:	b903      	cbnz	r3, 8007958 <__sflush_r+0x78>
 8007956:	6560      	str	r0, [r4, #84]	@ 0x54
 8007958:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800795a:	602f      	str	r7, [r5, #0]
 800795c:	b1b9      	cbz	r1, 800798e <__sflush_r+0xae>
 800795e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007962:	4299      	cmp	r1, r3
 8007964:	d002      	beq.n	800796c <__sflush_r+0x8c>
 8007966:	4628      	mov	r0, r5
 8007968:	f7ff fbd6 	bl	8007118 <_free_r>
 800796c:	2300      	movs	r3, #0
 800796e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007970:	e00d      	b.n	800798e <__sflush_r+0xae>
 8007972:	2301      	movs	r3, #1
 8007974:	4628      	mov	r0, r5
 8007976:	47b0      	blx	r6
 8007978:	4602      	mov	r2, r0
 800797a:	1c50      	adds	r0, r2, #1
 800797c:	d1c9      	bne.n	8007912 <__sflush_r+0x32>
 800797e:	682b      	ldr	r3, [r5, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d0c6      	beq.n	8007912 <__sflush_r+0x32>
 8007984:	2b1d      	cmp	r3, #29
 8007986:	d001      	beq.n	800798c <__sflush_r+0xac>
 8007988:	2b16      	cmp	r3, #22
 800798a:	d11e      	bne.n	80079ca <__sflush_r+0xea>
 800798c:	602f      	str	r7, [r5, #0]
 800798e:	2000      	movs	r0, #0
 8007990:	e022      	b.n	80079d8 <__sflush_r+0xf8>
 8007992:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007996:	b21b      	sxth	r3, r3
 8007998:	e01b      	b.n	80079d2 <__sflush_r+0xf2>
 800799a:	690f      	ldr	r7, [r1, #16]
 800799c:	2f00      	cmp	r7, #0
 800799e:	d0f6      	beq.n	800798e <__sflush_r+0xae>
 80079a0:	0793      	lsls	r3, r2, #30
 80079a2:	680e      	ldr	r6, [r1, #0]
 80079a4:	bf08      	it	eq
 80079a6:	694b      	ldreq	r3, [r1, #20]
 80079a8:	600f      	str	r7, [r1, #0]
 80079aa:	bf18      	it	ne
 80079ac:	2300      	movne	r3, #0
 80079ae:	eba6 0807 	sub.w	r8, r6, r7
 80079b2:	608b      	str	r3, [r1, #8]
 80079b4:	f1b8 0f00 	cmp.w	r8, #0
 80079b8:	dde9      	ble.n	800798e <__sflush_r+0xae>
 80079ba:	6a21      	ldr	r1, [r4, #32]
 80079bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80079be:	4643      	mov	r3, r8
 80079c0:	463a      	mov	r2, r7
 80079c2:	4628      	mov	r0, r5
 80079c4:	47b0      	blx	r6
 80079c6:	2800      	cmp	r0, #0
 80079c8:	dc08      	bgt.n	80079dc <__sflush_r+0xfc>
 80079ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079d2:	81a3      	strh	r3, [r4, #12]
 80079d4:	f04f 30ff 	mov.w	r0, #4294967295
 80079d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079dc:	4407      	add	r7, r0
 80079de:	eba8 0800 	sub.w	r8, r8, r0
 80079e2:	e7e7      	b.n	80079b4 <__sflush_r+0xd4>
 80079e4:	20400001 	.word	0x20400001

080079e8 <_fflush_r>:
 80079e8:	b538      	push	{r3, r4, r5, lr}
 80079ea:	690b      	ldr	r3, [r1, #16]
 80079ec:	4605      	mov	r5, r0
 80079ee:	460c      	mov	r4, r1
 80079f0:	b913      	cbnz	r3, 80079f8 <_fflush_r+0x10>
 80079f2:	2500      	movs	r5, #0
 80079f4:	4628      	mov	r0, r5
 80079f6:	bd38      	pop	{r3, r4, r5, pc}
 80079f8:	b118      	cbz	r0, 8007a02 <_fflush_r+0x1a>
 80079fa:	6a03      	ldr	r3, [r0, #32]
 80079fc:	b90b      	cbnz	r3, 8007a02 <_fflush_r+0x1a>
 80079fe:	f7ff fa27 	bl	8006e50 <__sinit>
 8007a02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d0f3      	beq.n	80079f2 <_fflush_r+0xa>
 8007a0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007a0c:	07d0      	lsls	r0, r2, #31
 8007a0e:	d404      	bmi.n	8007a1a <_fflush_r+0x32>
 8007a10:	0599      	lsls	r1, r3, #22
 8007a12:	d402      	bmi.n	8007a1a <_fflush_r+0x32>
 8007a14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a16:	f7ff fb5e 	bl	80070d6 <__retarget_lock_acquire_recursive>
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	4621      	mov	r1, r4
 8007a1e:	f7ff ff5f 	bl	80078e0 <__sflush_r>
 8007a22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a24:	07da      	lsls	r2, r3, #31
 8007a26:	4605      	mov	r5, r0
 8007a28:	d4e4      	bmi.n	80079f4 <_fflush_r+0xc>
 8007a2a:	89a3      	ldrh	r3, [r4, #12]
 8007a2c:	059b      	lsls	r3, r3, #22
 8007a2e:	d4e1      	bmi.n	80079f4 <_fflush_r+0xc>
 8007a30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a32:	f7ff fb51 	bl	80070d8 <__retarget_lock_release_recursive>
 8007a36:	e7dd      	b.n	80079f4 <_fflush_r+0xc>

08007a38 <fiprintf>:
 8007a38:	b40e      	push	{r1, r2, r3}
 8007a3a:	b503      	push	{r0, r1, lr}
 8007a3c:	4601      	mov	r1, r0
 8007a3e:	ab03      	add	r3, sp, #12
 8007a40:	4805      	ldr	r0, [pc, #20]	@ (8007a58 <fiprintf+0x20>)
 8007a42:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a46:	6800      	ldr	r0, [r0, #0]
 8007a48:	9301      	str	r3, [sp, #4]
 8007a4a:	f000 f89d 	bl	8007b88 <_vfiprintf_r>
 8007a4e:	b002      	add	sp, #8
 8007a50:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a54:	b003      	add	sp, #12
 8007a56:	4770      	bx	lr
 8007a58:	20000034 	.word	0x20000034

08007a5c <memmove>:
 8007a5c:	4288      	cmp	r0, r1
 8007a5e:	b510      	push	{r4, lr}
 8007a60:	eb01 0402 	add.w	r4, r1, r2
 8007a64:	d902      	bls.n	8007a6c <memmove+0x10>
 8007a66:	4284      	cmp	r4, r0
 8007a68:	4623      	mov	r3, r4
 8007a6a:	d807      	bhi.n	8007a7c <memmove+0x20>
 8007a6c:	1e43      	subs	r3, r0, #1
 8007a6e:	42a1      	cmp	r1, r4
 8007a70:	d008      	beq.n	8007a84 <memmove+0x28>
 8007a72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a7a:	e7f8      	b.n	8007a6e <memmove+0x12>
 8007a7c:	4402      	add	r2, r0
 8007a7e:	4601      	mov	r1, r0
 8007a80:	428a      	cmp	r2, r1
 8007a82:	d100      	bne.n	8007a86 <memmove+0x2a>
 8007a84:	bd10      	pop	{r4, pc}
 8007a86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a8e:	e7f7      	b.n	8007a80 <memmove+0x24>

08007a90 <_sbrk_r>:
 8007a90:	b538      	push	{r3, r4, r5, lr}
 8007a92:	4d06      	ldr	r5, [pc, #24]	@ (8007aac <_sbrk_r+0x1c>)
 8007a94:	2300      	movs	r3, #0
 8007a96:	4604      	mov	r4, r0
 8007a98:	4608      	mov	r0, r1
 8007a9a:	602b      	str	r3, [r5, #0]
 8007a9c:	f7fc fe02 	bl	80046a4 <_sbrk>
 8007aa0:	1c43      	adds	r3, r0, #1
 8007aa2:	d102      	bne.n	8007aaa <_sbrk_r+0x1a>
 8007aa4:	682b      	ldr	r3, [r5, #0]
 8007aa6:	b103      	cbz	r3, 8007aaa <_sbrk_r+0x1a>
 8007aa8:	6023      	str	r3, [r4, #0]
 8007aaa:	bd38      	pop	{r3, r4, r5, pc}
 8007aac:	2000063c 	.word	0x2000063c

08007ab0 <memcpy>:
 8007ab0:	440a      	add	r2, r1
 8007ab2:	4291      	cmp	r1, r2
 8007ab4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ab8:	d100      	bne.n	8007abc <memcpy+0xc>
 8007aba:	4770      	bx	lr
 8007abc:	b510      	push	{r4, lr}
 8007abe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ac2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ac6:	4291      	cmp	r1, r2
 8007ac8:	d1f9      	bne.n	8007abe <memcpy+0xe>
 8007aca:	bd10      	pop	{r4, pc}

08007acc <abort>:
 8007acc:	b508      	push	{r3, lr}
 8007ace:	2006      	movs	r0, #6
 8007ad0:	f000 fa2e 	bl	8007f30 <raise>
 8007ad4:	2001      	movs	r0, #1
 8007ad6:	f7fc fd6d 	bl	80045b4 <_exit>

08007ada <_realloc_r>:
 8007ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ade:	4607      	mov	r7, r0
 8007ae0:	4614      	mov	r4, r2
 8007ae2:	460d      	mov	r5, r1
 8007ae4:	b921      	cbnz	r1, 8007af0 <_realloc_r+0x16>
 8007ae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007aea:	4611      	mov	r1, r2
 8007aec:	f7ff bb88 	b.w	8007200 <_malloc_r>
 8007af0:	b92a      	cbnz	r2, 8007afe <_realloc_r+0x24>
 8007af2:	f7ff fb11 	bl	8007118 <_free_r>
 8007af6:	4625      	mov	r5, r4
 8007af8:	4628      	mov	r0, r5
 8007afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007afe:	f000 fa33 	bl	8007f68 <_malloc_usable_size_r>
 8007b02:	4284      	cmp	r4, r0
 8007b04:	4606      	mov	r6, r0
 8007b06:	d802      	bhi.n	8007b0e <_realloc_r+0x34>
 8007b08:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007b0c:	d8f4      	bhi.n	8007af8 <_realloc_r+0x1e>
 8007b0e:	4621      	mov	r1, r4
 8007b10:	4638      	mov	r0, r7
 8007b12:	f7ff fb75 	bl	8007200 <_malloc_r>
 8007b16:	4680      	mov	r8, r0
 8007b18:	b908      	cbnz	r0, 8007b1e <_realloc_r+0x44>
 8007b1a:	4645      	mov	r5, r8
 8007b1c:	e7ec      	b.n	8007af8 <_realloc_r+0x1e>
 8007b1e:	42b4      	cmp	r4, r6
 8007b20:	4622      	mov	r2, r4
 8007b22:	4629      	mov	r1, r5
 8007b24:	bf28      	it	cs
 8007b26:	4632      	movcs	r2, r6
 8007b28:	f7ff ffc2 	bl	8007ab0 <memcpy>
 8007b2c:	4629      	mov	r1, r5
 8007b2e:	4638      	mov	r0, r7
 8007b30:	f7ff faf2 	bl	8007118 <_free_r>
 8007b34:	e7f1      	b.n	8007b1a <_realloc_r+0x40>

08007b36 <__sfputc_r>:
 8007b36:	6893      	ldr	r3, [r2, #8]
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	b410      	push	{r4}
 8007b3e:	6093      	str	r3, [r2, #8]
 8007b40:	da08      	bge.n	8007b54 <__sfputc_r+0x1e>
 8007b42:	6994      	ldr	r4, [r2, #24]
 8007b44:	42a3      	cmp	r3, r4
 8007b46:	db01      	blt.n	8007b4c <__sfputc_r+0x16>
 8007b48:	290a      	cmp	r1, #10
 8007b4a:	d103      	bne.n	8007b54 <__sfputc_r+0x1e>
 8007b4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b50:	f000 b932 	b.w	8007db8 <__swbuf_r>
 8007b54:	6813      	ldr	r3, [r2, #0]
 8007b56:	1c58      	adds	r0, r3, #1
 8007b58:	6010      	str	r0, [r2, #0]
 8007b5a:	7019      	strb	r1, [r3, #0]
 8007b5c:	4608      	mov	r0, r1
 8007b5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <__sfputs_r>:
 8007b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b66:	4606      	mov	r6, r0
 8007b68:	460f      	mov	r7, r1
 8007b6a:	4614      	mov	r4, r2
 8007b6c:	18d5      	adds	r5, r2, r3
 8007b6e:	42ac      	cmp	r4, r5
 8007b70:	d101      	bne.n	8007b76 <__sfputs_r+0x12>
 8007b72:	2000      	movs	r0, #0
 8007b74:	e007      	b.n	8007b86 <__sfputs_r+0x22>
 8007b76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b7a:	463a      	mov	r2, r7
 8007b7c:	4630      	mov	r0, r6
 8007b7e:	f7ff ffda 	bl	8007b36 <__sfputc_r>
 8007b82:	1c43      	adds	r3, r0, #1
 8007b84:	d1f3      	bne.n	8007b6e <__sfputs_r+0xa>
 8007b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007b88 <_vfiprintf_r>:
 8007b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b8c:	460d      	mov	r5, r1
 8007b8e:	b09d      	sub	sp, #116	@ 0x74
 8007b90:	4614      	mov	r4, r2
 8007b92:	4698      	mov	r8, r3
 8007b94:	4606      	mov	r6, r0
 8007b96:	b118      	cbz	r0, 8007ba0 <_vfiprintf_r+0x18>
 8007b98:	6a03      	ldr	r3, [r0, #32]
 8007b9a:	b90b      	cbnz	r3, 8007ba0 <_vfiprintf_r+0x18>
 8007b9c:	f7ff f958 	bl	8006e50 <__sinit>
 8007ba0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ba2:	07d9      	lsls	r1, r3, #31
 8007ba4:	d405      	bmi.n	8007bb2 <_vfiprintf_r+0x2a>
 8007ba6:	89ab      	ldrh	r3, [r5, #12]
 8007ba8:	059a      	lsls	r2, r3, #22
 8007baa:	d402      	bmi.n	8007bb2 <_vfiprintf_r+0x2a>
 8007bac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007bae:	f7ff fa92 	bl	80070d6 <__retarget_lock_acquire_recursive>
 8007bb2:	89ab      	ldrh	r3, [r5, #12]
 8007bb4:	071b      	lsls	r3, r3, #28
 8007bb6:	d501      	bpl.n	8007bbc <_vfiprintf_r+0x34>
 8007bb8:	692b      	ldr	r3, [r5, #16]
 8007bba:	b99b      	cbnz	r3, 8007be4 <_vfiprintf_r+0x5c>
 8007bbc:	4629      	mov	r1, r5
 8007bbe:	4630      	mov	r0, r6
 8007bc0:	f000 f938 	bl	8007e34 <__swsetup_r>
 8007bc4:	b170      	cbz	r0, 8007be4 <_vfiprintf_r+0x5c>
 8007bc6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007bc8:	07dc      	lsls	r4, r3, #31
 8007bca:	d504      	bpl.n	8007bd6 <_vfiprintf_r+0x4e>
 8007bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd0:	b01d      	add	sp, #116	@ 0x74
 8007bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bd6:	89ab      	ldrh	r3, [r5, #12]
 8007bd8:	0598      	lsls	r0, r3, #22
 8007bda:	d4f7      	bmi.n	8007bcc <_vfiprintf_r+0x44>
 8007bdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007bde:	f7ff fa7b 	bl	80070d8 <__retarget_lock_release_recursive>
 8007be2:	e7f3      	b.n	8007bcc <_vfiprintf_r+0x44>
 8007be4:	2300      	movs	r3, #0
 8007be6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007be8:	2320      	movs	r3, #32
 8007bea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007bee:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bf2:	2330      	movs	r3, #48	@ 0x30
 8007bf4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007da4 <_vfiprintf_r+0x21c>
 8007bf8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007bfc:	f04f 0901 	mov.w	r9, #1
 8007c00:	4623      	mov	r3, r4
 8007c02:	469a      	mov	sl, r3
 8007c04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c08:	b10a      	cbz	r2, 8007c0e <_vfiprintf_r+0x86>
 8007c0a:	2a25      	cmp	r2, #37	@ 0x25
 8007c0c:	d1f9      	bne.n	8007c02 <_vfiprintf_r+0x7a>
 8007c0e:	ebba 0b04 	subs.w	fp, sl, r4
 8007c12:	d00b      	beq.n	8007c2c <_vfiprintf_r+0xa4>
 8007c14:	465b      	mov	r3, fp
 8007c16:	4622      	mov	r2, r4
 8007c18:	4629      	mov	r1, r5
 8007c1a:	4630      	mov	r0, r6
 8007c1c:	f7ff ffa2 	bl	8007b64 <__sfputs_r>
 8007c20:	3001      	adds	r0, #1
 8007c22:	f000 80a7 	beq.w	8007d74 <_vfiprintf_r+0x1ec>
 8007c26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c28:	445a      	add	r2, fp
 8007c2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c2c:	f89a 3000 	ldrb.w	r3, [sl]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f000 809f 	beq.w	8007d74 <_vfiprintf_r+0x1ec>
 8007c36:	2300      	movs	r3, #0
 8007c38:	f04f 32ff 	mov.w	r2, #4294967295
 8007c3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c40:	f10a 0a01 	add.w	sl, sl, #1
 8007c44:	9304      	str	r3, [sp, #16]
 8007c46:	9307      	str	r3, [sp, #28]
 8007c48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c4c:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c4e:	4654      	mov	r4, sl
 8007c50:	2205      	movs	r2, #5
 8007c52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c56:	4853      	ldr	r0, [pc, #332]	@ (8007da4 <_vfiprintf_r+0x21c>)
 8007c58:	f7f8 faca 	bl	80001f0 <memchr>
 8007c5c:	9a04      	ldr	r2, [sp, #16]
 8007c5e:	b9d8      	cbnz	r0, 8007c98 <_vfiprintf_r+0x110>
 8007c60:	06d1      	lsls	r1, r2, #27
 8007c62:	bf44      	itt	mi
 8007c64:	2320      	movmi	r3, #32
 8007c66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c6a:	0713      	lsls	r3, r2, #28
 8007c6c:	bf44      	itt	mi
 8007c6e:	232b      	movmi	r3, #43	@ 0x2b
 8007c70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c74:	f89a 3000 	ldrb.w	r3, [sl]
 8007c78:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c7a:	d015      	beq.n	8007ca8 <_vfiprintf_r+0x120>
 8007c7c:	9a07      	ldr	r2, [sp, #28]
 8007c7e:	4654      	mov	r4, sl
 8007c80:	2000      	movs	r0, #0
 8007c82:	f04f 0c0a 	mov.w	ip, #10
 8007c86:	4621      	mov	r1, r4
 8007c88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c8c:	3b30      	subs	r3, #48	@ 0x30
 8007c8e:	2b09      	cmp	r3, #9
 8007c90:	d94b      	bls.n	8007d2a <_vfiprintf_r+0x1a2>
 8007c92:	b1b0      	cbz	r0, 8007cc2 <_vfiprintf_r+0x13a>
 8007c94:	9207      	str	r2, [sp, #28]
 8007c96:	e014      	b.n	8007cc2 <_vfiprintf_r+0x13a>
 8007c98:	eba0 0308 	sub.w	r3, r0, r8
 8007c9c:	fa09 f303 	lsl.w	r3, r9, r3
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	9304      	str	r3, [sp, #16]
 8007ca4:	46a2      	mov	sl, r4
 8007ca6:	e7d2      	b.n	8007c4e <_vfiprintf_r+0xc6>
 8007ca8:	9b03      	ldr	r3, [sp, #12]
 8007caa:	1d19      	adds	r1, r3, #4
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	9103      	str	r1, [sp, #12]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	bfbb      	ittet	lt
 8007cb4:	425b      	neglt	r3, r3
 8007cb6:	f042 0202 	orrlt.w	r2, r2, #2
 8007cba:	9307      	strge	r3, [sp, #28]
 8007cbc:	9307      	strlt	r3, [sp, #28]
 8007cbe:	bfb8      	it	lt
 8007cc0:	9204      	strlt	r2, [sp, #16]
 8007cc2:	7823      	ldrb	r3, [r4, #0]
 8007cc4:	2b2e      	cmp	r3, #46	@ 0x2e
 8007cc6:	d10a      	bne.n	8007cde <_vfiprintf_r+0x156>
 8007cc8:	7863      	ldrb	r3, [r4, #1]
 8007cca:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ccc:	d132      	bne.n	8007d34 <_vfiprintf_r+0x1ac>
 8007cce:	9b03      	ldr	r3, [sp, #12]
 8007cd0:	1d1a      	adds	r2, r3, #4
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	9203      	str	r2, [sp, #12]
 8007cd6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007cda:	3402      	adds	r4, #2
 8007cdc:	9305      	str	r3, [sp, #20]
 8007cde:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007db4 <_vfiprintf_r+0x22c>
 8007ce2:	7821      	ldrb	r1, [r4, #0]
 8007ce4:	2203      	movs	r2, #3
 8007ce6:	4650      	mov	r0, sl
 8007ce8:	f7f8 fa82 	bl	80001f0 <memchr>
 8007cec:	b138      	cbz	r0, 8007cfe <_vfiprintf_r+0x176>
 8007cee:	9b04      	ldr	r3, [sp, #16]
 8007cf0:	eba0 000a 	sub.w	r0, r0, sl
 8007cf4:	2240      	movs	r2, #64	@ 0x40
 8007cf6:	4082      	lsls	r2, r0
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	3401      	adds	r4, #1
 8007cfc:	9304      	str	r3, [sp, #16]
 8007cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d02:	4829      	ldr	r0, [pc, #164]	@ (8007da8 <_vfiprintf_r+0x220>)
 8007d04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d08:	2206      	movs	r2, #6
 8007d0a:	f7f8 fa71 	bl	80001f0 <memchr>
 8007d0e:	2800      	cmp	r0, #0
 8007d10:	d03f      	beq.n	8007d92 <_vfiprintf_r+0x20a>
 8007d12:	4b26      	ldr	r3, [pc, #152]	@ (8007dac <_vfiprintf_r+0x224>)
 8007d14:	bb1b      	cbnz	r3, 8007d5e <_vfiprintf_r+0x1d6>
 8007d16:	9b03      	ldr	r3, [sp, #12]
 8007d18:	3307      	adds	r3, #7
 8007d1a:	f023 0307 	bic.w	r3, r3, #7
 8007d1e:	3308      	adds	r3, #8
 8007d20:	9303      	str	r3, [sp, #12]
 8007d22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d24:	443b      	add	r3, r7
 8007d26:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d28:	e76a      	b.n	8007c00 <_vfiprintf_r+0x78>
 8007d2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d2e:	460c      	mov	r4, r1
 8007d30:	2001      	movs	r0, #1
 8007d32:	e7a8      	b.n	8007c86 <_vfiprintf_r+0xfe>
 8007d34:	2300      	movs	r3, #0
 8007d36:	3401      	adds	r4, #1
 8007d38:	9305      	str	r3, [sp, #20]
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	f04f 0c0a 	mov.w	ip, #10
 8007d40:	4620      	mov	r0, r4
 8007d42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d46:	3a30      	subs	r2, #48	@ 0x30
 8007d48:	2a09      	cmp	r2, #9
 8007d4a:	d903      	bls.n	8007d54 <_vfiprintf_r+0x1cc>
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d0c6      	beq.n	8007cde <_vfiprintf_r+0x156>
 8007d50:	9105      	str	r1, [sp, #20]
 8007d52:	e7c4      	b.n	8007cde <_vfiprintf_r+0x156>
 8007d54:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d58:	4604      	mov	r4, r0
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e7f0      	b.n	8007d40 <_vfiprintf_r+0x1b8>
 8007d5e:	ab03      	add	r3, sp, #12
 8007d60:	9300      	str	r3, [sp, #0]
 8007d62:	462a      	mov	r2, r5
 8007d64:	4b12      	ldr	r3, [pc, #72]	@ (8007db0 <_vfiprintf_r+0x228>)
 8007d66:	a904      	add	r1, sp, #16
 8007d68:	4630      	mov	r0, r6
 8007d6a:	f3af 8000 	nop.w
 8007d6e:	4607      	mov	r7, r0
 8007d70:	1c78      	adds	r0, r7, #1
 8007d72:	d1d6      	bne.n	8007d22 <_vfiprintf_r+0x19a>
 8007d74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d76:	07d9      	lsls	r1, r3, #31
 8007d78:	d405      	bmi.n	8007d86 <_vfiprintf_r+0x1fe>
 8007d7a:	89ab      	ldrh	r3, [r5, #12]
 8007d7c:	059a      	lsls	r2, r3, #22
 8007d7e:	d402      	bmi.n	8007d86 <_vfiprintf_r+0x1fe>
 8007d80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d82:	f7ff f9a9 	bl	80070d8 <__retarget_lock_release_recursive>
 8007d86:	89ab      	ldrh	r3, [r5, #12]
 8007d88:	065b      	lsls	r3, r3, #25
 8007d8a:	f53f af1f 	bmi.w	8007bcc <_vfiprintf_r+0x44>
 8007d8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d90:	e71e      	b.n	8007bd0 <_vfiprintf_r+0x48>
 8007d92:	ab03      	add	r3, sp, #12
 8007d94:	9300      	str	r3, [sp, #0]
 8007d96:	462a      	mov	r2, r5
 8007d98:	4b05      	ldr	r3, [pc, #20]	@ (8007db0 <_vfiprintf_r+0x228>)
 8007d9a:	a904      	add	r1, sp, #16
 8007d9c:	4630      	mov	r0, r6
 8007d9e:	f7ff fc81 	bl	80076a4 <_printf_i>
 8007da2:	e7e4      	b.n	8007d6e <_vfiprintf_r+0x1e6>
 8007da4:	0800ab43 	.word	0x0800ab43
 8007da8:	0800ab4d 	.word	0x0800ab4d
 8007dac:	00000000 	.word	0x00000000
 8007db0:	08007b65 	.word	0x08007b65
 8007db4:	0800ab49 	.word	0x0800ab49

08007db8 <__swbuf_r>:
 8007db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dba:	460e      	mov	r6, r1
 8007dbc:	4614      	mov	r4, r2
 8007dbe:	4605      	mov	r5, r0
 8007dc0:	b118      	cbz	r0, 8007dca <__swbuf_r+0x12>
 8007dc2:	6a03      	ldr	r3, [r0, #32]
 8007dc4:	b90b      	cbnz	r3, 8007dca <__swbuf_r+0x12>
 8007dc6:	f7ff f843 	bl	8006e50 <__sinit>
 8007dca:	69a3      	ldr	r3, [r4, #24]
 8007dcc:	60a3      	str	r3, [r4, #8]
 8007dce:	89a3      	ldrh	r3, [r4, #12]
 8007dd0:	071a      	lsls	r2, r3, #28
 8007dd2:	d501      	bpl.n	8007dd8 <__swbuf_r+0x20>
 8007dd4:	6923      	ldr	r3, [r4, #16]
 8007dd6:	b943      	cbnz	r3, 8007dea <__swbuf_r+0x32>
 8007dd8:	4621      	mov	r1, r4
 8007dda:	4628      	mov	r0, r5
 8007ddc:	f000 f82a 	bl	8007e34 <__swsetup_r>
 8007de0:	b118      	cbz	r0, 8007dea <__swbuf_r+0x32>
 8007de2:	f04f 37ff 	mov.w	r7, #4294967295
 8007de6:	4638      	mov	r0, r7
 8007de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dea:	6823      	ldr	r3, [r4, #0]
 8007dec:	6922      	ldr	r2, [r4, #16]
 8007dee:	1a98      	subs	r0, r3, r2
 8007df0:	6963      	ldr	r3, [r4, #20]
 8007df2:	b2f6      	uxtb	r6, r6
 8007df4:	4283      	cmp	r3, r0
 8007df6:	4637      	mov	r7, r6
 8007df8:	dc05      	bgt.n	8007e06 <__swbuf_r+0x4e>
 8007dfa:	4621      	mov	r1, r4
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	f7ff fdf3 	bl	80079e8 <_fflush_r>
 8007e02:	2800      	cmp	r0, #0
 8007e04:	d1ed      	bne.n	8007de2 <__swbuf_r+0x2a>
 8007e06:	68a3      	ldr	r3, [r4, #8]
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	60a3      	str	r3, [r4, #8]
 8007e0c:	6823      	ldr	r3, [r4, #0]
 8007e0e:	1c5a      	adds	r2, r3, #1
 8007e10:	6022      	str	r2, [r4, #0]
 8007e12:	701e      	strb	r6, [r3, #0]
 8007e14:	6962      	ldr	r2, [r4, #20]
 8007e16:	1c43      	adds	r3, r0, #1
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d004      	beq.n	8007e26 <__swbuf_r+0x6e>
 8007e1c:	89a3      	ldrh	r3, [r4, #12]
 8007e1e:	07db      	lsls	r3, r3, #31
 8007e20:	d5e1      	bpl.n	8007de6 <__swbuf_r+0x2e>
 8007e22:	2e0a      	cmp	r6, #10
 8007e24:	d1df      	bne.n	8007de6 <__swbuf_r+0x2e>
 8007e26:	4621      	mov	r1, r4
 8007e28:	4628      	mov	r0, r5
 8007e2a:	f7ff fddd 	bl	80079e8 <_fflush_r>
 8007e2e:	2800      	cmp	r0, #0
 8007e30:	d0d9      	beq.n	8007de6 <__swbuf_r+0x2e>
 8007e32:	e7d6      	b.n	8007de2 <__swbuf_r+0x2a>

08007e34 <__swsetup_r>:
 8007e34:	b538      	push	{r3, r4, r5, lr}
 8007e36:	4b29      	ldr	r3, [pc, #164]	@ (8007edc <__swsetup_r+0xa8>)
 8007e38:	4605      	mov	r5, r0
 8007e3a:	6818      	ldr	r0, [r3, #0]
 8007e3c:	460c      	mov	r4, r1
 8007e3e:	b118      	cbz	r0, 8007e48 <__swsetup_r+0x14>
 8007e40:	6a03      	ldr	r3, [r0, #32]
 8007e42:	b90b      	cbnz	r3, 8007e48 <__swsetup_r+0x14>
 8007e44:	f7ff f804 	bl	8006e50 <__sinit>
 8007e48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e4c:	0719      	lsls	r1, r3, #28
 8007e4e:	d422      	bmi.n	8007e96 <__swsetup_r+0x62>
 8007e50:	06da      	lsls	r2, r3, #27
 8007e52:	d407      	bmi.n	8007e64 <__swsetup_r+0x30>
 8007e54:	2209      	movs	r2, #9
 8007e56:	602a      	str	r2, [r5, #0]
 8007e58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e5c:	81a3      	strh	r3, [r4, #12]
 8007e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e62:	e033      	b.n	8007ecc <__swsetup_r+0x98>
 8007e64:	0758      	lsls	r0, r3, #29
 8007e66:	d512      	bpl.n	8007e8e <__swsetup_r+0x5a>
 8007e68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e6a:	b141      	cbz	r1, 8007e7e <__swsetup_r+0x4a>
 8007e6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e70:	4299      	cmp	r1, r3
 8007e72:	d002      	beq.n	8007e7a <__swsetup_r+0x46>
 8007e74:	4628      	mov	r0, r5
 8007e76:	f7ff f94f 	bl	8007118 <_free_r>
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e7e:	89a3      	ldrh	r3, [r4, #12]
 8007e80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007e84:	81a3      	strh	r3, [r4, #12]
 8007e86:	2300      	movs	r3, #0
 8007e88:	6063      	str	r3, [r4, #4]
 8007e8a:	6923      	ldr	r3, [r4, #16]
 8007e8c:	6023      	str	r3, [r4, #0]
 8007e8e:	89a3      	ldrh	r3, [r4, #12]
 8007e90:	f043 0308 	orr.w	r3, r3, #8
 8007e94:	81a3      	strh	r3, [r4, #12]
 8007e96:	6923      	ldr	r3, [r4, #16]
 8007e98:	b94b      	cbnz	r3, 8007eae <__swsetup_r+0x7a>
 8007e9a:	89a3      	ldrh	r3, [r4, #12]
 8007e9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007ea0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ea4:	d003      	beq.n	8007eae <__swsetup_r+0x7a>
 8007ea6:	4621      	mov	r1, r4
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	f000 f88b 	bl	8007fc4 <__smakebuf_r>
 8007eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eb2:	f013 0201 	ands.w	r2, r3, #1
 8007eb6:	d00a      	beq.n	8007ece <__swsetup_r+0x9a>
 8007eb8:	2200      	movs	r2, #0
 8007eba:	60a2      	str	r2, [r4, #8]
 8007ebc:	6962      	ldr	r2, [r4, #20]
 8007ebe:	4252      	negs	r2, r2
 8007ec0:	61a2      	str	r2, [r4, #24]
 8007ec2:	6922      	ldr	r2, [r4, #16]
 8007ec4:	b942      	cbnz	r2, 8007ed8 <__swsetup_r+0xa4>
 8007ec6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007eca:	d1c5      	bne.n	8007e58 <__swsetup_r+0x24>
 8007ecc:	bd38      	pop	{r3, r4, r5, pc}
 8007ece:	0799      	lsls	r1, r3, #30
 8007ed0:	bf58      	it	pl
 8007ed2:	6962      	ldrpl	r2, [r4, #20]
 8007ed4:	60a2      	str	r2, [r4, #8]
 8007ed6:	e7f4      	b.n	8007ec2 <__swsetup_r+0x8e>
 8007ed8:	2000      	movs	r0, #0
 8007eda:	e7f7      	b.n	8007ecc <__swsetup_r+0x98>
 8007edc:	20000034 	.word	0x20000034

08007ee0 <_raise_r>:
 8007ee0:	291f      	cmp	r1, #31
 8007ee2:	b538      	push	{r3, r4, r5, lr}
 8007ee4:	4605      	mov	r5, r0
 8007ee6:	460c      	mov	r4, r1
 8007ee8:	d904      	bls.n	8007ef4 <_raise_r+0x14>
 8007eea:	2316      	movs	r3, #22
 8007eec:	6003      	str	r3, [r0, #0]
 8007eee:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef2:	bd38      	pop	{r3, r4, r5, pc}
 8007ef4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007ef6:	b112      	cbz	r2, 8007efe <_raise_r+0x1e>
 8007ef8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007efc:	b94b      	cbnz	r3, 8007f12 <_raise_r+0x32>
 8007efe:	4628      	mov	r0, r5
 8007f00:	f000 f830 	bl	8007f64 <_getpid_r>
 8007f04:	4622      	mov	r2, r4
 8007f06:	4601      	mov	r1, r0
 8007f08:	4628      	mov	r0, r5
 8007f0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f0e:	f000 b817 	b.w	8007f40 <_kill_r>
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d00a      	beq.n	8007f2c <_raise_r+0x4c>
 8007f16:	1c59      	adds	r1, r3, #1
 8007f18:	d103      	bne.n	8007f22 <_raise_r+0x42>
 8007f1a:	2316      	movs	r3, #22
 8007f1c:	6003      	str	r3, [r0, #0]
 8007f1e:	2001      	movs	r0, #1
 8007f20:	e7e7      	b.n	8007ef2 <_raise_r+0x12>
 8007f22:	2100      	movs	r1, #0
 8007f24:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007f28:	4620      	mov	r0, r4
 8007f2a:	4798      	blx	r3
 8007f2c:	2000      	movs	r0, #0
 8007f2e:	e7e0      	b.n	8007ef2 <_raise_r+0x12>

08007f30 <raise>:
 8007f30:	4b02      	ldr	r3, [pc, #8]	@ (8007f3c <raise+0xc>)
 8007f32:	4601      	mov	r1, r0
 8007f34:	6818      	ldr	r0, [r3, #0]
 8007f36:	f7ff bfd3 	b.w	8007ee0 <_raise_r>
 8007f3a:	bf00      	nop
 8007f3c:	20000034 	.word	0x20000034

08007f40 <_kill_r>:
 8007f40:	b538      	push	{r3, r4, r5, lr}
 8007f42:	4d07      	ldr	r5, [pc, #28]	@ (8007f60 <_kill_r+0x20>)
 8007f44:	2300      	movs	r3, #0
 8007f46:	4604      	mov	r4, r0
 8007f48:	4608      	mov	r0, r1
 8007f4a:	4611      	mov	r1, r2
 8007f4c:	602b      	str	r3, [r5, #0]
 8007f4e:	f7fc fb21 	bl	8004594 <_kill>
 8007f52:	1c43      	adds	r3, r0, #1
 8007f54:	d102      	bne.n	8007f5c <_kill_r+0x1c>
 8007f56:	682b      	ldr	r3, [r5, #0]
 8007f58:	b103      	cbz	r3, 8007f5c <_kill_r+0x1c>
 8007f5a:	6023      	str	r3, [r4, #0]
 8007f5c:	bd38      	pop	{r3, r4, r5, pc}
 8007f5e:	bf00      	nop
 8007f60:	2000063c 	.word	0x2000063c

08007f64 <_getpid_r>:
 8007f64:	f7fc bb0e 	b.w	8004584 <_getpid>

08007f68 <_malloc_usable_size_r>:
 8007f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f6c:	1f18      	subs	r0, r3, #4
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	bfbc      	itt	lt
 8007f72:	580b      	ldrlt	r3, [r1, r0]
 8007f74:	18c0      	addlt	r0, r0, r3
 8007f76:	4770      	bx	lr

08007f78 <__swhatbuf_r>:
 8007f78:	b570      	push	{r4, r5, r6, lr}
 8007f7a:	460c      	mov	r4, r1
 8007f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f80:	2900      	cmp	r1, #0
 8007f82:	b096      	sub	sp, #88	@ 0x58
 8007f84:	4615      	mov	r5, r2
 8007f86:	461e      	mov	r6, r3
 8007f88:	da0d      	bge.n	8007fa6 <__swhatbuf_r+0x2e>
 8007f8a:	89a3      	ldrh	r3, [r4, #12]
 8007f8c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007f90:	f04f 0100 	mov.w	r1, #0
 8007f94:	bf14      	ite	ne
 8007f96:	2340      	movne	r3, #64	@ 0x40
 8007f98:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007f9c:	2000      	movs	r0, #0
 8007f9e:	6031      	str	r1, [r6, #0]
 8007fa0:	602b      	str	r3, [r5, #0]
 8007fa2:	b016      	add	sp, #88	@ 0x58
 8007fa4:	bd70      	pop	{r4, r5, r6, pc}
 8007fa6:	466a      	mov	r2, sp
 8007fa8:	f000 f848 	bl	800803c <_fstat_r>
 8007fac:	2800      	cmp	r0, #0
 8007fae:	dbec      	blt.n	8007f8a <__swhatbuf_r+0x12>
 8007fb0:	9901      	ldr	r1, [sp, #4]
 8007fb2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007fb6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007fba:	4259      	negs	r1, r3
 8007fbc:	4159      	adcs	r1, r3
 8007fbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007fc2:	e7eb      	b.n	8007f9c <__swhatbuf_r+0x24>

08007fc4 <__smakebuf_r>:
 8007fc4:	898b      	ldrh	r3, [r1, #12]
 8007fc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fc8:	079d      	lsls	r5, r3, #30
 8007fca:	4606      	mov	r6, r0
 8007fcc:	460c      	mov	r4, r1
 8007fce:	d507      	bpl.n	8007fe0 <__smakebuf_r+0x1c>
 8007fd0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007fd4:	6023      	str	r3, [r4, #0]
 8007fd6:	6123      	str	r3, [r4, #16]
 8007fd8:	2301      	movs	r3, #1
 8007fda:	6163      	str	r3, [r4, #20]
 8007fdc:	b003      	add	sp, #12
 8007fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fe0:	ab01      	add	r3, sp, #4
 8007fe2:	466a      	mov	r2, sp
 8007fe4:	f7ff ffc8 	bl	8007f78 <__swhatbuf_r>
 8007fe8:	9f00      	ldr	r7, [sp, #0]
 8007fea:	4605      	mov	r5, r0
 8007fec:	4639      	mov	r1, r7
 8007fee:	4630      	mov	r0, r6
 8007ff0:	f7ff f906 	bl	8007200 <_malloc_r>
 8007ff4:	b948      	cbnz	r0, 800800a <__smakebuf_r+0x46>
 8007ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ffa:	059a      	lsls	r2, r3, #22
 8007ffc:	d4ee      	bmi.n	8007fdc <__smakebuf_r+0x18>
 8007ffe:	f023 0303 	bic.w	r3, r3, #3
 8008002:	f043 0302 	orr.w	r3, r3, #2
 8008006:	81a3      	strh	r3, [r4, #12]
 8008008:	e7e2      	b.n	8007fd0 <__smakebuf_r+0xc>
 800800a:	89a3      	ldrh	r3, [r4, #12]
 800800c:	6020      	str	r0, [r4, #0]
 800800e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008012:	81a3      	strh	r3, [r4, #12]
 8008014:	9b01      	ldr	r3, [sp, #4]
 8008016:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800801a:	b15b      	cbz	r3, 8008034 <__smakebuf_r+0x70>
 800801c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008020:	4630      	mov	r0, r6
 8008022:	f000 f81d 	bl	8008060 <_isatty_r>
 8008026:	b128      	cbz	r0, 8008034 <__smakebuf_r+0x70>
 8008028:	89a3      	ldrh	r3, [r4, #12]
 800802a:	f023 0303 	bic.w	r3, r3, #3
 800802e:	f043 0301 	orr.w	r3, r3, #1
 8008032:	81a3      	strh	r3, [r4, #12]
 8008034:	89a3      	ldrh	r3, [r4, #12]
 8008036:	431d      	orrs	r5, r3
 8008038:	81a5      	strh	r5, [r4, #12]
 800803a:	e7cf      	b.n	8007fdc <__smakebuf_r+0x18>

0800803c <_fstat_r>:
 800803c:	b538      	push	{r3, r4, r5, lr}
 800803e:	4d07      	ldr	r5, [pc, #28]	@ (800805c <_fstat_r+0x20>)
 8008040:	2300      	movs	r3, #0
 8008042:	4604      	mov	r4, r0
 8008044:	4608      	mov	r0, r1
 8008046:	4611      	mov	r1, r2
 8008048:	602b      	str	r3, [r5, #0]
 800804a:	f7fc fb03 	bl	8004654 <_fstat>
 800804e:	1c43      	adds	r3, r0, #1
 8008050:	d102      	bne.n	8008058 <_fstat_r+0x1c>
 8008052:	682b      	ldr	r3, [r5, #0]
 8008054:	b103      	cbz	r3, 8008058 <_fstat_r+0x1c>
 8008056:	6023      	str	r3, [r4, #0]
 8008058:	bd38      	pop	{r3, r4, r5, pc}
 800805a:	bf00      	nop
 800805c:	2000063c 	.word	0x2000063c

08008060 <_isatty_r>:
 8008060:	b538      	push	{r3, r4, r5, lr}
 8008062:	4d06      	ldr	r5, [pc, #24]	@ (800807c <_isatty_r+0x1c>)
 8008064:	2300      	movs	r3, #0
 8008066:	4604      	mov	r4, r0
 8008068:	4608      	mov	r0, r1
 800806a:	602b      	str	r3, [r5, #0]
 800806c:	f7fc fb02 	bl	8004674 <_isatty>
 8008070:	1c43      	adds	r3, r0, #1
 8008072:	d102      	bne.n	800807a <_isatty_r+0x1a>
 8008074:	682b      	ldr	r3, [r5, #0]
 8008076:	b103      	cbz	r3, 800807a <_isatty_r+0x1a>
 8008078:	6023      	str	r3, [r4, #0]
 800807a:	bd38      	pop	{r3, r4, r5, pc}
 800807c:	2000063c 	.word	0x2000063c

08008080 <_gettimeofday>:
 8008080:	4b02      	ldr	r3, [pc, #8]	@ (800808c <_gettimeofday+0xc>)
 8008082:	2258      	movs	r2, #88	@ 0x58
 8008084:	601a      	str	r2, [r3, #0]
 8008086:	f04f 30ff 	mov.w	r0, #4294967295
 800808a:	4770      	bx	lr
 800808c:	2000063c 	.word	0x2000063c

08008090 <_init>:
 8008090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008092:	bf00      	nop
 8008094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008096:	bc08      	pop	{r3}
 8008098:	469e      	mov	lr, r3
 800809a:	4770      	bx	lr

0800809c <_fini>:
 800809c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800809e:	bf00      	nop
 80080a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080a2:	bc08      	pop	{r3}
 80080a4:	469e      	mov	lr, r3
 80080a6:	4770      	bx	lr
